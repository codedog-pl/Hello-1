
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a014  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033b0  0801a2b4  0801a2b4  0002a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003d2  0801d664  0801d664  0002d664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0801da38  0801da38  0002da38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000020  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0801da50  0801da50  00040020  2**0
                  CONTENTS
  7 .ARM          00000000  0801da50  0801da50  00040020  2**0
                  CONTENTS
  8 .preinit_array 00000000  0801da50  0801da50  00040020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  0801da50  0801da50  0002da50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0801da68  0801da68  0002da68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000011c  24000000  0801da70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000b05c  2400011c  0801db8c  0003011c  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  2400b178  0801db8c  0003b178  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY
 15 .debug_info   000ae760  00000000  00000000  0004004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00014262  00000000  00000000  000ee7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002fe0  00000000  00000000  00102a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00004cc0  00000000  00000000  001059f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00012e12  00000000  00000000  0010a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00055b4f  00000000  00000000  0011d4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001d2c9d  00000000  00000000  00173011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  00345cae  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00008f98  00000000  00000000  00345d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    0002c1a1  00000000  00000000  0034ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400011c 	.word	0x2400011c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a29c 	.word	0x0801a29c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000120 	.word	0x24000120
 80002dc:	0801a29c 	.word	0x0801a29c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000380:	4901      	ldr	r1, [pc, #4]	; (8000388 <vApplicationIdleHook+0x8>)
 8000382:	2000      	movs	r0, #0
 8000384:	f009 bcd0 	b.w	8009d28 <vTaskSetApplicationTaskTag>
 8000388:	0800190d 	.word	0x0800190d

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000390:	224c      	movs	r2, #76	; 0x4c
 8000392:	2100      	movs	r1, #0
 8000394:	a809      	add	r0, sp, #36	; 0x24
 8000396:	f018 ff5d 	bl	8019254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	2220      	movs	r2, #32
 800039c:	2100      	movs	r1, #0
 800039e:	a801      	add	r0, sp, #4
 80003a0:	f018 ff58 	bl	8019254 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003a4:	2004      	movs	r0, #4
 80003a6:	f005 ff95 	bl	80062d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003aa:	2300      	movs	r3, #0
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <SystemClock_Config+0xcc>)
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003b6:	619a      	str	r2, [r3, #24]
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80003be:	9200      	str	r2, [sp, #0]
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <SystemClock_Config+0xd0>)
 80003c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80003c4:	f041 0101 	orr.w	r1, r1, #1
 80003c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80003ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80003cc:	f002 0201 	and.w	r2, r2, #1
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d4:	699a      	ldr	r2, [r3, #24]
 80003d6:	0491      	lsls	r1, r2, #18
 80003d8:	d5fc      	bpl.n	80003d4 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003da:	4a21      	ldr	r2, [pc, #132]	; (8000460 <SystemClock_Config+0xd4>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003dc:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003e4:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003e8:	f023 0303 	bic.w	r3, r3, #3
 80003ec:	f043 0302 	orr.w	r3, r3, #2
 80003f0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 80003f6:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003f8:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fa:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fe:	2301      	movs	r3, #1
 8000400:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800040a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000410:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000414:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000418:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f006 fa49 	bl	80068b0 <HAL_RCC_OscConfig>
 800041e:	b108      	cbz	r0, 8000424 <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000422:	e7fe      	b.n	8000422 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800042c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000430:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000434:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000436:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800043a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	f006 fdb7 	bl	8006fb0 <HAL_RCC_ClockConfig>
 8000442:	4601      	mov	r1, r0
 8000444:	b108      	cbz	r0, 800044a <SystemClock_Config+0xbe>
 8000446:	b672      	cpsid	i
  while (1)
 8000448:	e7fe      	b.n	8000448 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800044a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800044e:	f006 fcc1 	bl	8006dd4 <HAL_RCC_MCOConfig>
}
 8000452:	b01d      	add	sp, #116	; 0x74
 8000454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000456:	bf00      	nop
 8000458:	58024800 	.word	0x58024800
 800045c:	58000400 	.word	0x58000400
 8000460:	58024400 	.word	0x58024400

08000464 <main>:
{
 8000464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000468:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800046a:	2210      	movs	r2, #16
 800046c:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800046e:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000470:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000472:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000474:	f018 feee 	bl	8019254 <memset>
  HAL_MPU_Disable();
 8000478:	f004 f9bc 	bl	80047f4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800047c:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 8000480:	4bb7      	ldr	r3, [pc, #732]	; (8000760 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000482:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000484:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000488:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800048a:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800048e:	f004 f9cf 	bl	8004830 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000492:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000494:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000496:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800049a:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800049e:	f004 f9c7 	bl	8004830 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004a2:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004a4:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80004a6:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004aa:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80004ae:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80004b2:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80004b4:	2318      	movs	r3, #24
 80004b6:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ba:	f004 f9b9 	bl	8004830 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80004be:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004c0:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80004c2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 80004c6:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80004ca:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004cc:	2312      	movs	r3, #18
 80004ce:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004d8:	f004 f9aa 	bl	8004830 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 80004dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004e0:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80004e2:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 80004e6:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80004e8:	2311      	movs	r3, #17
 80004ea:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ee:	f004 f99f 	bl	8004830 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80004f2:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004f4:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004f6:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80004fa:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 80004fe:	4b99      	ldr	r3, [pc, #612]	; (8000764 <main+0x300>)
 8000500:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000502:	230e      	movs	r3, #14
 8000504:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000508:	f004 f992 	bl	8004830 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800050c:	4628      	mov	r0, r5
 800050e:	f004 f97f 	bl	8004810 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000512:	4b95      	ldr	r3, [pc, #596]	; (8000768 <main+0x304>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800051a:	d111      	bne.n	8000540 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800051c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000520:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000524:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800052c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000536:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800053c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000540:	4a89      	ldr	r2, [pc, #548]	; (8000768 <main+0x304>)
 8000542:	6953      	ldr	r3, [r2, #20]
 8000544:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000548:	d123      	bne.n	8000592 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800054a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800054e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000552:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000556:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800055a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800055e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000562:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000564:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000568:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800056a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800056e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000570:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000574:	d2f9      	bcs.n	800056a <main+0x106>
    } while(sets-- != 0U);
 8000576:	3b20      	subs	r3, #32
 8000578:	f113 0f20 	cmn.w	r3, #32
 800057c:	d1f2      	bne.n	8000564 <main+0x100>
 800057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000582:	6953      	ldr	r3, [r2, #20]
 8000584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800058e:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	4d75      	ldr	r5, [pc, #468]	; (800076c <main+0x308>)
 8000598:	682c      	ldr	r4, [r5, #0]
 800059a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 800059e:	f000 82a9 	beq.w	8000af4 <main+0x690>
 80005a2:	3b01      	subs	r3, #1
 80005a4:	d1f8      	bne.n	8000598 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 80005a6:	b672      	cpsid	i
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x144>
 80005aa:	b672      	cpsid	i
 80005ac:	e7fe      	b.n	80005ac <main+0x148>
  BSP_SDRAM_DeInit(0);
 80005ae:	f003 fdb1 	bl	8004114 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80005b2:	4640      	mov	r0, r8
 80005b4:	f003 fdfc 	bl	80041b0 <BSP_SDRAM_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b108      	cbz	r0, 80005c0 <main+0x15c>
 80005bc:	b672      	cpsid	i
  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x15a>
  hqspi.Instance = QUADSPI;
 80005c0:	486b      	ldr	r0, [pc, #428]	; (8000770 <main+0x30c>)
 80005c2:	4a6c      	ldr	r2, [pc, #432]	; (8000774 <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80005c4:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80005c6:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 80005c8:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80005cc:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80005d0:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80005d4:	f005 ff92 	bl	80064fc <HAL_QSPI_Init>
 80005d8:	b108      	cbz	r0, 80005de <main+0x17a>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80005de:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80005e0:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 80005e4:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 80005e8:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80005ec:	f003 fbd8 	bl	8003da0 <BSP_QSPI_Init>
 80005f0:	b108      	cbz	r0, 80005f6 <main+0x192>
 80005f2:	b672      	cpsid	i
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80005f6:	f003 fb7f 	bl	8003cf8 <BSP_QSPI_EnableMemoryMappedMode>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b108      	cbz	r0, 8000602 <main+0x19e>
 80005fe:	b672      	cpsid	i
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x19c>
  hdma2d.Instance = DMA2D;
 8000602:	485d      	ldr	r0, [pc, #372]	; (8000778 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000608:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000784 <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 800060c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000610:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000614:	f004 f996 	bl	8004944 <HAL_DMA2D_Init>
 8000618:	4605      	mov	r5, r0
 800061a:	b108      	cbz	r0, 8000620 <main+0x1bc>
 800061c:	b672      	cpsid	i
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000620:	4602      	mov	r2, r0
 8000622:	4631      	mov	r1, r6
 8000624:	4855      	ldr	r0, [pc, #340]	; (800077c <main+0x318>)
 8000626:	f005 f82f 	bl	8005688 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800062a:	2014      	movs	r0, #20
 800062c:	f004 f864 	bl	80046f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000630:	4631      	mov	r1, r6
 8000632:	4622      	mov	r2, r4
 8000634:	4851      	ldr	r0, [pc, #324]	; (800077c <main+0x318>)
 8000636:	f005 f827 	bl	8005688 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800063a:	200a      	movs	r0, #10
 800063c:	f004 f85c 	bl	80046f8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000640:	2224      	movs	r2, #36	; 0x24
 8000642:	4629      	mov	r1, r5
 8000644:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 8000646:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000648:	f018 fe04 	bl	8019254 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800064c:	2218      	movs	r2, #24
 800064e:	4629      	mov	r1, r5
 8000650:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 8000652:	4e4b      	ldr	r6, [pc, #300]	; (8000780 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000654:	f018 fdfe 	bl	8019254 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000658:	2234      	movs	r2, #52	; 0x34
 800065a:	4629      	mov	r1, r5
 800065c:	a82d      	add	r0, sp, #180	; 0xb4
 800065e:	f018 fdf9 	bl	8019254 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000662:	4629      	mov	r1, r5
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	a820      	add	r0, sp, #128	; 0x80
 8000668:	f018 fdf4 	bl	8019254 <memset>
  hdsi.Instance = DSI;
 800066c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000670:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000674:	a90e      	add	r1, sp, #56	; 0x38
 8000676:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000678:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 800067c:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800067e:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000682:	2305      	movs	r3, #5
 8000684:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000688:	f004 faa8 	bl	8004bdc <HAL_DSI_Init>
 800068c:	b108      	cbz	r0, 8000692 <main+0x22e>
 800068e:	b672      	cpsid	i
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000692:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000696:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800069a:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800069e:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 80006a2:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006a4:	a917      	add	r1, sp, #92	; 0x5c
 80006a6:	4630      	mov	r0, r6
 80006a8:	f004 fcc2 	bl	8005030 <HAL_DSI_ConfigHostTimeouts>
 80006ac:	b108      	cbz	r0, 80006b2 <main+0x24e>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006b2:	2321      	movs	r3, #33	; 0x21
 80006b4:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 80006b6:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006b8:	a911      	add	r1, sp, #68	; 0x44
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006bc:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 80006c0:	2319      	movs	r3, #25
 80006c2:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 80006c6:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 80006c8:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006cc:	f004 fc73 	bl	8004fb6 <HAL_DSI_ConfigPhyTimer>
 80006d0:	b108      	cbz	r0, 80006d6 <main+0x272>
 80006d2:	b672      	cpsid	i
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80006d6:	2104      	movs	r1, #4
 80006d8:	4829      	ldr	r0, [pc, #164]	; (8000780 <main+0x31c>)
 80006da:	f004 fc5b 	bl	8004f94 <HAL_DSI_ConfigFlowControl>
 80006de:	b108      	cbz	r0, 80006e4 <main+0x280>
 80006e0:	b672      	cpsid	i
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80006e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80006e8:	4825      	ldr	r0, [pc, #148]	; (8000780 <main+0x31c>)
 80006ea:	f004 fe29 	bl	8005340 <HAL_DSI_SetLowPowerRXFilter>
 80006ee:	4601      	mov	r1, r0
 80006f0:	b108      	cbz	r0, 80006f6 <main+0x292>
 80006f2:	b672      	cpsid	i
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80006f6:	4822      	ldr	r0, [pc, #136]	; (8000780 <main+0x31c>)
 80006f8:	f004 fa0d 	bl	8004b16 <HAL_DSI_ConfigErrorMonitor>
 80006fc:	b108      	cbz	r0, 8000702 <main+0x29e>
 80006fe:	b672      	cpsid	i
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000702:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800070a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000712:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000716:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800071a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800071e:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000722:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000726:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800072a:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000732:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000736:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800073e:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000740:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800074a:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800074e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000752:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000756:	f004 fbe9 	bl	8004f2c <HAL_DSI_ConfigCommand>
 800075a:	b1a8      	cbz	r0, 8000788 <main+0x324>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x2fa>
 8000760:	0300001b 	.word	0x0300001b
 8000764:	10040000 	.word	0x10040000
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	58024400 	.word	0x58024400
 8000770:	240002bc 	.word	0x240002bc
 8000774:	52005000 	.word	0x52005000
 8000778:	24000190 	.word	0x24000190
 800077c:	58021800 	.word	0x58021800
 8000780:	240001f8 	.word	0x240001f8
 8000784:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000788:	2305      	movs	r3, #5
 800078a:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800078e:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000790:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000792:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000794:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000796:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800079a:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800079c:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 80007a0:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80007a2:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007a6:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80007aa:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007ae:	48be      	ldr	r0, [pc, #760]	; (8000aa8 <main+0x644>)
 80007b0:	f004 fb4a 	bl	8004e48 <HAL_DSI_ConfigAdaptedCommandMode>
 80007b4:	4601      	mov	r1, r0
 80007b6:	b108      	cbz	r0, 80007bc <main+0x358>
 80007b8:	b672      	cpsid	i
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80007bc:	48ba      	ldr	r0, [pc, #744]	; (8000aa8 <main+0x644>)
 80007be:	f004 fb32 	bl	8004e26 <HAL_DSI_SetGenericVCID>
 80007c2:	4604      	mov	r4, r0
 80007c4:	b108      	cbz	r0, 80007ca <main+0x366>
 80007c6:	b672      	cpsid	i
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ca:	4601      	mov	r1, r0
 80007cc:	2234      	movs	r2, #52	; 0x34
 80007ce:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 80007d0:	4db6      	ldr	r5, [pc, #728]	; (8000aac <main+0x648>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007d2:	f018 fd3f 	bl	8019254 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80007d6:	48b6      	ldr	r0, [pc, #728]	; (8000ab0 <main+0x64c>)
 80007d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 80007dc:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 80007e0:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 80007e4:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 80007e6:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 80007ea:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80007ee:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80007f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f6:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007f8:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 80007fc:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000800:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000804:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000808:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 800080c:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000810:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000814:	f005 fb9a 	bl	8005f4c <HAL_LTDC_Init>
 8000818:	b108      	cbz	r0, 800081e <main+0x3ba>
 800081a:	b672      	cpsid	i
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x3b8>
  pLayerCfg.Alpha = 255;
 800081e:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000820:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000824:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000828:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 800082a:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 800082e:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000832:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000834:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000838:	2207      	movs	r2, #7
 800083a:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 800083e:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000842:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000844:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000848:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084c:	4602      	mov	r2, r0
 800084e:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000850:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000854:	f005 fc46 	bl	80060e4 <HAL_LTDC_ConfigLayer>
 8000858:	4604      	mov	r4, r0
 800085a:	b108      	cbz	r0, 8000860 <main+0x3fc>
 800085c:	b672      	cpsid	i
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000860:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000862:	4891      	ldr	r0, [pc, #580]	; (8000aa8 <main+0x644>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000864:	6993      	ldr	r3, [r2, #24]
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 800086c:	f004 fc46 	bl	80050fc <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000870:	4990      	ldr	r1, [pc, #576]	; (8000ab4 <main+0x650>)
  IOCtx.GetTick     = BSP_GetTick;
 8000872:	4b91      	ldr	r3, [pc, #580]	; (8000ab8 <main+0x654>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000874:	4891      	ldr	r0, [pc, #580]	; (8000abc <main+0x658>)
  IOCtx.GetTick     = BSP_GetTick;
 8000876:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000878:	4b91      	ldr	r3, [pc, #580]	; (8000ac0 <main+0x65c>)
  IOCtx.Address     = 0;
 800087a:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 800087c:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 800087e:	4b91      	ldr	r3, [pc, #580]	; (8000ac4 <main+0x660>)
 8000880:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000882:	f003 f82d 	bl	80038e0 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000886:	4632      	mov	r2, r6
 8000888:	4621      	mov	r1, r4
 800088a:	488c      	ldr	r0, [pc, #560]	; (8000abc <main+0x658>)
 800088c:	f002 fc84 	bl	8003198 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000890:	2328      	movs	r3, #40	; 0x28
 8000892:	2215      	movs	r2, #21
 8000894:	4621      	mov	r1, r4
 8000896:	4884      	ldr	r0, [pc, #528]	; (8000aa8 <main+0x644>)
 8000898:	9400      	str	r4, [sp, #0]
 800089a:	f004 fc62 	bl	8005162 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800089e:	a92d      	add	r1, sp, #180	; 0xb4
 80008a0:	4881      	ldr	r0, [pc, #516]	; (8000aa8 <main+0x644>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80008a2:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80008a4:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80008a8:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80008ac:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80008b0:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80008b4:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80008b8:	f004 fb38 	bl	8004f2c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 80008bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008c0:	4622      	mov	r2, r4
 80008c2:	4628      	mov	r0, r5
 80008c4:	f005 fc3c 	bl	8006140 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 80008c8:	682a      	ldr	r2, [r5, #0]
 80008ca:	6993      	ldr	r3, [r2, #24]
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 80008d2:	f000 fc9a 	bl	800120a <MX_TouchGFX_Init>
  osKernelInitialize();
 80008d6:	f007 fda3 	bl	8008420 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80008da:	4a7b      	ldr	r2, [pc, #492]	; (8000ac8 <main+0x664>)
 80008dc:	4621      	mov	r1, r4
 80008de:	487b      	ldr	r0, [pc, #492]	; (8000acc <main+0x668>)
 80008e0:	f007 fdca 	bl	8008478 <osThreadNew>
 80008e4:	4b7a      	ldr	r3, [pc, #488]	; (8000ad0 <main+0x66c>)
 80008e6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80008e8:	f007 fdac 	bl	8008444 <osKernelStart>
  while (1)
 80008ec:	e7fe      	b.n	80008ec <main+0x488>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	2214      	movs	r2, #20
 80008f0:	2100      	movs	r1, #0
 80008f2:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f018 fcad 	bl	8019254 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000908:	4872      	ldr	r0, [pc, #456]	; (8000ad4 <main+0x670>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800090c:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800090e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000912:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800091a:	9304      	str	r3, [sp, #16]
 800091c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000926:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800092a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000932:	9305      	str	r3, [sp, #20]
 8000934:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000942:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	9306      	str	r3, [sp, #24]
 800094c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000956:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800095a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	9307      	str	r3, [sp, #28]
 8000964:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000972:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	9308      	str	r3, [sp, #32]
 800097c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800097e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000986:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800098a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800098e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000992:	9309      	str	r3, [sp, #36]	; 0x24
 8000994:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	930a      	str	r3, [sp, #40]	; 0x28
 80009ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80009c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009d2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	930c      	str	r3, [sp, #48]	; 0x30
 80009dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	930d      	str	r3, [sp, #52]	; 0x34
 80009f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80009f8:	f004 fe46 	bl	8005688 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2108      	movs	r1, #8
 8000a00:	4835      	ldr	r0, [pc, #212]	; (8000ad8 <main+0x674>)
 8000a02:	f004 fe41 	bl	8005688 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	a92d      	add	r1, sp, #180	; 0xb4
 8000a0c:	4831      	ldr	r0, [pc, #196]	; (8000ad4 <main+0x670>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f004 fca9 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	a92d      	add	r1, sp, #180	; 0xb4
 8000a22:	482e      	ldr	r0, [pc, #184]	; (8000adc <main+0x678>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a24:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	e9cd 232d 	strd	r2, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f004 fc9d 	bl	800536c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a32:	a92d      	add	r1, sp, #180	; 0xb4
 8000a34:	4828      	ldr	r0, [pc, #160]	; (8000ad8 <main+0x674>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f004 fc95 	bl	800536c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000a42:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <main+0x67c>)
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <main+0x680>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a46:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000a48:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a4a:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a4c:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a50:	f003 ff1a 	bl	8004888 <HAL_CRC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2800      	cmp	r0, #0
 8000a58:	f47f ada7 	bne.w	80005aa <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000a5c:	4922      	ldr	r1, [pc, #136]	; (8000ae8 <main+0x684>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a5e:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a60:	4822      	ldr	r0, [pc, #136]	; (8000aec <main+0x688>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000a62:	680a      	ldr	r2, [r1, #0]
 8000a64:	f022 0201 	bic.w	r2, r2, #1
 8000a68:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a6a:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a6c:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <main+0x68c>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a6e:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a70:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a74:	2220      	movs	r2, #32
 8000a76:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000a7a:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000a7c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a80:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a84:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000a88:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000a8a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000a8e:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000a92:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000a96:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a98:	f007 f9e6 	bl	8007e68 <HAL_SDRAM_Init>
 8000a9c:	4680      	mov	r8, r0
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	f43f ad85 	beq.w	80005ae <main+0x14a>
 8000aa4:	b672      	cpsid	i
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <main+0x642>
 8000aa8:	240001f8 	.word	0x240001f8
 8000aac:	24000214 	.word	0x24000214
 8000ab0:	50001000 	.word	0x50001000
 8000ab4:	24000138 	.word	0x24000138
 8000ab8:	08003cc9 	.word	0x08003cc9
 8000abc:	24000148 	.word	0x24000148
 8000ac0:	08001641 	.word	0x08001641
 8000ac4:	08001679 	.word	0x08001679
 8000ac8:	0801a304 	.word	0x0801a304
 8000acc:	0800120f 	.word	0x0800120f
 8000ad0:	24000168 	.word	0x24000168
 8000ad4:	58022400 	.word	0x58022400
 8000ad8:	58021800 	.word	0x58021800
 8000adc:	58020000 	.word	0x58020000
 8000ae0:	2400016c 	.word	0x2400016c
 8000ae4:	58024c00 	.word	0x58024c00
 8000ae8:	52004000 	.word	0x52004000
 8000aec:	24000308 	.word	0x24000308
 8000af0:	52004140 	.word	0x52004140
  HAL_Init();
 8000af4:	f003 fdc0 	bl	8004678 <HAL_Init>
  SystemClock_Config();
 8000af8:	f7ff fc48 	bl	800038c <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000afc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b00:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000b0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b12:	9303      	str	r3, [sp, #12]
 8000b14:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b16:	f004 fdbd 	bl	8005694 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f004 fdc7 	bl	80056b0 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b22:	4c05      	ldr	r4, [pc, #20]	; (8000b38 <main+0x6d4>)
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	6822      	ldr	r2, [r4, #0]
 8000b2a:	0412      	lsls	r2, r2, #16
 8000b2c:	f53f aedf 	bmi.w	80008ee <main+0x48a>
 8000b30:	3b01      	subs	r3, #1
 8000b32:	d1f9      	bne.n	8000b28 <main+0x6c4>
 8000b34:	b672      	cpsid	i
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <main+0x6d2>
 8000b38:	58024400 	.word	0x58024400

08000b3c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000b3c:	6802      	ldr	r2, [r0, #0]
 8000b3e:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d101      	bne.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000b44:	f003 bdc6 	b.w	80046d4 <HAL_IncTick>
}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40001000 	.word	0x40001000

08000b50 <Error_Handler>:
 8000b50:	b672      	cpsid	i
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <Error_Handler+0x2>

08000b54 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_MspInit+0x2c>)
{
 8000b56:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000b62:	f042 0202 	orr.w	r2, r2, #2
 8000b66:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6a:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b78:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	f003 bde7 	b.w	800474c <HAL_NVIC_SetPriority>
 8000b7e:	bf00      	nop
 8000b80:	58024400 	.word	0x58024400

08000b84 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000b84:	6802      	ldr	r2, [r0, #0]
{
 8000b86:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_CRC_MspInit+0x2c>)
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d10d      	bne.n	8000baa <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b8e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000b92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b96:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000b9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000baa:	b002      	add	sp, #8
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	58024c00 	.word	0x58024c00

08000bb4 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_DMA2D_MspInit+0x40>)
{
 8000bb6:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d117      	bne.n	8000bee <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bc4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000bc8:	f042 0210 	orr.w	r2, r2, #16
 8000bcc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000bd0:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000bde:	f003 fdb5 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000be2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000be4:	b003      	add	sp, #12
 8000be6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000bea:	f003 bde1 	b.w	80047b0 <HAL_NVIC_EnableIRQ>
}
 8000bee:	b003      	add	sp, #12
 8000bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf4:	52001000 	.word	0x52001000
 8000bf8:	58024400 	.word	0x58024400

08000bfc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	b0b8      	sub	sp, #224	; 0xe0
 8000c00:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	2214      	movs	r2, #20
 8000c04:	2100      	movs	r1, #0
 8000c06:	a803      	add	r0, sp, #12
 8000c08:	f018 fb24 	bl	8019254 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	22c0      	movs	r2, #192	; 0xc0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	a808      	add	r0, sp, #32
 8000c12:	f018 fb1f 	bl	8019254 <memset>
  if(hdsi->Instance==DSI)
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c1c:	d136      	bne.n	8000c8c <HAL_DSI_MspInit+0x90>
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000c1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000c24:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f006 fc49 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	b108      	cbz	r0, 8000c30 <HAL_DSI_MspInit+0x34>
    {
      Error_Handler();
 8000c2c:	f7ff ff90 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_DSI_MspInit+0x94>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c34:	a903      	add	r1, sp, #12
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_DSI_MspInit+0x98>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8000c38:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000c3c:	f042 0210 	orr.w	r2, r2, #16
 8000c40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000c44:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000c48:	f002 0210 	and.w	r2, r2, #16
 8000c4c:	9201      	str	r2, [sp, #4]
 8000c4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000c70:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000c76:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c78:	f004 fb78 	bl	800536c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000c7c:	207b      	movs	r0, #123	; 0x7b
 8000c7e:	4622      	mov	r2, r4
 8000c80:	2107      	movs	r1, #7
 8000c82:	f003 fd63 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000c86:	207b      	movs	r0, #123	; 0x7b
 8000c88:	f003 fd92 	bl	80047b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8000c8c:	b038      	add	sp, #224	; 0xe0
 8000c8e:	bd10      	pop	{r4, pc}
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58022400 	.word	0x58022400

08000c98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000c98:	b510      	push	{r4, lr}
 8000c9a:	b0b2      	sub	sp, #200	; 0xc8
 8000c9c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9e:	22c0      	movs	r2, #192	; 0xc0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	a802      	add	r0, sp, #8
 8000ca4:	f018 fad6 	bl	8019254 <memset>
  if(hltdc->Instance==LTDC)
 8000ca8:	6822      	ldr	r2, [r4, #0]
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_LTDC_MspInit+0x70>)
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d129      	bne.n	8000d04 <HAL_LTDC_MspInit+0x6c>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cb0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8000cb4:	2105      	movs	r1, #5
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000cb6:	2015      	movs	r0, #21
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cb8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8000cba:	23a1      	movs	r3, #161	; 0xa1
 8000cbc:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000cc0:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000cc2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000cc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cca:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	a802      	add	r0, sp, #8
 8000cd0:	f006 fbf4 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	b108      	cbz	r0, 8000cda <HAL_LTDC_MspInit+0x42>
    {
      Error_Handler();
 8000cd6:	f7ff ff3b 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_LTDC_MspInit+0x74>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8000cdc:	2058      	movs	r0, #88	; 0x58
 8000cde:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ce0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ce4:	f042 0208 	orr.w	r2, r2, #8
 8000ce8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8000cec:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8000cfa:	f003 fd27 	bl	800474c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000cfe:	2058      	movs	r0, #88	; 0x58
 8000d00:	f003 fd56 	bl	80047b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000d04:	b032      	add	sp, #200	; 0xc8
 8000d06:	bd10      	pop	{r4, pc}
 8000d08:	50001000 	.word	0x50001000
 8000d0c:	58024400 	.word	0x58024400

08000d10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	b0bd      	sub	sp, #244	; 0xf4
 8000d14:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	2214      	movs	r2, #20
 8000d18:	2100      	movs	r1, #0
 8000d1a:	a807      	add	r0, sp, #28
 8000d1c:	f018 fa9a 	bl	8019254 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	22c0      	movs	r2, #192	; 0xc0
 8000d22:	2100      	movs	r1, #0
 8000d24:	a80c      	add	r0, sp, #48	; 0x30
 8000d26:	f018 fa95 	bl	8019254 <memset>
  if(hqspi->Instance==QUADSPI)
 8000d2a:	6822      	ldr	r2, [r4, #0]
 8000d2c:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <HAL_QSPI_MspInit+0x168>)
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f040 809f 	bne.w	8000e72 <HAL_QSPI_MspInit+0x162>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d38:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d3a:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f006 fbbe 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	b108      	cbz	r0, 8000d46 <HAL_QSPI_MspInit+0x36>
    {
      Error_Handler();
 8000d42:	f7ff ff05 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d46:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <HAL_QSPI_MspInit+0x16c>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d4c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d4e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d52:	a907      	add	r1, sp, #28
 8000d54:	484a      	ldr	r0, [pc, #296]	; (8000e80 <HAL_QSPI_MspInit+0x170>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d56:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d5c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000d60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000d64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d68:	9201      	str	r2, [sp, #4]
 8000d6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d7c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000d80:	9202      	str	r2, [sp, #8]
 8000d82:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d88:	f042 0220 	orr.w	r2, r2, #32
 8000d8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d94:	f002 0220 	and.w	r2, r2, #32
 8000d98:	9203      	str	r2, [sp, #12]
 8000d9a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000da8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000db0:	9204      	str	r2, [sp, #16]
 8000db2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000db8:	f042 0202 	orr.w	r2, r2, #2
 8000dbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dc4:	f002 0202 	and.w	r2, r2, #2
 8000dc8:	9205      	str	r2, [sp, #20]
 8000dca:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dd0:	f042 0208 	orr.w	r2, r2, #8
 8000dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	9306      	str	r3, [sp, #24]
 8000de2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000de8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000df0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df2:	f004 fabb 	bl	800536c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df8:	a907      	add	r1, sp, #28
 8000dfa:	4821      	ldr	r0, [pc, #132]	; (8000e80 <HAL_QSPI_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000dfc:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e06:	f004 fab1 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0a:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0c:	a907      	add	r1, sp, #28
 8000e0e:	481d      	ldr	r0, [pc, #116]	; (8000e84 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e10:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1a:	f004 faa7 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e22:	a907      	add	r1, sp, #28
 8000e24:	4817      	ldr	r0, [pc, #92]	; (8000e84 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e26:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e30:	f004 fa9c 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e34:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e36:	a907      	add	r1, sp, #28
 8000e38:	4813      	ldr	r0, [pc, #76]	; (8000e88 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e3a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e44:	f004 fa92 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e48:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	a907      	add	r1, sp, #28
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e4e:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f004 fa88 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	a907      	add	r1, sp, #28
 8000e62:	480b      	ldr	r0, [pc, #44]	; (8000e90 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e64:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f004 fa7d 	bl	800536c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e72:	b03d      	add	sp, #244	; 0xf4
 8000e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	52005000 	.word	0x52005000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58021800 	.word	0x58021800
 8000e84:	58021400 	.word	0x58021400
 8000e88:	58021c00 	.word	0x58021c00
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58020c00 	.word	0x58020c00

08000e94 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	a801      	add	r0, sp, #4
 8000e9e:	f018 f9d9 	bl	8019254 <memset>
  if (FMC_Initialized) {
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_SDRAM_MspInit+0xf4>)
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	2900      	cmp	r1, #0
 8000ea8:	d16b      	bne.n	8000f82 <HAL_SDRAM_MspInit+0xee>
  FMC_Initialized = 1;
 8000eaa:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	a807      	add	r0, sp, #28
  FMC_Initialized = 1;
 8000eae:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb0:	22bc      	movs	r2, #188	; 0xbc
 8000eb2:	f018 f9cf 	bl	8019254 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ebc:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f006 fafd 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	b108      	cbz	r0, 8000ec8 <HAL_SDRAM_MspInit+0x34>
      Error_Handler();
 8000ec4:	f7ff fe44 	bl	8000b50 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <HAL_SDRAM_MspInit+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2600      	movs	r6, #0
 8000ece:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ed0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed6:	a901      	add	r1, sp, #4
 8000ed8:	482d      	ldr	r0, [pc, #180]	; (8000f90 <HAL_SDRAM_MspInit+0xfc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ede:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000ee2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000efc:	f004 fa36 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000f00:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f04:	a901      	add	r1, sp, #4
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <HAL_SDRAM_MspInit+0x100>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f12:	f004 fa2b 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8000f16:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f1a:	a901      	add	r1, sp, #4
 8000f1c:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f1e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f28:	f004 fa20 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000f2c:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f30:	a901      	add	r1, sp, #4
 8000f32:	481a      	ldr	r0, [pc, #104]	; (8000f9c <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3e:	f004 fa15 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000f42:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	a901      	add	r1, sp, #4
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	f004 fa0a 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f58:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f5c:	a901      	add	r1, sp, #4
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f60:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f6a:	f004 f9ff 	bl	800536c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000f6e:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	a901      	add	r1, sp, #4
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f74:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f004 f9f5 	bl	800536c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f82:	b037      	add	sp, #220	; 0xdc
 8000f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000340 	.word	0x24000340
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58022000 	.word	0x58022000
 8000f94:	58021000 	.word	0x58021000
 8000f98:	58021c00 	.word	0x58021c00
 8000f9c:	58021800 	.word	0x58021800
 8000fa0:	58020c00 	.word	0x58020c00
 8000fa4:	58021400 	.word	0x58021400
 8000fa8:	58020800 	.word	0x58020800

08000fac <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8000fac:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_SDRAM_MspDeInit+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	bb62      	cbnz	r2, 800100e <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8000fb4:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8000fb6:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8000fba:	4816      	ldr	r0, [pc, #88]	; (8001014 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8000fbc:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <HAL_SDRAM_MspDeInit+0x6c>)
 8000fc0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8000fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8000fcc:	f004 faba 	bl	8005544 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000fd0:	f64f 7183 	movw	r1, #65411	; 0xff83
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <HAL_SDRAM_MspDeInit+0x70>)
 8000fd6:	f004 fab5 	bl	8005544 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8000fda:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_SDRAM_MspDeInit+0x74>)
 8000fe0:	f004 fab0 	bl	8005544 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000fe4:	f248 1131 	movw	r1, #33073	; 0x8131
 8000fe8:	480e      	ldr	r0, [pc, #56]	; (8001024 <HAL_SDRAM_MspDeInit+0x78>)
 8000fea:	f004 faab 	bl	8005544 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000fee:	f24c 7103 	movw	r1, #50947	; 0xc703
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <HAL_SDRAM_MspDeInit+0x7c>)
 8000ff4:	f004 faa6 	bl	8005544 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000ff8:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <HAL_SDRAM_MspDeInit+0x80>)
 8000ffe:	f004 faa1 	bl	8005544 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 8001002:	210d      	movs	r1, #13
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 800100a:	f004 ba9b 	b.w	8005544 <HAL_GPIO_DeInit>
}
 800100e:	bd08      	pop	{r3, pc}
 8001010:	2400033c 	.word	0x2400033c
 8001014:	58022000 	.word	0x58022000
 8001018:	58024400 	.word	0x58024400
 800101c:	58021000 	.word	0x58021000
 8001020:	58021c00 	.word	0x58021c00
 8001024:	58021800 	.word	0x58021800
 8001028:	58020c00 	.word	0x58020c00
 800102c:	58021400 	.word	0x58021400
 8001030:	58020800 	.word	0x58020800

08001034 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	280f      	cmp	r0, #15
{
 8001036:	b510      	push	{r4, lr}
 8001038:	4604      	mov	r4, r0
 800103a:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	d902      	bls.n	8001044 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001040:	b00a      	add	sp, #40	; 0x28
 8001042:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001044:	4601      	mov	r1, r0
 8001046:	2200      	movs	r2, #0
 8001048:	2036      	movs	r0, #54	; 0x36
 800104a:	f003 fb7f 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800104e:	2036      	movs	r0, #54	; 0x36
 8001050:	f003 fbae 	bl	80047b0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001056:	4669      	mov	r1, sp
 8001058:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800105a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_InitTick+0x88>)
 800105e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001062:	f042 0210 	orr.w	r2, r2, #16
 8001066:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800106a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001076:	f006 f907 	bl	8007288 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800107a:	9b07      	ldr	r3, [sp, #28]
 800107c:	b9c3      	cbnz	r3, 80010b0 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800107e:	f006 f8df 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001082:	4c0f      	ldr	r4, [pc, #60]	; (80010c0 <HAL_InitTick+0x8c>)
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_InitTick+0x90>)
 8001086:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001088:	f240 33e7 	movw	r3, #999	; 0x3e7
 800108c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_InitTick+0x94>)
 8001090:	fbb0 f0f3 	udiv	r0, r0, r3
 8001094:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001096:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001098:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800109a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800109c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010a0:	f007 f8e2 	bl	8008268 <HAL_TIM_Base_Init>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d1ca      	bne.n	800103e <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80010a8:	4620      	mov	r0, r4
 80010aa:	f006 ff85 	bl	8007fb8 <HAL_TIM_Base_Start_IT>
 80010ae:	e7c7      	b.n	8001040 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010b0:	f006 f8c6 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 80010b4:	0040      	lsls	r0, r0, #1
 80010b6:	e7e4      	b.n	8001082 <HAL_InitTick+0x4e>
 80010b8:	24000054 	.word	0x24000054
 80010bc:	58024400 	.word	0x58024400
 80010c0:	24000344 	.word	0x24000344
 80010c4:	40001000 	.word	0x40001000
 80010c8:	000f4240 	.word	0x000f4240

080010cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler>

080010ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler>

080010d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler>

080010d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler>

080010d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler>

080010d6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	4770      	bx	lr

080010d8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010d8:	4801      	ldr	r0, [pc, #4]	; (80010e0 <TIM6_DAC_IRQHandler+0x8>)
 80010da:	f006 bfaf 	b.w	800803c <HAL_TIM_IRQHandler>
 80010de:	bf00      	nop
 80010e0:	24000344 	.word	0x24000344

080010e4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80010e4:	4801      	ldr	r0, [pc, #4]	; (80010ec <LTDC_IRQHandler+0x8>)
 80010e6:	f004 bfa0 	b.w	800602a <HAL_LTDC_IRQHandler>
 80010ea:	bf00      	nop
 80010ec:	24000214 	.word	0x24000214

080010f0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <DMA2D_IRQHandler+0x8>)
 80010f2:	f003 bc66 	b.w	80049c2 <HAL_DMA2D_IRQHandler>
 80010f6:	bf00      	nop
 80010f8:	24000190 	.word	0x24000190

080010fc <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <DSI_IRQHandler+0x8>)
 80010fe:	f003 be20 	b.w	8004d42 <HAL_DSI_IRQHandler>
 8001102:	bf00      	nop
 8001104:	240001f8 	.word	0x240001f8

08001108 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001108:	2001      	movs	r0, #1
 800110a:	4770      	bx	lr

0800110c <_kill>:

int _kill(int pid, int sig)
{
 800110c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800110e:	f018 f847 	bl	80191a0 <__errno>
 8001112:	2316      	movs	r3, #22
 8001114:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	bd08      	pop	{r3, pc}

0800111c <_exit>:

void _exit (int status)
{
 800111c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800111e:	f018 f83f 	bl	80191a0 <__errno>
 8001122:	2316      	movs	r3, #22
 8001124:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001126:	e7fe      	b.n	8001126 <_exit+0xa>

08001128 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	460d      	mov	r5, r1
 800112c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	460e      	mov	r6, r1
 8001130:	1b73      	subs	r3, r6, r5
 8001132:	429c      	cmp	r4, r3
 8001134:	dc01      	bgt.n	800113a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001136:	4620      	mov	r0, r4
 8001138:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800113a:	f3af 8000 	nop.w
 800113e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	e7f5      	b.n	8001130 <_read+0x8>

08001144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	460d      	mov	r5, r1
 8001148:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	460e      	mov	r6, r1
 800114c:	1b73      	subs	r3, r6, r5
 800114e:	429c      	cmp	r4, r3
 8001150:	dc01      	bgt.n	8001156 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001152:	4620      	mov	r0, r4
 8001154:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001156:	f816 0b01 	ldrb.w	r0, [r6], #1
 800115a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	e7f5      	b.n	800114c <_write+0x8>

08001160 <_close>:

int _close(int file)
{
	return -1;
}
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	4770      	bx	lr

08001166 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800116a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800116c:	604b      	str	r3, [r1, #4]
}
 800116e:	4770      	bx	lr

08001170 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001170:	2001      	movs	r0, #1
 8001172:	4770      	bx	lr

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001174:	2000      	movs	r0, #0
 8001176:	4770      	bx	lr

08001178 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <_sbrk+0x30>)
{
 800117a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800117c:	6811      	ldr	r1, [r2, #0]
{
 800117e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001180:	b909      	cbnz	r1, 8001186 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001182:	490a      	ldr	r1, [pc, #40]	; (80011ac <_sbrk+0x34>)
 8001184:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	6810      	ldr	r0, [r2, #0]
 8001188:	4909      	ldr	r1, [pc, #36]	; (80011b0 <_sbrk+0x38>)
 800118a:	4c0a      	ldr	r4, [pc, #40]	; (80011b4 <_sbrk+0x3c>)
 800118c:	4403      	add	r3, r0
 800118e:	1b09      	subs	r1, r1, r4
 8001190:	428b      	cmp	r3, r1
 8001192:	d906      	bls.n	80011a2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001194:	f018 f804 	bl	80191a0 <__errno>
 8001198:	230c      	movs	r3, #12
 800119a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800119c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011a0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80011a2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80011a4:	e7fc      	b.n	80011a0 <_sbrk+0x28>
 80011a6:	bf00      	nop
 80011a8:	24000390 	.word	0x24000390
 80011ac:	2400b178 	.word	0x2400b178
 80011b0:	24080000 	.word	0x24080000
 80011b4:	00001000 	.word	0x00001000

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f003 f9ec 	bl	8004598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f017 fff3 	bl	80191d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff f93b 	bl	8000464 <main>
  bx  lr
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011f8:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 80011fc:	0801da70 	.word	0x0801da70
  ldr r2, =_sbss
 8001200:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 8001204:	2400b178 	.word	0x2400b178

08001208 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC3_IRQHandler>

0800120a <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800120a:	f000 be11 	b.w	8001e30 <touchgfx_init>

0800120e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800120e:	f000 be7f 	b.w	8001f10 <touchgfx_taskEntry>

08001212 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001212:	6840      	ldr	r0, [r0, #4]
    }
 8001214:	4770      	bx	lr

08001216 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001216:	6041      	str	r1, [r0, #4]
    }
 8001218:	4770      	bx	lr

0800121a <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800121a:	1a51      	subs	r1, r2, r1
 800121c:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001220:	fbb1 f0f3 	udiv	r0, r1, r3
 8001224:	4770      	bx	lr
	...

08001228 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 800122a:	68c0      	ldr	r0, [r0, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001230:	4358      	muls	r0, r3
 8001232:	4770      	bx	lr
 8001234:	24000394 	.word	0x24000394

08001238 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001238:	4770      	bx	lr
	...

0800123c <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 800123c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001240:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 8001244:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001246:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001256:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001264:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001268:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 800126e:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001270:	2101      	movs	r1, #1
 8001272:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001274:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	2210      	movs	r2, #16
 8001278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800127c:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001280:	fab2 f282 	clz	r2, r2
 8001284:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	b983      	cbnz	r3, 80012ae <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 800128c:	f005 ffb6 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 8001290:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001292:	f005 fded 	bl	8006e70 <HAL_RCC_GetSysClockFreq>
 8001296:	fbb0 f0f4 	udiv	r0, r0, r4
 800129a:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800129e:	f006 ffe3 	bl	8008268 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 80012a4:	b003      	add	sp, #12
 80012a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 80012aa:	f006 be4b 	b.w	8007f44 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 80012ae:	f005 ffc7 	bl	8007240 <HAL_RCC_GetPCLK1Freq>
 80012b2:	0044      	lsls	r4, r0, #1
 80012b4:	e7ed      	b.n	8001292 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 80012b6:	bf00      	nop
 80012b8:	58024400 	.word	0x58024400
 80012bc:	24000394 	.word	0x24000394
 80012c0:	0801b224 	.word	0x0801b224

080012c4 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 80012c4:	b510      	push	{r4, lr}
 80012c6:	4604      	mov	r4, r0
 80012c8:	2110      	movs	r1, #16
 80012ca:	f017 ff08 	bl	80190de <_ZdlPvj>
 80012ce:	4620      	mov	r0, r4
 80012d0:	bd10      	pop	{r4, pc}

080012d2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 80012d2:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 80012d4:	6803      	ldr	r3, [r0, #0]
{
 80012d6:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80012d8:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80012da:	b131      	cbz	r1, 80012ea <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80012dc:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80012de:	4790      	blx	r2
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	1b5b      	subs	r3, r3, r5
 80012e4:	4418      	add	r0, r3
 80012e6:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80012e8:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80012ea:	4790      	blx	r2
 80012ec:	60a0      	str	r0, [r4, #8]
}
 80012ee:	e7fb      	b.n	80012e8 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080012f0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80012f0:	4770      	bx	lr

080012f2 <_ZN20STM32TouchControllerD0Ev>:
 80012f2:	b510      	push	{r4, lr}
 80012f4:	4604      	mov	r4, r0
 80012f6:	2104      	movs	r1, #4
 80012f8:	f017 fef1 	bl	80190de <_ZdlPvj>
 80012fc:	4620      	mov	r0, r4
 80012fe:	bd10      	pop	{r4, pc}

08001300 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 8001300:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001304:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 8001308:	2000      	movs	r0, #0
    hTS->Width = 800;
 800130a:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 800130c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001310:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001314:	230c      	movs	r3, #12
 8001316:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 800131a:	f003 f849 	bl	80043b0 <BSP_TS_Init>
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_ZN20STM32TouchController4initEv+0x40>)
 8001320:	b910      	cbnz	r0, 8001328 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 8001326:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1fb      	bne.n	8001326 <_ZN20STM32TouchController4initEv+0x26>
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <_ZN20STM32TouchController4initEv+0x44>)
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_ZN20STM32TouchController4initEv+0x48>)
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <_ZN20STM32TouchController4initEv+0x4c>)
 8001336:	f017 ff01 	bl	801913c <__assert_func>
 800133a:	bf00      	nop
 800133c:	240003f0 	.word	0x240003f0
 8001340:	240003ec 	.word	0x240003ec
 8001344:	0801a350 	.word	0x0801a350
 8001348:	0801a363 	.word	0x0801a363
 800134c:	0801a38d 	.word	0x0801a38d

08001350 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001354:	460f      	mov	r7, r1
 8001356:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001358:	781d      	ldrb	r5, [r3, #0]
 800135a:	b915      	cbnz	r5, 8001362 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 800135c:	2500      	movs	r5, #0
}
 800135e:	4628      	mov	r0, r5
 8001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001362:	4c07      	ldr	r4, [pc, #28]	; (8001380 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001364:	2000      	movs	r0, #0
 8001366:	4621      	mov	r1, r4
 8001368:	f003 f8b6 	bl	80044d8 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f4      	beq.n	800135c <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001376:	68a3      	ldr	r3, [r4, #8]
 8001378:	6033      	str	r3, [r6, #0]
            return true;
 800137a:	e7f0      	b.n	800135e <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 800137c:	240003ec 	.word	0x240003ec
 8001380:	240003e0 	.word	0x240003e0

08001384 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 8001384:	4770      	bx	lr

08001386 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 8001386:	4770      	bx	lr

08001388 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 8001388:	4770      	bx	lr

0800138a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 800138a:	4770      	bx	lr

0800138c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 800138c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 800138e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001392:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001396:	4770      	bx	lr

08001398 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001398:	2000      	movs	r0, #0
 800139a:	4770      	bx	lr

0800139c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800139c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800139e:	3900      	subs	r1, #0
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80013a2:	bf18      	it	ne
 80013a4:	2101      	movne	r1, #1
 80013a6:	7019      	strb	r1, [r3, #0]
    }
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2400aef3 	.word	0x2400aef3

080013b0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80013b0:	2000      	movs	r0, #0
 80013b2:	4770      	bx	lr

080013b4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80013b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80013b6:	b10b      	cbz	r3, 80013bc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80013b8:	4608      	mov	r0, r1
 80013ba:	4718      	bx	r3
        }
    }
 80013bc:	4770      	bx	lr

080013be <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80013be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013c2:	4770      	bx	lr

080013c4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80013c4:	6840      	ldr	r0, [r0, #4]
 80013c6:	6803      	ldr	r3, [r0, #0]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4718      	bx	r3

080013cc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80013cc:	4b01      	ldr	r3, [pc, #4]	; (80013d4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	240003f4 	.word	0x240003f4

080013d8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80013d8:	4770      	bx	lr

080013da <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80013da:	f000 be1b 	b.w	8002014 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080013de <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 80013de:	f000 bdc7 	b.w	8001f70 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080013e2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 80013e2:	f000 be31 	b.w	8002048 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

080013e6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 80013e6:	f000 be23 	b.w	8002030 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

080013ea <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80013ea:	f000 bdc9 	b.w	8001f80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

080013ee <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
        swapFrameBuffers();
 80013f2:	f00a fabd 	bl	800b970 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	4620      	mov	r0, r4
 80013fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 80013fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001402:	4718      	bx	r3

08001404 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001404:	f009 bc40 	b.w	800ac88 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001408 <_ZN11TouchGFXHALD0Ev>:
 8001408:	b510      	push	{r4, lr}
 800140a:	4604      	mov	r4, r0
 800140c:	217c      	movs	r1, #124	; 0x7c
 800140e:	f017 fe66 	bl	80190de <_ZdlPvj>
 8001412:	4620      	mov	r0, r4
 8001414:	bd10      	pop	{r4, pc}
	...

08001418 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800141e:	f009 bc6f 	b.w	800ad00 <_ZN8touchgfx3HAL10beginFrameEv>
 8001422:	bf00      	nop
 8001424:	2400000c 	.word	0x2400000c

08001428 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001428:	b510      	push	{r4, lr}
 800142a:	4604      	mov	r4, r0
    HAL::endFrame();
 800142c:	f009 fc74 	bl	800ad18 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001430:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001434:	b113      	cbz	r3, 800143c <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001436:	4b02      	ldr	r3, [pc, #8]	; (8001440 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
    }
}
 800143c:	bd10      	pop	{r4, pc}
 800143e:	bf00      	nop
 8001440:	2400000c 	.word	0x2400000c

08001444 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4604      	mov	r4, r0
    GPIO::init();
 8001448:	f7ff ff9c 	bl	8001384 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 800144c:	4d07      	ldr	r5, [pc, #28]	; (800146c <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 800144e:	4620      	mov	r0, r4
 8001450:	f000 fd97 	bl	8001f82 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001454:	2300      	movs	r3, #0
    mcuInstr.init();
 8001456:	4628      	mov	r0, r5
 8001458:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 800145c:	f7ff feee 	bl	800123c <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001460:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001462:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001464:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001468:	bd38      	pop	{r3, r4, r5, pc}
 800146a:	bf00      	nop
 800146c:	240003fc 	.word	0x240003fc

08001470 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001470:	6803      	ldr	r3, [r0, #0]
{
 8001472:	4604      	mov	r4, r0
 8001474:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147a:	4798      	blx	r3
    enableInterrupts();
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	4620      	mov	r0, r4
 8001480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001482:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001484:	f000 faa6 	bl	80019d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	4620      	mov	r0, r4
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001490:	2100      	movs	r1, #0
 8001492:	2329      	movs	r3, #41	; 0x29
 8001494:	2215      	movs	r2, #21
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001498:	9100      	str	r1, [sp, #0]
 800149a:	f003 fe62 	bl	8005162 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 800149e:	f000 fa99 	bl	80019d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	4620      	mov	r0, r4
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4798      	blx	r3
    for (;;)
 80014aa:	e7f8      	b.n	800149e <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80014ac:	240001f8 	.word	0x240001f8

080014b0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80014b0:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80014b4:	b11b      	cbz	r3, 80014be <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80014b6:	6840      	ldr	r0, [r0, #4]
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4718      	bx	r3
    }
 80014be:	4618      	mov	r0, r3
 80014c0:	4770      	bx	lr
	...

080014c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80014c4:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80014ca:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80014cc:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80014d0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80014d2:	428c      	cmp	r4, r1
 80014d4:	d009      	beq.n	80014ea <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80014d6:	b93a      	cbnz	r2, 80014e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80014d8:	490a      	ldr	r1, [pc, #40]	; (8001504 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80014dc:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014de:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80014e0:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80014e2:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014e4:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80014e6:	701a      	strb	r2, [r3, #0]
        }
    }
 80014e8:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d0fc      	beq.n	80014e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014f2:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80014f4:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80014f6:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80014f8:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80014fa:	2200      	movs	r2, #0
 80014fc:	e7f3      	b.n	80014e6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80014fe:	bf00      	nop
 8001500:	2400aeec 	.word	0x2400aeec
 8001504:	2400aeea 	.word	0x2400aeea
 8001508:	2400aee8 	.word	0x2400aee8

0800150c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800150c:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	428b      	cmp	r3, r1
 8001514:	d803      	bhi.n	800151e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	4293      	cmp	r3, r2
 800151c:	d905      	bls.n	800152a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001520:	219e      	movs	r1, #158	; 0x9e
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001526:	f017 fe09 	bl	801913c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 800152c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001530:	801a      	strh	r2, [r3, #0]
    }
 8001532:	bd08      	pop	{r3, pc}
 8001534:	2400aee8 	.word	0x2400aee8
 8001538:	2400aeea 	.word	0x2400aeea
 800153c:	0801a3fc 	.word	0x0801a3fc
 8001540:	0801a45f 	.word	0x0801a45f
 8001544:	0801a4a2 	.word	0x0801a4a2
 8001548:	2400aeee 	.word	0x2400aeee
 800154c:	2400aef0 	.word	0x2400aef0

08001550 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	460d      	mov	r5, r1
 8001554:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001558:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800155a:	b935      	cbnz	r5, 800156a <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800155e:	f240 21bb 	movw	r1, #699	; 0x2bb
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001566:	f017 fde9 	bl	801913c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800156a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800156e:	3a00      	subs	r2, #0
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001572:	bf18      	it	ne
 8001574:	2201      	movne	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001578:	6803      	ldr	r3, [r0, #0]
}
 800157a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800157e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001582:	4718      	bx	r3
 8001584:	240003f4 	.word	0x240003f4
 8001588:	0801a4f5 	.word	0x0801a4f5
 800158c:	0801a52d 	.word	0x0801a52d
 8001590:	0801a4a2 	.word	0x0801a4a2
 8001594:	2400aef2 	.word	0x2400aef2

08001598 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001598:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800159c:	60c3      	str	r3, [r0, #12]
 800159e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a2:	2300      	movs	r3, #0
 80015a4:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80015aa:	8503      	strh	r3, [r0, #40]	; 0x28
 80015ac:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80015b0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80015b2:	8603      	strh	r3, [r0, #48]	; 0x30
 80015b4:	6603      	str	r3, [r0, #96]	; 0x60
 80015b6:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 80015ba:	6703      	str	r3, [r0, #112]	; 0x70
 80015bc:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 80015c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015c4:	6742      	str	r2, [r0, #116]	; 0x74
 80015c6:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015ce:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80015d2:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 80015d6:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80015da:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80015de:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 80015e2:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80015e6:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80015ea:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 80015ee:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80015f2:	42b5      	cmp	r5, r6
        instance = this;
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 80015f6:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 80015fa:	8015      	strh	r5, [r2, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80015fe:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001600:	bf28      	it	cs
 8001602:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001606:	bf38      	it	cc
 8001608:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800160a:	8016      	strh	r6, [r2, #0]
 800160c:	4a09      	ldr	r2, [pc, #36]	; (8001634 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800160e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001612:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001614:	4a08      	ldr	r2, [pc, #32]	; (8001638 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001616:	7013      	strb	r3, [r2, #0]
                           height)
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 800161a:	6003      	str	r3, [r0, #0]
}
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop
 8001620:	01000001 	.word	0x01000001
 8001624:	2400aef4 	.word	0x2400aef4
 8001628:	2400aee8 	.word	0x2400aee8
 800162c:	2400aeee 	.word	0x2400aeee
 8001630:	2400aeea 	.word	0x2400aeea
 8001634:	2400aef0 	.word	0x2400aef0
 8001638:	2400aeec 	.word	0x2400aeec
 800163c:	0801a584 	.word	0x0801a584

08001640 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001640:	2b01      	cmp	r3, #1
    {
 8001642:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001644:	d80e      	bhi.n	8001664 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	2215      	movs	r2, #21
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	460b      	mov	r3, r1
 800164e:	4601      	mov	r1, r0
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <DSI_IO_Write+0x34>)
 8001652:	f003 fd86 	bl	8005162 <HAL_DSI_ShortWrite>
 8001656:	b118      	cbz	r0, 8001660 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001658:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800165c:	b002      	add	sp, #8
 800165e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001660:	2000      	movs	r0, #0
 8001662:	e7fb      	b.n	800165c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001664:	e9cd 1200 	strd	r1, r2, [sp]
 8001668:	4601      	mov	r1, r0
 800166a:	2239      	movs	r2, #57	; 0x39
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <DSI_IO_Write+0x34>)
 800166e:	f003 fd89 	bl	8005184 <HAL_DSI_LongWrite>
 8001672:	e7f0      	b.n	8001656 <DSI_IO_Write+0x16>
 8001674:	240001f8 	.word	0x240001f8

08001678 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800167a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800167e:	2106      	movs	r1, #6
 8001680:	9100      	str	r1, [sp, #0]
 8001682:	4601      	mov	r1, r0
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <DSI_IO_Read+0x24>)
 8001686:	f003 fddd 	bl	8005244 <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 800168a:	2800      	cmp	r0, #0
        }

        return ret;
    }
 800168c:	bf14      	ite	ne
 800168e:	f06f 0007 	mvnne.w	r0, #7
 8001692:	2000      	moveq	r0, #0
 8001694:	b005      	add	sp, #20
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
 800169a:	bf00      	nop
 800169c:	240001f8 	.word	0x240001f8

080016a0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80016a0:	b530      	push	{r4, r5, lr}
 80016a2:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80016a4:	4c0c      	ldr	r4, [pc, #48]	; (80016d8 <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 80016a6:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 80016a8:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80016aa:	aa03      	add	r2, sp, #12
 80016ac:	2100      	movs	r1, #0
 80016ae:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 80016b0:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80016b4:	9201      	str	r2, [sp, #4]
 80016b6:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 80016b8:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	2239      	movs	r2, #57	; 0x39
 80016c0:	f003 fd60 	bl	8005184 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2335      	movs	r3, #53	; 0x35
 80016c8:	462a      	mov	r2, r5
 80016ca:	4620      	mov	r0, r4
 80016cc:	9100      	str	r1, [sp, #0]
 80016ce:	f003 fd48 	bl	8005162 <HAL_DSI_ShortWrite>
    }
 80016d2:	b005      	add	sp, #20
 80016d4:	bd30      	pop	{r4, r5, pc}
 80016d6:	bf00      	nop
 80016d8:	240001f8 	.word	0x240001f8

080016dc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80016dc:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80016de:	f7ff ffdf 	bl	80016a0 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80016f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80016fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001702:	f042 0202 	orr.w	r2, r2, #2
 8001706:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 800170a:	2203      	movs	r2, #3
 800170c:	4b02      	ldr	r3, [pc, #8]	; (8001718 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800170e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001710:	bd08      	pop	{r3, pc}
 8001712:	bf00      	nop
 8001714:	240001f8 	.word	0x240001f8
 8001718:	50001000 	.word	0x50001000

0800171c <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <LCD_ReqEnable+0x20>)
    {
 800171e:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001720:	7819      	ldrb	r1, [r3, #0]
 8001722:	b939      	cbnz	r1, 8001734 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001724:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001728:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 800172a:	2329      	movs	r3, #41	; 0x29
 800172c:	2215      	movs	r2, #21
 800172e:	9100      	str	r1, [sp, #0]
 8001730:	f003 fd17 	bl	8005162 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001734:	b003      	add	sp, #12
 8001736:	f85d fb04 	ldr.w	pc, [sp], #4
 800173a:	bf00      	nop
 800173c:	2400040c 	.word	0x2400040c
 8001740:	240001f8 	.word	0x240001f8

08001744 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001746:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	232a      	movs	r3, #42	; 0x2a
 800174c:	2239      	movs	r2, #57	; 0x39
 800174e:	2100      	movs	r1, #0
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2304      	movs	r3, #4
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <LCD_SetUpdateRegionLeft+0x20>)
 8001756:	f003 fd15 	bl	8005184 <HAL_DSI_LongWrite>
    }
 800175a:	b003      	add	sp, #12
 800175c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001760:	24000004 	.word	0x24000004
 8001764:	240001f8 	.word	0x240001f8

08001768 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <LCD_SetUpdateRegionRight+0x1c>)
    {
 800176a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	232a      	movs	r3, #42	; 0x2a
 8001770:	2239      	movs	r2, #57	; 0x39
 8001772:	2100      	movs	r1, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2304      	movs	r3, #4
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <LCD_SetUpdateRegionRight+0x20>)
 800177a:	f003 fd03 	bl	8005184 <HAL_DSI_LongWrite>
    }
 800177e:	b003      	add	sp, #12
 8001780:	f85d fb04 	ldr.w	pc, [sp], #4
 8001784:	24000008 	.word	0x24000008
 8001788:	240001f8 	.word	0x240001f8

0800178c <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 800178c:	b538      	push	{r3, r4, r5, lr}
        return instance;
 800178e:	4d14      	ldr	r5, [pc, #80]	; (80017e0 <HAL_DSI_TearingEffectCallback+0x54>)
 8001790:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fdf7 	bl	8001386 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001798:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 800179a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800179e:	3301      	adds	r3, #1
 80017a0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80017a4:	f000 f90a 	bl	80019bc <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80017aa:	682a      	ldr	r2, [r5, #0]
 80017ac:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 80017b4:	b173      	cbz	r3, 80017d4 <HAL_DSI_TearingEffectCallback+0x48>
 80017b6:	4d0c      	ldr	r5, [pc, #48]	; (80017e8 <HAL_DSI_TearingEffectCallback+0x5c>)
 80017b8:	782b      	ldrb	r3, [r5, #0]
 80017ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017be:	b94b      	cbnz	r3, 80017d4 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_DSI_TearingEffectCallback+0x60>)
 80017c2:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80017c4:	f7ff ffbe 	bl	8001744 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f003 fcba 	bl	8005142 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80017ce:	2301      	movs	r3, #1
 80017d0:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80017d2:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80017d4:	2000      	movs	r0, #0
    }
 80017d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80017da:	f7ff bdd5 	b.w	8001388 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80017de:	bf00      	nop
 80017e0:	2400aef4 	.word	0x2400aef4
 80017e4:	2400000c 	.word	0x2400000c
 80017e8:	2400040d 	.word	0x2400040d
 80017ec:	240003f8 	.word	0x240003f8

080017f0 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 80017f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 80017f4:	4e3f      	ldr	r6, [pc, #252]	; (80018f4 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 80017f6:	b085      	sub	sp, #20
 80017f8:	4604      	mov	r4, r0
        if (displayRefreshing)
 80017fa:	7833      	ldrb	r3, [r6, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d076      	beq.n	80018ee <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001800:	4d3d      	ldr	r5, [pc, #244]	; (80018f8 <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001802:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001908 <HAL_DSI_EndOfRefreshCallback+0x118>
 8001806:	f8d5 9000 	ldr.w	r9, [r5]
 800180a:	4f3c      	ldr	r7, [pc, #240]	; (80018fc <HAL_DSI_EndOfRefreshCallback+0x10c>)
 800180c:	f1b9 0f00 	cmp.w	r9, #0
 8001810:	d139      	bne.n	8001886 <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f002 ff70 	bl	80046f8 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	f8cd 9000 	str.w	r9, [sp]
 800181e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001822:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001826:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001830:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001834:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001838:	f002 0208 	and.w	r2, r2, #8
 800183c:	9200      	str	r2, [sp, #0]
 800183e:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	0852      	lsrs	r2, r2, #1
 8001846:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800184a:	4402      	add	r2, r0
 800184c:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800184e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001856:	f8cd 9004 	str.w	r9, [sp, #4]
 800185a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800185e:	f042 0208 	orr.w	r2, r2, #8
 8001862:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001872:	f7ff ff79 	bl	8001768 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001876:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001878:	4620      	mov	r0, r4
                updateRegion = 1;
 800187a:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 800187c:	b005      	add	sp, #20
 800187e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001882:	f003 bc5e 	b.w	8005142 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 800188a:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800188c:	9502      	str	r5, [sp, #8]
 800188e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001892:	f022 0208 	bic.w	r2, r2, #8
 8001896:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800189a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800189e:	f002 0208 	and.w	r2, r2, #8
 80018a2:	9202      	str	r2, [sp, #8]
 80018a4:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80018a6:	f8d8 2000 	ldr.w	r2, [r8]
 80018aa:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 80018ae:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80018b0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018b2:	f041 0101 	orr.w	r1, r1, #1
 80018b6:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80018b8:	9503      	str	r5, [sp, #12]
 80018ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80018be:	f042 0208 	orr.w	r2, r2, #8
 80018c2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80018c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	9303      	str	r3, [sp, #12]
 80018d0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 80018d2:	f7ff fd59 	bl	8001388 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 80018d6:	f7ff ff21 	bl	800171c <LCD_ReqEnable>
        return instance;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 80018dc:	7035      	strb	r5, [r6, #0]
 80018de:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 80018e0:	b128      	cbz	r0, 80018ee <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
    }
 80018e6:	b005      	add	sp, #20
 80018e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018ec:	4718      	bx	r3
 80018ee:	b005      	add	sp, #20
 80018f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018f4:	2400040d 	.word	0x2400040d
 80018f8:	240003f8 	.word	0x240003f8
 80018fc:	240003f4 	.word	0x240003f4
 8001900:	2400aeee 	.word	0x2400aeee
 8001904:	2400aef4 	.word	0x2400aef4
 8001908:	24000214 	.word	0x24000214

0800190c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800190c:	4601      	mov	r1, r0
 800190e:	b508      	push	{r3, lr}
        return instance;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <IdleTaskHook+0x14>)
 8001912:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001914:	b101      	cbz	r1, 8001918 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001916:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001918:	f00a f844 	bl	800b9a4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800191c:	2001      	movs	r0, #1
 800191e:	bd08      	pop	{r3, pc}
 8001920:	2400aef4 	.word	0x2400aef4

08001924 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	4a02      	ldr	r2, [pc, #8]	; (8001938 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 800192e:	601a      	str	r2, [r3, #0]

}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	240003fc 	.word	0x240003fc
 8001938:	0801a330 	.word	0x0801a330

0800193c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800193c:	2101      	movs	r1, #1
 800193e:	2200      	movs	r2, #0
{
 8001940:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001942:	4608      	mov	r0, r1
 8001944:	f006 fde1 	bl	800850a <osSemaphoreNew>
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800194a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800194c:	b928      	cbnz	r0, 800195a <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001950:	2128      	movs	r1, #40	; 0x28
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001956:	f017 fbf1 	bl	801913c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800195a:	2200      	movs	r2, #0
 800195c:	2104      	movs	r1, #4
 800195e:	2001      	movs	r0, #1
 8001960:	f006 fe70 	bl	8008644 <osMessageQueueNew>
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001966:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001968:	b918      	cbnz	r0, 8001972 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001970:	e7f0      	b.n	8001954 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001972:	bd08      	pop	{r3, pc}
 8001974:	24000414 	.word	0x24000414
 8001978:	0801a654 	.word	0x0801a654
 800197c:	0801a69d 	.word	0x0801a69d
 8001980:	0801a6cc 	.word	0x0801a6cc
 8001984:	24000410 	.word	0x24000410
 8001988:	0801a723 	.word	0x0801a723

0800198c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800198c:	4b02      	ldr	r3, [pc, #8]	; (8001998 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 800198e:	f04f 31ff 	mov.w	r1, #4294967295
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f006 be03 	b.w	800859e <osSemaphoreAcquire>
 8001998:	24000414 	.word	0x24000414

0800199c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 800199c:	4b01      	ldr	r3, [pc, #4]	; (80019a4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	f006 be28 	b.w	80085f4 <osSemaphoreRelease>
 80019a4:	24000414 	.word	0x24000414

080019a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f006 bdf6 	b.w	800859e <osSemaphoreAcquire>
 80019b2:	bf00      	nop
 80019b4:	24000414 	.word	0x24000414

080019b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 80019b8:	f7ff bff0 	b.w	800199c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080019bc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80019bc:	2300      	movs	r3, #0
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80019c2:	461a      	mov	r2, r3
 80019c4:	6800      	ldr	r0, [r0, #0]
 80019c6:	f006 be78 	b.w	80086ba <osMessageQueuePut>
 80019ca:	bf00      	nop
 80019cc:	24000410 	.word	0x24000410
 80019d0:	24000010 	.word	0x24000010

080019d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80019d4:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80019d6:	2300      	movs	r3, #0
 80019d8:	4c07      	ldr	r4, [pc, #28]	; (80019f8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80019da:	a901      	add	r1, sp, #4
 80019dc:	461a      	mov	r2, r3
 80019de:	6820      	ldr	r0, [r4, #0]
 80019e0:	f006 fe9b 	bl	800871a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	2200      	movs	r2, #0
 80019ea:	a901      	add	r1, sp, #4
 80019ec:	6820      	ldr	r0, [r4, #0]
 80019ee:	f006 fe94 	bl	800871a <osMessageQueueGet>
}
 80019f2:	b002      	add	sp, #8
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	bf00      	nop
 80019f8:	24000410 	.word	0x24000410

080019fc <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 80019fc:	6803      	ldr	r3, [r0, #0]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	4718      	bx	r3

08001a02 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001a02:	2001      	movs	r0, #1
 8001a04:	4770      	bx	lr

08001a06 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001a06:	6803      	ldr	r3, [r0, #0]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	4718      	bx	r3

08001a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001a10:	4770      	bx	lr
	...

08001a14 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a1a:	6003      	str	r3, [r0, #0]
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <_ZN8STM32DMAD1Ev+0x1c>)
 8001a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001a22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a26:	f3bf 8f6f 	isb	sy
}
 8001a2a:	4770      	bx	lr
 8001a2c:	0801a8cc 	.word	0x0801a8cc
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001a34:	b510      	push	{r4, lr}
 8001a36:	4604      	mov	r4, r0
}
 8001a38:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001a3c:	f7ff ffea 	bl	8001a14 <_ZN8STM32DMAD1Ev>
 8001a40:	4620      	mov	r0, r4
 8001a42:	f017 fb4c 	bl	80190de <_ZdlPvj>
 8001a46:	4620      	mov	r0, r4
 8001a48:	bd10      	pop	{r4, pc}
	...

08001a4c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001a4e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a50:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001a54:	f042 0210 	orr.w	r2, r2, #16
 8001a58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001a5c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001a60:	f002 0210 	and.w	r2, r2, #16
 8001a64:	9201      	str	r2, [sp, #4]
 8001a66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001a68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a6a:	f042 0210 	orr.w	r2, r2, #16
 8001a6e:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001a70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a72:	f022 0210 	bic.w	r2, r2, #16
 8001a76:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <_ZN8STM32DMA10initializeEv+0x44>)
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <_ZN8STM32DMA10initializeEv+0x48>)
 8001a7c:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a84:	609a      	str	r2, [r3, #8]
}
 8001a86:	b002      	add	sp, #8
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	24000190 	.word	0x24000190
 8001a94:	08001a9d 	.word	0x08001a9d
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <DMA2D_XferCpltCallback>:
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <DMA2D_XferCpltCallback+0xc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001aa2:	6803      	ldr	r3, [r0, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4718      	bx	r3
 8001aa8:	2400aef4 	.word	0x2400aef4

08001aac <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <_ZN8STM32DMAC1Ev+0x30>)
 8001ab2:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001ab4:	2600      	movs	r6, #0
 8001ab6:	4625      	mov	r5, r4
 8001ab8:	2260      	movs	r2, #96	; 0x60
 8001aba:	6060      	str	r0, [r4, #4]
 8001abc:	7226      	strb	r6, [r4, #8]
 8001abe:	7266      	strb	r6, [r4, #9]
 8001ac0:	f845 3b20 	str.w	r3, [r5], #32
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f00a f8d3 	bl	800bc70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001aca:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001ace:	60ee      	str	r6, [r5, #12]
 8001ad0:	3524      	adds	r5, #36	; 0x24
 8001ad2:	42ab      	cmp	r3, r5
 8001ad4:	d1fb      	bne.n	8001ace <_ZN8STM32DMAC1Ev+0x22>
}
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
 8001ada:	bf00      	nop
 8001adc:	0801a8cc 	.word	0x0801a8cc

08001ae0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ae0:	b508      	push	{r3, lr}
    switch (format)
 8001ae2:	290b      	cmp	r1, #11
 8001ae4:	d80b      	bhi.n	8001afe <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001ae6:	e8df f001 	tbb	[pc, r1]
 8001aea:	0612      	.short	0x0612
 8001aec:	0a0a0a10 	.word	0x0a0a0a10
 8001af0:	0808080a 	.word	0x0808080a
 8001af4:	0808      	.short	0x0808
 8001af6:	2001      	movs	r0, #1
}
 8001af8:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001afa:	2005      	movs	r0, #5
        break;
 8001afc:	e7fc      	b.n	8001af8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001b00:	2166      	movs	r1, #102	; 0x66
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001b06:	f017 fb19 	bl	801913c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e7f4      	b.n	8001af8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001b0e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001b10:	e7f2      	b.n	8001af8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001b12:	bf00      	nop
 8001b14:	0801a765 	.word	0x0801a765
 8001b18:	0801a780 	.word	0x0801a780
 8001b1c:	0801a7ca 	.word	0x0801a7ca

08001b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001b20:	b508      	push	{r3, lr}
    switch (format)
 8001b22:	290a      	cmp	r1, #10
 8001b24:	d809      	bhi.n	8001b3a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001b26:	e8df f001 	tbb	[pc, r1]
 8001b2a:	0610      	.short	0x0610
 8001b2c:	0808080e 	.word	0x0808080e
 8001b30:	06060608 	.word	0x06060608
 8001b34:	06          	.byte	0x06
 8001b35:	00          	.byte	0x00
 8001b36:	2001      	movs	r0, #1
}
 8001b38:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001b3c:	2187      	movs	r1, #135	; 0x87
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001b42:	f017 fafb 	bl	801913c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b46:	2000      	movs	r0, #0
 8001b48:	e7f6      	b.n	8001b38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001b4a:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001b4c:	e7f4      	b.n	8001b38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001b4e:	bf00      	nop
 8001b50:	0801a765 	.word	0x0801a765
 8001b54:	0801a81f 	.word	0x0801a81f
 8001b58:	0801a7ca 	.word	0x0801a7ca

08001b5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001b60:	7f4f      	ldrb	r7, [r1, #29]
{
 8001b62:	460c      	mov	r4, r1
 8001b64:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001b66:	4639      	mov	r1, r7
 8001b68:	f7ff ffba 	bl	8001ae0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b6c:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001b70:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b72:	4648      	mov	r0, r9
 8001b74:	4641      	mov	r1, r8
 8001b76:	f7ff ffb3 	bl	8001ae0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b7a:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b7c:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001b7e:	4648      	mov	r0, r9
 8001b80:	f7ff ffce 	bl	8001b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b84:	8aa1      	ldrh	r1, [r4, #20]
 8001b86:	8b62      	ldrh	r2, [r4, #26]
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001b8a:	1a52      	subs	r2, r2, r1
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001b8e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001b90:	8b22      	ldrh	r2, [r4, #24]
 8001b92:	1a52      	subs	r2, r2, r1
 8001b94:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b96:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001b98:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001b9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001b9e:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001ba2:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ba4:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001ba6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001ba8:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001baa:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001bae:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001bb0:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001bb4:	d026      	beq.n	8001c04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001bb6:	d810      	bhi.n	8001bda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001bb8:	2920      	cmp	r1, #32
 8001bba:	ea45 0402 	orr.w	r4, r5, r2
 8001bbe:	d062      	beq.n	8001c86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001bc0:	2940      	cmp	r1, #64	; 0x40
 8001bc2:	d060      	beq.n	8001c86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001bc4:	2904      	cmp	r1, #4
 8001bc6:	d05e      	beq.n	8001c86 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001bc8:	432a      	orrs	r2, r5
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001bcc:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001bce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bd2:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001bd4:	d05b      	beq.n	8001c8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001bd8:	e040      	b.n	8001c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001bda:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001bde:	d007      	beq.n	8001bf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001be0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001be4:	d1f0      	bne.n	8001bc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001be6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bea:	f042 0209 	orr.w	r2, r2, #9
 8001bee:	e003      	b.n	8001bf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001bf0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bf4:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001bf8:	61da      	str	r2, [r3, #28]
        return color;
 8001bfa:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001bfc:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001bfe:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c00:	6158      	str	r0, [r3, #20]
 8001c02:	e02a      	b.n	8001c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c04:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001c06:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c0c:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001c0e:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001c10:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001c12:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8001c16:	7822      	ldrb	r2, [r4, #0]
 8001c18:	b142      	cbz	r2, 8001c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001c1a:	2a01      	cmp	r2, #1
 8001c1c:	d021      	beq.n	8001c62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001c20:	f240 1101 	movw	r1, #257	; 0x101
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001c26:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001c28:	f017 fa88 	bl	801913c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001c2c:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001c2e:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001c30:	8861      	ldrh	r1, [r4, #2]
 8001c32:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c36:	3901      	subs	r1, #1
 8001c38:	f022 0210 	bic.w	r2, r2, #16
 8001c3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c40:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001c4c:	69da      	ldr	r2, [r3, #28]
 8001c4e:	0692      	lsls	r2, r2, #26
 8001c50:	d4fc      	bmi.n	8001c4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001c52:	2210      	movs	r2, #16
 8001c54:	609a      	str	r2, [r3, #8]
            if (blend)
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d0bd      	beq.n	8001bd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001c5a:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001c5c:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001c62:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 8001c64:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001c68:	69d9      	ldr	r1, [r3, #28]
 8001c6a:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8001c6e:	bf18      	it	ne
 8001c70:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001c72:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001c76:	f022 0210 	bic.w	r2, r2, #16
 8001c7a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001c7e:	f042 0210 	orr.w	r2, r2, #16
 8001c82:	61da      	str	r2, [r3, #28]
                break;
 8001c84:	e7dd      	b.n	8001c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001c86:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001c8a:	61dc      	str	r4, [r3, #28]
 8001c8c:	e7b7      	b.n	8001bfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001c8e:	f240 2201 	movw	r2, #513	; 0x201
 8001c92:	e7e3      	b.n	8001c5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001c94:	52001000 	.word	0x52001000
 8001c98:	00010201 	.word	0x00010201
 8001c9c:	0801a86a 	.word	0x0801a86a
 8001ca0:	0801a884 	.word	0x0801a884
 8001ca4:	0801a7ca 	.word	0x0801a7ca
 8001ca8:	00020201 	.word	0x00020201

08001cac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cb0:	7f89      	ldrb	r1, [r1, #30]
 8001cb2:	f7ff ff35 	bl	8001b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001cb8:	8aa5      	ldrh	r5, [r4, #20]
 8001cba:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001cbc:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001cbe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001cc2:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001cc4:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001cc6:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cc8:	6921      	ldr	r1, [r4, #16]
 8001cca:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001cce:	6826      	ldr	r6, [r4, #0]
 8001cd0:	68e5      	ldr	r5, [r4, #12]
 8001cd2:	2e08      	cmp	r6, #8
 8001cd4:	d10d      	bne.n	8001cf2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001cd6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001cd8:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cda:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8001cdc:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001cde:	7f20      	ldrb	r0, [r4, #28]
 8001ce0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001ce4:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001ce8:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cea:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cec:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001cee:	601a      	str	r2, [r3, #0]
    }
}
 8001cf0:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001cf2:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001cf4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001cf6:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001cfa:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001cfc:	e7f7      	b.n	8001cee <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001cfe:	bf00      	nop
 8001d00:	52001000 	.word	0x52001000
 8001d04:	00010009 	.word	0x00010009
 8001d08:	00020201 	.word	0x00020201
 8001d0c:	00030201 	.word	0x00030201

08001d10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001d10:	2001      	movs	r0, #1
 8001d12:	4770      	bx	lr

08001d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001d14:	200c      	movs	r0, #12
 8001d16:	4770      	bx	lr

08001d18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001d18:	230c      	movs	r3, #12
 8001d1a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001d1e:	3008      	adds	r0, #8
 8001d20:	4770      	bx	lr

08001d22 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001d22:	230c      	movs	r3, #12
 8001d24:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001d28:	3008      	adds	r0, #8
 8001d2a:	4770      	bx	lr

08001d2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4770      	bx	lr

08001d30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001d30:	20b4      	movs	r0, #180	; 0xb4
 8001d32:	4770      	bx	lr

08001d34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001d34:	23b4      	movs	r3, #180	; 0xb4
 8001d36:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001d3a:	3008      	adds	r0, #8
 8001d3c:	4770      	bx	lr

08001d3e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001d3e:	23b4      	movs	r3, #180	; 0xb4
 8001d40:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001d44:	3008      	adds	r0, #8
 8001d46:	4770      	bx	lr

08001d48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001d48:	2001      	movs	r0, #1
 8001d4a:	4770      	bx	lr

08001d4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001d4c:	2010      	movs	r0, #16
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001d50:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001d54:	3008      	adds	r0, #8
 8001d56:	4770      	bx	lr

08001d58 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001d58:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001d5c:	3008      	adds	r0, #8
 8001d5e:	4770      	bx	lr

08001d60 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001d60:	4608      	mov	r0, r1
 8001d62:	f000 bb09 	b.w	8002378 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08001d68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001d6a:	b510      	push	{r4, lr}
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	6003      	str	r3, [r0, #0]
 8001d70:	f008 fcb2 	bl	800a6d8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001d74:	4620      	mov	r0, r4
 8001d76:	bd10      	pop	{r4, pc}
 8001d78:	0801a984 	.word	0x0801a984

08001d7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
 8001d80:	f7ff fff2 	bl	8001d68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001d84:	2114      	movs	r1, #20
 8001d86:	4620      	mov	r0, r4
 8001d88:	f017 f9a9 	bl	80190de <_ZdlPvj>
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	bd10      	pop	{r4, pc}

08001d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001d92:	b510      	push	{r4, lr}
 8001d94:	4604      	mov	r4, r0
 8001d96:	6003      	str	r3, [r0, #0]
 8001d98:	f008 fc9e 	bl	800a6d8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	bd10      	pop	{r4, pc}
 8001da0:	0801a950 	.word	0x0801a950

08001da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001da4:	b510      	push	{r4, lr}
 8001da6:	4604      	mov	r4, r0
 8001da8:	f7ff fff2 	bl	8001d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001dac:	21bc      	movs	r1, #188	; 0xbc
 8001dae:	4620      	mov	r0, r4
 8001db0:	f017 f995 	bl	80190de <_ZdlPvj>
 8001db4:	4620      	mov	r0, r4
 8001db6:	bd10      	pop	{r4, pc}

08001db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001dba:	b510      	push	{r4, lr}
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	6003      	str	r3, [r0, #0]
 8001dc0:	f008 fc8a 	bl	800a6d8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	bd10      	pop	{r4, pc}
 8001dc8:	0801a91c 	.word	0x0801a91c

08001dcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	4604      	mov	r4, r0
 8001dd0:	f7ff fff2 	bl	8001db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001dd4:	2118      	movs	r1, #24
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f017 f981 	bl	80190de <_ZdlPvj>
 8001ddc:	4620      	mov	r0, r4
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_ZN12FrontendHeapD1Ev+0x24>)
 8001de2:	b510      	push	{r4, lr}
 8001de4:	4604      	mov	r4, r0
 8001de6:	f840 3be8 	str.w	r3, [r0], #232
 8001dea:	f7ff ffbd 	bl	8001d68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001dee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001df2:	f7ff ffcd 	bl	8001d90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001df6:	f104 0014 	add.w	r0, r4, #20
 8001dfa:	f7ff ffdd 	bl	8001db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001dfe:	4620      	mov	r0, r4
 8001e00:	bd10      	pop	{r4, pc}
 8001e02:	bf00      	nop
 8001e04:	0801a9b8 	.word	0x0801a9b8

08001e08 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001e08:	b508      	push	{r3, lr}
 8001e0a:	4802      	ldr	r0, [pc, #8]	; (8001e14 <__tcf_0+0xc>)
 8001e0c:	f7ff ffe8 	bl	8001de0 <_ZN12FrontendHeapD1Ev>
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	2400041c 	.word	0x2400041c

08001e18 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	f7ff ffe0 	bl	8001de0 <_ZN12FrontendHeapD1Ev>
 8001e20:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001e24:	4620      	mov	r0, r4
 8001e26:	f017 f95a 	bl	80190de <_ZdlPvj>
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	bd10      	pop	{r4, pc}
	...

08001e30 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8001e30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001e34:	f000 f92c 	bl	8002090 <_ZN14BitmapDatabase11getInstanceEv>
 8001e38:	2400      	movs	r4, #0
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	f000 f92c 	bl	8002098 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001e40:	4623      	mov	r3, r4
 8001e42:	4601      	mov	r1, r0
 8001e44:	4622      	mov	r2, r4
 8001e46:	4628      	mov	r0, r5
 8001e48:	9400      	str	r4, [sp, #0]
 8001e4a:	f00e fe3b 	bl	8010ac4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <touchgfx_init+0xb4>)
 8001e50:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001e52:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001e54:	4d25      	ldr	r5, [pc, #148]	; (8001eec <touchgfx_init+0xbc>)
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f000 fcee 	bl	8002838 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001e5c:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <touchgfx_init+0xc0>)
 8001e5e:	f00e fccd 	bl	80107fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001e62:	782b      	ldrb	r3, [r5, #0]
 8001e64:	f3bf 8f5b 	dmb	ish
 8001e68:	07db      	lsls	r3, r3, #31
 8001e6a:	d435      	bmi.n	8001ed8 <touchgfx_init+0xa8>
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f017 f938 	bl	80190e2 <__cxa_guard_acquire>
 8001e72:	b388      	cbz	r0, 8001ed8 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001e74:	4c1f      	ldr	r4, [pc, #124]	; (8001ef4 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <touchgfx_init+0xc8>)
 8001e78:	f504 7680 	add.w	r6, r4, #256	; 0x100
 8001e7c:	f104 0014 	add.w	r0, r4, #20
 8001e80:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001e84:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8001e88:	6023      	str	r3, [r4, #0]
 8001e8a:	6060      	str	r0, [r4, #4]
 8001e8c:	f8c4 8008 	str.w	r8, [r4, #8]
 8001e90:	60e7      	str	r7, [r4, #12]
 8001e92:	6126      	str	r6, [r4, #16]
 8001e94:	f008 fc22 	bl	800a6dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <touchgfx_init+0xcc>)
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	6163      	str	r3, [r4, #20]
 8001e9e:	f008 fc1d 	bl	800a6dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <touchgfx_init+0xd0>)
 8001ea4:	4638      	mov	r0, r7
 8001ea6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ea8:	f008 fc18 	bl	800a6dc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <touchgfx_init+0xd4>)
 8001eae:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 8001eb2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001eb6:	f000 fd3b 	bl	8002930 <_ZN5ModelC1Ev>
 8001eba:	4622      	mov	r2, r4
 8001ebc:	f104 01fc 	add.w	r1, r4, #252	; 0xfc
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f000 fd2b 	bl	800291c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	f000 fa56 	bl	8002378 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001ecc:	480e      	ldr	r0, [pc, #56]	; (8001f08 <touchgfx_init+0xd8>)
 8001ece:	f017 f953 	bl	8019178 <atexit>
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f017 f911 	bl	80190fa <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <touchgfx_init+0xdc>)
}
 8001eda:	b002      	add	sp, #8
 8001edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001ee0:	f7ff bab0 	b.w	8001444 <_ZN11TouchGFXHAL10initializeEv>
 8001ee4:	2400af50 	.word	0x2400af50
 8001ee8:	24001494 	.word	0x24001494
 8001eec:	24000418 	.word	0x24000418
 8001ef0:	24000014 	.word	0x24000014
 8001ef4:	2400041c 	.word	0x2400041c
 8001ef8:	0801a9b8 	.word	0x0801a9b8
 8001efc:	0801a91c 	.word	0x0801a91c
 8001f00:	0801a950 	.word	0x0801a950
 8001f04:	0801a984 	.word	0x0801a984
 8001f08:	08001e09 	.word	0x08001e09
 8001f0c:	24001418 	.word	0x24001418

08001f10 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001f10:	4801      	ldr	r0, [pc, #4]	; (8001f18 <touchgfx_taskEntry+0x8>)
 8001f12:	f7ff baad 	b.w	8001470 <_ZN11TouchGFXHAL9taskEntryEv>
 8001f16:	bf00      	nop
 8001f18:	24001418 	.word	0x24001418

08001f1c <_GLOBAL__sub_I_touchgfx_init>:
}
 8001f1c:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 8001f1e:	490c      	ldr	r1, [pc, #48]	; (8001f50 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 8001f22:	4c0d      	ldr	r4, [pc, #52]	; (8001f58 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8001f24:	4608      	mov	r0, r1
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	f7ff fdc0 	bl	8001aac <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f011 f83c 	bl	8012fac <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8001f34:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001f38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f3c:	4904      	ldr	r1, [pc, #16]	; (8001f50 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 8001f3e:	4808      	ldr	r0, [pc, #32]	; (8001f60 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8001f40:	e9cd 3200 	strd	r3, r2, [sp]
 8001f44:	4623      	mov	r3, r4
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8001f48:	f7ff fb26 	bl	8001598 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	24000678 	.word	0x24000678
 8001f54:	0801a3ec 	.word	0x0801a3ec
 8001f58:	24000674 	.word	0x24000674
 8001f5c:	24001498 	.word	0x24001498
 8001f60:	24001418 	.word	0x24001418

08001f64 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001f64:	4801      	ldr	r0, [pc, #4]	; (8001f6c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8001f66:	f7ff bd55 	b.w	8001a14 <_ZN8STM32DMAD1Ev>
 8001f6a:	bf00      	nop
 8001f6c:	24000678 	.word	0x24000678

08001f70 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8001f72:	2290      	movs	r2, #144	; 0x90
 8001f74:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8001f80:	4770      	bx	lr

08001f82 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001f82:	b538      	push	{r3, r4, r5, lr}
 8001f84:	4604      	mov	r4, r0
    HAL::initialize();
 8001f86:	f008 fed4 	bl	800ad32 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001f8e:	f00c f869 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4620      	mov	r0, r4
 8001f96:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}

08001fb2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001fb2:	f008 bfca 	b.w	800af4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
	...

08001fb8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fb8:	4910      	ldr	r1, [pc, #64]	; (8001ffc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x44>)
 8001fba:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001fc6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fca:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fce:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fd2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001fd6:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fd8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fdc:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fde:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001fe2:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001fe4:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001fe8:	d2f9      	bcs.n	8001fde <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 8001fea:	3b20      	subs	r3, #32
 8001fec:	f113 0f20 	cmn.w	r3, #32
 8001ff0:	d1f2      	bne.n	8001fd8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x20>
 8001ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ff6:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	03db      	lsls	r3, r3, #15
 8002006:	d501      	bpl.n	800200c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 8002008:	f7ff bfd6 	b.w	8001fb8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002014:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002016:	f008 fe3d 	bl	800ac94 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	03db      	lsls	r3, r3, #15
 8002020:	d503      	bpl.n	800202a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002026:	f7ff bfc7 	b.w	8001fb8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
 800202a:	bd08      	pop	{r3, pc}
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8002032:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800203a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800203e:	f3bf 8f6f 	isb	sy
}
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100

08002048 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800204a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002058:	4770      	bx	lr

0800205a <_ZN23ApplicationFontProviderD0Ev>:
 800205a:	b510      	push	{r4, lr}
 800205c:	4604      	mov	r4, r0
 800205e:	2104      	movs	r1, #4
 8002060:	f017 f83d 	bl	80190de <_ZdlPvj>
 8002064:	4620      	mov	r0, r4
 8002066:	bd10      	pop	{r4, pc}

08002068 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8002068:	2901      	cmp	r1, #1
{
 800206a:	b508      	push	{r3, lr}
    switch (typography)
 800206c:	d006      	beq.n	800207c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800206e:	2902      	cmp	r1, #2
 8002070:	d008      	beq.n	8002084 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002072:	b959      	cbnz	r1, 800208c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002074:	f000 fc2c 	bl	80028d0 <_ZN17TypedTextDatabase8getFontsEv>
 8002078:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800207a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800207c:	f000 fc28 	bl	80028d0 <_ZN17TypedTextDatabase8getFontsEv>
 8002080:	6840      	ldr	r0, [r0, #4]
 8002082:	e7fa      	b.n	800207a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002084:	f000 fc24 	bl	80028d0 <_ZN17TypedTextDatabase8getFontsEv>
 8002088:	6880      	ldr	r0, [r0, #8]
 800208a:	e7f6      	b.n	800207a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800208c:	2000      	movs	r0, #0
 800208e:	e7f4      	b.n	800207a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08002090 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002090:	4800      	ldr	r0, [pc, #0]	; (8002094 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002092:	4770      	bx	lr
 8002094:	0801a9d8 	.word	0x0801a9d8

08002098 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002098:	2001      	movs	r0, #1
 800209a:	4770      	bx	lr

0800209c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800209c:	b513      	push	{r0, r1, r4, lr}
 800209e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80020a0:	b151      	cbz	r1, 80020b8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020a2:	6803      	ldr	r3, [r0, #0]
 80020a4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80020a6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80020a8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020ac:	689c      	ldr	r4, [r3, #8]
 80020ae:	f10d 0303 	add.w	r3, sp, #3
 80020b2:	47a0      	blx	r4
        return glyph;
    }
 80020b4:	b002      	add	sp, #8
 80020b6:	bd10      	pop	{r4, pc}
            return 0;
 80020b8:	4608      	mov	r0, r1
 80020ba:	e7fb      	b.n	80020b4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080020bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80020bc:	8940      	ldrh	r0, [r0, #10]
 80020be:	4770      	bx	lr

080020c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80020c0:	8980      	ldrh	r0, [r0, #12]
 80020c2:	4770      	bx	lr

080020c4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80020c4:	8880      	ldrh	r0, [r0, #4]
 80020c6:	4770      	bx	lr

080020c8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80020c8:	7983      	ldrb	r3, [r0, #6]
 80020ca:	8880      	ldrh	r0, [r0, #4]
 80020cc:	4418      	add	r0, r3
    }
 80020ce:	b280      	uxth	r0, r0
 80020d0:	4770      	bx	lr

080020d2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80020d2:	79c0      	ldrb	r0, [r0, #7]
    }
 80020d4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80020d8:	4770      	bx	lr

080020da <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80020da:	79c0      	ldrb	r0, [r0, #7]
    }
 80020dc:	09c0      	lsrs	r0, r0, #7
 80020de:	4770      	bx	lr

080020e0 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80020e0:	4770      	bx	lr

080020e2 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80020e2:	b510      	push	{r4, lr}
 80020e4:	4604      	mov	r4, r0
    }
 80020e6:	2108      	movs	r1, #8
 80020e8:	f016 fff9 	bl	80190de <_ZdlPvj>
 80020ec:	4620      	mov	r0, r4
 80020ee:	bd10      	pop	{r4, pc}

080020f0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80020f0:	4770      	bx	lr

080020f2 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 80020f2:	4770      	bx	lr

080020f4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80020f4:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80020f8:	6808      	ldr	r0, [r1, #0]
 80020fa:	6849      	ldr	r1, [r1, #4]
 80020fc:	c303      	stmia	r3!, {r0, r1}
    }
 80020fe:	4770      	bx	lr

08002100 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002100:	4770      	bx	lr

08002102 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002102:	4770      	bx	lr

08002104 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002104:	6041      	str	r1, [r0, #4]
    }
 8002106:	4770      	bx	lr

08002108 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002108:	4770      	bx	lr
	...

0800210c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800210e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002112:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002116:	2300      	movs	r3, #0
 8002118:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800211c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002120:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	080021cd 	.word	0x080021cd

0800212c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800212c:	2301      	movs	r3, #1
 800212e:	7203      	strb	r3, [r0, #8]
    }
 8002130:	4770      	bx	lr

08002132 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002132:	4770      	bx	lr

08002134 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8002134:	4770      	bx	lr

08002136 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002136:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8002138:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800213a:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 800213c:	68c2      	ldr	r2, [r0, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	1054      	asrs	r4, r2, #1
 8002142:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002146:	07d2      	lsls	r2, r2, #31
 8002148:	bf48      	it	mi
 800214a:	590a      	ldrmi	r2, [r1, r4]
    }
 800214c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8002150:	bf48      	it	mi
 8002152:	58d3      	ldrmi	r3, [r2, r3]
 8002154:	4718      	bx	r3

08002156 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002156:	6843      	ldr	r3, [r0, #4]
 8002158:	b12b      	cbz	r3, 8002166 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800215a:	6883      	ldr	r3, [r0, #8]
 800215c:	b92b      	cbnz	r3, 800216a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800215e:	68c0      	ldr	r0, [r0, #12]
 8002160:	f000 0001 	and.w	r0, r0, #1
 8002164:	4770      	bx	lr
 8002166:	4618      	mov	r0, r3
 8002168:	4770      	bx	lr
 800216a:	2001      	movs	r0, #1
    }
 800216c:	4770      	bx	lr

0800216e <_ZN8touchgfx12NoTransitionD0Ev>:
 800216e:	b510      	push	{r4, lr}
 8002170:	4604      	mov	r4, r0
 8002172:	210c      	movs	r1, #12
 8002174:	f016 ffb3 	bl	80190de <_ZdlPvj>
 8002178:	4620      	mov	r0, r4
 800217a:	bd10      	pop	{r4, pc}

0800217c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800217c:	b510      	push	{r4, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	2110      	movs	r1, #16
 8002182:	f016 ffac 	bl	80190de <_ZdlPvj>
 8002186:	4620      	mov	r0, r4
 8002188:	bd10      	pop	{r4, pc}

0800218a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800218a:	b510      	push	{r4, lr}
 800218c:	4604      	mov	r4, r0
 800218e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002192:	f016 ffa4 	bl	80190de <_ZdlPvj>
 8002196:	4620      	mov	r0, r4
 8002198:	bd10      	pop	{r4, pc}

0800219a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800219a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800219c:	f00b ff62 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80021a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80021a4:	f00c bb26 	b.w	800e7f4 <_ZN8touchgfx11Application10invalidateEv>

080021a8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80021a8:	b510      	push	{r4, lr}
 80021aa:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80021ac:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80021b0:	b158      	cbz	r0, 80021ca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80021b2:	6803      	ldr	r3, [r0, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4798      	blx	r3
 80021b8:	b138      	cbz	r0, 80021ca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80021ba:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80021be:	6803      	ldr	r3, [r0, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 80021ca:	bd10      	pop	{r4, pc}

080021cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80021cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80021d0:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80021d4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80021d6:	68a8      	ldr	r0, [r5, #8]
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4798      	blx	r3
 80021de:	28b3      	cmp	r0, #179	; 0xb3
 80021e0:	d805      	bhi.n	80021ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 80021e2:	4b45      	ldr	r3, [pc, #276]	; (80022f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80021e4:	21a3      	movs	r1, #163	; 0xa3
 80021e6:	4a45      	ldr	r2, [pc, #276]	; (80022fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80021e8:	4845      	ldr	r0, [pc, #276]	; (8002300 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80021ea:	f016 ffa7 	bl	801913c <__assert_func>
 80021ee:	6868      	ldr	r0, [r5, #4]
 80021f0:	6803      	ldr	r3, [r0, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4798      	blx	r3
 80021f6:	280f      	cmp	r0, #15
 80021f8:	d803      	bhi.n	8002202 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80021fc:	21a4      	movs	r1, #164	; 0xa4
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002200:	e7f2      	b.n	80021e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002202:	68e8      	ldr	r0, [r5, #12]
 8002204:	6803      	ldr	r3, [r0, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4798      	blx	r3
 800220a:	280b      	cmp	r0, #11
 800220c:	d803      	bhi.n	8002216 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002210:	21a5      	movs	r1, #165	; 0xa5
 8002212:	4a3a      	ldr	r2, [pc, #232]	; (80022fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002214:	e7e8      	b.n	80021e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8002216:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8002310 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800221a:	f00b ff23 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
 800221e:	f00b ff27 	bl	800e070 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002222:	f8d9 0000 	ldr.w	r0, [r9]
 8002226:	b110      	cbz	r0, 800222e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x62>
        (*currentTrans)->tearDown();
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4798      	blx	r3
    if (*currentTrans)
 800222e:	f8d9 0000 	ldr.w	r0, [r9]
 8002232:	b110      	cbz	r0, 800223a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x6e>
        (*currentTrans)->~Transition();
 8002234:	6803      	ldr	r3, [r0, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4798      	blx	r3
    if (*currentScreen)
 800223a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002314 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 800223e:	f8d8 0000 	ldr.w	r0, [r8]
 8002242:	b110      	cbz	r0, 800224a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
        (*currentScreen)->tearDownScreen();
 8002244:	6803      	ldr	r3, [r0, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	4798      	blx	r3
    if (*currentPresenter)
 800224a:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800224e:	b110      	cbz	r0, 8002256 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentPresenter)->deactivate();
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4798      	blx	r3
    if (*currentScreen)
 8002256:	f8d8 0000 	ldr.w	r0, [r8]
 800225a:	b110      	cbz	r0, 8002262 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentScreen)->~Screen();
 800225c:	6803      	ldr	r3, [r0, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4798      	blx	r3
    if (*currentPresenter)
 8002262:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002266:	b110      	cbz	r0, 800226e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa2>
        (*currentPresenter)->~Presenter();
 8002268:	6803      	ldr	r3, [r0, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800226e:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002270:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002272:	f04f 0b00 	mov.w	fp, #0
 8002276:	6803      	ldr	r3, [r0, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	4798      	blx	r3
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 800227e:	4604      	mov	r4, r0
 8002280:	f8c0 b004 	str.w	fp, [r0, #4]
 8002284:	6003      	str	r3, [r0, #0]
 8002286:	4659      	mov	r1, fp
 8002288:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800228c:	68a8      	ldr	r0, [r5, #8]
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	4798      	blx	r3
 8002294:	4606      	mov	r6, r0
 8002296:	f000 fb77 	bl	8002988 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800229a:	6868      	ldr	r0, [r5, #4]
 800229c:	4659      	mov	r1, fp
 800229e:	6803      	ldr	r3, [r0, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	4798      	blx	r3
 80022a4:	4605      	mov	r5, r0
 80022a6:	4631      	mov	r1, r6
 80022a8:	f000 fb54 	bl	8002954 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80022ac:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80022b0:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80022b4:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80022b8:	b1e5      	cbz	r5, 80022f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
 80022ba:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80022bc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80022c0:	4630      	mov	r0, r6
 80022c2:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80022c4:	f8c5 a008 	str.w	sl, [r5, #8]
 80022c8:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80022ca:	63f5      	str	r5, [r6, #60]	; 0x3c
 80022cc:	4798      	blx	r3
    newPresenter->activate();
 80022ce:	682b      	ldr	r3, [r5, #0]
 80022d0:	4628      	mov	r0, r5
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80022d6:	4621      	mov	r1, r4
 80022d8:	4630      	mov	r0, r6
 80022da:	f00d fa9f 	bl	800f81c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	4620      	mov	r0, r4
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	4798      	blx	r3
    newTransition->invalidate();
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	4620      	mov	r0, r4
 80022ea:	695b      	ldr	r3, [r3, #20]
}
 80022ec:	b001      	add	sp, #4
 80022ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f2:	4718      	bx	r3
    model->bind(newPresenter);
 80022f4:	462b      	mov	r3, r5
 80022f6:	e7e1      	b.n	80022bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf0>
 80022f8:	0801a9fc 	.word	0x0801a9fc
 80022fc:	0801aa8a 	.word	0x0801aa8a
 8002300:	0801ab8e 	.word	0x0801ab8e
 8002304:	0801abe3 	.word	0x0801abe3
 8002308:	0801ac86 	.word	0x0801ac86
 800230c:	0801ad98 	.word	0x0801ad98
 8002310:	2400af34 	.word	0x2400af34
 8002314:	2400af30 	.word	0x2400af30

08002318 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4604      	mov	r4, r0
 800231c:	4617      	mov	r7, r2
 800231e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002320:	f00b fec2 	bl	800e0a8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002326:	2500      	movs	r5, #0
        instance = this;
 8002328:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800232a:	4629      	mov	r1, r5
      model(m)
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800232e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8002332:	4e0f      	ldr	r6, [pc, #60]	; (8002370 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800233a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 800233e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002342:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002344:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800234c:	4628      	mov	r0, r5
 800234e:	f000 fa73 	bl	8002838 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002352:	6833      	ldr	r3, [r6, #0]
 8002354:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002358:	b10a      	cbz	r2, 800235e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800235a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800235c:	b900      	cbnz	r0, 8002360 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 800235e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002360:	f011 ff11 	bl	8014186 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002364:	4620      	mov	r0, r4
 8002366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002368:	2400af40 	.word	0x2400af40
 800236c:	0801ad4c 	.word	0x0801ad4c
 8002370:	2400aef4 	.word	0x2400aef4
 8002374:	0801ad34 	.word	0x0801ad34

08002378 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800237a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800237e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002382:	2300      	movs	r3, #0
 8002384:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 8002388:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800238c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	080021cd 	.word	0x080021cd

08002398 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002398:	6a00      	ldr	r0, [r0, #32]
 800239a:	4770      	bx	lr

0800239c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800239c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800239e:	4770      	bx	lr

080023a0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80023a0:	4770      	bx	lr

080023a2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80023a2:	888b      	ldrh	r3, [r1, #4]
 80023a4:	6980      	ldr	r0, [r0, #24]
 80023a6:	0adb      	lsrs	r3, r3, #11
 80023a8:	680a      	ldr	r2, [r1, #0]
 80023aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80023ae:	4410      	add	r0, r2
 80023b0:	4770      	bx	lr

080023b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80023b2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80023b4:	b1c2      	cbz	r2, 80023e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80023b6:	7b13      	ldrb	r3, [r2, #12]
 80023b8:	b1b3      	cbz	r3, 80023e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80023ba:	7b54      	ldrb	r4, [r2, #13]
 80023bc:	7ad2      	ldrb	r2, [r2, #11]
 80023be:	0224      	lsls	r4, r4, #8
 80023c0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80023c4:	4314      	orrs	r4, r2
 80023c6:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80023c8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80023ca:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80023ce:	8813      	ldrh	r3, [r2, #0]
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d102      	bne.n	80023da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80023d4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80023d8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80023da:	d805      	bhi.n	80023e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80023dc:	3801      	subs	r0, #1
 80023de:	3204      	adds	r2, #4
 80023e0:	b280      	uxth	r0, r0
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d1f3      	bne.n	80023ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80023e6:	e7f7      	b.n	80023d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7f5      	b.n	80023d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080023ec <_ZN8touchgfx13GeneratedFontD0Ev>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
 80023f0:	2128      	movs	r1, #40	; 0x28
 80023f2:	f016 fe74 	bl	80190de <_ZdlPvj>
 80023f6:	4620      	mov	r0, r4
 80023f8:	bd10      	pop	{r4, pc}
	...

080023fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80023fc:	b530      	push	{r4, r5, lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002402:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8002406:	9506      	str	r5, [sp, #24]
 8002408:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800240c:	9505      	str	r5, [sp, #20]
 800240e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002412:	9504      	str	r5, [sp, #16]
 8002414:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002418:	9503      	str	r5, [sp, #12]
 800241a:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800241e:	9502      	str	r5, [sp, #8]
 8002420:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8002424:	9501      	str	r5, [sp, #4]
 8002426:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800242a:	9500      	str	r5, [sp, #0]
 800242c:	f00c fe56 	bl	800f0dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8002432:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002438:	61a3      	str	r3, [r4, #24]
 800243a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800243c:	61e3      	str	r3, [r4, #28]
 800243e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002440:	6223      	str	r3, [r4, #32]
 8002442:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002444:	6263      	str	r3, [r4, #36]	; 0x24
}
 8002446:	b009      	add	sp, #36	; 0x24
 8002448:	bd30      	pop	{r4, r5, pc}
 800244a:	bf00      	nop
 800244c:	0801adbc 	.word	0x0801adbc

08002450 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002450:	2000      	movs	r0, #0
 8002452:	4770      	bx	lr

08002454 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002454:	8081      	strh	r1, [r0, #4]
    }
 8002456:	4770      	bx	lr

08002458 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002458:	80c1      	strh	r1, [r0, #6]
    }
 800245a:	4770      	bx	lr

0800245c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800245c:	8101      	strh	r1, [r0, #8]
    }
 800245e:	4770      	bx	lr

08002460 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002460:	8141      	strh	r1, [r0, #10]
    }
 8002462:	4770      	bx	lr

08002464 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002464:	4770      	bx	lr

08002466 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 8002466:	4770      	bx	lr

08002468 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002468:	4770      	bx	lr

0800246a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 800246a:	4770      	bx	lr

0800246c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800246c:	4770      	bx	lr

0800246e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800246e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002470:	88c4      	ldrh	r4, [r0, #6]
 8002472:	6803      	ldr	r3, [r0, #0]
 8002474:	1b12      	subs	r2, r2, r4
 8002476:	8884      	ldrh	r4, [r0, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	1b09      	subs	r1, r1, r4
 800247c:	b212      	sxth	r2, r2
    }
 800247e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002482:	b209      	sxth	r1, r1
 8002484:	4718      	bx	r3

08002486 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800248a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002496:	6010      	str	r0, [r2, #0]
    }
 8002498:	4770      	bx	lr

0800249a <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800249a:	4770      	bx	lr

0800249c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800249c:	4770      	bx	lr

0800249e <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800249e:	4770      	bx	lr

080024a0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80024a0:	4770      	bx	lr

080024a2 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 80024a2:	4770      	bx	lr

080024a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80024a4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80024a8:	b11a      	cbz	r2, 80024b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80024aa:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80024ae:	b102      	cbz	r2, 80024b2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80024b0:	6018      	str	r0, [r3, #0]
        }
    }
 80024b2:	4770      	bx	lr

080024b4 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80024b4:	4770      	bx	lr

080024b6 <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 80024b6:	4770      	bx	lr

080024b8 <_ZN15Screen1ViewBaseD0Ev>:
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4604      	mov	r4, r0
 80024bc:	21b4      	movs	r1, #180	; 0xb4
 80024be:	f016 fe0e 	bl	80190de <_ZdlPvj>
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd10      	pop	{r4, pc}

080024c6 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80024c6:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	4604      	mov	r4, r0
        setX(x);
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80024ce:	4615      	mov	r5, r2
        setX(x);
 80024d0:	4798      	blx	r3
        setY(y);
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80024da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80024de:	4718      	bx	r3

080024e0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 80024e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024e4:	4604      	mov	r4, r0
 80024e6:	b089      	sub	sp, #36	; 0x24
        : presenter(0)
 80024e8:	f00c ffec 	bl	800f4c4 <_ZN8touchgfx6ScreenC1Ev>
 80024ec:	2500      	movs	r5, #0
 80024ee:	4626      	mov	r6, r4
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <_ZN15Screen1ViewBaseC1Ev+0x100>)
 80024f2:	63e5      	str	r5, [r4, #60]	; 0x3c
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
        : x(x), y(y), width(width), height(height)
 80024f4:	f04f 38ff 	mov.w	r8, #4294967295
 80024f8:	f846 3b40 	str.w	r3, [r6], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <_ZN15Screen1ViewBaseC1Ev+0x104>)
        setXY(x, y);
 8002500:	4629      	mov	r1, r5
        : typedTextId(id)
 8002502:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80025ec <_ZN15Screen1ViewBaseC1Ev+0x10c>
 8002506:	4630      	mov	r0, r6
 8002508:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800250c:	462a      	mov	r2, r5
          visible(true)
 800250e:	6625      	str	r5, [r4, #96]	; 0x60
 8002510:	f104 076c 	add.w	r7, r4, #108	; 0x6c
        : color(col)
 8002514:	66a5      	str	r5, [r4, #104]	; 0x68
 8002516:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
 800251a:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800251e:	f8a4 50a4 	strh.w	r5, [r4, #164]	; 0xa4
        : x(x), y(y), width(width), height(height)
 8002522:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
        : x(0), y(0), width(0), height(0)
 8002526:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 800252a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8002532:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <_ZN15Screen1ViewBaseC1Ev+0x108>)
 8002538:	66e3      	str	r3, [r4, #108]	; 0x6c
 800253a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800253e:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8002542:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8002546:	e9c4 852b 	strd	r8, r5, [r4, #172]	; 0xac
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800254a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800254e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002552:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8002556:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 800255a:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 800255e:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 8002562:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8002566:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        setXY(x, y);
 800256a:	f7ff ffac 	bl	80024c6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800256e:	4630      	mov	r0, r6
 8002570:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002574:	f7ff ff72 	bl	800245c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002578:	4630      	mov	r0, r6
 800257a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800257e:	f7ff ff6f 	bl	8002460 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8002582:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    textArea1.setXY(354, 228);
 8002586:	22e4      	movs	r2, #228	; 0xe4
 8002588:	4638      	mov	r0, r7
 800258a:	66a3      	str	r3, [r4, #104]	; 0x68
 800258c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8002590:	f7ff ff99 	bl	80024c6 <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8002594:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
        boundingArea = calculateBoundingArea();
 8002598:	f10d 0808 	add.w	r8, sp, #8
 800259c:	4639      	mov	r1, r7
        linespace = space;
 800259e:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
        boundingArea = calculateBoundingArea();
 80025a2:	4640      	mov	r0, r8
 80025a4:	f009 fcb2 	bl	800bf0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80025a8:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 80025ac:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80025b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TA9M));
 80025b4:	a906      	add	r1, sp, #24
 80025b6:	4638      	mov	r0, r7
 80025b8:	f8cd 9018 	str.w	r9, [sp, #24]
 80025bc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80025c0:	f009 fff6 	bl	800c5b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80025c4:	1d20      	adds	r0, r4, #4
 80025c6:	4631      	mov	r1, r6
 80025c8:	9001      	str	r0, [sp, #4]
 80025ca:	f008 f90b 	bl	800a7e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80025ce:	9801      	ldr	r0, [sp, #4]
 80025d0:	4639      	mov	r1, r7
 80025d2:	f008 f907 	bl	800a7e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80025d6:	4620      	mov	r0, r4
 80025d8:	b009      	add	sp, #36	; 0x24
 80025da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025de:	bf00      	nop
 80025e0:	0801ae14 	.word	0x0801ae14
 80025e4:	0801beec 	.word	0x0801beec
 80025e8:	0801be2c 	.word	0x0801be2c
 80025ec:	0801a9f4 	.word	0x0801a9f4

080025f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80025f0:	4770      	bx	lr
	...

080025f4 <_Z23getFont_verdana_10_4bppv>:
{
 80025f4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80025f6:	4d15      	ldr	r5, [pc, #84]	; (800264c <_Z23getFont_verdana_10_4bppv+0x58>)
{
 80025f8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80025fa:	782c      	ldrb	r4, [r5, #0]
 80025fc:	f3bf 8f5b 	dmb	ish
 8002600:	f014 0401 	ands.w	r4, r4, #1
 8002604:	d11e      	bne.n	8002644 <_Z23getFont_verdana_10_4bppv+0x50>
 8002606:	4628      	mov	r0, r5
 8002608:	f016 fd6b 	bl	80190e2 <__cxa_guard_acquire>
 800260c:	b1d0      	cbz	r0, 8002644 <_Z23getFont_verdana_10_4bppv+0x50>
 800260e:	233f      	movs	r3, #63	; 0x3f
 8002610:	2201      	movs	r2, #1
 8002612:	490f      	ldr	r1, [pc, #60]	; (8002650 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8002614:	9307      	str	r3, [sp, #28]
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002618:	480f      	ldr	r0, [pc, #60]	; (8002658 <_Z23getFont_verdana_10_4bppv+0x64>)
 800261a:	9306      	str	r3, [sp, #24]
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <_Z23getFont_verdana_10_4bppv+0x68>)
 800261e:	9408      	str	r4, [sp, #32]
 8002620:	9403      	str	r4, [sp, #12]
 8002622:	9400      	str	r4, [sp, #0]
 8002624:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002628:	2304      	movs	r3, #4
 800262a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800262e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002632:	230a      	movs	r3, #10
 8002634:	f7ff fee2 	bl	80023fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800263a:	f016 fd9d 	bl	8019178 <atexit>
 800263e:	4628      	mov	r0, r5
 8002640:	f016 fd5b 	bl	80190fa <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002644:	4804      	ldr	r0, [pc, #16]	; (8002658 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002646:	b00d      	add	sp, #52	; 0x34
 8002648:	bd30      	pop	{r4, r5, pc}
 800264a:	bf00      	nop
 800264c:	240014f0 	.word	0x240014f0
 8002650:	0801d9a8 	.word	0x0801d9a8
 8002654:	0801da38 	.word	0x0801da38
 8002658:	240014f4 	.word	0x240014f4
 800265c:	0801da44 	.word	0x0801da44
 8002660:	080025f1 	.word	0x080025f1

08002664 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002664:	4770      	bx	lr
	...

08002668 <_Z23getFont_verdana_20_4bppv>:
{
 8002668:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800266a:	4d15      	ldr	r5, [pc, #84]	; (80026c0 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 800266c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 8, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800266e:	782c      	ldrb	r4, [r5, #0]
 8002670:	f3bf 8f5b 	dmb	ish
 8002674:	f014 0401 	ands.w	r4, r4, #1
 8002678:	d11f      	bne.n	80026ba <_Z23getFont_verdana_20_4bppv+0x52>
 800267a:	4628      	mov	r0, r5
 800267c:	f016 fd31 	bl	80190e2 <__cxa_guard_acquire>
 8002680:	b1d8      	cbz	r0, 80026ba <_Z23getFont_verdana_20_4bppv+0x52>
 8002682:	233f      	movs	r3, #63	; 0x3f
 8002684:	2208      	movs	r2, #8
 8002686:	490f      	ldr	r1, [pc, #60]	; (80026c4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8002688:	9307      	str	r3, [sp, #28]
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800268c:	480f      	ldr	r0, [pc, #60]	; (80026cc <_Z23getFont_verdana_20_4bppv+0x64>)
 800268e:	9306      	str	r3, [sp, #24]
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002692:	9408      	str	r4, [sp, #32]
 8002694:	9305      	str	r3, [sp, #20]
 8002696:	2301      	movs	r3, #1
 8002698:	e9cd 4303 	strd	r4, r3, [sp, #12]
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2304      	movs	r3, #4
 80026a0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80026a4:	e9cd 4300 	strd	r4, r3, [sp]
 80026a8:	2314      	movs	r3, #20
 80026aa:	f7ff fea7 	bl	80023fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80026ae:	4809      	ldr	r0, [pc, #36]	; (80026d4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80026b0:	f016 fd62 	bl	8019178 <atexit>
 80026b4:	4628      	mov	r0, r5
 80026b6:	f016 fd20 	bl	80190fa <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80026ba:	4804      	ldr	r0, [pc, #16]	; (80026cc <_Z23getFont_verdana_20_4bppv+0x64>)
 80026bc:	b00d      	add	sp, #52	; 0x34
 80026be:	bd30      	pop	{r4, r5, pc}
 80026c0:	2400151c 	.word	0x2400151c
 80026c4:	0801d9b8 	.word	0x0801d9b8
 80026c8:	0801da3c 	.word	0x0801da3c
 80026cc:	24001520 	.word	0x24001520
 80026d0:	0801da48 	.word	0x0801da48
 80026d4:	08002665 	.word	0x08002665

080026d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80026d8:	4770      	bx	lr
	...

080026dc <_Z23getFont_verdana_40_4bppv>:
{
 80026dc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80026de:	4d15      	ldr	r5, [pc, #84]	; (8002734 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 80026e0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80026e2:	782c      	ldrb	r4, [r5, #0]
 80026e4:	f3bf 8f5b 	dmb	ish
 80026e8:	f014 0401 	ands.w	r4, r4, #1
 80026ec:	d11e      	bne.n	800272c <_Z23getFont_verdana_40_4bppv+0x50>
 80026ee:	4628      	mov	r0, r5
 80026f0:	f016 fcf7 	bl	80190e2 <__cxa_guard_acquire>
 80026f4:	b1d0      	cbz	r0, 800272c <_Z23getFont_verdana_40_4bppv+0x50>
 80026f6:	233f      	movs	r3, #63	; 0x3f
 80026f8:	2201      	movs	r2, #1
 80026fa:	490f      	ldr	r1, [pc, #60]	; (8002738 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80026fc:	9307      	str	r3, [sp, #28]
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <_Z23getFont_verdana_40_4bppv+0x60>)
 8002700:	480f      	ldr	r0, [pc, #60]	; (8002740 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002702:	9306      	str	r3, [sp, #24]
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002706:	9408      	str	r4, [sp, #32]
 8002708:	9403      	str	r4, [sp, #12]
 800270a:	9400      	str	r4, [sp, #0]
 800270c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002710:	2304      	movs	r3, #4
 8002712:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800271a:	2328      	movs	r3, #40	; 0x28
 800271c:	f7ff fe6e 	bl	80023fc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002722:	f016 fd29 	bl	8019178 <atexit>
 8002726:	4628      	mov	r0, r5
 8002728:	f016 fce7 	bl	80190fa <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <_Z23getFont_verdana_40_4bppv+0x64>)
 800272e:	b00d      	add	sp, #52	; 0x34
 8002730:	bd30      	pop	{r4, r5, pc}
 8002732:	bf00      	nop
 8002734:	24001548 	.word	0x24001548
 8002738:	0801da28 	.word	0x0801da28
 800273c:	0801da40 	.word	0x0801da40
 8002740:	2400154c 	.word	0x2400154c
 8002744:	0801da4c 	.word	0x0801da4c
 8002748:	080026d9 	.word	0x080026d9

0800274c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 800274c:	2000      	movs	r0, #0
 800274e:	4770      	bx	lr

08002750 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002750:	2000      	movs	r0, #0
 8002752:	4770      	bx	lr

08002754 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002754:	b40e      	push	{r1, r2, r3}
 8002756:	b503      	push	{r0, r1, lr}
 8002758:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800275a:	2100      	movs	r1, #0
{
 800275c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002760:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002762:	f00c faeb 	bl	800ed3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002766:	b002      	add	sp, #8
 8002768:	f85d eb04 	ldr.w	lr, [sp], #4
 800276c:	b003      	add	sp, #12
 800276e:	4770      	bx	lr

08002770 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002770:	b40c      	push	{r2, r3}
 8002772:	b507      	push	{r0, r1, r2, lr}
 8002774:	ab04      	add	r3, sp, #16
 8002776:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800277a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800277c:	f00c fade 	bl	800ed3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002780:	b003      	add	sp, #12
 8002782:	f85d eb04 	ldr.w	lr, [sp], #4
 8002786:	b002      	add	sp, #8
 8002788:	4770      	bx	lr
	...

0800278c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800278c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800278e:	b510      	push	{r4, lr}
 8002790:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002792:	b373      	cbz	r3, 80027f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002794:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002796:	b92b      	cbnz	r3, 80027a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800279a:	21c0      	movs	r1, #192	; 0xc0
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800279e:	4819      	ldr	r0, [pc, #100]	; (8002804 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80027a0:	f016 fccc 	bl	801913c <__assert_func>
            return buffer[pos];
 80027a4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80027a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80027ac:	b30b      	cbz	r3, 80027f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80027ae:	f00d fdcf 	bl	8010350 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80027b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d803      	bhi.n	80027c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80027ba:	21c5      	movs	r1, #197	; 0xc5
 80027bc:	4a13      	ldr	r2, [pc, #76]	; (800280c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80027be:	e7ee      	b.n	800279e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80027c0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80027c2:	f640 103f 	movw	r0, #2367	; 0x93f
 80027c6:	1c53      	adds	r3, r2, #1
 80027c8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80027ca:	2b09      	cmp	r3, #9
 80027cc:	4619      	mov	r1, r3
 80027ce:	bf88      	it	hi
 80027d0:	f1a3 010a 	subhi.w	r1, r3, #10
 80027d4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80027d8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80027da:	4281      	cmp	r1, r0
 80027dc:	d109      	bne.n	80027f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80027de:	2b0a      	cmp	r3, #10
 80027e0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80027e4:	bf28      	it	cs
 80027e6:	2300      	movcs	r3, #0
            return buffer[pos];
 80027e8:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80027ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80027ee:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80027f0:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80027f2:	4620      	mov	r0, r4
}
 80027f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80027f8:	f00d bc8e 	b.w	8010118 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80027fc:	0801ae40 	.word	0x0801ae40
 8002800:	0801ae49 	.word	0x0801ae49
 8002804:	0801aef4 	.word	0x0801aef4
 8002808:	0801af4c 	.word	0x0801af4c
 800280c:	0801af5a 	.word	0x0801af5a

08002810 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002810:	f00d bc3a 	b.w	8010088 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002814 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8002814:	b510      	push	{r4, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	ac02      	add	r4, sp, #8
 800281a:	e884 0006 	stmia.w	r4, {r1, r2}
 800281e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8002820:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002822:	4621      	mov	r1, r4
    va_start(pArg, format);
 8002824:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	9b08      	ldr	r3, [sp, #32]
 800282e:	f00a ff3a 	bl	800d6a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8002832:	b006      	add	sp, #24
 8002834:	bd10      	pop	{r4, pc}
	...

08002838 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002838:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800283a:	bb18      	cbnz	r0, 8002884 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800283e:	4813      	ldr	r0, [pc, #76]	; (800288c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4913      	ldr	r1, [pc, #76]	; (8002890 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002844:	b1b3      	cbz	r3, 8002874 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002846:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002848:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800284a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800284c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800284e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	441a      	add	r2, r3
 8002854:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002858:	2200      	movs	r2, #0
 800285a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800285c:	f000 f838 	bl	80028d0 <_ZN17TypedTextDatabase8getFontsEv>
 8002860:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002862:	f000 f833 	bl	80028cc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002868:	601c      	str	r4, [r3, #0]
        fonts = f;
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800286c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002870:	8018      	strh	r0, [r3, #0]
    }
}
 8002872:	e007      	b.n	8002884 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002876:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800287a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800287e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8002880:	2c00      	cmp	r4, #0
 8002882:	d1e8      	bne.n	8002856 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8002884:	bd38      	pop	{r3, r4, r5, pc}
 8002886:	bf00      	nop
 8002888:	24001574 	.word	0x24001574
 800288c:	24001578 	.word	0x24001578
 8002890:	2400157c 	.word	0x2400157c
 8002894:	24001580 	.word	0x24001580
 8002898:	2400af44 	.word	0x2400af44
 800289c:	2400af4c 	.word	0x2400af4c
 80028a0:	2400af48 	.word	0x2400af48
 80028a4:	90000004 	.word	0x90000004
 80028a8:	90000000 	.word	0x90000000
 80028ac:	9000001c 	.word	0x9000001c

080028b0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	2400157c 	.word	0x2400157c
 80028c8:	24001578 	.word	0x24001578

080028cc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80028cc:	2001      	movs	r0, #1
 80028ce:	4770      	bx	lr

080028d0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80028d0:	4800      	ldr	r0, [pc, #0]	; (80028d4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80028d2:	4770      	bx	lr
 80028d4:	24001584 	.word	0x24001584

080028d8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80028d8:	b510      	push	{r4, lr}
};
 80028da:	4c05      	ldr	r4, [pc, #20]	; (80028f0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80028dc:	f7ff fec4 	bl	8002668 <_Z23getFont_verdana_20_4bppv>
};
 80028e0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80028e2:	f7ff fefb 	bl	80026dc <_Z23getFont_verdana_40_4bppv>
};
 80028e6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80028e8:	f7ff fe84 	bl	80025f4 <_Z23getFont_verdana_10_4bppv>
};
 80028ec:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80028ee:	bd10      	pop	{r4, pc}
 80028f0:	24001584 	.word	0x24001584

080028f4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80028f4:	4770      	bx	lr

080028f6 <_ZN19FrontendApplicationD0Ev>:
 80028f6:	b510      	push	{r4, lr}
 80028f8:	4604      	mov	r4, r0
 80028fa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80028fe:	f016 fbee 	bl	80190de <_ZdlPvj>
 8002902:	4620      	mov	r0, r4
 8002904:	bd10      	pop	{r4, pc}

08002906 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002906:	b510      	push	{r4, lr}
 8002908:	4604      	mov	r4, r0
    {
        model.tick();
 800290a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800290e:	f000 f812 	bl	8002936 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002912:	4620      	mov	r0, r4
    }
 8002914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8002918:	f00b ba24 	b.w	800dd64 <_ZN8touchgfx11Application15handleTickEventEv>

0800291c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800291c:	b510      	push	{r4, lr}
 800291e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002920:	f7ff fcfa 	bl	8002318 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8002926:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8002928:	6023      	str	r3, [r4, #0]
}
 800292a:	bd10      	pop	{r4, pc}
 800292c:	0801b034 	.word	0x0801b034

08002930 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002930:	2200      	movs	r2, #0
 8002932:	6002      	str	r2, [r0, #0]
{

}
 8002934:	4770      	bx	lr

08002936 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002936:	4770      	bx	lr

08002938 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8002938:	4770      	bx	lr

0800293a <_ZThn4_N16Screen1PresenterD1Ev>:
 800293a:	3804      	subs	r0, #4
 800293c:	4770      	bx	lr

0800293e <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800293e:	4770      	bx	lr

08002940 <_ZN16Screen1PresenterD0Ev>:
 8002940:	b510      	push	{r4, lr}
 8002942:	4604      	mov	r4, r0
 8002944:	2110      	movs	r1, #16
 8002946:	f016 fbca 	bl	80190de <_ZdlPvj>
 800294a:	4620      	mov	r0, r4
 800294c:	bd10      	pop	{r4, pc}

0800294e <_ZThn4_N16Screen1PresenterD0Ev>:
 800294e:	f1a0 0004 	sub.w	r0, r0, #4
 8002952:	e7f5      	b.n	8002940 <_ZN16Screen1PresenterD0Ev>

08002954 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8002954:	2200      	movs	r2, #0
    : view(v)
 8002956:	60c1      	str	r1, [r0, #12]
 8002958:	6082      	str	r2, [r0, #8]
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 800295c:	b510      	push	{r4, lr}
    : view(v)
 800295e:	f102 0408 	add.w	r4, r2, #8
 8002962:	3220      	adds	r2, #32
 8002964:	6004      	str	r4, [r0, #0]
 8002966:	6042      	str	r2, [r0, #4]
}
 8002968:	bd10      	pop	{r4, pc}
 800296a:	bf00      	nop
 800296c:	0801b078 	.word	0x0801b078

08002970 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8002970:	4770      	bx	lr

08002972 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8002972:	4770      	bx	lr

08002974 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8002974:	f7ff bd9f 	b.w	80024b6 <_ZN15Screen1ViewBase11setupScreenEv>

08002978 <_ZN11Screen1ViewD0Ev>:
 8002978:	b510      	push	{r4, lr}
 800297a:	4604      	mov	r4, r0
 800297c:	21b4      	movs	r1, #180	; 0xb4
 800297e:	f016 fbae 	bl	80190de <_ZdlPvj>
 8002982:	4620      	mov	r0, r4
 8002984:	bd10      	pop	{r4, pc}
	...

08002988 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
 800298c:	f7ff fda8 	bl	80024e0 <_ZN15Screen1ViewBaseC1Ev>
 8002990:	4b01      	ldr	r3, [pc, #4]	; (8002998 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8002992:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8002994:	6023      	str	r3, [r4, #0]
}
 8002996:	bd10      	pop	{r4, pc}
 8002998:	0801b0a8 	.word	0x0801b0a8

0800299c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800299c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800299e:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 80029a2:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80029a4:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80029a6:	2302      	movs	r3, #2
 80029a8:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80029aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029ae:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80029b2:	4770      	bx	lr

080029b4 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80029b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80029b8:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80029ba:	bf04      	itt	eq
 80029bc:	2300      	moveq	r3, #0
 80029be:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 80029c2:	2000      	movs	r0, #0
 80029c4:	4770      	bx	lr

080029c6 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80029c6:	2000      	movs	r0, #0
 80029c8:	4770      	bx	lr

080029ca <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80029ca:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80029cc:	6904      	ldr	r4, [r0, #16]
 80029ce:	8900      	ldrh	r0, [r0, #8]
 80029d0:	46a4      	mov	ip, r4
}
 80029d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80029d6:	4760      	bx	ip

080029d8 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80029d8:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80029da:	68c4      	ldr	r4, [r0, #12]
 80029dc:	8900      	ldrh	r0, [r0, #8]
 80029de:	46a4      	mov	ip, r4
}
 80029e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80029e4:	4760      	bx	ip

080029e6 <FT6X06_GestureConfig>:
{
 80029e6:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80029ea:	f100 0818 	add.w	r8, r0, #24
{
 80029ee:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80029f0:	7809      	ldrb	r1, [r1, #0]
 80029f2:	4640      	mov	r0, r8
 80029f4:	f000 f918 	bl	8002c28 <ft6x06_radian_value>
 80029f8:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80029fa:	f899 1004 	ldrb.w	r1, [r9, #4]
 80029fe:	4640      	mov	r0, r8
 8002a00:	f000 f91e 	bl	8002c40 <ft6x06_offset_left_right>
 8002a04:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8002a06:	f899 1008 	ldrb.w	r1, [r9, #8]
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f000 f924 	bl	8002c58 <ft6x06_offset_up_down>
 8002a10:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002a12:	f899 100c 	ldrb.w	r1, [r9, #12]
 8002a16:	4640      	mov	r0, r8
 8002a18:	f000 f92a 	bl	8002c70 <ft6x06_disatnce_left_right>
 8002a1c:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002a1e:	f899 1010 	ldrb.w	r1, [r9, #16]
 8002a22:	4640      	mov	r0, r8
 8002a24:	f000 f930 	bl	8002c88 <ft6x06_distance_up_down>
 8002a28:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8002a2a:	f899 1014 	ldrb.w	r1, [r9, #20]
 8002a2e:	4640      	mov	r0, r8
 8002a30:	f000 f936 	bl	8002ca0 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8002a34:	42c5      	cmn	r5, r0
}
 8002a36:	bf14      	ite	ne
 8002a38:	f04f 30ff 	movne.w	r0, #4294967295
 8002a3c:	2000      	moveq	r0, #0
 8002a3e:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08002a42 <FT6X06_ReadID>:
{
 8002a42:	b513      	push	{r0, r1, r4, lr}
 8002a44:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8002a46:	3018      	adds	r0, #24
 8002a48:	f10d 0107 	add.w	r1, sp, #7
 8002a4c:	f000 f940 	bl	8002cd0 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8002a50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a54:	6023      	str	r3, [r4, #0]
}
 8002a56:	b002      	add	sp, #8
 8002a58:	bd10      	pop	{r4, pc}

08002a5a <FT6X06_GetState>:
{
 8002a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8002a5c:	f100 0518 	add.w	r5, r0, #24
{
 8002a60:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8002a62:	a901      	add	r1, sp, #4
 8002a64:	4628      	mov	r0, r5
 8002a66:	f000 f8d2 	bl	8002c0e <ft6x06_td_status>
 8002a6a:	bb08      	cbnz	r0, 8002ab0 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8002a6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	bf98      	it	ls
 8002a74:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8002a76:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8002a78:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	eb0d 0203 	add.w	r2, sp, r3
 8002a82:	f000 f8b1 	bl	8002be8 <ft6x06_read_reg>
 8002a86:	b9b0      	cbnz	r0, 8002ab6 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8002a88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a8c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a96:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8002a98:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8002a9c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8002a9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60a3      	str	r3, [r4, #8]
}
 8002aac:	b003      	add	sp, #12
 8002aae:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	e7df      	b.n	8002a76 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8002ab6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002aba:	e7f7      	b.n	8002aac <FT6X06_GetState+0x52>

08002abc <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8002abc:	3018      	adds	r0, #24
 8002abe:	f000 b8a1 	b.w	8002c04 <ft6x06_gest_id>

08002ac2 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	3018      	adds	r0, #24
 8002ac6:	f000 b8f7 	b.w	8002cb8 <ft6x06_g_mode>

08002aca <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8002aca:	2100      	movs	r1, #0
 8002acc:	3018      	adds	r0, #24
 8002ace:	f000 b8f3 	b.w	8002cb8 <ft6x06_g_mode>

08002ad2 <FT6X06_Init>:
{
 8002ad2:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8002ad4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002ad8:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8002ada:	b96b      	cbnz	r3, 8002af8 <FT6X06_Init+0x26>
    pObj->IO.Init();
 8002adc:	6803      	ldr	r3, [r0, #0]
 8002ade:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f7ff fff2 	bl	8002aca <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8002ae6:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8002ae8:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8002aec:	bf18      	it	ne
 8002aee:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8002af0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 8002af4:	4240      	negs	r0, r0
}
 8002af6:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 8002af8:	2000      	movs	r0, #0
  return ret;
 8002afa:	e7fc      	b.n	8002af6 <FT6X06_Init+0x24>

08002afc <FT6X06_ClearIT>:
 8002afc:	2000      	movs	r0, #0
 8002afe:	4770      	bx	lr

08002b00 <FT6X06_GetMultiTouchState>:
{
 8002b00:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8002b02:	f100 0518 	add.w	r5, r0, #24
{
 8002b06:	b085      	sub	sp, #20
 8002b08:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	a901      	add	r1, sp, #4
 8002b0e:	f000 f87e 	bl	8002c0e <ft6x06_td_status>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d145      	bne.n	8002ba2 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8002b16:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	bf98      	it	ls
 8002b1e:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8002b20:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8002b22:	230c      	movs	r3, #12
 8002b24:	aa01      	add	r2, sp, #4
 8002b26:	2103      	movs	r1, #3
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f000 f85d 	bl	8002be8 <ft6x06_read_reg>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d13a      	bne.n	8002ba8 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8002b32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002b36:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002b3a:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8002b3c:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8002b3e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8002b42:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8002b44:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8002b46:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8002b4a:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8002b4e:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8002b50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b5a:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8002b5c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8002b60:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8002b62:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002b66:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8002b68:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8002b70:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8002b72:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8002b74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8002b78:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8002b7a:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8002b7c:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8002b80:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8002b82:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8002b90:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002b94:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8002b96:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002b9e:	b005      	add	sp, #20
 8002ba0:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8002ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba6:	e7bb      	b.n	8002b20 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8002bac:	e7f7      	b.n	8002b9e <FT6X06_GetMultiTouchState+0x9e>
	...

08002bb0 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8002bb0:	b190      	cbz	r0, 8002bd8 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8002bb2:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8002bb4:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002bb6:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8002bb8:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8002bba:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8002bbc:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002bbe:	68ca      	ldr	r2, [r1, #12]
 8002bc0:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002bc2:	690a      	ldr	r2, [r1, #16]
 8002bc4:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002bc6:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8002bc8:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8002bca:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <FT6X06_RegisterBusIO+0x30>)
 8002bce:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <FT6X06_RegisterBusIO+0x34>)
 8002bd2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8002bd4:	b103      	cbz	r3, 8002bd8 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8002bd6:	4718      	bx	r3
}
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	080029cb 	.word	0x080029cb
 8002be4:	080029d9 	.word	0x080029d9

08002be8 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002be8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002bea:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8002bee:	46a4      	mov	ip, r4
}
 8002bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002bf4:	4760      	bx	ip

08002bf6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002bf6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002bf8:	6804      	ldr	r4, [r0, #0]
 8002bfa:	6880      	ldr	r0, [r0, #8]
 8002bfc:	46a4      	mov	ip, r4
}
 8002bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002c02:	4760      	bx	ip

08002c04 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8002c04:	2301      	movs	r3, #1
{
 8002c06:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7ff bfed 	b.w	8002be8 <ft6x06_read_reg>

08002c0e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8002c0e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8002c10:	460a      	mov	r2, r1
{
 8002c12:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8002c14:	2301      	movs	r3, #1
 8002c16:	2102      	movs	r1, #2
 8002c18:	f7ff ffe6 	bl	8002be8 <ft6x06_read_reg>
  
  if(ret == 0)
 8002c1c:	b918      	cbnz	r0, 8002c26 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8002c1e:	7823      	ldrb	r3, [r4, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8002c26:	bd10      	pop	{r4, pc}

08002c28 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002c28:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8002c2a:	2301      	movs	r3, #1
{
 8002c2c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8002c30:	f10d 0207 	add.w	r2, sp, #7
 8002c34:	2191      	movs	r1, #145	; 0x91
 8002c36:	f7ff ffde 	bl	8002bf6 <ft6x06_write_reg>
}
 8002c3a:	b003      	add	sp, #12
 8002c3c:	f85d fb04 	ldr.w	pc, [sp], #4

08002c40 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002c40:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8002c42:	2301      	movs	r3, #1
{
 8002c44:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8002c48:	f10d 0207 	add.w	r2, sp, #7
 8002c4c:	2192      	movs	r1, #146	; 0x92
 8002c4e:	f7ff ffd2 	bl	8002bf6 <ft6x06_write_reg>
}
 8002c52:	b003      	add	sp, #12
 8002c54:	f85d fb04 	ldr.w	pc, [sp], #4

08002c58 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002c58:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8002c5a:	2301      	movs	r3, #1
{
 8002c5c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8002c60:	f10d 0207 	add.w	r2, sp, #7
 8002c64:	2193      	movs	r1, #147	; 0x93
 8002c66:	f7ff ffc6 	bl	8002bf6 <ft6x06_write_reg>
}
 8002c6a:	b003      	add	sp, #12
 8002c6c:	f85d fb04 	ldr.w	pc, [sp], #4

08002c70 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002c70:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8002c72:	2301      	movs	r3, #1
{
 8002c74:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8002c78:	f10d 0207 	add.w	r2, sp, #7
 8002c7c:	2194      	movs	r1, #148	; 0x94
 8002c7e:	f7ff ffba 	bl	8002bf6 <ft6x06_write_reg>
}
 8002c82:	b003      	add	sp, #12
 8002c84:	f85d fb04 	ldr.w	pc, [sp], #4

08002c88 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002c88:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8002c8a:	2301      	movs	r3, #1
{
 8002c8c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8002c90:	f10d 0207 	add.w	r2, sp, #7
 8002c94:	2195      	movs	r1, #149	; 0x95
 8002c96:	f7ff ffae 	bl	8002bf6 <ft6x06_write_reg>
}
 8002c9a:	b003      	add	sp, #12
 8002c9c:	f85d fb04 	ldr.w	pc, [sp], #4

08002ca0 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002ca0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8002ca2:	2301      	movs	r3, #1
{
 8002ca4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8002ca8:	f10d 0207 	add.w	r2, sp, #7
 8002cac:	2196      	movs	r1, #150	; 0x96
 8002cae:	f7ff ffa2 	bl	8002bf6 <ft6x06_write_reg>
}
 8002cb2:	b003      	add	sp, #12
 8002cb4:	f85d fb04 	ldr.w	pc, [sp], #4

08002cb8 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8002cb8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8002cba:	2301      	movs	r3, #1
{
 8002cbc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8002cc0:	f10d 0207 	add.w	r2, sp, #7
 8002cc4:	21a4      	movs	r1, #164	; 0xa4
 8002cc6:	f7ff ff96 	bl	8002bf6 <ft6x06_write_reg>
}
 8002cca:	b003      	add	sp, #12
 8002ccc:	f85d fb04 	ldr.w	pc, [sp], #4

08002cd0 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8002cd0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	21a8      	movs	r1, #168	; 0xa8
 8002cd6:	f7ff bf87 	b.w	8002be8 <ft6x06_read_reg>
	...

08002cdc <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002cdc:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8002ce2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8002ce6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ce8:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002cea:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8002cec:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf2:	f005 f8ef 	bl	8007ed4 <HAL_SDRAM_SendCommand>
 8002cf6:	3800      	subs	r0, #0
 8002cf8:	bf18      	it	ne
 8002cfa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8002cfc:	4240      	negs	r0, r0
 8002cfe:	bd08      	pop	{r3, pc}
 8002d00:	24001590 	.word	0x24001590

08002d04 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002d04:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8002d06:	2202      	movs	r2, #2
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8002d0a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2200      	movs	r2, #0
 8002d12:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f005 f8da 	bl	8007ed4 <HAL_SDRAM_SendCommand>
 8002d20:	3800      	subs	r0, #0
 8002d22:	bf18      	it	ne
 8002d24:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8002d26:	4240      	negs	r0, r0
 8002d28:	bd08      	pop	{r3, pc}
 8002d2a:	bf00      	nop
 8002d2c:	24001590 	.word	0x24001590

08002d30 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002d30:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 8002d34:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002d36:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 8002d38:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8002d3a:	4c0b      	ldr	r4, [pc, #44]	; (8002d68 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8002d3c:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8002d3e:	698a      	ldr	r2, [r1, #24]
 8002d40:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002d42:	69ca      	ldr	r2, [r1, #28]
 8002d44:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8002d46:	2204      	movs	r2, #4
 8002d48:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8002d4a:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002d4c:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8002d4e:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8002d50:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8002d52:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d5a:	f005 f8bb 	bl	8007ed4 <HAL_SDRAM_SendCommand>
 8002d5e:	3800      	subs	r0, #0
 8002d60:	bf18      	it	ne
 8002d62:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8002d64:	4240      	negs	r0, r0
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	24001590 	.word	0x24001590

08002d6c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8002d6c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8002d70:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8002d74:	2108      	movs	r1, #8
 8002d76:	2200      	movs	r2, #0
 8002d78:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8002d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d80:	4619      	mov	r1, r3
 8002d82:	f005 f8a7 	bl	8007ed4 <HAL_SDRAM_SendCommand>
 8002d86:	3800      	subs	r0, #0
 8002d88:	bf18      	it	ne
 8002d8a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8002d8c:	4240      	negs	r0, r0
 8002d8e:	bd08      	pop	{r3, pc}
 8002d90:	24001590 	.word	0x24001590

08002d94 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8002d94:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8002d96:	f005 f8bc 	bl	8007f12 <HAL_SDRAM_ProgramRefreshRate>
 8002d9a:	3800      	subs	r0, #0
 8002d9c:	bf18      	it	ne
 8002d9e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8002da0:	4240      	negs	r0, r0
 8002da2:	bd08      	pop	{r3, pc}

08002da4 <IS42S32800J_Init>:
{
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8002da8:	6809      	ldr	r1, [r1, #0]
{
 8002daa:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8002dac:	f7ff ff96 	bl	8002cdc <IS42S32800J_ClockEnable>
 8002db0:	b110      	cbz	r0, 8002db8 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8002db2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8002db8:	f001 fc98 	bl	80046ec <HAL_GetTick>
 8002dbc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8002dbe:	f001 fc95 	bl	80046ec <HAL_GetTick>
 8002dc2:	4286      	cmp	r6, r0
 8002dc4:	d0fb      	beq.n	8002dbe <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8002dc6:	6821      	ldr	r1, [r4, #0]
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7ff ff9b 	bl	8002d04 <IS42S32800J_Precharge>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d1ef      	bne.n	8002db2 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8002dd8:	f7ff ffc8 	bl	8002d6c <IS42S32800J_RefreshMode>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d1e8      	bne.n	8002db2 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8002de0:	4621      	mov	r1, r4
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7ff ffa4 	bl	8002d30 <IS42S32800J_ModeRegConfig>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d1e2      	bne.n	8002db2 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8002dec:	68a1      	ldr	r1, [r4, #8]
 8002dee:	4628      	mov	r0, r5
 8002df0:	f7ff ffd0 	bl	8002d94 <IS42S32800J_RefreshRate>
 8002df4:	3800      	subs	r0, #0
 8002df6:	bf18      	it	ne
 8002df8:	2001      	movne	r0, #1
 8002dfa:	4240      	negs	r0, r0
  return ret;
 8002dfc:	e7db      	b.n	8002db6 <IS42S32800J_Init+0x12>

08002dfe <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8002dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8002e06:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8002e0a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8002e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e12:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8002e16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e1a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	4770      	bx	lr

08002e20 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002e20:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e22:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 8002e26:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002e28:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e2c:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8002e2e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002e30:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 8002e32:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8002e34:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e36:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8002e38:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e3a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e3c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8002e3e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002e40:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8002e42:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e44:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e46:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e4a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8002e4e:	2310      	movs	r3, #16
 8002e50:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e56:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8002e58:	f240 1301 	movw	r3, #257	; 0x101
 8002e5c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e62:	f003 fc94 	bl	800678e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002e66:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 8002e68:	bf14      	ite	ne
 8002e6a:	f06f 0004 	mvnne.w	r0, #4
 8002e6e:	2000      	moveq	r0, #0
 8002e70:	b015      	add	sp, #84	; 0x54
 8002e72:	f85d fb04 	ldr.w	pc, [sp], #4

08002e76 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002e76:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8002e7c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002e7e:	bf08      	it	eq
 8002e80:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8002e84:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002e86:	bf18      	it	ne
 8002e88:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8002e8c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e8e:	a906      	add	r1, sp, #24
{
 8002e90:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002e92:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8002e94:	2306      	movs	r3, #6
 8002e96:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e98:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e9a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e9e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8002ea0:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ea2:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ea4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ea8:	f003 fb76 	bl	8006598 <HAL_QSPI_Command>
 8002eac:	bb20      	cbnz	r0, 8002ef8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002eae:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8002eb2:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8002eb4:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8002eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002eba:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ebc:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002ebe:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8002ec2:	f04f 0310 	mov.w	r3, #16
 8002ec6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8002eca:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ece:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8002ed0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8002ed4:	bf0c      	ite	eq
 8002ed6:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8002eda:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ede:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8002ee0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ee2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ee6:	f003 fc52 	bl	800678e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002eea:	2800      	cmp	r0, #0
 8002eec:	bf0c      	ite	eq
 8002eee:	2000      	moveq	r0, #0
 8002ef0:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 8002ef4:	b015      	add	sp, #84	; 0x54
 8002ef6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8002ef8:	f06f 0001 	mvn.w	r0, #1
 8002efc:	e7fa      	b.n	8002ef4 <MT25TL01G_WriteEnable+0x7e>

08002efe <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002efe:	2903      	cmp	r1, #3
{
 8002f00:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002f02:	bf08      	it	eq
 8002f04:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8002f08:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002f0a:	bf18      	it	ne
 8002f0c:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8002f10:	4604      	mov	r4, r0
 8002f12:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002f14:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8002f16:	23b7      	movs	r3, #183	; 0xb7
 8002f18:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f1a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f20:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8002f22:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f24:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f26:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8002f2a:	f7ff ffa4 	bl	8002e76 <MT25TL01G_WriteEnable>
 8002f2e:	b958      	cbnz	r0, 8002f48 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4669      	mov	r1, sp
 8002f36:	4620      	mov	r0, r4
 8002f38:	f003 fb2e 	bl	8006598 <HAL_QSPI_Command>
 8002f3c:	b920      	cbnz	r0, 8002f48 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff ff6d 	bl	8002e20 <MT25TL01G_AutoPollingMemReady>
 8002f46:	b108      	cbz	r0, 8002f4c <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 8002f48:	f06f 0001 	mvn.w	r0, #1
}
 8002f4c:	b00f      	add	sp, #60	; 0x3c
 8002f4e:	bd30      	pop	{r4, r5, pc}

08002f50 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002f50:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8002f56:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f5c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002f5e:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f60:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002f62:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f64:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f66:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f6a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8002f6c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f6e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f70:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f74:	f003 fb10 	bl	8006598 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002f78:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8002f7a:	bf14      	ite	ne
 8002f7c:	f06f 0001 	mvnne.w	r0, #1
 8002f80:	2000      	moveq	r0, #0
 8002f82:	b00f      	add	sp, #60	; 0x3c
 8002f84:	f85d fb04 	ldr.w	pc, [sp], #4

08002f88 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002f88:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8002f8e:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f94:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8002f96:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f98:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8002f9a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f9c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f9e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002fa2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8002fa4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fa6:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fa8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fac:	f003 faf4 	bl	8006598 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002fb0:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8002fb2:	bf14      	ite	ne
 8002fb4:	f06f 0001 	mvnne.w	r0, #1
 8002fb8:	2000      	moveq	r0, #0
 8002fba:	b00f      	add	sp, #60	; 0x3c
 8002fbc:	f85d fb04 	ldr.w	pc, [sp], #4

08002fc0 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002fc0:	b500      	push	{lr}
 8002fc2:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8002fc4:	2903      	cmp	r1, #3
 8002fc6:	d80e      	bhi.n	8002fe6 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8002fc8:	e8df f001 	tbb	[pc, r1]
 8002fcc:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8002fd6:	230e      	movs	r3, #14
 8002fd8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fde:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002fe4:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8002fe6:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002fe8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002fec:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002ff0:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8002ff2:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002ff8:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ffa:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002ffc:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003000:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003002:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003004:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003006:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800300a:	f003 fc10 	bl	800682e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800300e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8003010:	bf14      	ite	ne
 8003012:	f06f 0005 	mvnne.w	r0, #5
 8003016:	2000      	moveq	r0, #0
 8003018:	b011      	add	sp, #68	; 0x44
 800301a:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800301e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003022:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8003024:	233d      	movs	r3, #61	; 0x3d
 8003026:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302c:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	e7d7      	b.n	8002fe4 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003038:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800303a:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800303c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800303e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003042:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003044:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003048:	e7cc      	b.n	8002fe4 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800304a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800304e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8003050:	23ed      	movs	r3, #237	; 0xed
 8003052:	e7f3      	b.n	800303c <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08003054 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003054:	b500      	push	{lr}
 8003056:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8003058:	2903      	cmp	r1, #3
 800305a:	d80e      	bhi.n	800307a <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800305c:	e8df f001 	tbb	[pc, r1]
 8003060:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003068:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800306a:	230c      	movs	r3, #12
 800306c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800306e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003072:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8003074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003078:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800307a:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800307c:	466a      	mov	r2, sp
 800307e:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8003080:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003082:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003086:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003088:	2300      	movs	r3, #0
 800308a:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800308c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800308e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8003092:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8003096:	f003 fbca 	bl	800682e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800309a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800309c:	bf14      	ite	ne
 800309e:	f06f 0005 	mvnne.w	r0, #5
 80030a2:	2000      	moveq	r0, #0
 80030a4:	b011      	add	sp, #68	; 0x44
 80030a6:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80030aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ae:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80030b0:	23bc      	movs	r3, #188	; 0xbc
 80030b2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80030b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b8:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	e7db      	b.n	8003078 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80030c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80030c6:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80030c8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80030ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030ce:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80030d0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80030d4:	e7d0      	b.n	8003078 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030da:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80030dc:	23eb      	movs	r3, #235	; 0xeb
 80030de:	e7f3      	b.n	80030c8 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080030e0 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80030e0:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80030e6:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80030e8:	bf08      	it	eq
 80030ea:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80030ee:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80030f0:	bf18      	it	ne
 80030f2:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030f6:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80030f8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80030fa:	2366      	movs	r3, #102	; 0x66
 80030fc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030fe:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003100:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8003104:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8003106:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003108:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800310a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800310e:	f003 fa43 	bl	8006598 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8003112:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8003114:	bf14      	ite	ne
 8003116:	f06f 0001 	mvnne.w	r0, #1
 800311a:	2000      	moveq	r0, #0
 800311c:	b00f      	add	sp, #60	; 0x3c
 800311e:	f85d fb04 	ldr.w	pc, [sp], #4

08003122 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003122:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003128:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800312a:	bf08      	it	eq
 800312c:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8003130:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003132:	bf18      	it	ne
 8003134:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003138:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800313a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800313c:	2399      	movs	r3, #153	; 0x99
 800313e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003140:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003142:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8003146:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8003148:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800314a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800314c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003150:	f003 fa22 	bl	8006598 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8003154:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8003156:	bf14      	ite	ne
 8003158:	f06f 0001 	mvnne.w	r0, #1
 800315c:	2000      	moveq	r0, #0
 800315e:	b00f      	add	sp, #60	; 0x3c
 8003160:	f85d fb04 	ldr.w	pc, [sp], #4

08003164 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003164:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003166:	6884      	ldr	r4, [r0, #8]
 8003168:	8800      	ldrh	r0, [r0, #0]
 800316a:	46a4      	mov	ip, r4
}
 800316c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003170:	4760      	bx	ip

08003172 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003172:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003174:	6844      	ldr	r4, [r0, #4]
 8003176:	8800      	ldrh	r0, [r0, #0]
 8003178:	46a4      	mov	ip, r4
}
 800317a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800317e:	4760      	bx	ip

08003180 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8003180:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003182:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8003184:	4604      	mov	r4, r0
 8003186:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8003188:	4798      	blx	r3
 800318a:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800318c:	68e3      	ldr	r3, [r4, #12]
 800318e:	4798      	blx	r3
 8003190:	1b83      	subs	r3, r0, r6
 8003192:	42ab      	cmp	r3, r5
 8003194:	d3fa      	bcc.n	800318c <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8003196:	bd70      	pop	{r4, r5, r6, pc}

08003198 <OTM8009A_Init>:
{
 8003198:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800319c:	2300      	movs	r3, #0
 800319e:	f100 0810 	add.w	r8, r0, #16
{
 80031a2:	4682      	mov	sl, r0
 80031a4:	4689      	mov	r9, r1
 80031a6:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80031a8:	4619      	mov	r1, r3
 80031aa:	4add      	ldr	r2, [pc, #884]	; (8003520 <OTM8009A_Init+0x388>)
 80031ac:	4640      	mov	r0, r8
 80031ae:	f000 fbad 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80031b2:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80031b4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80031b6:	4adb      	ldr	r2, [pc, #876]	; (8003524 <OTM8009A_Init+0x38c>)
 80031b8:	21ff      	movs	r1, #255	; 0xff
 80031ba:	4640      	mov	r0, r8
 80031bc:	f000 fba6 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80031c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80031c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80031c4:	4ad8      	ldr	r2, [pc, #864]	; (8003528 <OTM8009A_Init+0x390>)
 80031c6:	4619      	mov	r1, r3
 80031c8:	4640      	mov	r0, r8
 80031ca:	f000 fb9f 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80031ce:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80031d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80031d2:	4ad6      	ldr	r2, [pc, #856]	; (800352c <OTM8009A_Init+0x394>)
 80031d4:	21ff      	movs	r1, #255	; 0xff
 80031d6:	4640      	mov	r0, r8
 80031d8:	f000 fb98 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80031dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80031de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80031e0:	4ad1      	ldr	r2, [pc, #836]	; (8003528 <OTM8009A_Init+0x390>)
 80031e2:	4619      	mov	r1, r3
 80031e4:	4640      	mov	r0, r8
 80031e6:	f000 fb91 	bl	800390c <otm8009a_write_reg>
 80031ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80031ec:	2300      	movs	r3, #0
 80031ee:	4ad0      	ldr	r2, [pc, #832]	; (8003530 <OTM8009A_Init+0x398>)
 80031f0:	21c4      	movs	r1, #196	; 0xc4
 80031f2:	4640      	mov	r0, r8
 80031f4:	f000 fb8a 	bl	800390c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80031f8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80031fa:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80031fc:	4650      	mov	r0, sl
 80031fe:	f7ff ffbf 	bl	8003180 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8003202:	2300      	movs	r3, #0
 8003204:	4acb      	ldr	r2, [pc, #812]	; (8003534 <OTM8009A_Init+0x39c>)
 8003206:	4640      	mov	r0, r8
 8003208:	4619      	mov	r1, r3
 800320a:	4dcb      	ldr	r5, [pc, #812]	; (8003538 <OTM8009A_Init+0x3a0>)
 800320c:	f000 fb7e 	bl	800390c <otm8009a_write_reg>
 8003210:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003212:	2300      	movs	r3, #0
 8003214:	4ac9      	ldr	r2, [pc, #804]	; (800353c <OTM8009A_Init+0x3a4>)
 8003216:	21c4      	movs	r1, #196	; 0xc4
 8003218:	4640      	mov	r0, r8
 800321a:	f000 fb77 	bl	800390c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 800321e:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8003220:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8003222:	4650      	mov	r0, sl
 8003224:	f7ff ffac 	bl	8003180 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003228:	2300      	movs	r3, #0
 800322a:	4ac5      	ldr	r2, [pc, #788]	; (8003540 <OTM8009A_Init+0x3a8>)
 800322c:	4640      	mov	r0, r8
 800322e:	4619      	mov	r1, r3
 8003230:	f000 fb6c 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003234:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8003236:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003238:	4ac2      	ldr	r2, [pc, #776]	; (8003544 <OTM8009A_Init+0x3ac>)
 800323a:	21c5      	movs	r1, #197	; 0xc5
 800323c:	4640      	mov	r0, r8
 800323e:	f000 fb65 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003242:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8003244:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003246:	4ac0      	ldr	r2, [pc, #768]	; (8003548 <OTM8009A_Init+0x3b0>)
 8003248:	4619      	mov	r1, r3
 800324a:	4640      	mov	r0, r8
 800324c:	f000 fb5e 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003250:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8003252:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003254:	4abd      	ldr	r2, [pc, #756]	; (800354c <OTM8009A_Init+0x3b4>)
 8003256:	21c5      	movs	r1, #197	; 0xc5
 8003258:	4640      	mov	r0, r8
 800325a:	f000 fb57 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800325e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003260:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8003262:	4abb      	ldr	r2, [pc, #748]	; (8003550 <OTM8009A_Init+0x3b8>)
 8003264:	4619      	mov	r1, r3
 8003266:	4640      	mov	r0, r8
 8003268:	f000 fb50 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800326c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800326e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8003270:	4ab8      	ldr	r2, [pc, #736]	; (8003554 <OTM8009A_Init+0x3bc>)
 8003272:	21c0      	movs	r1, #192	; 0xc0
 8003274:	4640      	mov	r0, r8
 8003276:	f000 fb49 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800327a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800327c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800327e:	4aa8      	ldr	r2, [pc, #672]	; (8003520 <OTM8009A_Init+0x388>)
 8003280:	4619      	mov	r1, r3
 8003282:	4640      	mov	r0, r8
 8003284:	f000 fb42 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003288:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800328a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800328c:	4ab2      	ldr	r2, [pc, #712]	; (8003558 <OTM8009A_Init+0x3c0>)
 800328e:	21d9      	movs	r1, #217	; 0xd9
 8003290:	4640      	mov	r0, r8
 8003292:	f000 fb3b 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003296:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8003298:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800329a:	4ab0      	ldr	r2, [pc, #704]	; (800355c <OTM8009A_Init+0x3c4>)
 800329c:	4619      	mov	r1, r3
 800329e:	4640      	mov	r0, r8
 80032a0:	f000 fb34 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80032a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80032a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80032a8:	4aad      	ldr	r2, [pc, #692]	; (8003560 <OTM8009A_Init+0x3c8>)
 80032aa:	21c1      	movs	r1, #193	; 0xc1
 80032ac:	4640      	mov	r0, r8
 80032ae:	f000 fb2d 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80032b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80032b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80032b6:	4aab      	ldr	r2, [pc, #684]	; (8003564 <OTM8009A_Init+0x3cc>)
 80032b8:	4619      	mov	r1, r3
 80032ba:	4640      	mov	r0, r8
 80032bc:	f000 fb26 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80032c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80032c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80032c4:	4aa8      	ldr	r2, [pc, #672]	; (8003568 <OTM8009A_Init+0x3d0>)
 80032c6:	21c1      	movs	r1, #193	; 0xc1
 80032c8:	4640      	mov	r0, r8
 80032ca:	f000 fb1f 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80032ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80032d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80032d2:	4aa6      	ldr	r2, [pc, #664]	; (800356c <OTM8009A_Init+0x3d4>)
 80032d4:	4619      	mov	r1, r3
 80032d6:	4640      	mov	r0, r8
 80032d8:	f000 fb18 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80032dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80032de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80032e0:	4aa3      	ldr	r2, [pc, #652]	; (8003570 <OTM8009A_Init+0x3d8>)
 80032e2:	21c5      	movs	r1, #197	; 0xc5
 80032e4:	4640      	mov	r0, r8
 80032e6:	f000 fb11 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80032ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80032ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80032ee:	4aa1      	ldr	r2, [pc, #644]	; (8003574 <OTM8009A_Init+0x3dc>)
 80032f0:	4619      	mov	r1, r3
 80032f2:	4640      	mov	r0, r8
 80032f4:	f000 fb0a 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80032f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80032fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80032fc:	4a93      	ldr	r2, [pc, #588]	; (800354c <OTM8009A_Init+0x3b4>)
 80032fe:	21c5      	movs	r1, #197	; 0xc5
 8003300:	4640      	mov	r0, r8
 8003302:	f000 fb03 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003306:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8003308:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800330a:	4a85      	ldr	r2, [pc, #532]	; (8003520 <OTM8009A_Init+0x388>)
 800330c:	4619      	mov	r1, r3
 800330e:	4640      	mov	r0, r8
 8003310:	f000 fafc 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8003314:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003316:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8003318:	4a97      	ldr	r2, [pc, #604]	; (8003578 <OTM8009A_Init+0x3e0>)
 800331a:	21d8      	movs	r1, #216	; 0xd8
 800331c:	4640      	mov	r0, r8
 800331e:	f000 faf5 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8003322:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8003324:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8003326:	4a95      	ldr	r2, [pc, #596]	; (800357c <OTM8009A_Init+0x3e4>)
 8003328:	4619      	mov	r1, r3
 800332a:	4640      	mov	r0, r8
 800332c:	f000 faee 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8003330:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8003332:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8003334:	4a92      	ldr	r2, [pc, #584]	; (8003580 <OTM8009A_Init+0x3e8>)
 8003336:	21c5      	movs	r1, #197	; 0xc5
 8003338:	4640      	mov	r0, r8
 800333a:	f000 fae7 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800333e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8003340:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8003342:	4a90      	ldr	r2, [pc, #576]	; (8003584 <OTM8009A_Init+0x3ec>)
 8003344:	4619      	mov	r1, r3
 8003346:	4640      	mov	r0, r8
 8003348:	f000 fae0 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800334c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800334e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8003350:	4a8d      	ldr	r2, [pc, #564]	; (8003588 <OTM8009A_Init+0x3f0>)
 8003352:	21c0      	movs	r1, #192	; 0xc0
 8003354:	4640      	mov	r0, r8
 8003356:	f000 fad9 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800335a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800335c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800335e:	4a8b      	ldr	r2, [pc, #556]	; (800358c <OTM8009A_Init+0x3f4>)
 8003360:	4619      	mov	r1, r3
 8003362:	4640      	mov	r0, r8
 8003364:	f000 fad2 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8003368:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800336a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800336c:	4a88      	ldr	r2, [pc, #544]	; (8003590 <OTM8009A_Init+0x3f8>)
 800336e:	21c5      	movs	r1, #197	; 0xc5
 8003370:	4640      	mov	r0, r8
 8003372:	f000 facb 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003376:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8003378:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800337a:	4a78      	ldr	r2, [pc, #480]	; (800355c <OTM8009A_Init+0x3c4>)
 800337c:	4619      	mov	r1, r3
 800337e:	4640      	mov	r0, r8
 8003380:	f000 fac4 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8003384:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8003386:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8003388:	4a82      	ldr	r2, [pc, #520]	; (8003594 <OTM8009A_Init+0x3fc>)
 800338a:	21c4      	movs	r1, #196	; 0xc4
 800338c:	4640      	mov	r0, r8
 800338e:	f000 fabd 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003392:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8003394:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8003396:	4a73      	ldr	r2, [pc, #460]	; (8003564 <OTM8009A_Init+0x3cc>)
 8003398:	4619      	mov	r1, r3
 800339a:	4640      	mov	r0, r8
 800339c:	f000 fab6 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80033a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80033a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80033a4:	4a7c      	ldr	r2, [pc, #496]	; (8003598 <OTM8009A_Init+0x400>)
 80033a6:	21c1      	movs	r1, #193	; 0xc1
 80033a8:	4640      	mov	r0, r8
 80033aa:	f000 faaf 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80033ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80033b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80033b2:	4a7a      	ldr	r2, [pc, #488]	; (800359c <OTM8009A_Init+0x404>)
 80033b4:	4619      	mov	r1, r3
 80033b6:	4640      	mov	r0, r8
 80033b8:	f000 faa8 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80033bc:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80033be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80033c0:	4a77      	ldr	r2, [pc, #476]	; (80035a0 <OTM8009A_Init+0x408>)
 80033c2:	21b3      	movs	r1, #179	; 0xb3
 80033c4:	4640      	mov	r0, r8
 80033c6:	f000 faa1 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80033ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80033cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80033ce:	4a56      	ldr	r2, [pc, #344]	; (8003528 <OTM8009A_Init+0x390>)
 80033d0:	4619      	mov	r1, r3
 80033d2:	4640      	mov	r0, r8
 80033d4:	f000 fa9a 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80033d8:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80033da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80033dc:	4a71      	ldr	r2, [pc, #452]	; (80035a4 <OTM8009A_Init+0x40c>)
 80033de:	21ce      	movs	r1, #206	; 0xce
 80033e0:	4640      	mov	r0, r8
 80033e2:	f000 fa93 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80033e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80033e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80033ea:	4a6f      	ldr	r2, [pc, #444]	; (80035a8 <OTM8009A_Init+0x410>)
 80033ec:	4619      	mov	r1, r3
 80033ee:	4640      	mov	r0, r8
 80033f0:	f000 fa8c 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80033f4:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80033f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80033f8:	4a6c      	ldr	r2, [pc, #432]	; (80035ac <OTM8009A_Init+0x414>)
 80033fa:	21ce      	movs	r1, #206	; 0xce
 80033fc:	4640      	mov	r0, r8
 80033fe:	f000 fa85 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8003402:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8003404:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8003406:	4a6a      	ldr	r2, [pc, #424]	; (80035b0 <OTM8009A_Init+0x418>)
 8003408:	4619      	mov	r1, r3
 800340a:	4640      	mov	r0, r8
 800340c:	f000 fa7e 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8003410:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8003412:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8003414:	4a67      	ldr	r2, [pc, #412]	; (80035b4 <OTM8009A_Init+0x41c>)
 8003416:	21ce      	movs	r1, #206	; 0xce
 8003418:	4640      	mov	r0, r8
 800341a:	f000 fa77 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800341e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8003420:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8003422:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <OTM8009A_Init+0x420>)
 8003424:	4619      	mov	r1, r3
 8003426:	4640      	mov	r0, r8
 8003428:	f000 fa70 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800342c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800342e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8003430:	4a62      	ldr	r2, [pc, #392]	; (80035bc <OTM8009A_Init+0x424>)
 8003432:	21cf      	movs	r1, #207	; 0xcf
 8003434:	4640      	mov	r0, r8
 8003436:	f000 fa69 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800343a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800343c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800343e:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <OTM8009A_Init+0x428>)
 8003440:	4619      	mov	r1, r3
 8003442:	4640      	mov	r0, r8
 8003444:	f000 fa62 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8003448:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800344a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800344c:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <OTM8009A_Init+0x42c>)
 800344e:	21cf      	movs	r1, #207	; 0xcf
 8003450:	4640      	mov	r0, r8
 8003452:	f000 fa5b 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003456:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8003458:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800345a:	4a33      	ldr	r2, [pc, #204]	; (8003528 <OTM8009A_Init+0x390>)
 800345c:	4619      	mov	r1, r3
 800345e:	4640      	mov	r0, r8
 8003460:	f000 fa54 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8003464:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003466:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8003468:	4a57      	ldr	r2, [pc, #348]	; (80035c8 <OTM8009A_Init+0x430>)
 800346a:	21cb      	movs	r1, #203	; 0xcb
 800346c:	4640      	mov	r0, r8
 800346e:	f000 fa4d 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8003472:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8003474:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8003476:	4a55      	ldr	r2, [pc, #340]	; (80035cc <OTM8009A_Init+0x434>)
 8003478:	4619      	mov	r1, r3
 800347a:	4640      	mov	r0, r8
 800347c:	f000 fa46 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8003480:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8003482:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <OTM8009A_Init+0x438>)
 8003486:	21cb      	movs	r1, #203	; 0xcb
 8003488:	4640      	mov	r0, r8
 800348a:	f000 fa3f 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800348e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8003490:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8003492:	4a45      	ldr	r2, [pc, #276]	; (80035a8 <OTM8009A_Init+0x410>)
 8003494:	4619      	mov	r1, r3
 8003496:	4640      	mov	r0, r8
 8003498:	f000 fa38 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800349c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800349e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80034a0:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <OTM8009A_Init+0x43c>)
 80034a2:	21cb      	movs	r1, #203	; 0xcb
 80034a4:	4640      	mov	r0, r8
 80034a6:	f000 fa31 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80034aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80034ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80034ae:	4a40      	ldr	r2, [pc, #256]	; (80035b0 <OTM8009A_Init+0x418>)
 80034b0:	4619      	mov	r1, r3
 80034b2:	4640      	mov	r0, r8
 80034b4:	f000 fa2a 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80034b8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80034ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80034bc:	4a46      	ldr	r2, [pc, #280]	; (80035d8 <OTM8009A_Init+0x440>)
 80034be:	21cb      	movs	r1, #203	; 0xcb
 80034c0:	4640      	mov	r0, r8
 80034c2:	f000 fa23 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80034c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80034c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80034ca:	4a3b      	ldr	r2, [pc, #236]	; (80035b8 <OTM8009A_Init+0x420>)
 80034cc:	4619      	mov	r1, r3
 80034ce:	4640      	mov	r0, r8
 80034d0:	f000 fa1c 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80034d4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80034d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80034d8:	4a40      	ldr	r2, [pc, #256]	; (80035dc <OTM8009A_Init+0x444>)
 80034da:	21cb      	movs	r1, #203	; 0xcb
 80034dc:	4640      	mov	r0, r8
 80034de:	f000 fa15 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80034e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80034e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80034e6:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <OTM8009A_Init+0x428>)
 80034e8:	4619      	mov	r1, r3
 80034ea:	4640      	mov	r0, r8
 80034ec:	f000 fa0e 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80034f0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80034f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80034f4:	4a3a      	ldr	r2, [pc, #232]	; (80035e0 <OTM8009A_Init+0x448>)
 80034f6:	21cb      	movs	r1, #203	; 0xcb
 80034f8:	4640      	mov	r0, r8
 80034fa:	f000 fa07 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80034fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8003500:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <OTM8009A_Init+0x44c>)
 8003504:	4619      	mov	r1, r3
 8003506:	4640      	mov	r0, r8
 8003508:	f000 fa00 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800350c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800350e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8003510:	4a35      	ldr	r2, [pc, #212]	; (80035e8 <OTM8009A_Init+0x450>)
 8003512:	21cb      	movs	r1, #203	; 0xcb
 8003514:	4640      	mov	r0, r8
 8003516:	f000 f9f9 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800351a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800351c:	4404      	add	r4, r0
 800351e:	e065      	b.n	80035ec <OTM8009A_Init+0x454>
 8003520:	0801b1e9 	.word	0x0801b1e9
 8003524:	0801b0dc 	.word	0x0801b0dc
 8003528:	0801b1ea 	.word	0x0801b1ea
 800352c:	0801b157 	.word	0x0801b157
 8003530:	0801b1eb 	.word	0x0801b1eb
 8003534:	0801b1ec 	.word	0x0801b1ec
 8003538:	240015a0 	.word	0x240015a0
 800353c:	0801b1ed 	.word	0x0801b1ed
 8003540:	0801b1ee 	.word	0x0801b1ee
 8003544:	0801b1ef 	.word	0x0801b1ef
 8003548:	0801b1f0 	.word	0x0801b1f0
 800354c:	0801b1f1 	.word	0x0801b1f1
 8003550:	0801b1f2 	.word	0x0801b1f2
 8003554:	0801b1f3 	.word	0x0801b1f3
 8003558:	0801b1f4 	.word	0x0801b1f4
 800355c:	0801b1f5 	.word	0x0801b1f5
 8003560:	0801b1f6 	.word	0x0801b1f6
 8003564:	0801b1f7 	.word	0x0801b1f7
 8003568:	0801b1f8 	.word	0x0801b1f8
 800356c:	0801b1f9 	.word	0x0801b1f9
 8003570:	0801b1fa 	.word	0x0801b1fa
 8003574:	0801b1fb 	.word	0x0801b1fb
 8003578:	0801b1c2 	.word	0x0801b1c2
 800357c:	0801b1fc 	.word	0x0801b1fc
 8003580:	0801b1fd 	.word	0x0801b1fd
 8003584:	0801b1fe 	.word	0x0801b1fe
 8003588:	0801b1ff 	.word	0x0801b1ff
 800358c:	0801b200 	.word	0x0801b200
 8003590:	0801b201 	.word	0x0801b201
 8003594:	0801b202 	.word	0x0801b202
 8003598:	0801b203 	.word	0x0801b203
 800359c:	0801b204 	.word	0x0801b204
 80035a0:	0801b1c4 	.word	0x0801b1c4
 80035a4:	0801b1c6 	.word	0x0801b1c6
 80035a8:	0801b205 	.word	0x0801b205
 80035ac:	0801b1cc 	.word	0x0801b1cc
 80035b0:	0801b206 	.word	0x0801b206
 80035b4:	0801b1da 	.word	0x0801b1da
 80035b8:	0801b207 	.word	0x0801b207
 80035bc:	0801b0df 	.word	0x0801b0df
 80035c0:	0801b208 	.word	0x0801b208
 80035c4:	0801b215 	.word	0x0801b215
 80035c8:	0801b0e9 	.word	0x0801b0e9
 80035cc:	0801b209 	.word	0x0801b209
 80035d0:	0801b0f3 	.word	0x0801b0f3
 80035d4:	0801b102 	.word	0x0801b102
 80035d8:	0801b111 	.word	0x0801b111
 80035dc:	0801b11b 	.word	0x0801b11b
 80035e0:	0801b12a 	.word	0x0801b12a
 80035e4:	0801b20a 	.word	0x0801b20a
 80035e8:	0801b139 	.word	0x0801b139
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80035ec:	4a99      	ldr	r2, [pc, #612]	; (8003854 <OTM8009A_Init+0x6bc>)
 80035ee:	4619      	mov	r1, r3
 80035f0:	4640      	mov	r0, r8
 80035f2:	f000 f98b 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80035f6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80035f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80035fa:	4a97      	ldr	r2, [pc, #604]	; (8003858 <OTM8009A_Init+0x6c0>)
 80035fc:	21cb      	movs	r1, #203	; 0xcb
 80035fe:	4640      	mov	r0, r8
 8003600:	f000 f984 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003604:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8003606:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003608:	4a94      	ldr	r2, [pc, #592]	; (800385c <OTM8009A_Init+0x6c4>)
 800360a:	4619      	mov	r1, r3
 800360c:	4640      	mov	r0, r8
 800360e:	f000 f97d 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8003612:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8003614:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8003616:	4a92      	ldr	r2, [pc, #584]	; (8003860 <OTM8009A_Init+0x6c8>)
 8003618:	21cc      	movs	r1, #204	; 0xcc
 800361a:	4640      	mov	r0, r8
 800361c:	f000 f976 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8003620:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8003622:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8003624:	4a8f      	ldr	r2, [pc, #572]	; (8003864 <OTM8009A_Init+0x6cc>)
 8003626:	4619      	mov	r1, r3
 8003628:	4640      	mov	r0, r8
 800362a:	f000 f96f 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800362e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8003630:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8003632:	4a8d      	ldr	r2, [pc, #564]	; (8003868 <OTM8009A_Init+0x6d0>)
 8003634:	21cc      	movs	r1, #204	; 0xcc
 8003636:	4640      	mov	r0, r8
 8003638:	f000 f968 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800363c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800363e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8003640:	4a8a      	ldr	r2, [pc, #552]	; (800386c <OTM8009A_Init+0x6d4>)
 8003642:	4619      	mov	r1, r3
 8003644:	4640      	mov	r0, r8
 8003646:	f000 f961 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800364a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800364c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800364e:	4a88      	ldr	r2, [pc, #544]	; (8003870 <OTM8009A_Init+0x6d8>)
 8003650:	21cc      	movs	r1, #204	; 0xcc
 8003652:	4640      	mov	r0, r8
 8003654:	f000 f95a 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8003658:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800365a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800365c:	4a85      	ldr	r2, [pc, #532]	; (8003874 <OTM8009A_Init+0x6dc>)
 800365e:	4619      	mov	r1, r3
 8003660:	4640      	mov	r0, r8
 8003662:	f000 f953 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8003666:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8003668:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800366a:	4a83      	ldr	r2, [pc, #524]	; (8003878 <OTM8009A_Init+0x6e0>)
 800366c:	21cc      	movs	r1, #204	; 0xcc
 800366e:	4640      	mov	r0, r8
 8003670:	f000 f94c 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8003674:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8003676:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8003678:	4a80      	ldr	r2, [pc, #512]	; (800387c <OTM8009A_Init+0x6e4>)
 800367a:	4619      	mov	r1, r3
 800367c:	4640      	mov	r0, r8
 800367e:	f000 f945 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8003682:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8003684:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8003686:	4a7e      	ldr	r2, [pc, #504]	; (8003880 <OTM8009A_Init+0x6e8>)
 8003688:	21cc      	movs	r1, #204	; 0xcc
 800368a:	4640      	mov	r0, r8
 800368c:	f000 f93e 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8003690:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8003692:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8003694:	4a7b      	ldr	r2, [pc, #492]	; (8003884 <OTM8009A_Init+0x6ec>)
 8003696:	4619      	mov	r1, r3
 8003698:	4640      	mov	r0, r8
 800369a:	f000 f937 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800369e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80036a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80036a2:	4a79      	ldr	r2, [pc, #484]	; (8003888 <OTM8009A_Init+0x6f0>)
 80036a4:	21cc      	movs	r1, #204	; 0xcc
 80036a6:	4640      	mov	r0, r8
 80036a8:	f000 f930 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80036ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80036ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80036b0:	4a76      	ldr	r2, [pc, #472]	; (800388c <OTM8009A_Init+0x6f4>)
 80036b2:	4619      	mov	r1, r3
 80036b4:	4640      	mov	r0, r8
 80036b6:	f000 f929 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80036ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80036bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80036be:	4a74      	ldr	r2, [pc, #464]	; (8003890 <OTM8009A_Init+0x6f8>)
 80036c0:	21c5      	movs	r1, #197	; 0xc5
 80036c2:	4640      	mov	r0, r8
 80036c4:	f000 f922 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80036c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80036ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80036cc:	4a71      	ldr	r2, [pc, #452]	; (8003894 <OTM8009A_Init+0x6fc>)
 80036ce:	4619      	mov	r1, r3
 80036d0:	4640      	mov	r0, r8
 80036d2:	f000 f91b 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80036d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80036d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80036da:	4a6f      	ldr	r2, [pc, #444]	; (8003898 <OTM8009A_Init+0x700>)
 80036dc:	21f5      	movs	r1, #245	; 0xf5
 80036de:	4640      	mov	r0, r8
 80036e0:	f000 f914 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80036e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80036e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80036e8:	4a6c      	ldr	r2, [pc, #432]	; (800389c <OTM8009A_Init+0x704>)
 80036ea:	4619      	mov	r1, r3
 80036ec:	4640      	mov	r0, r8
 80036ee:	f000 f90d 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80036f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80036f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80036f6:	4a6a      	ldr	r2, [pc, #424]	; (80038a0 <OTM8009A_Init+0x708>)
 80036f8:	21c6      	movs	r1, #198	; 0xc6
 80036fa:	4640      	mov	r0, r8
 80036fc:	f000 f906 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003700:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8003702:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003704:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <OTM8009A_Init+0x70c>)
 8003706:	4619      	mov	r1, r3
 8003708:	4640      	mov	r0, r8
 800370a:	f000 f8ff 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800370e:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003710:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8003712:	4a65      	ldr	r2, [pc, #404]	; (80038a8 <OTM8009A_Init+0x710>)
 8003714:	21ff      	movs	r1, #255	; 0xff
 8003716:	4640      	mov	r0, r8
 8003718:	f000 f8f8 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800371c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800371e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003720:	4a60      	ldr	r2, [pc, #384]	; (80038a4 <OTM8009A_Init+0x70c>)
 8003722:	4619      	mov	r1, r3
 8003724:	4640      	mov	r0, r8
 8003726:	f000 f8f1 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800372a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800372c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800372e:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <OTM8009A_Init+0x70c>)
 8003730:	4619      	mov	r1, r3
 8003732:	4640      	mov	r0, r8
 8003734:	f000 f8ea 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8003738:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800373a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800373c:	4a5b      	ldr	r2, [pc, #364]	; (80038ac <OTM8009A_Init+0x714>)
 800373e:	21e1      	movs	r1, #225	; 0xe1
 8003740:	4640      	mov	r0, r8
 8003742:	f000 f8e3 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8003746:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8003748:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800374a:	4a56      	ldr	r2, [pc, #344]	; (80038a4 <OTM8009A_Init+0x70c>)
 800374c:	4619      	mov	r1, r3
 800374e:	4640      	mov	r0, r8
 8003750:	f000 f8dc 	bl	800390c <otm8009a_write_reg>
 8003754:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8003756:	2310      	movs	r3, #16
 8003758:	4a55      	ldr	r2, [pc, #340]	; (80038b0 <OTM8009A_Init+0x718>)
 800375a:	21e2      	movs	r1, #226	; 0xe2
 800375c:	4640      	mov	r0, r8
 800375e:	f000 f8d5 	bl	800390c <otm8009a_write_reg>
 8003762:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8003764:	2300      	movs	r3, #0
 8003766:	4a53      	ldr	r2, [pc, #332]	; (80038b4 <OTM8009A_Init+0x71c>)
 8003768:	2111      	movs	r1, #17
 800376a:	4640      	mov	r0, r8
 800376c:	f000 f8ce 	bl	800390c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8003770:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8003772:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8003774:	4650      	mov	r0, sl
 8003776:	f7ff fd03 	bl	8003180 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 800377a:	f1b9 0f00 	cmp.w	r9, #0
 800377e:	d062      	beq.n	8003846 <OTM8009A_Init+0x6ae>
 8003780:	f1b9 0f02 	cmp.w	r9, #2
 8003784:	d108      	bne.n	8003798 <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8003786:	2300      	movs	r3, #0
 8003788:	4a4b      	ldr	r2, [pc, #300]	; (80038b8 <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800378a:	213a      	movs	r1, #58	; 0x3a
 800378c:	4640      	mov	r0, r8
 800378e:	f000 f8bd 	bl	800390c <otm8009a_write_reg>
 8003792:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8003794:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8003798:	f1bb 0f01 	cmp.w	fp, #1
 800379c:	d156      	bne.n	800384c <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800379e:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80037a0:	f10d 0207 	add.w	r2, sp, #7
 80037a4:	2136      	movs	r1, #54	; 0x36
 80037a6:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80037a8:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80037ac:	2300      	movs	r3, #0
 80037ae:	f000 f8ad 	bl	800390c <otm8009a_write_reg>
 80037b2:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80037b4:	2304      	movs	r3, #4
 80037b6:	4a41      	ldr	r2, [pc, #260]	; (80038bc <OTM8009A_Init+0x724>)
 80037b8:	212a      	movs	r1, #42	; 0x2a
 80037ba:	4640      	mov	r0, r8
 80037bc:	f000 f8a6 	bl	800390c <otm8009a_write_reg>
 80037c0:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80037c2:	2304      	movs	r3, #4
 80037c4:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <OTM8009A_Init+0x728>)
 80037c6:	212b      	movs	r1, #43	; 0x2b
 80037c8:	4640      	mov	r0, r8
 80037ca:	f000 f89f 	bl	800390c <otm8009a_write_reg>
 80037ce:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80037d0:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80037d4:	2300      	movs	r3, #0
 80037d6:	4a3b      	ldr	r2, [pc, #236]	; (80038c4 <OTM8009A_Init+0x72c>)
 80037d8:	2151      	movs	r1, #81	; 0x51
 80037da:	4640      	mov	r0, r8
 80037dc:	f000 f896 	bl	800390c <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80037e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80037e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80037e4:	4a38      	ldr	r2, [pc, #224]	; (80038c8 <OTM8009A_Init+0x730>)
 80037e6:	2153      	movs	r1, #83	; 0x53
 80037e8:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80037ea:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80037ec:	f000 f88e 	bl	800390c <otm8009a_write_reg>
 80037f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80037f2:	2300      	movs	r3, #0
 80037f4:	4a35      	ldr	r2, [pc, #212]	; (80038cc <OTM8009A_Init+0x734>)
 80037f6:	2155      	movs	r1, #85	; 0x55
 80037f8:	4640      	mov	r0, r8
 80037fa:	f000 f887 	bl	800390c <otm8009a_write_reg>
 80037fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8003800:	2300      	movs	r3, #0
 8003802:	4a33      	ldr	r2, [pc, #204]	; (80038d0 <OTM8009A_Init+0x738>)
 8003804:	215e      	movs	r1, #94	; 0x5e
 8003806:	4640      	mov	r0, r8
 8003808:	f000 f880 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800380c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800380e:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <OTM8009A_Init+0x73c>)
 8003812:	2129      	movs	r1, #41	; 0x29
 8003814:	4640      	mov	r0, r8
 8003816:	f000 f879 	bl	800390c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800381a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800381c:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <OTM8009A_Init+0x70c>)
 8003820:	4619      	mov	r1, r3
 8003822:	4640      	mov	r0, r8
 8003824:	f000 f872 	bl	800390c <otm8009a_write_reg>
 8003828:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800382a:	2300      	movs	r3, #0
 800382c:	4a2a      	ldr	r2, [pc, #168]	; (80038d8 <OTM8009A_Init+0x740>)
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	4640      	mov	r0, r8
 8003832:	f000 f86b 	bl	800390c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8003836:	42c5      	cmn	r5, r0
}
 8003838:	bf14      	ite	ne
 800383a:	f04f 30ff 	movne.w	r0, #4294967295
 800383e:	2000      	moveq	r0, #0
 8003840:	b003      	add	sp, #12
 8003842:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8003846:	464b      	mov	r3, r9
 8003848:	4a24      	ldr	r2, [pc, #144]	; (80038dc <OTM8009A_Init+0x744>)
 800384a:	e79e      	b.n	800378a <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800384c:	2300      	movs	r3, #0
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	e7c0      	b.n	80037d4 <OTM8009A_Init+0x63c>
 8003852:	bf00      	nop
 8003854:	0801b20b 	.word	0x0801b20b
 8003858:	0801b143 	.word	0x0801b143
 800385c:	0801b1ea 	.word	0x0801b1ea
 8003860:	0801b14d 	.word	0x0801b14d
 8003864:	0801b209 	.word	0x0801b209
 8003868:	0801b159 	.word	0x0801b159
 800386c:	0801b205 	.word	0x0801b205
 8003870:	0801b168 	.word	0x0801b168
 8003874:	0801b206 	.word	0x0801b206
 8003878:	0801b177 	.word	0x0801b177
 800387c:	0801b207 	.word	0x0801b207
 8003880:	0801b181 	.word	0x0801b181
 8003884:	0801b208 	.word	0x0801b208
 8003888:	0801b190 	.word	0x0801b190
 800388c:	0801b1f5 	.word	0x0801b1f5
 8003890:	0801b216 	.word	0x0801b216
 8003894:	0801b217 	.word	0x0801b217
 8003898:	0801b218 	.word	0x0801b218
 800389c:	0801b219 	.word	0x0801b219
 80038a0:	0801b21a 	.word	0x0801b21a
 80038a4:	0801b1e9 	.word	0x0801b1e9
 80038a8:	0801b19f 	.word	0x0801b19f
 80038ac:	0801b1a2 	.word	0x0801b1a2
 80038b0:	0801b1b2 	.word	0x0801b1b2
 80038b4:	0801b20c 	.word	0x0801b20c
 80038b8:	0801b20d 	.word	0x0801b20d
 80038bc:	0801b0d4 	.word	0x0801b0d4
 80038c0:	0801b0d8 	.word	0x0801b0d8
 80038c4:	0801b20f 	.word	0x0801b20f
 80038c8:	0801b210 	.word	0x0801b210
 80038cc:	0801b211 	.word	0x0801b211
 80038d0:	0801b212 	.word	0x0801b212
 80038d4:	0801b213 	.word	0x0801b213
 80038d8:	0801b214 	.word	0x0801b214
 80038dc:	0801b20e 	.word	0x0801b20e

080038e0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80038e0:	b160      	cbz	r0, 80038fc <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80038e2:	684b      	ldr	r3, [r1, #4]
 80038e4:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80038e6:	688b      	ldr	r3, [r1, #8]
 80038e8:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80038ea:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80038ec:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80038ee:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <OTM8009A_RegisterBusIO+0x24>)
 80038f2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <OTM8009A_RegisterBusIO+0x28>)
 80038f6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80038f8:	2000      	movs	r0, #0
 80038fa:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	08003165 	.word	0x08003165
 8003908:	08003173 	.word	0x08003173

0800390c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800390c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800390e:	6804      	ldr	r4, [r0, #0]
 8003910:	6880      	ldr	r0, [r0, #8]
 8003912:	46a4      	mov	ip, r4
}
 8003914:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8003918:	4760      	bx	ip
	...

0800391c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800391c:	4a10      	ldr	r2, [pc, #64]	; (8003960 <BSP_I2C4_DeInit+0x44>)
{
 800391e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	3b01      	subs	r3, #1
 8003924:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8003926:	b10b      	cbz	r3, 800392c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8003928:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800392a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800392c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003930:	480c      	ldr	r0, [pc, #48]	; (8003964 <BSP_I2C4_DeInit+0x48>)
 8003932:	f001 fe07 	bl	8005544 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003936:	480b      	ldr	r0, [pc, #44]	; (8003964 <BSP_I2C4_DeInit+0x48>)
 8003938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800393c:	f001 fe02 	bl	8005544 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003942:	480a      	ldr	r0, [pc, #40]	; (800396c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8003944:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8003948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003950:	f002 f89a 	bl	8005a88 <HAL_I2C_DeInit>
 8003954:	2800      	cmp	r0, #0
 8003956:	d0e7      	beq.n	8003928 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8003958:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800395c:	e7e5      	b.n	800392a <BSP_I2C4_DeInit+0xe>
 800395e:	bf00      	nop
 8003960:	240015ac 	.word	0x240015ac
 8003964:	58020c00 	.word	0x58020c00
 8003968:	58024400 	.word	0x58024400
 800396c:	24001fb4 	.word	0x24001fb4

08003970 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003970:	2300      	movs	r3, #0
 8003972:	2201      	movs	r2, #1
{
 8003974:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8003976:	6041      	str	r1, [r0, #4]
{
 8003978:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800397a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800397c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8003980:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003984:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003988:	f002 f82c 	bl	80059e4 <HAL_I2C_Init>
 800398c:	4601      	mov	r1, r0
 800398e:	b108      	cbz	r0, 8003994 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8003990:	2001      	movs	r0, #1
}
 8003992:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003994:	4620      	mov	r0, r4
 8003996:	f002 fa08 	bl	8005daa <HAL_I2CEx_ConfigAnalogFilter>
 800399a:	4601      	mov	r1, r0
 800399c:	2800      	cmp	r0, #0
 800399e:	d1f7      	bne.n	8003990 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80039a0:	4620      	mov	r0, r4
 80039a2:	f002 fa28 	bl	8005df6 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80039a6:	3800      	subs	r0, #0
 80039a8:	bf18      	it	ne
 80039aa:	2001      	movne	r0, #1
 80039ac:	e7f1      	b.n	8003992 <MX_I2C4_Init+0x22>
	...

080039b0 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80039b0:	4ba3      	ldr	r3, [pc, #652]	; (8003c40 <BSP_I2C4_Init+0x290>)
 80039b2:	48a4      	ldr	r0, [pc, #656]	; (8003c44 <BSP_I2C4_Init+0x294>)
{
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80039b8:	6003      	str	r3, [r0, #0]
{
 80039ba:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 80039bc:	4ba2      	ldr	r3, [pc, #648]	; (8003c48 <BSP_I2C4_Init+0x298>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	9200      	str	r2, [sp, #0]
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	f040 80cf 	bne.w	8003b66 <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80039cc:	f002 f9e8 	bl	8005da0 <HAL_I2C_GetState>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f040 80c8 	bne.w	8003b66 <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80039d6:	4d9d      	ldr	r5, [pc, #628]	; (8003c4c <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80039d8:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80039dc:	2702      	movs	r7, #2
 80039de:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80039e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80039e4:	a90d      	add	r1, sp, #52	; 0x34
 80039e6:	489a      	ldr	r0, [pc, #616]	; (8003c50 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80039f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	930a      	str	r3, [sp, #40]	; 0x28
 80039fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80039fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003a00:	f043 0308 	orr.w	r3, r3, #8
 8003a04:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003a08:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a18:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003a1c:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003a1e:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003a22:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003a24:	f001 fca2 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003a2c:	a90d      	add	r1, sp, #52	; 0x34
 8003a2e:	4888      	ldr	r0, [pc, #544]	; (8003c50 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003a30:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003a32:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003a36:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003a38:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003a3c:	f001 fc96 	bl	800536c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8003a40:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a48:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8003a4c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	930c      	str	r3, [sp, #48]	; 0x30
 8003a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8003a58:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8003a64:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003a70:	f003 fbf8 	bl	8007264 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d070      	beq.n	8003b5a <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003a78:	4b76      	ldr	r3, [pc, #472]	; (8003c54 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003a7a:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a7e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8003c5c <BSP_I2C4_Init+0x2ac>
 8003a82:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003a86:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003a8a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003a8e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003a92:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003a96:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003a98:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003a9c:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003aa0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003aa8:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <BSP_I2C4_Init+0x2a8>)
 8003aae:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003ab2:	9a00      	ldr	r2, [sp, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4696      	mov	lr, r2
{
 8003ab8:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003aba:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8003abc:	f240 3479 	movw	r4, #889	; 0x379
 8003ac0:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003ac2:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8003ac4:	45a4      	cmp	ip, r4
 8003ac6:	d959      	bls.n	8003b7c <BSP_I2C4_Init+0x1cc>
 8003ac8:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003aca:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003acc:	45ab      	cmp	fp, r5
 8003ace:	d851      	bhi.n	8003b74 <BSP_I2C4_Init+0x1c4>
 8003ad0:	9c02      	ldr	r4, [sp, #8]
 8003ad2:	42ac      	cmp	r4, r5
 8003ad4:	d34e      	bcc.n	8003b74 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 8003ad6:	4590      	cmp	r8, r2
 8003ad8:	d04c      	beq.n	8003b74 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003ada:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8003ade:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003ae0:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003ae2:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003ae6:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003ae8:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003aec:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003af0:	d93d      	bls.n	8003b6e <BSP_I2C4_Init+0x1be>
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <BSP_I2C4_Init+0x2a8>)
 8003af4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003af6:	4b58      	ldr	r3, [pc, #352]	; (8003c58 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003af8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003afc:	4957      	ldr	r1, [pc, #348]	; (8003c5c <BSP_I2C4_Init+0x2ac>)
 8003afe:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b00:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003b02:	9203      	str	r2, [sp, #12]
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b08:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003b0a:	0043      	lsls	r3, r0, #1
 8003b0c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003b10:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 8003b14:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 8003b18:	f10b 0b0c 	add.w	fp, fp, #12
 8003b1c:	9409      	str	r4, [sp, #36]	; 0x24
 8003b1e:	3b0a      	subs	r3, #10
 8003b20:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b22:	9b05      	ldr	r3, [sp, #20]
 8003b24:	429f      	cmp	r7, r3
 8003b26:	d134      	bne.n	8003b92 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8003b28:	2a7f      	cmp	r2, #127	; 0x7f
 8003b2a:	d816      	bhi.n	8003b5a <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003b2c:	2314      	movs	r3, #20
 8003b2e:	435a      	muls	r2, r3
 8003b30:	4b4a      	ldr	r3, [pc, #296]	; (8003c5c <BSP_I2C4_Init+0x2ac>)
 8003b32:	1899      	adds	r1, r3, r2
 8003b34:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003b36:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003b38:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003b3c:	684b      	ldr	r3, [r1, #4]
 8003b3e:	051b      	lsls	r3, r3, #20
 8003b40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003b44:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003b46:	688b      	ldr	r3, [r1, #8]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003b4e:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003b50:	68cb      	ldr	r3, [r1, #12]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003b56:	4323      	orrs	r3, r4
 8003b58:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003b5a:	9900      	ldr	r1, [sp, #0]
 8003b5c:	4839      	ldr	r0, [pc, #228]	; (8003c44 <BSP_I2C4_Init+0x294>)
 8003b5e:	f7ff ff07 	bl	8003970 <MX_I2C4_Init>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d169      	bne.n	8003c3a <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 8003b66:	2000      	movs	r0, #0
}
 8003b68:	b013      	add	sp, #76	; 0x4c
 8003b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6e:	4690      	mov	r8, r2
 8003b70:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003b74:	3701      	adds	r7, #1
 8003b76:	440d      	add	r5, r1
 8003b78:	2f10      	cmp	r7, #16
 8003b7a:	d1a7      	bne.n	8003acc <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003b7c:	2e10      	cmp	r6, #16
 8003b7e:	448c      	add	ip, r1
 8003b80:	d19c      	bne.n	8003abc <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003b82:	3201      	adds	r2, #1
 8003b84:	4401      	add	r1, r0
 8003b86:	2a10      	cmp	r2, #16
 8003b88:	d196      	bne.n	8003ab8 <BSP_I2C4_Init+0x108>
 8003b8a:	f1be 0f00 	cmp.w	lr, #0
 8003b8e:	d1b0      	bne.n	8003af2 <BSP_I2C4_Init+0x142>
 8003b90:	e7b1      	b.n	8003af6 <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b92:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b94:	f04f 0c00 	mov.w	ip, #0
 8003b98:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003b9a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b9e:	441c      	add	r4, r3
 8003ba0:	ebab 0503 	sub.w	r5, fp, r3
 8003ba4:	9404      	str	r4, [sp, #16]
 8003ba6:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003ba8:	9d04      	ldr	r5, [sp, #16]
 8003baa:	9401      	str	r4, [sp, #4]
 8003bac:	9c02      	ldr	r4, [sp, #8]
 8003bae:	441c      	add	r4, r3
 8003bb0:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003bb2:	f241 245c 	movw	r4, #4700	; 0x125c
 8003bb6:	f8cd c018 	str.w	ip, [sp, #24]
 8003bba:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003bbe:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003bc2:	42a5      	cmp	r5, r4
 8003bc4:	d92e      	bls.n	8003c24 <BSP_I2C4_Init+0x274>
 8003bc6:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8003bca:	d22b      	bcs.n	8003c24 <BSP_I2C4_Init+0x274>
 8003bcc:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003bce:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003bd2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003bd6:	1966      	adds	r6, r4, r5
 8003bd8:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003bdc:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8003be0:	f241 0447 	movw	r4, #4167	; 0x1047
 8003be4:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003be8:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003bec:	45a2      	cmp	sl, r4
 8003bee:	d812      	bhi.n	8003c16 <BSP_I2C4_Init+0x266>
 8003bf0:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8003bf4:	d30f      	bcc.n	8003c16 <BSP_I2C4_Init+0x266>
 8003bf6:	4540      	cmp	r0, r8
 8003bf8:	d20d      	bcs.n	8003c16 <BSP_I2C4_Init+0x266>
              error = -error;
 8003bfa:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8003bfe:	bf28      	it	cs
 8003c00:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8003c02:	9c03      	ldr	r4, [sp, #12]
 8003c04:	45a2      	cmp	sl, r4
 8003c06:	d206      	bcs.n	8003c16 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8003c08:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 8003c0a:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8003c0e:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003c10:	9a07      	ldr	r2, [sp, #28]
 8003c12:	60ca      	str	r2, [r1, #12]
 8003c14:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003c16:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8003c1a:	eba9 0903 	sub.w	r9, r9, r3
 8003c1e:	441e      	add	r6, r3
 8003c20:	4498      	add	r8, r3
 8003c22:	d1db      	bne.n	8003bdc <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003c24:	9c01      	ldr	r4, [sp, #4]
 8003c26:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8003c2a:	441d      	add	r5, r3
 8003c2c:	eba4 0403 	sub.w	r4, r4, r3
 8003c30:	9401      	str	r4, [sp, #4]
 8003c32:	d1be      	bne.n	8003bb2 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003c34:	3701      	adds	r7, #1
 8003c36:	3114      	adds	r1, #20
 8003c38:	e773      	b.n	8003b22 <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 8003c3a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003c3e:	e793      	b.n	8003b68 <BSP_I2C4_Init+0x1b8>
 8003c40:	58001c00 	.word	0x58001c00
 8003c44:	24001fb4 	.word	0x24001fb4
 8003c48:	240015ac 	.word	0x240015ac
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	58020c00 	.word	0x58020c00
 8003c54:	3b9aca00 	.word	0x3b9aca00
 8003c58:	24001fb0 	.word	0x24001fb0
 8003c5c:	240015b0 	.word	0x240015b0

08003c60 <BSP_I2C4_WriteReg>:
{
 8003c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003c62:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	460a      	mov	r2, r1
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	4808      	ldr	r0, [pc, #32]	; (8003c90 <BSP_I2C4_WriteReg+0x30>)
 8003c6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c72:	2301      	movs	r3, #1
 8003c74:	f001 ff21 	bl	8005aba <HAL_I2C_Mem_Write>
 8003c78:	b140      	cbz	r0, 8003c8c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <BSP_I2C4_WriteReg+0x30>)
 8003c7c:	f002 f893 	bl	8005da6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003c80:	2804      	cmp	r0, #4
 8003c82:	bf0c      	ite	eq
 8003c84:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003c88:	f06f 0003 	mvnne.w	r0, #3
}
 8003c8c:	b004      	add	sp, #16
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	24001fb4 	.word	0x24001fb4

08003c94 <BSP_I2C4_ReadReg>:
{
 8003c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003c96:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003c9a:	9200      	str	r2, [sp, #0]
 8003c9c:	460a      	mov	r2, r1
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <BSP_I2C4_ReadReg+0x30>)
 8003ca2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f001 ffbe 	bl	8005c28 <HAL_I2C_Mem_Read>
 8003cac:	b140      	cbz	r0, 8003cc0 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003cae:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <BSP_I2C4_ReadReg+0x30>)
 8003cb0:	f002 f879 	bl	8005da6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003cb4:	2804      	cmp	r0, #4
 8003cb6:	bf0c      	ite	eq
 8003cb8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003cbc:	f06f 0003 	mvnne.w	r0, #3
}
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd10      	pop	{r4, pc}
 8003cc4:	24001fb4 	.word	0x24001fb4

08003cc8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8003cc8:	f000 bd10 	b.w	80046ec <HAL_GetTick>

08003ccc <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003cce:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 8003cd2:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8003cd4:	684a      	ldr	r2, [r1, #4]
 8003cd6:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8003cdc:	688a      	ldr	r2, [r1, #8]
 8003cde:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8003ce0:	680a      	ldr	r2, [r1, #0]
 8003ce2:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8003cea:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8003cec:	68ca      	ldr	r2, [r1, #12]
 8003cee:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8003cf0:	f002 bc04 	b.w	80064fc <HAL_QSPI_Init>
 8003cf4:	52005000 	.word	0x52005000

08003cf8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8003cf8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8003cfa:	b988      	cbnz	r0, 8003d20 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8003cfe:	480b      	ldr	r0, [pc, #44]	; (8003d2c <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8003d00:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8003d02:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8003d04:	b94b      	cbnz	r3, 8003d1a <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8003d06:	f7ff f9a5 	bl	8003054 <MT25TL01G_EnableMemoryMappedModeSTR>
 8003d0a:	b110      	cbz	r0, 8003d12 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d0c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8003d10:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8003d12:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8003d14:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8003d16:	7023      	strb	r3, [r4, #0]
 8003d18:	e7fa      	b.n	8003d10 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8003d1a:	f7ff f951 	bl	8002fc0 <MT25TL01G_EnableMemoryMappedModeDTR>
 8003d1e:	e7f4      	b.n	8003d0a <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8003d20:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003d24:	e7f4      	b.n	8003d10 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8003d26:	bf00      	nop
 8003d28:	24002000 	.word	0x24002000
 8003d2c:	240002bc 	.word	0x240002bc

08003d30 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	460c      	mov	r4, r1
 8003d34:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8003d36:	bb28      	cbnz	r0, 8003d84 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8003d38:	4d17      	ldr	r5, [pc, #92]	; (8003d98 <BSP_QSPI_ConfigFlash+0x68>)
 8003d3a:	782b      	ldrb	r3, [r5, #0]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d024      	beq.n	8003d8a <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	4e16      	ldr	r6, [pc, #88]	; (8003d9c <BSP_QSPI_ConfigFlash+0x6c>)
 8003d44:	bf08      	it	eq
 8003d46:	2010      	moveq	r0, #16
 8003d48:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f002 fbd6 	bl	80064fc <HAL_QSPI_Init>
 8003d50:	b9f0      	cbnz	r0, 8003d90 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8003d52:	786b      	ldrb	r3, [r5, #1]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d10f      	bne.n	8003d78 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8003d58:	2c03      	cmp	r4, #3
 8003d5a:	d105      	bne.n	8003d68 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8003d5c:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8003d5e:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8003d60:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8003d62:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8003d64:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8003d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f7ff f90d 	bl	8002f88 <MT25TL01G_ExitQPIMode>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0f4      	beq.n	8003d5c <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d72:	f06f 0004 	mvn.w	r0, #4
 8003d76:	e7f6      	b.n	8003d66 <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 8003d78:	2c03      	cmp	r4, #3
 8003d7a:	d1ef      	bne.n	8003d5c <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7ff f8e7 	bl	8002f50 <MT25TL01G_EnterQPIMode>
 8003d82:	e7f4      	b.n	8003d6e <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8003d84:	f06f 0001 	mvn.w	r0, #1
 8003d88:	e7ed      	b.n	8003d66 <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8003d8a:	f06f 0019 	mvn.w	r0, #25
 8003d8e:	e7ea      	b.n	8003d66 <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8003d90:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003d94:	e7e7      	b.n	8003d66 <BSP_QSPI_ConfigFlash+0x36>
 8003d96:	bf00      	nop
 8003d98:	24002000 	.word	0x24002000
 8003d9c:	240002bc 	.word	0x240002bc

08003da0 <BSP_QSPI_Init>:
{
 8003da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	460d      	mov	r5, r1
 8003da6:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8003da8:	4604      	mov	r4, r0
 8003daa:	2800      	cmp	r0, #0
 8003dac:	f040 81ac 	bne.w	8004108 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8003db0:	4e03      	ldr	r6, [pc, #12]	; (8003dc0 <BSP_QSPI_Init+0x20>)
 8003db2:	7833      	ldrb	r3, [r6, #0]
 8003db4:	b133      	cbz	r3, 8003dc4 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8003db6:	2000      	movs	r0, #0
}
 8003db8:	b024      	add	sp, #144	; 0x90
 8003dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dbe:	bf00      	nop
 8003dc0:	24002000 	.word	0x24002000
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8003dc4:	4bc2      	ldr	r3, [pc, #776]	; (80040d0 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dc6:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003dca:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003dcc:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 8003dce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8003dd2:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003dd6:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8003dda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003de2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003de6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003dea:	9201      	str	r2, [sp, #4]
 8003dec:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8003dee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8003df6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003df8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8003dfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e02:	f042 0202 	orr.w	r2, r2, #2
 8003e06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e0e:	f002 0202 	and.w	r2, r2, #2
 8003e12:	9202      	str	r2, [sp, #8]
 8003e14:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8003e16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e26:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003e2a:	9203      	str	r2, [sp, #12]
 8003e2c:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8003e2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e32:	f042 0208 	orr.w	r2, r2, #8
 8003e36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e3e:	f002 0208 	and.w	r2, r2, #8
 8003e42:	9204      	str	r2, [sp, #16]
 8003e44:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8003e46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e4a:	f042 0220 	orr.w	r2, r2, #32
 8003e4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e56:	f002 0220 	and.w	r2, r2, #32
 8003e5a:	9205      	str	r2, [sp, #20]
 8003e5c:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8003e5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e62:	f042 0220 	orr.w	r2, r2, #32
 8003e66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e6e:	f002 0220 	and.w	r2, r2, #32
 8003e72:	9206      	str	r2, [sp, #24]
 8003e74:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8003e76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e86:	f002 0220 	and.w	r2, r2, #32
 8003e8a:	9207      	str	r2, [sp, #28]
 8003e8c:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8003e8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e9e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003ea2:	9208      	str	r2, [sp, #32]
 8003ea4:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8003ea6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003eb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003eb6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003eba:	9209      	str	r2, [sp, #36]	; 0x24
 8003ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8003ebe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003eca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ece:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003ed2:	920a      	str	r2, [sp, #40]	; 0x28
 8003ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8003ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ede:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ee2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ee6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003eea:	920b      	str	r2, [sp, #44]	; 0x2c
 8003eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8003eee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	930c      	str	r3, [sp, #48]	; 0x30
 8003f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f06:	2302      	movs	r3, #2
 8003f08:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003f0e:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003f10:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8003f14:	486f      	ldr	r0, [pc, #444]	; (80040d4 <BSP_QSPI_Init+0x334>)
 8003f16:	f001 fa29 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003f1a:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8003f1c:	a916      	add	r1, sp, #88	; 0x58
 8003f1e:	486e      	ldr	r0, [pc, #440]	; (80040d8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003f20:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8003f22:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003f26:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8003f2a:	f001 fa1f 	bl	800536c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8003f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8003f32:	a916      	add	r1, sp, #88	; 0x58
 8003f34:	4869      	ldr	r0, [pc, #420]	; (80040dc <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8003f36:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003f38:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003f3a:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8003f3c:	f001 fa16 	bl	800536c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8003f40:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8003f42:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8003f46:	4866      	ldr	r0, [pc, #408]	; (80040e0 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8003f48:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003f4c:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8003f4e:	f001 fa0d 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8003f52:	a916      	add	r1, sp, #88	; 0x58
 8003f54:	4863      	ldr	r0, [pc, #396]	; (80040e4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8003f56:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8003f5a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8003f5e:	f001 fa05 	bl	800536c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8003f62:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8003f64:	a916      	add	r1, sp, #88	; 0x58
 8003f66:	485e      	ldr	r0, [pc, #376]	; (80040e0 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8003f68:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003f6a:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8003f6c:	f001 f9fe 	bl	800536c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8003f70:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8003f72:	a916      	add	r1, sp, #88	; 0x58
 8003f74:	485b      	ldr	r0, [pc, #364]	; (80040e4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8003f76:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003f78:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8003f7a:	f001 f9f7 	bl	800536c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8003f7e:	a916      	add	r1, sp, #88	; 0x58
 8003f80:	4855      	ldr	r0, [pc, #340]	; (80040d8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8003f82:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8003f86:	f001 f9f1 	bl	800536c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8003f8a:	a916      	add	r1, sp, #88	; 0x58
 8003f8c:	4855      	ldr	r0, [pc, #340]	; (80040e4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8003f8e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8003f92:	f001 f9eb 	bl	800536c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8003f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8003f9a:	a916      	add	r1, sp, #88	; 0x58
 8003f9c:	484e      	ldr	r0, [pc, #312]	; (80040d8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8003f9e:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8003fa0:	f001 f9e4 	bl	800536c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	205c      	movs	r0, #92	; 0x5c
 8003faa:	f000 fbcf 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003fae:	205c      	movs	r0, #92	; 0x5c
 8003fb0:	f000 fbfe 	bl	80047b0 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8003fb4:	a811      	add	r0, sp, #68	; 0x44
 8003fb6:	f7fe ff22 	bl	8002dfe <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8003fba:	786a      	ldrb	r2, [r5, #1]
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8003fbe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8003fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc6:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fca:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8003fce:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 8003fd0:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8003fd4:	a90d      	add	r1, sp, #52	; 0x34
 8003fd6:	4845      	ldr	r0, [pc, #276]	; (80040ec <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8003fd8:	bf08      	it	eq
 8003fda:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8003fdc:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8003fde:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8003fe0:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8003fe2:	f7ff fe73 	bl	8003ccc <MX_QSPI_Init>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	f040 8091 	bne.w	800410e <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8003fec:	2103      	movs	r1, #3
 8003fee:	483f      	ldr	r0, [pc, #252]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8003ff0:	f7ff f876 	bl	80030e0 <MT25TL01G_ResetEnable>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d17c      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8003ff8:	2103      	movs	r1, #3
 8003ffa:	483c      	ldr	r0, [pc, #240]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8003ffc:	f7ff f891 	bl	8003122 <MT25TL01G_ResetMemory>
 8004000:	2800      	cmp	r0, #0
 8004002:	d176      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004004:	7871      	ldrb	r1, [r6, #1]
 8004006:	4839      	ldr	r0, [pc, #228]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8004008:	f7fe ff0a 	bl	8002e20 <MT25TL01G_AutoPollingMemReady>
 800400c:	4601      	mov	r1, r0
 800400e:	2800      	cmp	r0, #0
 8004010:	d16f      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8004012:	4836      	ldr	r0, [pc, #216]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8004014:	f7ff f864 	bl	80030e0 <MT25TL01G_ResetEnable>
 8004018:	4601      	mov	r1, r0
 800401a:	2800      	cmp	r0, #0
 800401c:	d169      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800401e:	4833      	ldr	r0, [pc, #204]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8004020:	f7ff f87f 	bl	8003122 <MT25TL01G_ResetMemory>
 8004024:	4601      	mov	r1, r0
 8004026:	2800      	cmp	r0, #0
 8004028:	d163      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800402a:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800402c:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800402e:	482f      	ldr	r0, [pc, #188]	; (80040ec <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8004030:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004032:	f7fe fef5 	bl	8002e20 <MT25TL01G_AutoPollingMemReady>
 8004036:	2800      	cmp	r0, #0
 8004038:	d15b      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800403a:	7871      	ldrb	r1, [r6, #1]
 800403c:	482b      	ldr	r0, [pc, #172]	; (80040ec <BSP_QSPI_Init+0x34c>)
 800403e:	f7fe ff5e 	bl	8002efe <MT25TL01G_Enter4BytesAddressMode>
 8004042:	2800      	cmp	r0, #0
 8004044:	d155      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004046:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 800404a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800404e:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004054:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8004056:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004058:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800405a:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800405c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004060:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 8004062:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004064:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004068:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800406c:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004070:	481e      	ldr	r0, [pc, #120]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8004072:	f002 fa91 	bl	8006598 <HAL_QSPI_Command>
 8004076:	2800      	cmp	r0, #0
 8004078:	d13b      	bne.n	80040f2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	f10d 0102 	add.w	r1, sp, #2
 8004082:	481a      	ldr	r0, [pc, #104]	; (80040ec <BSP_QSPI_Init+0x34c>)
 8004084:	f002 fb24 	bl	80066d0 <HAL_QSPI_Receive>
 8004088:	bb98      	cbnz	r0, 80040f2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800408a:	7871      	ldrb	r1, [r6, #1]
 800408c:	4817      	ldr	r0, [pc, #92]	; (80040ec <BSP_QSPI_Init+0x34c>)
 800408e:	f7fe fef2 	bl	8002e76 <MT25TL01G_WriteEnable>
 8004092:	bb70      	cbnz	r0, 80040f2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8004094:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	a916      	add	r1, sp, #88	; 0x58
 800409c:	4813      	ldr	r0, [pc, #76]	; (80040ec <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800409e:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80040a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80040a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a8:	051b      	lsls	r3, r3, #20
 80040aa:	0d1b      	lsrs	r3, r3, #20
 80040ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b4:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040b8:	f002 fa6e 	bl	8006598 <HAL_QSPI_Command>
 80040bc:	b9c8      	cbnz	r0, 80040f2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040be:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c2:	f10d 0102 	add.w	r1, sp, #2
 80040c6:	4809      	ldr	r0, [pc, #36]	; (80040ec <BSP_QSPI_Init+0x34c>)
 80040c8:	f002 faa9 	bl	800661e <HAL_QSPI_Transmit>
 80040cc:	e010      	b.n	80040f0 <BSP_QSPI_Init+0x350>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
 80040d4:	58020400 	.word	0x58020400
 80040d8:	58021800 	.word	0x58021800
 80040dc:	58020c00 	.word	0x58020c00
 80040e0:	58021c00 	.word	0x58021c00
 80040e4:	58021400 	.word	0x58021400
 80040e8:	0801b21c 	.word	0x0801b21c
 80040ec:	240002bc 	.word	0x240002bc
 80040f0:	b110      	cbz	r0, 80040f8 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80040f2:	f06f 0004 	mvn.w	r0, #4
 80040f6:	e65f      	b.n	8003db8 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80040f8:	786a      	ldrb	r2, [r5, #1]
 80040fa:	7829      	ldrb	r1, [r5, #0]
 80040fc:	f7ff fe18 	bl	8003d30 <BSP_QSPI_ConfigFlash>
 8004100:	2800      	cmp	r0, #0
 8004102:	f43f ae58 	beq.w	8003db6 <BSP_QSPI_Init+0x16>
 8004106:	e7f4      	b.n	80040f2 <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 8004108:	f06f 0001 	mvn.w	r0, #1
 800410c:	e654      	b.n	8003db8 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800410e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8004112:	e651      	b.n	8003db8 <BSP_QSPI_Init+0x18>

08004114 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8004114:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8004116:	4604      	mov	r4, r0
 8004118:	b970      	cbnz	r0, 8004138 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <BSP_SDRAM_DeInit+0x2c>)
 800411c:	4809      	ldr	r0, [pc, #36]	; (8004144 <BSP_SDRAM_DeInit+0x30>)
 800411e:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8004120:	f003 feca 	bl	8007eb8 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8004124:	207a      	movs	r0, #122	; 0x7a
 8004126:	f000 fb51 	bl	80047cc <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800412a:	4807      	ldr	r0, [pc, #28]	; (8004148 <BSP_SDRAM_DeInit+0x34>)
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <BSP_SDRAM_DeInit+0x38>)
 800412e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8004130:	f002 f8b1 	bl	8006296 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8004134:	4620      	mov	r0, r4
}
 8004136:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8004138:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800413c:	e7fb      	b.n	8004136 <BSP_SDRAM_DeInit+0x22>
 800413e:	bf00      	nop
 8004140:	52004140 	.word	0x52004140
 8004144:	2400200c 	.word	0x2400200c
 8004148:	24002040 	.word	0x24002040
 800414c:	52000040 	.word	0x52000040

08004150 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8004150:	2201      	movs	r2, #1
 8004152:	4915      	ldr	r1, [pc, #84]	; (80041a8 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004154:	4b15      	ldr	r3, [pc, #84]	; (80041ac <MX_SDRAM_Init+0x5c>)
{
 8004156:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8004158:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800415c:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800415e:	2104      	movs	r1, #4
 8004160:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8004162:	2440      	movs	r4, #64	; 0x40
{
 8004164:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8004166:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800416a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800416e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8004172:	2200      	movs	r2, #0
 8004174:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004178:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800417c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8004180:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8004184:	2207      	movs	r2, #7
 8004186:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8004188:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800418c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800418e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8004190:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8004194:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8004198:	f003 fe66 	bl	8007e68 <HAL_SDRAM_Init>
}
 800419c:	3800      	subs	r0, #0
 800419e:	bf18      	it	ne
 80041a0:	2001      	movne	r0, #1
 80041a2:	b008      	add	sp, #32
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	bf00      	nop
 80041a8:	52004140 	.word	0x52004140
 80041ac:	2400200c 	.word	0x2400200c

080041b0 <BSP_SDRAM_Init>:
{
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 80041b2:	4605      	mov	r5, r0
{
 80041b4:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f040 80dd 	bne.w	8004376 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 80041bc:	4b71      	ldr	r3, [pc, #452]	; (8004384 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80041be:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80041c0:	a909      	add	r1, sp, #36	; 0x24
 80041c2:	4871      	ldr	r0, [pc, #452]	; (8004388 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80041c4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80041c8:	4c70      	ldr	r4, [pc, #448]	; (800438c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80041ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80041ce:	4e70      	ldr	r6, [pc, #448]	; (8004390 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80041d0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80041d4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80041d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80041dc:	9201      	str	r2, [sp, #4]
 80041de:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80041e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80041ec:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80041f0:	f002 0201 	and.w	r2, r2, #1
 80041f4:	9202      	str	r2, [sp, #8]
 80041f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80041fc:	f042 0208 	orr.w	r2, r2, #8
 8004200:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004204:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004208:	f002 0208 	and.w	r2, r2, #8
 800420c:	9203      	str	r2, [sp, #12]
 800420e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004210:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004214:	f042 0210 	orr.w	r2, r2, #16
 8004218:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800421c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004220:	f002 0210 	and.w	r2, r2, #16
 8004224:	9204      	str	r2, [sp, #16]
 8004226:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004228:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004234:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004238:	f002 0220 	and.w	r2, r2, #32
 800423c:	9205      	str	r2, [sp, #20]
 800423e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004240:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004248:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800424c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004250:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004254:	9206      	str	r2, [sp, #24]
 8004256:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004258:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800425c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004260:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004264:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004268:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004270:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004278:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800427c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800427e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	9308      	str	r3, [sp, #32]
 8004288:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800428a:	2301      	movs	r3, #1
 800428c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004290:	230c      	movs	r3, #12
 8004292:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8004296:	f24c 7303 	movw	r3, #50947	; 0xc703
 800429a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800429c:	f001 f866 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80042a0:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80042a4:	a909      	add	r1, sp, #36	; 0x24
 80042a6:	483b      	ldr	r0, [pc, #236]	; (8004394 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80042a8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80042aa:	f001 f85f 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80042ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80042b2:	a909      	add	r1, sp, #36	; 0x24
 80042b4:	4838      	ldr	r0, [pc, #224]	; (8004398 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80042b6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80042b8:	f001 f858 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80042bc:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80042c0:	a909      	add	r1, sp, #36	; 0x24
 80042c2:	4836      	ldr	r0, [pc, #216]	; (800439c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80042c4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80042c6:	f001 f851 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80042ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80042ce:	a909      	add	r1, sp, #36	; 0x24
 80042d0:	4833      	ldr	r0, [pc, #204]	; (80043a0 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80042d2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80042d4:	f001 f84a 	bl	800536c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80042d8:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80042dc:	a909      	add	r1, sp, #36	; 0x24
 80042de:	4831      	ldr	r0, [pc, #196]	; (80043a4 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80042e0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80042e2:	f001 f843 	bl	800536c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80042e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80042ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80042ee:	f240 2002 	movw	r0, #514	; 0x202
 80042f2:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80042f6:	6334      	str	r4, [r6, #48]	; 0x30
 80042f8:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80042fa:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80042fe:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8004302:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8004304:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8004306:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8004308:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800430a:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800430e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8004312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8004318:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800431a:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800431c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8004320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8004324:	f001 ffb7 	bl	8006296 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8004328:	4620      	mov	r0, r4
 800432a:	f001 ff45 	bl	80061b8 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800432e:	462a      	mov	r2, r5
 8004330:	210f      	movs	r1, #15
 8004332:	207a      	movs	r0, #122	; 0x7a
 8004334:	f000 fa0a 	bl	800474c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8004338:	207a      	movs	r0, #122	; 0x7a
 800433a:	f000 fa39 	bl	80047b0 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff ff06 	bl	8004150 <MX_SDRAM_Init>
 8004344:	b9d0      	cbnz	r0, 800437c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8004346:	4919      	ldr	r1, [pc, #100]	; (80043ac <BSP_SDRAM_Init+0x1fc>)
 8004348:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800434a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800434e:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8004352:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8004354:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8004358:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800435a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800435e:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8004362:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8004364:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8004366:	f7fe fd1d 	bl	8002da4 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800436a:	2800      	cmp	r0, #0
 800436c:	bf18      	it	ne
 800436e:	f06f 0004 	mvnne.w	r0, #4
}
 8004372:	b00f      	add	sp, #60	; 0x3c
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8004376:	f06f 0001 	mvn.w	r0, #1
 800437a:	e7fa      	b.n	8004372 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e7f7      	b.n	8004372 <BSP_SDRAM_Init+0x1c2>
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
 8004388:	58020c00 	.word	0x58020c00
 800438c:	240020ac 	.word	0x240020ac
 8004390:	2400200c 	.word	0x2400200c
 8004394:	58021000 	.word	0x58021000
 8004398:	58021400 	.word	0x58021400
 800439c:	58021800 	.word	0x58021800
 80043a0:	58021c00 	.word	0x58021c00
 80043a4:	58022000 	.word	0x58022000
 80043a8:	52000040 	.word	0x52000040
 80043ac:	24002118 	.word	0x24002118

080043b0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80043b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b4:	460c      	mov	r4, r1
 80043b6:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80043b8:	4606      	mov	r6, r0
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d171      	bne.n	80044a2 <BSP_TS_Init+0xf2>
 80043be:	680b      	ldr	r3, [r1, #0]
 80043c0:	1e5a      	subs	r2, r3, #1
 80043c2:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 80043c6:	d26c      	bcs.n	80044a2 <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80043c8:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80043ca:	1e51      	subs	r1, r2, #1
 80043cc:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 80043d0:	d267      	bcs.n	80044a2 <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bf28      	it	cs
 80043d6:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80043d8:	68e2      	ldr	r2, [r4, #12]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d861      	bhi.n	80044a2 <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80043de:	2370      	movs	r3, #112	; 0x70
 80043e0:	2254      	movs	r2, #84	; 0x54
 80043e2:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80043e6:	4f32      	ldr	r7, [pc, #200]	; (80044b0 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 80043e8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80044d0 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80043ec:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80044d4 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80043f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 80043f4:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <BSP_TS_Init+0x104>)
 80043f6:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80043f8:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <BSP_TS_Init+0x108>)
 80043fa:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80043fc:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <BSP_TS_Init+0x10c>)
 80043fe:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8004400:	4b2f      	ldr	r3, [pc, #188]	; (80044c0 <BSP_TS_Init+0x110>)
 8004402:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <BSP_TS_Init+0x114>)
 8004406:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8004408:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800440c:	a906      	add	r1, sp, #24
 800440e:	4828      	ldr	r0, [pc, #160]	; (80044b0 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8004410:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8004414:	f7fe fbcc 	bl	8002bb0 <FT6X06_RegisterBusIO>
 8004418:	b118      	cbz	r0, 8004422 <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 800441a:	2e01      	cmp	r6, #1
 800441c:	d044      	beq.n	80044a8 <BSP_TS_Init+0xf8>
 800441e:	2601      	movs	r6, #1
 8004420:	e7f2      	b.n	8004408 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8004422:	4669      	mov	r1, sp
 8004424:	4638      	mov	r0, r7
 8004426:	f7fe fb0c 	bl	8002a42 <FT6X06_ReadID>
 800442a:	2800      	cmp	r0, #0
 800442c:	d1f5      	bne.n	800441a <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 800442e:	9b00      	ldr	r3, [sp, #0]
 8004430:	2b11      	cmp	r3, #17
 8004432:	d1f2      	bne.n	800441a <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8004434:	a903      	add	r1, sp, #12
 8004436:	4638      	mov	r0, r7
 8004438:	f7fe fab0 	bl	800299c <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800443e:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 8004440:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8004444:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4798      	blx	r3
 800444c:	4605      	mov	r5, r0
 800444e:	2800      	cmp	r0, #0
 8004450:	d1e3      	bne.n	800441a <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8004452:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004454:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8004456:	4e1d      	ldr	r6, [pc, #116]	; (80044cc <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004458:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800445c:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800445e:	6863      	ldr	r3, [r4, #4]
 8004460:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8004462:	68a3      	ldr	r3, [r4, #8]
 8004464:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800446a:	f8d9 3000 	ldr.w	r3, [r9]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4798      	blx	r3
 8004472:	2800      	cmp	r0, #0
 8004474:	da02      	bge.n	800447c <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004476:	f06f 0504 	mvn.w	r5, #4
 800447a:	e00e      	b.n	800449a <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800447c:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800447e:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004480:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004482:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004484:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004486:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004488:	68e3      	ldr	r3, [r4, #12]
 800448a:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800448c:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800448e:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004490:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004492:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004494:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004496:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800449a:	4628      	mov	r0, r5
 800449c:	b00c      	add	sp, #48	; 0x30
 800449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80044a2:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80044a6:	e7f8      	b.n	800449a <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 80044a8:	f04f 35ff 	mov.w	r5, #4294967295
 80044ac:	e7f5      	b.n	800449a <BSP_TS_Init+0xea>
 80044ae:	bf00      	nop
 80044b0:	24002138 	.word	0x24002138
 80044b4:	080039b1 	.word	0x080039b1
 80044b8:	0800391d 	.word	0x0800391d
 80044bc:	08003c95 	.word	0x08003c95
 80044c0:	08003c61 	.word	0x08003c61
 80044c4:	08003cc9 	.word	0x08003cc9
 80044c8:	24000018 	.word	0x24000018
 80044cc:	24002164 	.word	0x24002164
 80044d0:	24002160 	.word	0x24002160
 80044d4:	2400218c 	.word	0x2400218c

080044d8 <BSP_TS_GetState>:
{
 80044d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80044dc:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 80044de:	2800      	cmp	r0, #0
 80044e0:	d151      	bne.n	8004586 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80044e2:	4b2a      	ldr	r3, [pc, #168]	; (800458c <BSP_TS_GetState+0xb4>)
 80044e4:	a901      	add	r1, sp, #4
 80044e6:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <BSP_TS_GetState+0xb8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6810      	ldr	r0, [r2, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	4798      	blx	r3
 80044f0:	2800      	cmp	r0, #0
 80044f2:	db45      	blt.n	8004580 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80044f4:	4927      	ldr	r1, [pc, #156]	; (8004594 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 80044f6:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80044f8:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80044fc:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 80044fe:	2800      	cmp	r0, #0
 8004500:	d03a      	beq.n	8004578 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004502:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8004504:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004508:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800450a:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 800450e:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004512:	bf42      	ittt	mi
 8004514:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 8004516:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 8004518:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800451a:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800451c:	bf44      	itt	mi
 800451e:	f108 34ff 	addmi.w	r4, r8, #4294967295
 8004522:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004524:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004526:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8004528:	bf48      	it	mi
 800452a:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800452e:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8004532:	bf48      	it	mi
 8004534:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004536:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8004538:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800453a:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800453c:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800453e:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004542:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004546:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004548:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800454a:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800454c:	bf8c      	ite	hi
 800454e:	eba4 050c 	subhi.w	r5, r4, ip
 8004552:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004556:	42bb      	cmp	r3, r7
 8004558:	bf8c      	ite	hi
 800455a:	1bda      	subhi	r2, r3, r7
 800455c:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800455e:	42a8      	cmp	r0, r5
 8004560:	d301      	bcc.n	8004566 <BSP_TS_GetState+0x8e>
 8004562:	4290      	cmp	r0, r2
 8004564:	d205      	bcs.n	8004572 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004566:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004568:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800456a:	2000      	movs	r0, #0
}
 800456c:	b004      	add	sp, #16
 800456e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004572:	e9c6 c701 	strd	ip, r7, [r6, #4]
 8004576:	e7f8      	b.n	800456a <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004578:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800457c:	60b7      	str	r7, [r6, #8]
 800457e:	e7f5      	b.n	800456c <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004580:	f06f 0004 	mvn.w	r0, #4
 8004584:	e7f2      	b.n	800456c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8004586:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800458a:	e7ef      	b.n	800456c <BSP_TS_GetState+0x94>
 800458c:	2400218c 	.word	0x2400218c
 8004590:	24002160 	.word	0x24002160
 8004594:	24002164 	.word	0x24002164

08004598 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <SystemInit+0xb8>)
 800459a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800459e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	f042 0210 	orr.w	r2, r2, #16
 80045ac:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045ae:	4a29      	ldr	r2, [pc, #164]	; (8004654 <SystemInit+0xbc>)
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d805      	bhi.n	80045c6 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	f023 030f 	bic.w	r3, r3, #15
 80045c0:	f043 0307 	orr.w	r3, r3, #7
 80045c4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <SystemInit+0xc0>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80045d4:	4a21      	ldr	r2, [pc, #132]	; (800465c <SystemInit+0xc4>)
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045da:	491e      	ldr	r1, [pc, #120]	; (8004654 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 80045dc:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045de:	680a      	ldr	r2, [r1, #0]
 80045e0:	0712      	lsls	r2, r2, #28
 80045e2:	d505      	bpl.n	80045f0 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045e4:	680a      	ldr	r2, [r1, #0]
 80045e6:	f022 020f 	bic.w	r2, r2, #15
 80045ea:	f042 0207 	orr.w	r2, r2, #7
 80045ee:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80045f0:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80045f2:	491b      	ldr	r1, [pc, #108]	; (8004660 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 80045f4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80045f6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80045f8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80045fa:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80045fc:	4919      	ldr	r1, [pc, #100]	; (8004664 <SystemInit+0xcc>)
 80045fe:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004600:	4919      	ldr	r1, [pc, #100]	; (8004668 <SystemInit+0xd0>)
 8004602:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004606:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800460a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800460c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004614:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004616:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8004618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800461c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004624:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <SystemInit+0xd4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004634:	d203      	bcs.n	800463e <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <SystemInit+0xd8>)
 8004638:	2201      	movs	r2, #1
 800463a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <SystemInit+0xdc>)
 8004640:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004644:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8004646:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800464a:	4b01      	ldr	r3, [pc, #4]	; (8004650 <SystemInit+0xb8>)
 800464c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00
 8004654:	52002000 	.word	0x52002000
 8004658:	58024400 	.word	0x58024400
 800465c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004660:	02020200 	.word	0x02020200
 8004664:	01ff0000 	.word	0x01ff0000
 8004668:	01010280 	.word	0x01010280
 800466c:	5c001000 	.word	0x5c001000
 8004670:	51008000 	.word	0x51008000
 8004674:	52004000 	.word	0x52004000

08004678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004678:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467a:	2003      	movs	r0, #3
 800467c:	f000 f854 	bl	8004728 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004680:	f002 fbf6 	bl	8006e70 <HAL_RCC_GetSysClockFreq>
 8004684:	490f      	ldr	r1, [pc, #60]	; (80046c4 <HAL_Init+0x4c>)
 8004686:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <HAL_Init+0x50>)
 8004688:	698b      	ldr	r3, [r1, #24]
 800468a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800468e:	5cd3      	ldrb	r3, [r2, r3]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004696:	698b      	ldr	r3, [r1, #24]
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	5cd3      	ldrb	r3, [r2, r3]
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_Init+0x54>)
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	fa20 f303 	lsr.w	r3, r0, r3
 80046a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_Init+0x58>)
 80046ac:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7fc fcc0 	bl	8001034 <HAL_InitTick>
 80046b4:	4604      	mov	r4, r0
 80046b6:	b918      	cbnz	r0, 80046c0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80046b8:	f7fc fa4c 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80046bc:	4620      	mov	r0, r4
 80046be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046c0:	2401      	movs	r4, #1
 80046c2:	e7fb      	b.n	80046bc <HAL_Init+0x44>
 80046c4:	58024400 	.word	0x58024400
 80046c8:	0801b224 	.word	0x0801b224
 80046cc:	2400004c 	.word	0x2400004c
 80046d0:	24000048 	.word	0x24000048

080046d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80046d4:	4a03      	ldr	r2, [pc, #12]	; (80046e4 <HAL_IncTick+0x10>)
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <HAL_IncTick+0x14>)
 80046d8:	6811      	ldr	r1, [r2, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	440b      	add	r3, r1
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	24002190 	.word	0x24002190
 80046e8:	24000050 	.word	0x24000050

080046ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <HAL_GetTick+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	24002190 	.word	0x24002190

080046f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7ff fff6 	bl	80046ec <HAL_GetTick>
 8004700:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004702:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004704:	bf1e      	ittt	ne
 8004706:	4b04      	ldrne	r3, [pc, #16]	; (8004718 <HAL_Delay+0x20>)
 8004708:	781b      	ldrbne	r3, [r3, #0]
 800470a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800470c:	f7ff ffee 	bl	80046ec <HAL_GetTick>
 8004710:	1b43      	subs	r3, r0, r5
 8004712:	42a3      	cmp	r3, r4
 8004714:	d3fa      	bcc.n	800470c <HAL_Delay+0x14>
  {
  }
}
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	24000050 	.word	0x24000050

0800471c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800471c:	4b01      	ldr	r3, [pc, #4]	; (8004724 <HAL_GetREVID+0x8>)
 800471e:	6818      	ldr	r0, [r3, #0]
}
 8004720:	0c00      	lsrs	r0, r0, #16
 8004722:	4770      	bx	lr
 8004724:	5c001000 	.word	0x5c001000

08004728 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004728:	4907      	ldr	r1, [pc, #28]	; (8004748 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800472a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800472c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800472e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004736:	0412      	lsls	r2, r2, #16
 8004738:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800473a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800473c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004744:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800474e:	b530      	push	{r4, r5, lr}
 8004750:	68dc      	ldr	r4, [r3, #12]
 8004752:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004756:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800475c:	2d04      	cmp	r5, #4
 800475e:	bf28      	it	cs
 8004760:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004762:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004768:	bf8c      	ite	hi
 800476a:	3c03      	subhi	r4, #3
 800476c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8004772:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004774:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800477c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004780:	fa01 f104 	lsl.w	r1, r1, r4
 8004784:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004788:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800478c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800478e:	db06      	blt.n	800479e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004790:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004794:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004798:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800479c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479e:	f000 000f 	and.w	r0, r0, #15
 80047a2:	4a02      	ldr	r2, [pc, #8]	; (80047ac <HAL_NVIC_SetPriority+0x60>)
 80047a4:	5413      	strb	r3, [r2, r0]
 80047a6:	e7f9      	b.n	800479c <HAL_NVIC_SetPriority+0x50>
 80047a8:	e000ed00 	.word	0xe000ed00
 80047ac:	e000ed14 	.word	0xe000ed14

080047b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047b0:	2800      	cmp	r0, #0
 80047b2:	db08      	blt.n	80047c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b4:	2301      	movs	r3, #1
 80047b6:	0942      	lsrs	r2, r0, #5
 80047b8:	f000 001f 	and.w	r0, r0, #31
 80047bc:	fa03 f000 	lsl.w	r0, r3, r0
 80047c0:	4b01      	ldr	r3, [pc, #4]	; (80047c8 <HAL_NVIC_EnableIRQ+0x18>)
 80047c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80047c6:	4770      	bx	lr
 80047c8:	e000e100 	.word	0xe000e100

080047cc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047cc:	2800      	cmp	r0, #0
 80047ce:	db0d      	blt.n	80047ec <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d0:	0943      	lsrs	r3, r0, #5
 80047d2:	2201      	movs	r2, #1
 80047d4:	f000 001f 	and.w	r0, r0, #31
 80047d8:	3320      	adds	r3, #32
 80047da:	fa02 f000 	lsl.w	r0, r2, r0
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <HAL_NVIC_DisableIRQ+0x24>)
 80047e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80047e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047e8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e100 	.word	0xe000e100

080047f4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80047f4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <HAL_MPU_Disable+0x18>)
 80047fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <HAL_MPU_Enable+0x1c>)
 8004812:	f040 0001 	orr.w	r0, r0, #1
 8004816:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800481a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004826:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800482a:	4770      	bx	lr
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004830:	7843      	ldrb	r3, [r0, #1]
 8004832:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_MPU_ConfigRegion+0x54>)
{
 8004834:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004836:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800483a:	7801      	ldrb	r1, [r0, #0]
 800483c:	b1e9      	cbz	r1, 800487a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800483e:	6843      	ldr	r3, [r0, #4]
 8004840:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004844:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004846:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004848:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800484a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800484e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004850:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004852:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004856:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004858:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800485c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800485e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004862:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004864:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004868:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800486a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800486e:	7a01      	ldrb	r1, [r0, #8]
 8004870:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004874:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004878:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800487a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800487e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8004882:	e7f9      	b.n	8004878 <HAL_MPU_ConfigRegion+0x48>
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004888:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800488a:	4604      	mov	r4, r0
 800488c:	b908      	cbnz	r0, 8004892 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800488e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004890:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004892:	7f43      	ldrb	r3, [r0, #29]
 8004894:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004898:	b913      	cbnz	r3, 80048a0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800489a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800489c:	f7fc f972 	bl	8000b84 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80048a0:	2302      	movs	r3, #2
 80048a2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80048a4:	7923      	ldrb	r3, [r4, #4]
 80048a6:	b9e3      	cbnz	r3, 80048e2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <HAL_CRC_Init+0x70>)
 80048ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	f022 0218 	bic.w	r2, r2, #24
 80048b4:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80048b6:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80048b8:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80048ba:	b9d2      	cbnz	r2, 80048f2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80048c0:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80048c2:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	6961      	ldr	r1, [r4, #20]
 80048c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048cc:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80048ce:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80048d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d8:	430a      	orrs	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80048dc:	2301      	movs	r3, #1
 80048de:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80048e0:	e7d6      	b.n	8004890 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80048e2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f808 	bl	80048fc <HAL_CRCEx_Polynomial_Set>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0e2      	beq.n	80048b6 <HAL_CRC_Init+0x2e>
 80048f0:	e7cd      	b.n	800488e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80048f2:	6922      	ldr	r2, [r4, #16]
 80048f4:	e7e4      	b.n	80048c0 <HAL_CRC_Init+0x38>
 80048f6:	bf00      	nop
 80048f8:	04c11db7 	.word	0x04c11db7

080048fc <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80048fc:	231f      	movs	r3, #31
{
 80048fe:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004900:	3b01      	subs	r3, #1
 8004902:	d31c      	bcc.n	800493e <HAL_CRCEx_Polynomial_Set+0x42>
 8004904:	fa21 f403 	lsr.w	r4, r1, r3
 8004908:	07e4      	lsls	r4, r4, #31
 800490a:	d5f9      	bpl.n	8004900 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800490c:	2a10      	cmp	r2, #16
 800490e:	d012      	beq.n	8004936 <HAL_CRCEx_Polynomial_Set+0x3a>
 8004910:	d804      	bhi.n	800491c <HAL_CRCEx_Polynomial_Set+0x20>
 8004912:	b13a      	cbz	r2, 8004924 <HAL_CRCEx_Polynomial_Set+0x28>
 8004914:	2a08      	cmp	r2, #8
 8004916:	d010      	beq.n	800493a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004918:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800491a:	e00b      	b.n	8004934 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800491c:	2a18      	cmp	r2, #24
 800491e:	d1fb      	bne.n	8004918 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004920:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004922:	d8f9      	bhi.n	8004918 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004924:	6800      	ldr	r0, [r0, #0]
 8004926:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004928:	6883      	ldr	r3, [r0, #8]
 800492a:	f023 0318 	bic.w	r3, r3, #24
 800492e:	431a      	orrs	r2, r3
 8004930:	6082      	str	r2, [r0, #8]
 8004932:	2000      	movs	r0, #0
}
 8004934:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004936:	2b07      	cmp	r3, #7
 8004938:	e7f3      	b.n	8004922 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800493a:	2b0f      	cmp	r3, #15
 800493c:	e7f1      	b.n	8004922 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800493e:	2a00      	cmp	r2, #0
 8004940:	d1ea      	bne.n	8004918 <HAL_CRCEx_Polynomial_Set+0x1c>
 8004942:	e7ef      	b.n	8004924 <HAL_CRCEx_Polynomial_Set+0x28>

08004944 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004944:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004946:	4604      	mov	r4, r0
 8004948:	2800      	cmp	r0, #0
 800494a:	d036      	beq.n	80049ba <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800494c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8004950:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004954:	b91b      	cbnz	r3, 800495e <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004956:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800495a:	f7fc f92b 	bl	8000bb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800495e:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004960:	69e0      	ldr	r0, [r4, #28]
 8004962:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004964:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800496c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004974:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800497c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800497e:	68a2      	ldr	r2, [r4, #8]
 8004980:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8004984:	4302      	orrs	r2, r0
 8004986:	f021 0101 	bic.w	r1, r1, #1
 800498a:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800498c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800498e:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004992:	0c12      	lsrs	r2, r2, #16
 8004994:	0412      	lsls	r2, r2, #16
 8004996:	430a      	orrs	r2, r1
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800499a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800499c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80049a0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80049a4:	0552      	lsls	r2, r2, #21
 80049a6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049aa:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80049ac:	430a      	orrs	r2, r1
 80049ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80049b0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049b2:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80049b4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80049b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80049ba:	2001      	movs	r0, #1
 80049bc:	e7fc      	b.n	80049b8 <HAL_DMA2D_Init+0x74>

080049be <HAL_DMA2D_LineEventCallback>:
 80049be:	4770      	bx	lr

080049c0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80049c0:	4770      	bx	lr

080049c2 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80049c2:	6803      	ldr	r3, [r0, #0]
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80049c6:	685e      	ldr	r6, [r3, #4]
{
 80049c8:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80049ca:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049cc:	07f2      	lsls	r2, r6, #31
 80049ce:	d514      	bpl.n	80049fa <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80049d0:	05e9      	lsls	r1, r5, #23
 80049d2:	d512      	bpl.n	80049fa <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049da:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049dc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80049e4:	2201      	movs	r2, #1
 80049e6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049e8:	2304      	movs	r3, #4
 80049ea:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049ee:	2300      	movs	r3, #0
 80049f0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80049f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049f6:	b103      	cbz	r3, 80049fa <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049f8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049fa:	06b2      	lsls	r2, r6, #26
 80049fc:	d516      	bpl.n	8004a2c <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049fe:	04ab      	lsls	r3, r5, #18
 8004a00:	d514      	bpl.n	8004a2c <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a0a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a26:	b10b      	cbz	r3, 8004a2c <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a2c:	0730      	lsls	r0, r6, #28
 8004a2e:	d516      	bpl.n	8004a5e <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a30:	0529      	lsls	r1, r5, #20
 8004a32:	d514      	bpl.n	8004a5e <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a3e:	2208      	movs	r2, #8
 8004a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a50:	2300      	movs	r3, #0
 8004a52:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a58:	b10b      	cbz	r3, 8004a5e <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a5e:	0772      	lsls	r2, r6, #29
 8004a60:	d50b      	bpl.n	8004a7a <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a62:	056b      	lsls	r3, r5, #21
 8004a64:	d509      	bpl.n	8004a7a <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a66:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a68:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a70:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004a72:	2204      	movs	r2, #4
 8004a74:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a76:	f7ff ffa2 	bl	80049be <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004a7a:	07b0      	lsls	r0, r6, #30
 8004a7c:	d514      	bpl.n	8004aa8 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004a7e:	05a9      	lsls	r1, r5, #22
 8004a80:	d512      	bpl.n	8004aa8 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a92:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8004aa0:	6a23      	ldr	r3, [r4, #32]
 8004aa2:	b10b      	cbz	r3, 8004aa8 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004aa8:	06f2      	lsls	r2, r6, #27
 8004aaa:	d513      	bpl.n	8004ad4 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004aac:	04eb      	lsls	r3, r5, #19
 8004aae:	d511      	bpl.n	8004ad4 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ab0:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ab2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004abc:	2210      	movs	r2, #16
 8004abe:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ac2:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004aca:	2300      	movs	r3, #0
 8004acc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ad0:	f7ff ff76 	bl	80049c0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ad4:	bd70      	pop	{r4, r5, r6, pc}

08004ad6 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ada:	4607      	mov	r7, r0
 8004adc:	460d      	mov	r5, r1
 8004ade:	4614      	mov	r4, r2
 8004ae0:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae2:	f7ff fe03 	bl	80046ec <HAL_GetTick>
 8004ae6:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004aec:	07d2      	lsls	r2, r2, #31
 8004aee:	d50a      	bpl.n	8004b06 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004af0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8004af4:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8004af6:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004af8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8004afc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004b00:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8004b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004b06:	f7ff fdf1 	bl	80046ec <HAL_GetTick>
 8004b0a:	eba0 0008 	sub.w	r0, r0, r8
 8004b0e:	2864      	cmp	r0, #100	; 0x64
 8004b10:	d9ea      	bls.n	8004ae8 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8004b12:	2003      	movs	r0, #3
 8004b14:	e7f5      	b.n	8004b02 <DSI_ShortWrite+0x2c>

08004b16 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b16:	7c03      	ldrb	r3, [r0, #16]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d05c      	beq.n	8004bd6 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004b24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004b28:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8004b2a:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004b2c:	d507      	bpl.n	8004b3e <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004b2e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004b32:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8004b36:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8004b3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004b3e:	078a      	lsls	r2, r1, #30
 8004b40:	d505      	bpl.n	8004b4e <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004b42:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004b46:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004b4a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004b4e:	074a      	lsls	r2, r1, #29
 8004b50:	d505      	bpl.n	8004b5e <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004b52:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004b5e:	070a      	lsls	r2, r1, #28
 8004b60:	d505      	bpl.n	8004b6e <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004b62:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b66:	f042 0202 	orr.w	r2, r2, #2
 8004b6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004b6e:	06ca      	lsls	r2, r1, #27
 8004b70:	d505      	bpl.n	8004b7e <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004b72:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b76:	f042 020c 	orr.w	r2, r2, #12
 8004b7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004b7e:	068a      	lsls	r2, r1, #26
 8004b80:	d505      	bpl.n	8004b8e <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004b82:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b86:	f042 0210 	orr.w	r2, r2, #16
 8004b8a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004b8e:	064a      	lsls	r2, r1, #25
 8004b90:	d505      	bpl.n	8004b9e <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004b92:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b96:	f042 0220 	orr.w	r2, r2, #32
 8004b9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004b9e:	060a      	lsls	r2, r1, #24
 8004ba0:	d505      	bpl.n	8004bae <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004ba2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004baa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004bae:	05ca      	lsls	r2, r1, #23
 8004bb0:	d505      	bpl.n	8004bbe <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004bb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004bbe:	058a      	lsls	r2, r1, #22
 8004bc0:	d505      	bpl.n	8004bce <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004bc2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bc6:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004bca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004bd6:	2002      	movs	r0, #2
}
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_DSI_Init>:
{
 8004bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bde:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8004be0:	4604      	mov	r4, r0
 8004be2:	2800      	cmp	r0, #0
 8004be4:	f000 80a7 	beq.w	8004d36 <HAL_DSI_Init+0x15a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004be8:	7c43      	ldrb	r3, [r0, #17]
 8004bea:	b90b      	cbnz	r3, 8004bf0 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8004bec:	f7fc f806 	bl	8000bfc <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004bfe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004c02:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004c06:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8004c12:	f7ff fd6b 	bl	80046ec <HAL_GetTick>
 8004c16:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8004c1e:	04d9      	lsls	r1, r3, #19
 8004c20:	d57a      	bpl.n	8004d18 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004c22:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004c26:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8004c2a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004c2e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004c32:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004c36:	e9d5 0300 	ldrd	r0, r3, [r5]
 8004c3a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004c3c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004c40:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004c42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8004c46:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8004c5e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8004c6a:	f7ff fd45 	bl	80046f8 <HAL_Delay>
  tickstart = HAL_GetTick();
 8004c6e:	f7ff fd3d 	bl	80046ec <HAL_GetTick>
 8004c72:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004c7a:	05d2      	lsls	r2, r2, #23
 8004c7c:	d555      	bpl.n	8004d2a <HAL_DSI_Init+0x14e>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004c7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004c82:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004c86:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004c88:	f042 0206 	orr.w	r2, r2, #6
 8004c8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004c90:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004c94:	f022 0203 	bic.w	r2, r2, #3
 8004c98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004c9c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004ca0:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004ca2:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004cac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004cb0:	f022 0203 	bic.w	r2, r2, #3
 8004cb4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004cb8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004cbc:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004cbe:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004cc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cca:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004cd0:	491a      	ldr	r1, [pc, #104]	; (8004d3c <HAL_DSI_Init+0x160>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004cd2:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004cd4:	686a      	ldr	r2, [r5, #4]
 8004cd6:	2a01      	cmp	r2, #1
 8004cd8:	bf38      	it	cc
 8004cda:	2201      	movcc	r2, #1
 8004cdc:	434a      	muls	r2, r1
 8004cde:	68a9      	ldr	r1, [r5, #8]
 8004ce0:	f001 0103 	and.w	r1, r1, #3
 8004ce4:	408a      	lsls	r2, r1
 8004ce6:	6829      	ldr	r1, [r5, #0]
 8004ce8:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8004cea:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004cec:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004cf0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004cf4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cf8:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004cfc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004d00:	430a      	orrs	r2, r1
 8004d02:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8004d06:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004d0a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8004d0e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004d10:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8004d12:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8004d14:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8004d16:	e006      	b.n	8004d26 <HAL_DSI_Init+0x14a>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d18:	f7ff fce8 	bl	80046ec <HAL_GetTick>
 8004d1c:	1b80      	subs	r0, r0, r6
 8004d1e:	2864      	cmp	r0, #100	; 0x64
 8004d20:	f67f af7a 	bls.w	8004c18 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8004d24:	2003      	movs	r0, #3
}
 8004d26:	b002      	add	sp, #8
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d2a:	f7ff fcdf 	bl	80046ec <HAL_GetTick>
 8004d2e:	1b80      	subs	r0, r0, r6
 8004d30:	2864      	cmp	r0, #100	; 0x64
 8004d32:	d99f      	bls.n	8004c74 <HAL_DSI_Init+0x98>
 8004d34:	e7f6      	b.n	8004d24 <HAL_DSI_Init+0x148>
    return HAL_ERROR;
 8004d36:	2001      	movs	r0, #1
 8004d38:	e7f5      	b.n	8004d26 <HAL_DSI_Init+0x14a>
 8004d3a:	bf00      	nop
 8004d3c:	003d0900 	.word	0x003d0900

08004d40 <HAL_DSI_ErrorCallback>:
 8004d40:	4770      	bx	lr

08004d42 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004d42:	6803      	ldr	r3, [r0, #0]
 8004d44:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004d48:	07d1      	lsls	r1, r2, #31
{
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004d4e:	d508      	bpl.n	8004d62 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004d50:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004d54:	07d2      	lsls	r2, r2, #31
 8004d56:	d504      	bpl.n	8004d62 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004d5e:	f7fc fd15 	bl	800178c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004d68:	0791      	lsls	r1, r2, #30
 8004d6a:	d509      	bpl.n	8004d80 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004d6c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004d70:	0792      	lsls	r2, r2, #30
 8004d72:	d505      	bpl.n	8004d80 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004d74:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004d76:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004d78:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004d7c:	f7fc fd38 	bl	80017f0 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004d80:	69a3      	ldr	r3, [r4, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04e      	beq.n	8004e24 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004d86:	6821      	ldr	r1, [r4, #0]
 8004d88:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004d8c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004d90:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004d94:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004d96:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004d9a:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004d9c:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004d9e:	b119      	cbz	r1, 8004da8 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004da0:	6961      	ldr	r1, [r4, #20]
 8004da2:	f041 0101 	orr.w	r1, r1, #1
 8004da6:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004da8:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8004dac:	d003      	beq.n	8004db6 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004dae:	6962      	ldr	r2, [r4, #20]
 8004db0:	f042 0202 	orr.w	r2, r2, #2
 8004db4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004db6:	07d8      	lsls	r0, r3, #31
 8004db8:	d503      	bpl.n	8004dc2 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004dba:	6962      	ldr	r2, [r4, #20]
 8004dbc:	f042 0204 	orr.w	r2, r2, #4
 8004dc0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004dc2:	0799      	lsls	r1, r3, #30
 8004dc4:	d503      	bpl.n	8004dce <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004dc6:	6962      	ldr	r2, [r4, #20]
 8004dc8:	f042 0208 	orr.w	r2, r2, #8
 8004dcc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004dce:	f013 0f0c 	tst.w	r3, #12
 8004dd2:	d003      	beq.n	8004ddc <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004dd4:	6962      	ldr	r2, [r4, #20]
 8004dd6:	f042 0210 	orr.w	r2, r2, #16
 8004dda:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004ddc:	06da      	lsls	r2, r3, #27
 8004dde:	d503      	bpl.n	8004de8 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004de0:	6962      	ldr	r2, [r4, #20]
 8004de2:	f042 0220 	orr.w	r2, r2, #32
 8004de6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004de8:	0698      	lsls	r0, r3, #26
 8004dea:	d503      	bpl.n	8004df4 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004dec:	6962      	ldr	r2, [r4, #20]
 8004dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004df4:	0659      	lsls	r1, r3, #25
 8004df6:	d503      	bpl.n	8004e00 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004df8:	6962      	ldr	r2, [r4, #20]
 8004dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dfe:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004e00:	061a      	lsls	r2, r3, #24
 8004e02:	d503      	bpl.n	8004e0c <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004e04:	6962      	ldr	r2, [r4, #20]
 8004e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004e0c:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8004e10:	d003      	beq.n	8004e1a <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e18:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004e1a:	6963      	ldr	r3, [r4, #20]
 8004e1c:	b113      	cbz	r3, 8004e24 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff ff8e 	bl	8004d40 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e26:	7c03      	ldrb	r3, [r0, #16]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d00b      	beq.n	8004e44 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004e2c:	6803      	ldr	r3, [r0, #0]
 8004e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e30:	f022 0203 	bic.w	r2, r2, #3
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004e40:	4618      	mov	r0, r3
 8004e42:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004e44:	2002      	movs	r0, #2
}
 8004e46:	4770      	bx	lr

08004e48 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004e48:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e4a:	7c03      	ldrb	r3, [r0, #16]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d06a      	beq.n	8004f26 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004e50:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004e52:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004e5c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004e68:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	f022 0203 	bic.w	r2, r2, #3
 8004e7a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	4322      	orrs	r2, r4
 8004e80:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	f022 0207 	bic.w	r2, r2, #7
 8004e88:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004e8a:	695c      	ldr	r4, [r3, #20]
 8004e8c:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8004e90:	432a      	orrs	r2, r5
 8004e92:	694d      	ldr	r5, [r1, #20]
 8004e94:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004e96:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004e98:	4322      	orrs	r2, r4
 8004e9a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	f022 020f 	bic.w	r2, r2, #15
 8004ea2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004ea4:	691c      	ldr	r4, [r3, #16]
 8004ea6:	432c      	orrs	r4, r5
 8004ea8:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004eaa:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8004eae:	f024 040e 	bic.w	r4, r4, #14
 8004eb2:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004eb6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004eba:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004ebc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8004ec0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004ec4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ec6:	0c12      	lsrs	r2, r2, #16
 8004ec8:	0412      	lsls	r2, r2, #16
 8004eca:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004ecc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ece:	4322      	orrs	r2, r4
 8004ed0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004ed2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004ed6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004eda:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004ede:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8004ee2:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8004ee6:	432a      	orrs	r2, r5
 8004ee8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8004eea:	432a      	orrs	r2, r5
 8004eec:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004eee:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004ef0:	432a      	orrs	r2, r5
 8004ef2:	4322      	orrs	r2, r4
 8004ef4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004ef8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004f00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f02:	430a      	orrs	r2, r1
 8004f04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004f06:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004f12:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004f16:	f042 0202 	orr.w	r2, r2, #2
 8004f1a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004f22:	4618      	mov	r0, r3
}
 8004f24:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8004f26:	2002      	movs	r0, #2
 8004f28:	e7fc      	b.n	8004f24 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08004f2c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004f2c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f2e:	7c03      	ldrb	r3, [r0, #16]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d02a      	beq.n	8004f8a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004f34:	6802      	ldr	r2, [r0, #0]
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <HAL_DSI_ConfigCommand+0x64>)
 8004f38:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8004f3a:	4023      	ands	r3, r4
 8004f3c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004f3e:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8004f40:	e9d1 3500 	ldrd	r3, r5, [r1]
 8004f44:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8004f46:	688d      	ldr	r5, [r1, #8]
 8004f48:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8004f4a:	68cd      	ldr	r5, [r1, #12]
 8004f4c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8004f4e:	690d      	ldr	r5, [r1, #16]
 8004f50:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8004f52:	694d      	ldr	r5, [r1, #20]
 8004f54:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8004f56:	698d      	ldr	r5, [r1, #24]
 8004f58:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8004f5a:	69cd      	ldr	r5, [r1, #28]
 8004f5c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f5e:	6a0d      	ldr	r5, [r1, #32]
 8004f60:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8004f62:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8004f64:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8004f66:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8004f68:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8004f6a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004f6c:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8004f6e:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004f70:	4323      	orrs	r3, r4
 8004f72:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004f74:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004f76:	f023 0302 	bic.w	r3, r3, #2
 8004f7a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004f7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f82:	2300      	movs	r3, #0
 8004f84:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004f86:	4618      	mov	r0, r3
}
 8004f88:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8004f8a:	2002      	movs	r0, #2
 8004f8c:	e7fc      	b.n	8004f88 <HAL_DSI_ConfigCommand+0x5c>
 8004f8e:	bf00      	nop
 8004f90:	fef080ff 	.word	0xfef080ff

08004f94 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f94:	7c03      	ldrb	r3, [r0, #16]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d00b      	beq.n	8004fb2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004f9a:	6803      	ldr	r3, [r0, #0]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	f022 021f 	bic.w	r2, r2, #31
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004faa:	2300      	movs	r3, #0
 8004fac:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004fae:	4618      	mov	r0, r3
 8004fb0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004fb2:	2002      	movs	r0, #2
}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004fb6:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004fb8:	7c03      	ldrb	r3, [r0, #16]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d035      	beq.n	800502a <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004fbe:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004fc0:	e9d1 2400 	ldrd	r2, r4, [r1]
 8004fc4:	4294      	cmp	r4, r2
 8004fc6:	bf38      	it	cc
 8004fc8:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004fca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004fce:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004fd2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004fd6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004fda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004fde:	4322      	orrs	r2, r4
 8004fe0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004fe4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004fe8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004ff0:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004ff4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004ff8:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004ffa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004ffe:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005000:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005002:	432a      	orrs	r2, r5
 8005004:	4322      	orrs	r2, r4
 8005006:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800500a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800500e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005012:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005016:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800501a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800501e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005022:	2300      	movs	r3, #0
 8005024:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005026:	4618      	mov	r0, r3
}
 8005028:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800502a:	2002      	movs	r0, #2
 800502c:	e7fc      	b.n	8005028 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08005030 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005030:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005032:	7c03      	ldrb	r3, [r0, #16]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d05c      	beq.n	80050f2 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005038:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800503a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800503c:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800503e:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005040:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005044:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800504c:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800504e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005050:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005052:	b292      	uxth	r2, r2
 8005054:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005056:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005058:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800505c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800505e:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8005060:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8005062:	4014      	ands	r4, r2
 8005064:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005066:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8005068:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800506a:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800506c:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800506e:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8005070:	4014      	ands	r4, r2
 8005072:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005074:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8005076:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005078:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800507a:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800507c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005080:	4014      	ands	r4, r2
 8005082:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005086:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800508a:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800508c:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800508e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005092:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005096:	4014      	ands	r4, r2
 8005098:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800509c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80050a0:	432c      	orrs	r4, r5
 80050a2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80050a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80050aa:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80050ae:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80050b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80050b6:	698d      	ldr	r5, [r1, #24]
 80050b8:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80050ba:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80050bc:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80050be:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80050c2:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80050c6:	4014      	ands	r4, r2
 80050c8:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80050cc:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80050d0:	432c      	orrs	r4, r5
 80050d2:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80050d6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80050da:	4022      	ands	r2, r4
 80050dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80050e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80050e4:	430a      	orrs	r2, r1
 80050e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80050ea:	2300      	movs	r3, #0
 80050ec:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80050ee:	4618      	mov	r0, r3
}
 80050f0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80050f2:	2002      	movs	r0, #2
 80050f4:	e7fc      	b.n	80050f0 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80050f6:	bf00      	nop
 80050f8:	ffff0000 	.word	0xffff0000

080050fc <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050fc:	7c03      	ldrb	r3, [r0, #16]
{
 80050fe:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8005100:	2b01      	cmp	r3, #1
 8005102:	d01c      	beq.n	800513e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005104:	6802      	ldr	r2, [r0, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	6851      	ldr	r1, [r2, #4]
 800510c:	f041 0101 	orr.w	r1, r1, #1
 8005110:	6051      	str	r1, [r2, #4]
 8005112:	6851      	ldr	r1, [r2, #4]
 8005114:	f001 0101 	and.w	r1, r1, #1
 8005118:	9100      	str	r1, [sp, #0]
 800511a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8005122:	f041 0108 	orr.w	r1, r1, #8
 8005126:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800512a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800512e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005130:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005132:	f002 0208 	and.w	r2, r2, #8
 8005136:	9201      	str	r2, [sp, #4]
 8005138:	9a01      	ldr	r2, [sp, #4]
}
 800513a:	b002      	add	sp, #8
 800513c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800513e:	2002      	movs	r0, #2
 8005140:	e7fb      	b.n	800513a <HAL_DSI_Start+0x3e>

08005142 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005142:	7c03      	ldrb	r3, [r0, #16]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d00a      	beq.n	800515e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8005148:	6802      	ldr	r2, [r0, #0]
 800514a:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005156:	2300      	movs	r3, #0
 8005158:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800515a:	4618      	mov	r0, r3
 800515c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800515e:	2002      	movs	r0, #2
}
 8005160:	4770      	bx	lr

08005162 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005162:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005164:	7c05      	ldrb	r5, [r0, #16]
{
 8005166:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8005168:	2d01      	cmp	r5, #1
 800516a:	d009      	beq.n	8005180 <HAL_DSI_ShortWrite+0x1e>
 800516c:	2501      	movs	r5, #1
 800516e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005170:	9d06      	ldr	r5, [sp, #24]
 8005172:	9500      	str	r5, [sp, #0]
 8005174:	f7ff fcaf 	bl	8004ad6 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005178:	2300      	movs	r3, #0
 800517a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8005180:	2002      	movs	r0, #2
 8005182:	e7fb      	b.n	800517c <HAL_DSI_ShortWrite+0x1a>

08005184 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800518a:	7c03      	ldrb	r3, [r0, #16]
{
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8005190:	2b01      	cmp	r3, #1
{
 8005192:	4615      	mov	r5, r2
 8005194:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8005198:	d052      	beq.n	8005240 <HAL_DSI_LongWrite+0xbc>
 800519a:	2301      	movs	r3, #1
 800519c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800519e:	f7ff faa5 	bl	80046ec <HAL_GetTick>
 80051a2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80051a4:	6831      	ldr	r1, [r6, #0]
 80051a6:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 80051a8:	f013 0a01 	ands.w	sl, r3, #1
 80051ac:	d01a      	beq.n	80051e4 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80051ae:	2c03      	cmp	r4, #3
 80051b0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80051b2:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80051b6:	bf28      	it	cs
 80051b8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80051ba:	4282      	cmp	r2, r0
 80051bc:	d11d      	bne.n	80051fa <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80051be:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 80051c0:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 80051c2:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80051c6:	bb13      	cbnz	r3, 800520e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80051c8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80051ca:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 80051ce:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80051d0:	0222      	lsls	r2, r4, #8
 80051d2:	0224      	lsls	r4, r4, #8
 80051d4:	b292      	uxth	r2, r2
 80051d6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80051da:	4315      	orrs	r5, r2
 80051dc:	432c      	orrs	r4, r5
 80051de:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 80051e0:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 80051e2:	e008      	b.n	80051f6 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80051e4:	f7ff fa82 	bl	80046ec <HAL_GetTick>
 80051e8:	eba0 000b 	sub.w	r0, r0, fp
 80051ec:	2864      	cmp	r0, #100	; 0x64
 80051ee:	d9d9      	bls.n	80051a4 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80051f0:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80051f2:	f886 a010 	strb.w	sl, [r6, #16]
}
 80051f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80051fa:	f818 3002 	ldrb.w	r3, [r8, r2]
 80051fe:	3201      	adds	r2, #1
 8005200:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8005204:	fa03 f30c 	lsl.w	r3, r3, ip
 8005208:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 800520c:	e7d5      	b.n	80051ba <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800520e:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8005210:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005214:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8005216:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005218:	bf28      	it	cs
 800521a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800521e:	f812 8000 	ldrb.w	r8, [r2, r0]
 8005222:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8005226:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005228:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800522c:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800522e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8005232:	d1f4      	bne.n	800521e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8005234:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8005238:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 800523a:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 800523e:	e7c2      	b.n	80051c6 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8005240:	2002      	movs	r0, #2
 8005242:	e7d8      	b.n	80051f6 <HAL_DSI_LongWrite+0x72>

08005244 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8005244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005248:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800524a:	7c03      	ldrb	r3, [r0, #16]
{
 800524c:	4605      	mov	r5, r0
 800524e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8005250:	2b01      	cmp	r3, #1
{
 8005252:	4617      	mov	r7, r2
 8005254:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8005258:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 800525c:	d06e      	beq.n	800533c <HAL_DSI_Read+0xf8>
 800525e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8005260:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8005262:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8005264:	d90d      	bls.n	8005282 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8005266:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800526a:	2237      	movs	r2, #55	; 0x37
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	b2f3      	uxtb	r3, r6
 8005270:	f7ff fc31 	bl	8004ad6 <DSI_ShortWrite>
 8005274:	b128      	cbz	r0, 8005282 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005276:	2300      	movs	r3, #0

      return HAL_ERROR;
 8005278:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800527a:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800527c:	b003      	add	sp, #12
 800527e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8005282:	f1b9 0f06 	cmp.w	r9, #6
 8005286:	d10f      	bne.n	80052a8 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800528a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 8005292:	f044 0406 	orr.w	r4, r4, #6
 8005296:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8005298:	f7ff fa28 	bl	80046ec <HAL_GetTick>
 800529c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800529e:	2e00      	cmp	r6, #0
 80052a0:	dc27      	bgt.n	80052f2 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 80052a2:	2000      	movs	r0, #0
 80052a4:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 80052a6:	e7e9      	b.n	800527c <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80052a8:	f1b9 0f04 	cmp.w	r9, #4
 80052ac:	d105      	bne.n	80052ba <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052ae:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80052b0:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052b2:	f044 0404 	orr.w	r4, r4, #4
 80052b6:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 80052b8:	e7ee      	b.n	8005298 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80052ba:	f1b9 0f14 	cmp.w	r9, #20
 80052be:	d108      	bne.n	80052d2 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80052c0:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052c4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80052c6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052c8:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 80052cc:	f044 0414 	orr.w	r4, r4, #20
 80052d0:	e7f1      	b.n	80052b6 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80052d2:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 80052d6:	d1ce      	bne.n	8005276 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80052d8:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052dc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80052de:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052e2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80052e6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80052e8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80052ec:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 80052f0:	e7e1      	b.n	80052b6 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80052f2:	682a      	ldr	r2, [r5, #0]
 80052f4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80052f6:	f013 0310 	ands.w	r3, r3, #16
 80052fa:	d10d      	bne.n	8005318 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80052fc:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80052fe:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8005300:	4632      	mov	r2, r6
 8005302:	bf28      	it	cs
 8005304:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8005306:	00d9      	lsls	r1, r3, #3
 8005308:	fa20 f101 	lsr.w	r1, r0, r1
 800530c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800530e:	3301      	adds	r3, #1
 8005310:	429a      	cmp	r2, r3
 8005312:	d1f8      	bne.n	8005306 <HAL_DSI_Read+0xc2>
        pdata++;
 8005314:	4417      	add	r7, r2
        datasize--;
 8005316:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005318:	f7ff f9e8 	bl	80046ec <HAL_GetTick>
 800531c:	1b00      	subs	r0, r0, r4
 800531e:	2864      	cmp	r0, #100	; 0x64
 8005320:	d903      	bls.n	800532a <HAL_DSI_Read+0xe6>
      __HAL_UNLOCK(hdsi);
 8005322:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8005324:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8005326:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8005328:	e7a8      	b.n	800527c <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800532e:	0652      	lsls	r2, r2, #25
 8005330:	d4b5      	bmi.n	800529e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8005332:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005336:	069b      	lsls	r3, r3, #26
 8005338:	d49d      	bmi.n	8005276 <HAL_DSI_Read+0x32>
 800533a:	e7b0      	b.n	800529e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800533c:	2002      	movs	r0, #2
 800533e:	e79d      	b.n	800527c <HAL_DSI_Read+0x38>

08005340 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005340:	7c03      	ldrb	r3, [r0, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d010      	beq.n	8005368 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005346:	6803      	ldr	r3, [r0, #0]
 8005348:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800534c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005350:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005354:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8005358:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800535c:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005360:	2300      	movs	r3, #0
 8005362:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8005364:	4618      	mov	r0, r3
 8005366:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8005368:	2002      	movs	r0, #2
}
 800536a:	4770      	bx	lr

0800536c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800536c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005370:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005372:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8005540 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005376:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800537a:	680a      	ldr	r2, [r1, #0]
 800537c:	fa32 f503 	lsrs.w	r5, r2, r3
 8005380:	d102      	bne.n	8005388 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005388:	f04f 0e01 	mov.w	lr, #1
 800538c:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8005390:	ea1e 0202 	ands.w	r2, lr, r2
 8005394:	f000 80bd 	beq.w	8005512 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005398:	684e      	ldr	r6, [r1, #4]
 800539a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800539e:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053a2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053a6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053aa:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053ac:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053b0:	2f01      	cmp	r7, #1
 80053b2:	d834      	bhi.n	800541e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80053b4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053b6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053ba:	68cf      	ldr	r7, [r1, #12]
 80053bc:	fa07 f708 	lsl.w	r7, r7, r8
 80053c0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80053c4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80053c6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053c8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053cc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80053d0:	409f      	lsls	r7, r3
 80053d2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80053d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80053d8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053da:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053dc:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053e0:	688f      	ldr	r7, [r1, #8]
 80053e2:	fa07 f708 	lsl.w	r7, r7, r8
 80053e6:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 80053ea:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ec:	d119      	bne.n	8005422 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 80053ee:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053f2:	f003 0b07 	and.w	fp, r3, #7
 80053f6:	f04f 0e0f 	mov.w	lr, #15
 80053fa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80053fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005402:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005406:	fa0e fe0b 	lsl.w	lr, lr, fp
 800540a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800540e:	690f      	ldr	r7, [r1, #16]
 8005410:	fa07 f70b 	lsl.w	r7, r7, fp
 8005414:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005418:	f8ca 7020 	str.w	r7, [sl, #32]
 800541c:	e001      	b.n	8005422 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800541e:	2d03      	cmp	r5, #3
 8005420:	d1da      	bne.n	80053d8 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8005422:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005424:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005428:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800542c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005430:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8005434:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005436:	d06c      	beq.n	8005512 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005438:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800543c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005440:	f003 0c03 	and.w	ip, r3, #3
 8005444:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005448:	f045 0502 	orr.w	r5, r5, #2
 800544c:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005450:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005454:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8005458:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800545c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8005460:	f005 0502 	and.w	r5, r5, #2
 8005464:	9501      	str	r5, [sp, #4]
 8005466:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005468:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 800546c:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005470:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005474:	4d31      	ldr	r5, [pc, #196]	; (800553c <HAL_GPIO_Init+0x1d0>)
 8005476:	42a8      	cmp	r0, r5
 8005478:	d04d      	beq.n	8005516 <HAL_GPIO_Init+0x1aa>
 800547a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800547e:	42a8      	cmp	r0, r5
 8005480:	d04b      	beq.n	800551a <HAL_GPIO_Init+0x1ae>
 8005482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005486:	42a8      	cmp	r0, r5
 8005488:	d049      	beq.n	800551e <HAL_GPIO_Init+0x1b2>
 800548a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800548e:	42a8      	cmp	r0, r5
 8005490:	d047      	beq.n	8005522 <HAL_GPIO_Init+0x1b6>
 8005492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005496:	42a8      	cmp	r0, r5
 8005498:	d045      	beq.n	8005526 <HAL_GPIO_Init+0x1ba>
 800549a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800549e:	42a8      	cmp	r0, r5
 80054a0:	d043      	beq.n	800552a <HAL_GPIO_Init+0x1be>
 80054a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054a6:	42a8      	cmp	r0, r5
 80054a8:	d041      	beq.n	800552e <HAL_GPIO_Init+0x1c2>
 80054aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054ae:	42a8      	cmp	r0, r5
 80054b0:	d03f      	beq.n	8005532 <HAL_GPIO_Init+0x1c6>
 80054b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054b6:	42a8      	cmp	r0, r5
 80054b8:	d03d      	beq.n	8005536 <HAL_GPIO_Init+0x1ca>
 80054ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054be:	42a8      	cmp	r0, r5
 80054c0:	bf0c      	ite	eq
 80054c2:	2509      	moveq	r5, #9
 80054c4:	250a      	movne	r5, #10
 80054c6:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054ca:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054ce:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054d2:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80054d4:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80054d8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80054da:	bf0c      	ite	eq
 80054dc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80054de:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054e0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80054e4:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80054e6:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80054e8:	bf0c      	ite	eq
 80054ea:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80054ec:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054ee:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 80054f2:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80054f4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 80054f8:	bf0c      	ite	eq
 80054fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80054fc:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fe:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005500:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8005504:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8005508:	bf54      	ite	pl
 800550a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800550c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800550e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8005512:	3301      	adds	r3, #1
 8005514:	e731      	b.n	800537a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005516:	2500      	movs	r5, #0
 8005518:	e7d5      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 800551a:	2501      	movs	r5, #1
 800551c:	e7d3      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 800551e:	2502      	movs	r5, #2
 8005520:	e7d1      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 8005522:	2503      	movs	r5, #3
 8005524:	e7cf      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 8005526:	2504      	movs	r5, #4
 8005528:	e7cd      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 800552a:	2505      	movs	r5, #5
 800552c:	e7cb      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 800552e:	2506      	movs	r5, #6
 8005530:	e7c9      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 8005532:	2507      	movs	r5, #7
 8005534:	e7c7      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 8005536:	2508      	movs	r5, #8
 8005538:	e7c5      	b.n	80054c6 <HAL_GPIO_Init+0x15a>
 800553a:	bf00      	nop
 800553c:	58020000 	.word	0x58020000
 8005540:	58024400 	.word	0x58024400

08005544 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005548:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800554a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8005678 <HAL_GPIO_DeInit+0x134>
 800554e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800567c <HAL_GPIO_DeInit+0x138>
 8005552:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8005680 <HAL_GPIO_DeInit+0x13c>
 8005556:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005684 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 800555a:	fa31 f302 	lsrs.w	r3, r1, r2
 800555e:	d101      	bne.n	8005564 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005564:	2301      	movs	r3, #1
 8005566:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 800556a:	ea1c 0601 	ands.w	r6, ip, r1
 800556e:	d06d      	beq.n	800564c <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005570:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005574:	f002 0703 	and.w	r7, r2, #3
 8005578:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800557a:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <HAL_GPIO_DeInit+0x130>)
 800557c:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005580:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005582:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005584:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005588:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800558c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005590:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005594:	d05c      	beq.n	8005650 <HAL_GPIO_DeInit+0x10c>
 8005596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559a:	4298      	cmp	r0, r3
 800559c:	d05a      	beq.n	8005654 <HAL_GPIO_DeInit+0x110>
 800559e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a2:	4298      	cmp	r0, r3
 80055a4:	d058      	beq.n	8005658 <HAL_GPIO_DeInit+0x114>
 80055a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055aa:	4298      	cmp	r0, r3
 80055ac:	d056      	beq.n	800565c <HAL_GPIO_DeInit+0x118>
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	4298      	cmp	r0, r3
 80055b4:	d054      	beq.n	8005660 <HAL_GPIO_DeInit+0x11c>
 80055b6:	4540      	cmp	r0, r8
 80055b8:	d054      	beq.n	8005664 <HAL_GPIO_DeInit+0x120>
 80055ba:	4548      	cmp	r0, r9
 80055bc:	d054      	beq.n	8005668 <HAL_GPIO_DeInit+0x124>
 80055be:	4550      	cmp	r0, sl
 80055c0:	d054      	beq.n	800566c <HAL_GPIO_DeInit+0x128>
 80055c2:	4558      	cmp	r0, fp
 80055c4:	d054      	beq.n	8005670 <HAL_GPIO_DeInit+0x12c>
 80055c6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80055ca:	4298      	cmp	r0, r3
 80055cc:	bf0c      	ite	eq
 80055ce:	2309      	moveq	r3, #9
 80055d0:	230a      	movne	r3, #10
 80055d2:	40bb      	lsls	r3, r7
 80055d4:	4573      	cmp	r3, lr
 80055d6:	d119      	bne.n	800560c <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 80055e0:	ea27 0706 	bic.w	r7, r7, r6
 80055e4:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80055e8:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 80055ec:	ea27 0706 	bic.w	r7, r7, r6
 80055f0:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80055f4:	685f      	ldr	r7, [r3, #4]
 80055f6:	ea27 0706 	bic.w	r7, r7, r6
 80055fa:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80055fc:	681f      	ldr	r7, [r3, #0]
 80055fe:	ea27 0606 	bic.w	r6, r7, r6
 8005602:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005604:	68a3      	ldr	r3, [r4, #8]
 8005606:	ea23 0305 	bic.w	r3, r3, r5
 800560a:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800560c:	2503      	movs	r5, #3
 800560e:	0053      	lsls	r3, r2, #1
 8005610:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005612:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005616:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800561a:	260f      	movs	r6, #15
 800561c:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800561e:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005620:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005622:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005624:	fa22 f405 	lsr.w	r4, r2, r5
 8005628:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800562c:	6a25      	ldr	r5, [r4, #32]
 800562e:	ea25 0606 	bic.w	r6, r5, r6
 8005632:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005634:	68c4      	ldr	r4, [r0, #12]
 8005636:	ea24 0403 	bic.w	r4, r4, r3
 800563a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800563c:	6844      	ldr	r4, [r0, #4]
 800563e:	ea24 040c 	bic.w	r4, r4, ip
 8005642:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005644:	6884      	ldr	r4, [r0, #8]
 8005646:	ea24 0303 	bic.w	r3, r4, r3
 800564a:	6083      	str	r3, [r0, #8]
    position++;
 800564c:	3201      	adds	r2, #1
 800564e:	e784      	b.n	800555a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005650:	2300      	movs	r3, #0
 8005652:	e7be      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005654:	2301      	movs	r3, #1
 8005656:	e7bc      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005658:	2302      	movs	r3, #2
 800565a:	e7ba      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 800565c:	2303      	movs	r3, #3
 800565e:	e7b8      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005660:	2304      	movs	r3, #4
 8005662:	e7b6      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005664:	2305      	movs	r3, #5
 8005666:	e7b4      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005668:	2306      	movs	r3, #6
 800566a:	e7b2      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 800566c:	2307      	movs	r3, #7
 800566e:	e7b0      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005670:	2308      	movs	r3, #8
 8005672:	e7ae      	b.n	80055d2 <HAL_GPIO_DeInit+0x8e>
 8005674:	58020000 	.word	0x58020000
 8005678:	58021400 	.word	0x58021400
 800567c:	58021800 	.word	0x58021800
 8005680:	58021c00 	.word	0x58021c00
 8005684:	58022000 	.word	0x58022000

08005688 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005688:	b10a      	cbz	r2, 800568e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800568a:	6181      	str	r1, [r0, #24]
  }
}
 800568c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800568e:	0409      	lsls	r1, r1, #16
 8005690:	e7fb      	b.n	800568a <HAL_GPIO_WritePin+0x2>
	...

08005694 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <HAL_HSEM_FastTake+0x14>)
 8005696:	3020      	adds	r0, #32
 8005698:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <HAL_HSEM_FastTake+0x18>)
 800569e:	1ac0      	subs	r0, r0, r3
 80056a0:	bf18      	it	ne
 80056a2:	2001      	movne	r0, #1
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	58026400 	.word	0x58026400
 80056ac:	80000300 	.word	0x80000300

080056b0 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80056b0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <HAL_HSEM_Release+0xc>)
 80056b6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80056ba:	4770      	bx	lr
 80056bc:	58026400 	.word	0x58026400

080056c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056c0:	6803      	ldr	r3, [r0, #0]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	0791      	lsls	r1, r2, #30
 80056c6:	d501      	bpl.n	80056cc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056c8:	2200      	movs	r2, #0
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	07d2      	lsls	r2, r2, #31
 80056d0:	d403      	bmi.n	80056da <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	619a      	str	r2, [r3, #24]
  }
}
 80056da:	4770      	bx	lr

080056dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056dc:	b530      	push	{r4, r5, lr}
 80056de:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056e4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056e6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80056e8:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80056ee:	4a05      	ldr	r2, [pc, #20]	; (8005704 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056f0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80056f2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80056fa:	ea20 0002 	bic.w	r0, r0, r2
 80056fe:	4303      	orrs	r3, r0
 8005700:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005702:	bd30      	pop	{r4, r5, pc}
 8005704:	03ff63ff 	.word	0x03ff63ff

08005708 <I2C_IsErrorOccurred>:
{
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800570c:	6803      	ldr	r3, [r0, #0]
{
 800570e:	4605      	mov	r5, r0
 8005710:	4688      	mov	r8, r1
 8005712:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005714:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005716:	f014 0410 	ands.w	r4, r4, #16
 800571a:	d079      	beq.n	8005810 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005720:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005724:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	0694      	lsls	r4, r2, #26
 800572c:	d436      	bmi.n	800579c <I2C_IsErrorOccurred+0x94>
 800572e:	b10e      	cbz	r6, 8005734 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005730:	2404      	movs	r4, #4
 8005732:	e039      	b.n	80057a8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005734:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005738:	d0f6      	beq.n	8005728 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fe ffd7 	bl	80046ec <HAL_GetTick>
 800573e:	1bc0      	subs	r0, r0, r7
 8005740:	4540      	cmp	r0, r8
 8005742:	d802      	bhi.n	800574a <I2C_IsErrorOccurred+0x42>
 8005744:	f1b8 0f00 	cmp.w	r8, #0
 8005748:	d1ed      	bne.n	8005726 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800574e:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005752:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005754:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005756:	0400      	lsls	r0, r0, #16
 8005758:	d50a      	bpl.n	8005770 <I2C_IsErrorOccurred+0x68>
 800575a:	0449      	lsls	r1, r1, #17
 800575c:	d408      	bmi.n	8005770 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 800575e:	2a20      	cmp	r2, #32
 8005760:	d006      	beq.n	8005770 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005768:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800576a:	f7fe ffbf 	bl	80046ec <HAL_GetTick>
 800576e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	699c      	ldr	r4, [r3, #24]
 8005774:	f014 0420 	ands.w	r4, r4, #32
 8005778:	d1d5      	bne.n	8005726 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800577a:	f7fe ffb7 	bl	80046ec <HAL_GetTick>
 800577e:	1bc0      	subs	r0, r0, r7
 8005780:	2819      	cmp	r0, #25
 8005782:	d9f5      	bls.n	8005770 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005784:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8005786:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005788:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800578c:	f043 0320 	orr.w	r3, r3, #32
 8005790:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005792:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005796:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 800579a:	e7e9      	b.n	8005770 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 800579c:	2e00      	cmp	r6, #0
 800579e:	d1c7      	bne.n	8005730 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057a0:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 80057a2:	2404      	movs	r4, #4
    status = HAL_ERROR;
 80057a4:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057a6:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057ac:	05d0      	lsls	r0, r2, #23
 80057ae:	d505      	bpl.n	80057bc <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80057b4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80057b8:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057ba:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057bc:	0551      	lsls	r1, r2, #21
 80057be:	d505      	bpl.n	80057cc <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80057c4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80057c8:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057ca:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057cc:	0592      	lsls	r2, r2, #22
 80057ce:	d521      	bpl.n	8005814 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80057d4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057d8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80057da:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 80057dc:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 80057de:	f7ff ff6f 	bl	80056c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80057e2:	682a      	ldr	r2, [r5, #0]
 80057e4:	6853      	ldr	r3, [r2, #4]
 80057e6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80057ea:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80057ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80057f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80057fa:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80057fc:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80057fe:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005800:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005804:	2300      	movs	r3, #0
 8005806:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800580a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800580e:	e003      	b.n	8005818 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	4626      	mov	r6, r4
 8005812:	e7c9      	b.n	80057a8 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8005814:	2e00      	cmp	r6, #0
 8005816:	d1e0      	bne.n	80057da <I2C_IsErrorOccurred+0xd2>
}
 8005818:	4630      	mov	r0, r6
 800581a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800581e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800581e:	b570      	push	{r4, r5, r6, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d501      	bpl.n	8005832 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800582e:	2000      	movs	r0, #0
}
 8005830:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005832:	4632      	mov	r2, r6
 8005834:	4629      	mov	r1, r5
 8005836:	4620      	mov	r0, r4
 8005838:	f7ff ff66 	bl	8005708 <I2C_IsErrorOccurred>
 800583c:	b9a0      	cbnz	r0, 8005868 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800583e:	1c6a      	adds	r2, r5, #1
 8005840:	d0f1      	beq.n	8005826 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005842:	f7fe ff53 	bl	80046ec <HAL_GetTick>
 8005846:	1b80      	subs	r0, r0, r6
 8005848:	42a8      	cmp	r0, r5
 800584a:	d801      	bhi.n	8005850 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800584c:	2d00      	cmp	r5, #0
 800584e:	d1ea      	bne.n	8005826 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005852:	f043 0320 	orr.w	r3, r3, #32
 8005856:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005858:	2320      	movs	r3, #32
 800585a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	2300      	movs	r3, #0
 8005860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005864:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005868:	2001      	movs	r0, #1
 800586a:	e7e1      	b.n	8005830 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800586c <I2C_WaitOnFlagUntilTimeout>:
{
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	9f06      	ldr	r7, [sp, #24]
 8005872:	4604      	mov	r4, r0
 8005874:	4688      	mov	r8, r1
 8005876:	4616      	mov	r6, r2
 8005878:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	6993      	ldr	r3, [r2, #24]
 800587e:	ea38 0303 	bics.w	r3, r8, r3
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	42b3      	cmp	r3, r6
 800588a:	d001      	beq.n	8005890 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800588c:	2000      	movs	r0, #0
 800588e:	e015      	b.n	80058bc <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005890:	1c6b      	adds	r3, r5, #1
 8005892:	d0f3      	beq.n	800587c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fe ff2a 	bl	80046ec <HAL_GetTick>
 8005898:	1bc0      	subs	r0, r0, r7
 800589a:	42a8      	cmp	r0, r5
 800589c:	d801      	bhi.n	80058a2 <I2C_WaitOnFlagUntilTimeout+0x36>
 800589e:	2d00      	cmp	r5, #0
 80058a0:	d1eb      	bne.n	800587a <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80058a4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a6:	f043 0320 	orr.w	r3, r3, #32
 80058aa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058ac:	2320      	movs	r3, #32
 80058ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80058b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80058bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058c0 <I2C_RequestMemoryWrite>:
{
 80058c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80058c4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <I2C_RequestMemoryWrite+0x68>)
{
 80058c8:	4605      	mov	r5, r0
 80058ca:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	b2f2      	uxtb	r2, r6
 80058d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80058d4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058d8:	f7ff ff00 	bl	80056dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058dc:	4628      	mov	r0, r5
 80058de:	4642      	mov	r2, r8
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7ff ff9c 	bl	800581e <I2C_WaitOnTXISFlagUntilTimeout>
 80058e6:	b118      	cbz	r0, 80058f0 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80058e8:	2001      	movs	r0, #1
}
 80058ea:	b002      	add	sp, #8
 80058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f0:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058f2:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f4:	d10d      	bne.n	8005912 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058f6:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058f8:	2200      	movs	r2, #0
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058fe:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005900:	463b      	mov	r3, r7
 8005902:	f8cd 8000 	str.w	r8, [sp]
 8005906:	f7ff ffb1 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800590a:	3800      	subs	r0, #0
 800590c:	bf18      	it	ne
 800590e:	2001      	movne	r0, #1
 8005910:	e7eb      	b.n	80058ea <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005912:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005914:	4639      	mov	r1, r7
 8005916:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591a:	4642      	mov	r2, r8
 800591c:	f7ff ff7f 	bl	800581e <I2C_WaitOnTXISFlagUntilTimeout>
 8005920:	2800      	cmp	r0, #0
 8005922:	d1e1      	bne.n	80058e8 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	e7e6      	b.n	80058f6 <I2C_RequestMemoryWrite+0x36>
 8005928:	80002000 	.word	0x80002000

0800592c <I2C_RequestMemoryRead>:
{
 800592c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005930:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <I2C_RequestMemoryRead+0x68>)
{
 8005934:	4605      	mov	r5, r0
 8005936:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	b2f2      	uxtb	r2, r6
 800593c:	2300      	movs	r3, #0
{
 800593e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005942:	f7ff fecb 	bl	80056dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005946:	4628      	mov	r0, r5
 8005948:	4642      	mov	r2, r8
 800594a:	4639      	mov	r1, r7
 800594c:	f7ff ff67 	bl	800581e <I2C_WaitOnTXISFlagUntilTimeout>
 8005950:	b118      	cbz	r0, 800595a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005952:	2001      	movs	r0, #1
}
 8005954:	b002      	add	sp, #8
 8005956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800595a:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800595c:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800595e:	d10d      	bne.n	800597c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005960:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005962:	2200      	movs	r2, #0
 8005964:	2140      	movs	r1, #64	; 0x40
 8005966:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005968:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800596a:	463b      	mov	r3, r7
 800596c:	f8cd 8000 	str.w	r8, [sp]
 8005970:	f7ff ff7c 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005974:	3800      	subs	r0, #0
 8005976:	bf18      	it	ne
 8005978:	2001      	movne	r0, #1
 800597a:	e7eb      	b.n	8005954 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800597c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597e:	4639      	mov	r1, r7
 8005980:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005984:	4642      	mov	r2, r8
 8005986:	f7ff ff4a 	bl	800581e <I2C_WaitOnTXISFlagUntilTimeout>
 800598a:	2800      	cmp	r0, #0
 800598c:	d1e1      	bne.n	8005952 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	e7e6      	b.n	8005960 <I2C_RequestMemoryRead+0x34>
 8005992:	bf00      	nop
 8005994:	80002000 	.word	0x80002000

08005998 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	460d      	mov	r5, r1
 800599e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	069b      	lsls	r3, r3, #26
 80059a6:	d501      	bpl.n	80059ac <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80059a8:	2000      	movs	r0, #0
}
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ac:	4632      	mov	r2, r6
 80059ae:	4629      	mov	r1, r5
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fea9 	bl	8005708 <I2C_IsErrorOccurred>
 80059b6:	b990      	cbnz	r0, 80059de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b8:	f7fe fe98 	bl	80046ec <HAL_GetTick>
 80059bc:	1b80      	subs	r0, r0, r6
 80059be:	42a8      	cmp	r0, r5
 80059c0:	d801      	bhi.n	80059c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	d1ec      	bne.n	80059a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059c8:	f043 0320 	orr.w	r3, r3, #32
 80059cc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	2320      	movs	r3, #32
 80059d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80059da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80059de:	2001      	movs	r0, #1
 80059e0:	e7e3      	b.n	80059aa <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080059e2 <HAL_I2C_MspInit>:
}
 80059e2:	4770      	bx	lr

080059e4 <HAL_I2C_Init>:
{
 80059e4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80059e6:	4604      	mov	r4, r0
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d04a      	beq.n	8005a82 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80059f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059f4:	b91b      	cbnz	r3, 80059fe <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80059f6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80059fa:	f7ff fff2 	bl	80059e2 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80059fe:	2324      	movs	r3, #36	; 0x24
 8005a00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a0e:	6862      	ldr	r2, [r4, #4]
 8005a10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a14:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a1c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a1e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a22:	2901      	cmp	r1, #1
 8005a24:	d124      	bne.n	8005a70 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a2a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a2c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a30:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a38:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a42:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005a46:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a48:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a4e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a50:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a62:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a68:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005a6e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a70:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a74:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a76:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a78:	d1d8      	bne.n	8005a2c <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	e7d4      	b.n	8005a2c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005a82:	2001      	movs	r0, #1
 8005a84:	e7f3      	b.n	8005a6e <HAL_I2C_Init+0x8a>

08005a86 <HAL_I2C_MspDeInit>:
 8005a86:	4770      	bx	lr

08005a88 <HAL_I2C_DeInit>:
{
 8005a88:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	b198      	cbz	r0, 8005ab6 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005a8e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a90:	2324      	movs	r3, #36	; 0x24
 8005a92:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005a9e:	f7ff fff2 	bl	8005a86 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005aa6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005aaa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aae:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005ab4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	e7fc      	b.n	8005ab4 <HAL_I2C_DeInit+0x2c>

08005aba <HAL_I2C_Mem_Write>:
{
 8005aba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	469b      	mov	fp, r3
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	460f      	mov	r7, r1
 8005ac6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005aca:	4692      	mov	sl, r2
 8005acc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005ad0:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	f040 80a3 	bne.w	8005c22 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8005adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ade:	b10b      	cbz	r3, 8005ae4 <HAL_I2C_Mem_Write+0x2a>
 8005ae0:	9b03      	ldr	r3, [sp, #12]
 8005ae2:	b933      	cbnz	r3, 8005af2 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ae8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005aea:	2001      	movs	r0, #1
}
 8005aec:	b005      	add	sp, #20
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005af2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	f000 8093 	beq.w	8005c22 <HAL_I2C_Mem_Write+0x168>
 8005afc:	2501      	movs	r5, #1
 8005afe:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005b02:	f7fe fdf3 	bl	80046ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b06:	2319      	movs	r3, #25
 8005b08:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005b0a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff feaa 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005b18:	4680      	mov	r8, r0
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d1e5      	bne.n	8005aea <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b1e:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005b20:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b22:	4652      	mov	r2, sl
 8005b24:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b32:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b34:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005b36:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b38:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b3a:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005b3e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b40:	465b      	mov	r3, fp
 8005b42:	f7ff febd 	bl	80058c0 <I2C_RequestMemoryWrite>
 8005b46:	b110      	cbz	r0, 8005b4e <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005b48:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005b4c:	e7cd      	b.n	8005aea <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2bff      	cmp	r3, #255	; 0xff
 8005b54:	d955      	bls.n	8005c02 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b56:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b5c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b60:	4639      	mov	r1, r7
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff fdba 	bl	80056dc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fe56 	bl	800581e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d1b9      	bne.n	8005aea <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005b7e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005b80:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b84:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005b86:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005b88:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005b8a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005b8c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005b8e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b92:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	b1ab      	cbz	r3, 8005bc4 <HAL_I2C_Mem_Write+0x10a>
 8005b98:	b9a2      	cbnz	r2, 8005bc4 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	2180      	movs	r1, #128	; 0x80
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	9600      	str	r6, [sp, #0]
 8005ba2:	f7ff fe63 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d19f      	bne.n	8005aea <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005baa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d92f      	bls.n	8005c12 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb2:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bb8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f7ff fd8c 	bl	80056dc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005bc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1cd      	bne.n	8005b68 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bcc:	4632      	mov	r2, r6
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff fee1 	bl	8005998 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d187      	bne.n	8005aea <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	2120      	movs	r1, #32
 8005bde:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005be6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005bea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005bf8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bfc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005c00:	e774      	b.n	8005aec <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005c02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c08:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005c0a:	b292      	uxth	r2, r2
 8005c0c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	e7a6      	b.n	8005b60 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005c12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c18:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005c1a:	b292      	uxth	r2, r2
 8005c1c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	e7cc      	b.n	8005bbc <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8005c22:	2002      	movs	r0, #2
 8005c24:	e762      	b.n	8005aec <HAL_I2C_Mem_Write+0x32>
	...

08005c28 <HAL_I2C_Mem_Read>:
{
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	469b      	mov	fp, r3
 8005c30:	4604      	mov	r4, r0
 8005c32:	460f      	mov	r7, r1
 8005c34:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005c38:	4692      	mov	sl, r2
 8005c3a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005c3e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	f040 80a7 	bne.w	8005d98 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8005c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c4c:	b10b      	cbz	r3, 8005c52 <HAL_I2C_Mem_Read+0x2a>
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	b933      	cbnz	r3, 8005c60 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c56:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005c58:	2001      	movs	r0, #1
}
 8005c5a:	b005      	add	sp, #20
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005c60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	f000 8097 	beq.w	8005d98 <HAL_I2C_Mem_Read+0x170>
 8005c6a:	2501      	movs	r5, #1
 8005c6c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005c70:	f7fe fd3c 	bl	80046ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c74:	2319      	movs	r3, #25
 8005c76:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005c78:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c80:	4620      	mov	r0, r4
 8005c82:	f7ff fdf3 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005c86:	4680      	mov	r8, r0
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d1e5      	bne.n	8005c58 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c8c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005c8e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c90:	4652      	mov	r2, sl
 8005c92:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c98:	2340      	movs	r3, #64	; 0x40
 8005c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ca2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005ca4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ca6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ca8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005cac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cae:	465b      	mov	r3, fp
 8005cb0:	f7ff fe3c 	bl	800592c <I2C_RequestMemoryRead>
 8005cb4:	b110      	cbz	r0, 8005cbc <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005cb6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005cba:	e7cd      	b.n	8005c58 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2bff      	cmp	r3, #255	; 0xff
 8005cc2:	4b36      	ldr	r3, [pc, #216]	; (8005d9c <HAL_I2C_Mem_Read+0x174>)
 8005cc4:	d958      	bls.n	8005d78 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cc6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7ff fd02 	bl	80056dc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005cd8:	464b      	mov	r3, r9
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2104      	movs	r1, #4
 8005cde:	4620      	mov	r0, r4
 8005ce0:	9600      	str	r6, [sp, #0]
 8005ce2:	f7ff fdc3 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d1b6      	bne.n	8005c58 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005cf4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005cf6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005cf8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005cfa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005cfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005cfe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005d00:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005d02:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	b1ab      	cbz	r3, 8005d3a <HAL_I2C_Mem_Read+0x112>
 8005d0e:	b9a2      	cbnz	r2, 8005d3a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d10:	464b      	mov	r3, r9
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	4620      	mov	r0, r4
 8005d16:	9600      	str	r6, [sp, #0]
 8005d18:	f7ff fda8 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d19b      	bne.n	8005c58 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2bff      	cmp	r3, #255	; 0xff
 8005d26:	d92f      	bls.n	8005d88 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d28:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d2e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d30:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d32:	4639      	mov	r1, r7
 8005d34:	4620      	mov	r0, r4
 8005d36:	f7ff fcd1 	bl	80056dc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ca      	bne.n	8005cd8 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d42:	4632      	mov	r2, r6
 8005d44:	4649      	mov	r1, r9
 8005d46:	4620      	mov	r0, r4
 8005d48:	f7ff fe26 	bl	8005998 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d183      	bne.n	8005c58 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	2120      	movs	r1, #32
 8005d54:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005d5c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005d60:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005d6e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d72:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005d76:	e770      	b.n	8005c5a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005d78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005d80:	b292      	uxth	r2, r2
 8005d82:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	e7a3      	b.n	8005cd0 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005d88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d8e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005d90:	b292      	uxth	r2, r2
 8005d92:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	e7cc      	b.n	8005d32 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005d98:	2002      	movs	r0, #2
 8005d9a:	e75e      	b.n	8005c5a <HAL_I2C_Mem_Read+0x32>
 8005d9c:	80002400 	.word	0x80002400

08005da0 <HAL_I2C_GetState>:
  return hi2c->State;
 8005da0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005da4:	4770      	bx	lr

08005da6 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005da6:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005da8:	4770      	bx	lr

08005daa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005daa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	b2dc      	uxtb	r4, r3
 8005db4:	d11d      	bne.n	8005df2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d019      	beq.n	8005df2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbe:	2324      	movs	r3, #36	; 0x24
 8005dc0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dc4:	6803      	ldr	r3, [r0, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	f022 0201 	bic.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4311      	orrs	r1, r2
 8005dda:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005de6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005dea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005dee:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005df0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005df2:	2002      	movs	r0, #2
 8005df4:	e7fc      	b.n	8005df0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005df6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005df6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	b2dc      	uxtb	r4, r3
 8005e00:	d11c      	bne.n	8005e3c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d018      	beq.n	8005e3c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e0a:	2324      	movs	r3, #36	; 0x24
 8005e0c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e10:	6803      	ldr	r3, [r0, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e1a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e1c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e20:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e24:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e2e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005e34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005e38:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005e3a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	e7fc      	b.n	8005e3a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08005e40 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e40:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e42:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e44:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e48:	3284      	adds	r2, #132	; 0x84
 8005e4a:	1883      	adds	r3, r0, r2
{
 8005e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e50:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e52:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e56:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005e58:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e5c:	684c      	ldr	r4, [r1, #4]
 8005e5e:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e62:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e66:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e6a:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e6c:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e6e:	68c5      	ldr	r5, [r0, #12]
 8005e70:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8005e74:	443d      	add	r5, r7
 8005e76:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e7a:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e7c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e7e:	68c5      	ldr	r5, [r0, #12]
 8005e80:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8005e84:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e86:	689d      	ldr	r5, [r3, #8]
 8005e88:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005e8c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e8e:	688d      	ldr	r5, [r1, #8]
 8005e90:	68c7      	ldr	r7, [r0, #12]
 8005e92:	3501      	adds	r5, #1
 8005e94:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005e98:	443d      	add	r5, r7
 8005e9a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e9e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ea0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ea2:	691d      	ldr	r5, [r3, #16]
 8005ea4:	f025 0507 	bic.w	r5, r5, #7
 8005ea8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005eaa:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005eac:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005eae:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005eb2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005eb6:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005eba:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005ebe:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005ec2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005ec6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005eca:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ecc:	695d      	ldr	r5, [r3, #20]
 8005ece:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005ed2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ed4:	694d      	ldr	r5, [r1, #20]
 8005ed6:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ed8:	69dd      	ldr	r5, [r3, #28]
 8005eda:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005ede:	f025 0507 	bic.w	r5, r5, #7
 8005ee2:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ee4:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005ee8:	433d      	orrs	r5, r7
 8005eea:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005eec:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005eee:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ef0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ef4:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ef6:	b31e      	cbz	r6, 8005f40 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ef8:	2e01      	cmp	r6, #1
 8005efa:	d023      	beq.n	8005f44 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005efc:	1eb5      	subs	r5, r6, #2
 8005efe:	2d02      	cmp	r5, #2
 8005f00:	d922      	bls.n	8005f48 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005f02:	2e07      	cmp	r6, #7
 8005f04:	bf0c      	ite	eq
 8005f06:	2502      	moveq	r5, #2
 8005f08:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f0a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005f0c:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f10:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005f14:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f16:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005f18:	3407      	adds	r4, #7
 8005f1a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f1c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005f1e:	436e      	muls	r6, r5
 8005f20:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005f24:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f26:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005f28:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8005f2c:	f024 0407 	bic.w	r4, r4, #7
 8005f30:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f32:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f34:	5883      	ldr	r3, [r0, r2]
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	5083      	str	r3, [r0, r2]
}
 8005f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005f40:	2504      	movs	r5, #4
 8005f42:	e7e2      	b.n	8005f0a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005f44:	2503      	movs	r5, #3
 8005f46:	e7e0      	b.n	8005f0a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005f48:	2502      	movs	r5, #2
 8005f4a:	e7de      	b.n	8005f0a <LTDC_SetConfig+0xca>

08005f4c <HAL_LTDC_Init>:
{
 8005f4c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005f4e:	4604      	mov	r4, r0
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d063      	beq.n	800601c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f54:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005f58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f5c:	b91b      	cbnz	r3, 8005f66 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005f5e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005f62:	f7fa fe99 	bl	8000c98 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f66:	2302      	movs	r3, #2
 8005f68:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f74:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f76:	6999      	ldr	r1, [r3, #24]
 8005f78:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005f7c:	4302      	orrs	r2, r0
 8005f7e:	68e0      	ldr	r0, [r4, #12]
 8005f80:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f82:	6920      	ldr	r0, [r4, #16]
 8005f84:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f86:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f88:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f8a:	4925      	ldr	r1, [pc, #148]	; (8006020 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f8c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	400a      	ands	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005f9a:	69a0      	ldr	r0, [r4, #24]
 8005f9c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f9e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fa0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	400a      	ands	r2, r1
 8005fa6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005fae:	6a20      	ldr	r0, [r4, #32]
 8005fb0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fb4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	400a      	ands	r2, r1
 8005fba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005fc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005fc4:	4302      	orrs	r2, r0
 8005fc6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	4011      	ands	r1, r2
 8005fcc:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005fd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005fde:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fe2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005fe6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fea:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fee:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005ff8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ffc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006002:	f042 0206 	orr.w	r2, r2, #6
 8006006:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006010:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006012:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006016:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800601a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800601c:	2001      	movs	r0, #1
 800601e:	e7fc      	b.n	800601a <HAL_LTDC_Init+0xce>
 8006020:	f000f800 	.word	0xf000f800

08006024 <HAL_LTDC_ErrorCallback>:
 8006024:	4770      	bx	lr

08006026 <HAL_LTDC_LineEventCallback>:
 8006026:	4770      	bx	lr

08006028 <HAL_LTDC_ReloadEventCallback>:
 8006028:	4770      	bx	lr

0800602a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800602a:	6803      	ldr	r3, [r0, #0]
{
 800602c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800602e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8006030:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006032:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006034:	0772      	lsls	r2, r6, #29
 8006036:	d514      	bpl.n	8006062 <HAL_LTDC_IRQHandler+0x38>
 8006038:	0769      	lsls	r1, r5, #29
 800603a:	d512      	bpl.n	8006062 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800603c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603e:	f022 0204 	bic.w	r2, r2, #4
 8006042:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006044:	2204      	movs	r2, #4
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006048:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006054:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006056:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800605a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800605e:	f7ff ffe1 	bl	8006024 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006062:	07b2      	lsls	r2, r6, #30
 8006064:	d516      	bpl.n	8006094 <HAL_LTDC_IRQHandler+0x6a>
 8006066:	07ab      	lsls	r3, r5, #30
 8006068:	d514      	bpl.n	8006094 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800606a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800606c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800606e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006070:	f022 0202 	bic.w	r2, r2, #2
 8006074:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006076:	2202      	movs	r2, #2
 8006078:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800607a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006084:	2304      	movs	r3, #4
 8006086:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800608a:	2300      	movs	r3, #0
 800608c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006090:	f7ff ffc8 	bl	8006024 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006094:	07f0      	lsls	r0, r6, #31
 8006096:	d510      	bpl.n	80060ba <HAL_LTDC_IRQHandler+0x90>
 8006098:	07e9      	lsls	r1, r5, #31
 800609a:	d50e      	bpl.n	80060ba <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800609c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800609e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80060a8:	2201      	movs	r2, #1
 80060aa:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80060ac:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80060ae:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80060b2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80060b6:	f7ff ffb6 	bl	8006026 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80060ba:	0732      	lsls	r2, r6, #28
 80060bc:	d511      	bpl.n	80060e2 <HAL_LTDC_IRQHandler+0xb8>
 80060be:	072b      	lsls	r3, r5, #28
 80060c0:	d50f      	bpl.n	80060e2 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80060c2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80060c4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80060c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c8:	f022 0208 	bic.w	r2, r2, #8
 80060cc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80060ce:	2208      	movs	r2, #8
 80060d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80060d8:	2300      	movs	r3, #0
 80060da:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80060de:	f7ff ffa3 	bl	8006028 <HAL_LTDC_ReloadEventCallback>
}
 80060e2:	bd70      	pop	{r4, r5, r6, pc}

080060e4 <HAL_LTDC_ConfigLayer>:
{
 80060e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80060e8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f04f 0002 	mov.w	r0, #2
 80060f8:	d01f      	beq.n	800613a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060fa:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80060fc:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006100:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006102:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006106:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800610a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800610e:	3438      	adds	r4, #56	; 0x38
 8006110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800611e:	4630      	mov	r0, r6
 8006120:	4662      	mov	r2, ip
 8006122:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006124:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006126:	f7ff fe8b 	bl	8005e40 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800612a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800612c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800612e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006132:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006136:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800613a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006140 <HAL_LTDC_SetPitch>:
{
 8006140:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8006142:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006146:	2b01      	cmp	r3, #1
 8006148:	f04f 0302 	mov.w	r3, #2
 800614c:	d02c      	beq.n	80061a8 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800614e:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006150:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8006154:	fb04 0402 	mla	r4, r4, r2, r0
 8006158:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800615a:	b33c      	cbz	r4, 80061ac <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800615c:	2c01      	cmp	r4, #1
 800615e:	d027      	beq.n	80061b0 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006160:	1ea5      	subs	r5, r4, #2
 8006162:	429d      	cmp	r5, r3
 8006164:	d902      	bls.n	800616c <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8006166:	2c07      	cmp	r4, #7
 8006168:	bf18      	it	ne
 800616a:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800616c:	01d2      	lsls	r2, r2, #7
 800616e:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8006170:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8006172:	3284      	adds	r2, #132	; 0x84
 8006174:	4422      	add	r2, r4
 8006176:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8006178:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800617c:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8006180:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8006182:	4c0c      	ldr	r4, [pc, #48]	; (80061b4 <HAL_LTDC_SetPitch+0x74>)
 8006184:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006186:	f045 0501 	orr.w	r5, r5, #1
 800618a:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800618c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800618e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006192:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8006194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800619c:	2301      	movs	r3, #1
 800619e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80061a2:	2300      	movs	r3, #0
 80061a4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 80061ac:	2304      	movs	r3, #4
 80061ae:	e7dd      	b.n	800616c <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e7db      	b.n	800616c <HAL_LTDC_SetPitch+0x2c>
 80061b4:	50001000 	.word	0x50001000

080061b8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061bc:	f7fe fa96 	bl	80046ec <HAL_GetTick>
 80061c0:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80061c2:	2c00      	cmp	r4, #0
 80061c4:	d061      	beq.n	800628a <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80061c6:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80061c8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80061ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80061ce:	2302      	movs	r3, #2
 80061d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80061d4:	68d3      	ldr	r3, [r2, #12]
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	07d2      	lsls	r2, r2, #31
 80061e2:	d448      	bmi.n	8006276 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80061e4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80061ec:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	69e1      	ldr	r1, [r4, #28]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	6a21      	ldr	r1, [r4, #32]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061fc:	430a      	orrs	r2, r1
 80061fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006200:	430a      	orrs	r2, r1
 8006202:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006204:	430a      	orrs	r2, r1
 8006206:	68a1      	ldr	r1, [r4, #8]
 8006208:	430a      	orrs	r2, r1
 800620a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800620c:	3901      	subs	r1, #1
 800620e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006212:	6861      	ldr	r1, [r4, #4]
 8006214:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006218:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800621a:	d103      	bne.n	8006224 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8006222:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8006224:	2200      	movs	r2, #0
 8006226:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8006228:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800622a:	2a00      	cmp	r2, #0
 800622c:	da04      	bge.n	8006238 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800622e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8006230:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006232:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8006236:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006238:	b292      	uxth	r2, r2
 800623a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800623c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800623e:	2a00      	cmp	r2, #0
 8006240:	da25      	bge.n	800628e <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006242:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8006244:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006246:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800624a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800624c:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800624e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006252:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006256:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	d019      	beq.n	8006292 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800625e:	b2c9      	uxtb	r1, r1
 8006260:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8006264:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8006266:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006268:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800626a:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800626c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8006270:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8006274:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006276:	f7fe fa39 	bl	80046ec <HAL_GetTick>
 800627a:	1b40      	subs	r0, r0, r5
 800627c:	2805      	cmp	r0, #5
 800627e:	d9ad      	bls.n	80061dc <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006284:	2303      	movs	r3, #3
 8006286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800628a:	2001      	movs	r0, #1
 800628c:	e7f2      	b.n	8006274 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800628e:	6a18      	ldr	r0, [r3, #32]
 8006290:	e7dd      	b.n	800624e <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8006292:	629a      	str	r2, [r3, #40]	; 0x28
 8006294:	e7e5      	b.n	8006262 <HAL_MDMA_Init+0xaa>

08006296 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8006296:	b1d8      	cbz	r0, 80062d0 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8006298:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800629a:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800629c:	68d3      	ldr	r3, [r2, #12]
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80062a8:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80062aa:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80062ac:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80062ae:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80062b0:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80062b2:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80062b4:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80062b6:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80062b8:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80062ba:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80062bc:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80062be:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 80062c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 80062c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80062c8:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 80062cc:	4618      	mov	r0, r3
 80062ce:	4770      	bx	lr
    return HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
}
 80062d2:	4770      	bx	lr

080062d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062d4:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80062d6:	4d1c      	ldr	r5, [pc, #112]	; (8006348 <HAL_PWREx_ConfigSupply+0x74>)
{
 80062d8:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80062da:	68eb      	ldr	r3, [r5, #12]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	2b06      	cmp	r3, #6
 80062e2:	d006      	beq.n	80062f2 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062e4:	68e8      	ldr	r0, [r5, #12]
 80062e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062ea:	1b00      	subs	r0, r0, r4
 80062ec:	bf18      	it	ne
 80062ee:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80062f0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062f2:	68eb      	ldr	r3, [r5, #12]
 80062f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062f8:	4303      	orrs	r3, r0
 80062fa:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80062fc:	f7fe f9f6 	bl	80046ec <HAL_GetTick>
 8006300:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006302:	686b      	ldr	r3, [r5, #4]
 8006304:	049a      	lsls	r2, r3, #18
 8006306:	d508      	bpl.n	800631a <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006308:	f1a4 031d 	sub.w	r3, r4, #29
 800630c:	2b01      	cmp	r3, #1
 800630e:	d90c      	bls.n	800632a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006310:	3c2d      	subs	r4, #45	; 0x2d
 8006312:	2c01      	cmp	r4, #1
 8006314:	d909      	bls.n	800632a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8006316:	2000      	movs	r0, #0
 8006318:	e7ea      	b.n	80062f0 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800631a:	f7fe f9e7 	bl	80046ec <HAL_GetTick>
 800631e:	1b80      	subs	r0, r0, r6
 8006320:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006324:	d9ed      	bls.n	8006302 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8006326:	2001      	movs	r0, #1
 8006328:	e7e2      	b.n	80062f0 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800632a:	f7fe f9df 	bl	80046ec <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800632e:	4d06      	ldr	r5, [pc, #24]	; (8006348 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8006330:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006332:	68eb      	ldr	r3, [r5, #12]
 8006334:	03db      	lsls	r3, r3, #15
 8006336:	d4ee      	bmi.n	8006316 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006338:	f7fe f9d8 	bl	80046ec <HAL_GetTick>
 800633c:	1b00      	subs	r0, r0, r4
 800633e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006342:	d9f6      	bls.n	8006332 <HAL_PWREx_ConfigSupply+0x5e>
 8006344:	e7ef      	b.n	8006326 <HAL_PWREx_ConfigSupply+0x52>
 8006346:	bf00      	nop
 8006348:	58024800 	.word	0x58024800

0800634c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006350:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8006352:	b136      	cbz	r6, 8006362 <QSPI_Config+0x16>
 8006354:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8006358:	d003      	beq.n	8006362 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800635a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800635c:	6804      	ldr	r4, [r0, #0]
 800635e:	3b01      	subs	r3, #1
 8006360:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006362:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006366:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800636a:	f1b9 0f00 	cmp.w	r9, #0
 800636e:	d04f      	beq.n	8006410 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006370:	694b      	ldr	r3, [r1, #20]
 8006372:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006376:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006378:	f8d1 a000 	ldr.w	sl, [r1]
 800637c:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8006380:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8006384:	ea49 0902 	orr.w	r9, r9, r2
 8006388:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800638c:	b335      	cbz	r5, 80063dc <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800638e:	688b      	ldr	r3, [r1, #8]
 8006390:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006394:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006396:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006398:	b19f      	cbz	r7, 80063c2 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800639a:	ea4a 0307 	orr.w	r3, sl, r7
 800639e:	4323      	orrs	r3, r4
 80063a0:	68cc      	ldr	r4, [r1, #12]
 80063a2:	ea43 0308 	orr.w	r3, r3, r8
 80063a6:	ea43 030e 	orr.w	r3, r3, lr
 80063aa:	4333      	orrs	r3, r6
 80063ac:	4323      	orrs	r3, r4
 80063ae:	ea43 030c 	orr.w	r3, r3, ip
 80063b2:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80063b4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063b8:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80063ba:	d00d      	beq.n	80063d8 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80063bc:	684b      	ldr	r3, [r1, #4]
 80063be:	6183      	str	r3, [r0, #24]
 80063c0:	e00a      	b.n	80063d8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063c2:	ea4a 0304 	orr.w	r3, sl, r4
 80063c6:	ea43 0308 	orr.w	r3, r3, r8
 80063ca:	ea43 030e 	orr.w	r3, r3, lr
 80063ce:	4333      	orrs	r3, r6
 80063d0:	ea43 030c 	orr.w	r3, r3, ip
 80063d4:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063d6:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80063d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80063dc:	b16f      	cbz	r7, 80063fa <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063de:	ea4a 0307 	orr.w	r3, sl, r7
 80063e2:	4323      	orrs	r3, r4
 80063e4:	68cc      	ldr	r4, [r1, #12]
 80063e6:	ea43 0308 	orr.w	r3, r3, r8
 80063ea:	ea43 030e 	orr.w	r3, r3, lr
 80063ee:	4323      	orrs	r3, r4
 80063f0:	ea43 030c 	orr.w	r3, r3, ip
 80063f4:	ea43 0309 	orr.w	r3, r3, r9
 80063f8:	e7dc      	b.n	80063b4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063fa:	ea4a 0304 	orr.w	r3, sl, r4
 80063fe:	ea43 0308 	orr.w	r3, r3, r8
 8006402:	ea43 030e 	orr.w	r3, r3, lr
 8006406:	ea43 030c 	orr.w	r3, r3, ip
 800640a:	ea43 0309 	orr.w	r3, r3, r9
 800640e:	e7e2      	b.n	80063d6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006410:	b365      	cbz	r5, 800646c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006412:	6804      	ldr	r4, [r0, #0]
 8006414:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006416:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006418:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800641a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800641e:	694e      	ldr	r6, [r1, #20]
 8006420:	ea43 0502 	orr.w	r5, r3, r2
 8006424:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8006428:	04b6      	lsls	r6, r6, #18
 800642a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800642e:	b1a7      	cbz	r7, 800645a <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006430:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006432:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006436:	ea40 0008 	orr.w	r0, r0, r8
 800643a:	ea43 0300 	orr.w	r3, r3, r0
 800643e:	68c8      	ldr	r0, [r1, #12]
 8006440:	ea43 030c 	orr.w	r3, r3, ip
 8006444:	ea43 0300 	orr.w	r3, r3, r0
 8006448:	ea43 0306 	orr.w	r3, r3, r6
 800644c:	ea43 0305 	orr.w	r3, r3, r5
 8006450:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006452:	d0c1      	beq.n	80063d8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006454:	684b      	ldr	r3, [r1, #4]
 8006456:	61a3      	str	r3, [r4, #24]
 8006458:	e7be      	b.n	80063d8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800645a:	ea40 0008 	orr.w	r0, r0, r8
 800645e:	4303      	orrs	r3, r0
 8006460:	ea43 030c 	orr.w	r3, r3, ip
 8006464:	4333      	orrs	r3, r6
 8006466:	432b      	orrs	r3, r5
 8006468:	6163      	str	r3, [r4, #20]
 800646a:	e7b5      	b.n	80063d8 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800646c:	b17f      	cbz	r7, 800648e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800646e:	ea46 0307 	orr.w	r3, r6, r7
 8006472:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006474:	6800      	ldr	r0, [r0, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	4323      	orrs	r3, r4
 800647a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800647c:	4323      	orrs	r3, r4
 800647e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006480:	4323      	orrs	r3, r4
 8006482:	68cc      	ldr	r4, [r1, #12]
 8006484:	4323      	orrs	r3, r4
 8006486:	694c      	ldr	r4, [r1, #20]
 8006488:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800648c:	e792      	b.n	80063b4 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800648e:	2e00      	cmp	r6, #0
 8006490:	d0a2      	beq.n	80063d8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006492:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006494:	6800      	ldr	r0, [r0, #0]
 8006496:	4333      	orrs	r3, r6
 8006498:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800649a:	431a      	orrs	r2, r3
 800649c:	694b      	ldr	r3, [r1, #20]
 800649e:	4332      	orrs	r2, r6
 80064a0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80064a2:	4332      	orrs	r2, r6
 80064a4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80064a8:	6142      	str	r2, [r0, #20]
}
 80064aa:	e795      	b.n	80063d8 <QSPI_Config+0x8c>

080064ac <QSPI_WaitFlagStateUntilTimeout>:
{
 80064ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80064b4:	4604      	mov	r4, r0
 80064b6:	460e      	mov	r6, r1
 80064b8:	4615      	mov	r5, r2
 80064ba:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064bc:	6822      	ldr	r2, [r4, #0]
 80064be:	6893      	ldr	r3, [r2, #8]
 80064c0:	4233      	tst	r3, r6
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	d101      	bne.n	80064d0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80064cc:	2000      	movs	r0, #0
 80064ce:	e012      	b.n	80064f6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80064d0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80064d4:	d0f3      	beq.n	80064be <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fe f909 	bl	80046ec <HAL_GetTick>
 80064da:	1bc0      	subs	r0, r0, r7
 80064dc:	4540      	cmp	r0, r8
 80064de:	d802      	bhi.n	80064e6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80064e0:	f1b8 0f00 	cmp.w	r8, #0
 80064e4:	d1ea      	bne.n	80064bc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064e6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064e8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6463      	str	r3, [r4, #68]	; 0x44
}
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080064fc <HAL_QSPI_Init>:
{
 80064fc:	b530      	push	{r4, r5, lr}
 80064fe:	4604      	mov	r4, r0
 8006500:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8006502:	f7fe f8f3 	bl	80046ec <HAL_GetTick>
 8006506:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8006508:	2c00      	cmp	r4, #0
 800650a:	d040      	beq.n	800658e <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800650c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006510:	b93a      	cbnz	r2, 8006522 <HAL_QSPI_Init+0x26>
 8006512:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8006514:	4620      	mov	r0, r4
 8006516:	f7fa fbfb 	bl	8000d10 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	68a1      	ldr	r1, [r4, #8]
 8006526:	6802      	ldr	r2, [r0, #0]
 8006528:	3901      	subs	r1, #1
 800652a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800652e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006532:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006534:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006536:	4620      	mov	r0, r4
 8006538:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800653a:	9200      	str	r2, [sp, #0]
 800653c:	2200      	movs	r2, #0
 800653e:	f7ff ffb5 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8006542:	bb10      	cbnz	r0, 800658a <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	69e5      	ldr	r5, [r4, #28]
 8006548:	68e3      	ldr	r3, [r4, #12]
 800654a:	6811      	ldr	r1, [r2, #0]
 800654c:	432b      	orrs	r3, r5
 800654e:	6a25      	ldr	r5, [r4, #32]
 8006550:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006554:	432b      	orrs	r3, r5
 8006556:	6865      	ldr	r5, [r4, #4]
 8006558:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800655c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006560:	430b      	orrs	r3, r1
 8006562:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006564:	6855      	ldr	r5, [r2, #4]
 8006566:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800656a:	430b      	orrs	r3, r1
 800656c:	6921      	ldr	r1, [r4, #16]
 800656e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006572:	4908      	ldr	r1, [pc, #32]	; (8006594 <HAL_QSPI_Init+0x98>)
 8006574:	4029      	ands	r1, r5
 8006576:	430b      	orrs	r3, r1
 8006578:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800657a:	6813      	ldr	r3, [r2, #0]
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8006582:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006584:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8006586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800658a:	b005      	add	sp, #20
 800658c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800658e:	2001      	movs	r0, #1
 8006590:	e7fb      	b.n	800658a <HAL_QSPI_Init+0x8e>
 8006592:	bf00      	nop
 8006594:	ffe0f8fe 	.word	0xffe0f8fe

08006598 <HAL_QSPI_Command>:
{
 8006598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800659c:	4604      	mov	r4, r0
 800659e:	b085      	sub	sp, #20
 80065a0:	4617      	mov	r7, r2
 80065a2:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80065a4:	f7fe f8a2 	bl	80046ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80065a8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80065ac:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80065ae:	2a01      	cmp	r2, #1
 80065b0:	d033      	beq.n	800661a <HAL_QSPI_Command+0x82>
 80065b2:	2201      	movs	r2, #1
 80065b4:	2602      	movs	r6, #2
 80065b6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80065ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80065be:	2a01      	cmp	r2, #1
 80065c0:	fa5f f882 	uxtb.w	r8, r2
 80065c4:	d127      	bne.n	8006616 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065c6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80065c8:	9003      	str	r0, [sp, #12]
 80065ca:	2120      	movs	r1, #32
 80065cc:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80065ce:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80065d0:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80065d2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80065d6:	f7ff ff69 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80065da:	4605      	mov	r5, r0
 80065dc:	b9a0      	cbnz	r0, 8006608 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80065de:	4602      	mov	r2, r0
 80065e0:	4649      	mov	r1, r9
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7ff feb2 	bl	800634c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80065e8:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	b94a      	cbnz	r2, 8006604 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80065f0:	4642      	mov	r2, r8
 80065f2:	4631      	mov	r1, r6
 80065f4:	4620      	mov	r0, r4
 80065f6:	9700      	str	r7, [sp, #0]
 80065f8:	f7ff ff58 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80065fc:	4605      	mov	r5, r0
 80065fe:	b918      	cbnz	r0, 8006608 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8006604:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006608:	2300      	movs	r3, #0
 800660a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800660e:	4628      	mov	r0, r5
 8006610:	b005      	add	sp, #20
 8006612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8006616:	4635      	mov	r5, r6
 8006618:	e7f6      	b.n	8006608 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800661a:	2502      	movs	r5, #2
 800661c:	e7f7      	b.n	800660e <HAL_QSPI_Command+0x76>

0800661e <HAL_QSPI_Transmit>:
{
 800661e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006620:	4604      	mov	r4, r0
 8006622:	b085      	sub	sp, #20
 8006624:	4616      	mov	r6, r2
 8006626:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006628:	f7fe f860 	bl	80046ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800662c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006630:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006632:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8006634:	2a01      	cmp	r2, #1
 8006636:	d049      	beq.n	80066cc <HAL_QSPI_Transmit+0xae>
 8006638:	2201      	movs	r2, #1
 800663a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800663e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006642:	2a01      	cmp	r2, #1
 8006644:	b2d0      	uxtb	r0, r2
 8006646:	d13f      	bne.n	80066c8 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006648:	2200      	movs	r2, #0
 800664a:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800664c:	2f00      	cmp	r7, #0
 800664e:	d036      	beq.n	80066be <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006650:	2212      	movs	r2, #18
 8006652:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006656:	692a      	ldr	r2, [r5, #16]
 8006658:	3201      	adds	r2, #1
 800665a:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800665c:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800665e:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006660:	3201      	adds	r2, #1
 8006662:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006664:	696a      	ldr	r2, [r5, #20]
 8006666:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800666a:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800666c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800666e:	b98a      	cbnz	r2, 8006694 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006670:	2201      	movs	r2, #1
 8006672:	2102      	movs	r1, #2
 8006674:	4620      	mov	r0, r4
 8006676:	9600      	str	r6, [sp, #0]
 8006678:	f7ff ff18 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800667c:	b910      	cbnz	r0, 8006684 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	2202      	movs	r2, #2
 8006682:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006684:	2301      	movs	r3, #1
 8006686:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800668a:	2300      	movs	r3, #0
 800668c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006690:	b005      	add	sp, #20
 8006692:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006694:	2201      	movs	r2, #1
 8006696:	2104      	movs	r1, #4
 8006698:	4620      	mov	r0, r4
 800669a:	9600      	str	r6, [sp, #0]
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	f7ff ff05 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d1ee      	bne.n	8006684 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80066a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80066a8:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 80066b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066b2:	3201      	adds	r2, #1
 80066b4:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80066b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066b8:	3a01      	subs	r2, #1
 80066ba:	62e2      	str	r2, [r4, #44]	; 0x2c
 80066bc:	e7d6      	b.n	800666c <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80066be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80066c0:	f043 0308 	orr.w	r3, r3, #8
 80066c4:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80066c6:	e7e0      	b.n	800668a <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 80066c8:	2002      	movs	r0, #2
 80066ca:	e7de      	b.n	800668a <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 80066cc:	2002      	movs	r0, #2
 80066ce:	e7df      	b.n	8006690 <HAL_QSPI_Transmit+0x72>

080066d0 <HAL_QSPI_Receive>:
{
 80066d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	b085      	sub	sp, #20
 80066d6:	4616      	mov	r6, r2
 80066d8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80066da:	f7fe f807 	bl	80046ec <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80066de:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80066e0:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80066e2:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 80066e6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80066ea:	2a01      	cmp	r2, #1
 80066ec:	d04d      	beq.n	800678a <HAL_QSPI_Receive+0xba>
 80066ee:	2201      	movs	r2, #1
 80066f0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80066f4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80066f8:	2a01      	cmp	r2, #1
 80066fa:	b2d0      	uxtb	r0, r2
 80066fc:	d143      	bne.n	8006786 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066fe:	2200      	movs	r2, #0
 8006700:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8006702:	2f00      	cmp	r7, #0
 8006704:	d03a      	beq.n	800677c <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006706:	2222      	movs	r2, #34	; 0x22
 8006708:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800670c:	692a      	ldr	r2, [r5, #16]
 800670e:	3201      	adds	r2, #1
 8006710:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006712:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8006714:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006716:	3201      	adds	r2, #1
 8006718:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800671a:	6969      	ldr	r1, [r5, #20]
 800671c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8006720:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8006724:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006726:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800672a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800672c:	b98a      	cbnz	r2, 8006752 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800672e:	2201      	movs	r2, #1
 8006730:	2102      	movs	r1, #2
 8006732:	4620      	mov	r0, r4
 8006734:	9600      	str	r6, [sp, #0]
 8006736:	f7ff feb9 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800673a:	b910      	cbnz	r0, 8006742 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	2202      	movs	r2, #2
 8006740:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006742:	2301      	movs	r3, #1
 8006744:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006748:	2300      	movs	r3, #0
 800674a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800674e:	b005      	add	sp, #20
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006752:	2201      	movs	r2, #1
 8006754:	2106      	movs	r1, #6
 8006756:	4620      	mov	r0, r4
 8006758:	9600      	str	r6, [sp, #0]
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	f7ff fea6 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8006760:	2800      	cmp	r0, #0
 8006762:	d1ee      	bne.n	8006742 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006764:	f895 1020 	ldrb.w	r1, [r5, #32]
 8006768:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800676a:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800676c:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800676e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006770:	3201      	adds	r2, #1
 8006772:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8006774:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006776:	3a01      	subs	r2, #1
 8006778:	63a2      	str	r2, [r4, #56]	; 0x38
 800677a:	e7d6      	b.n	800672a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800677c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800677e:	f043 0308 	orr.w	r3, r3, #8
 8006782:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006784:	e7e0      	b.n	8006748 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8006786:	2002      	movs	r0, #2
 8006788:	e7de      	b.n	8006748 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800678a:	2002      	movs	r0, #2
 800678c:	e7df      	b.n	800674e <HAL_QSPI_Receive+0x7e>

0800678e <HAL_QSPI_AutoPolling>:
{
 800678e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006792:	4604      	mov	r4, r0
 8006794:	4615      	mov	r5, r2
 8006796:	461e      	mov	r6, r3
 8006798:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800679a:	f7fd ffa7 	bl	80046ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800679e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80067a2:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	d040      	beq.n	800682a <HAL_QSPI_AutoPolling+0x9c>
 80067a8:	2201      	movs	r2, #1
 80067aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80067ae:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80067b2:	2a01      	cmp	r2, #1
 80067b4:	b2d7      	uxtb	r7, r2
 80067b6:	d136      	bne.n	8006826 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80067b8:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067ba:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80067bc:	9003      	str	r0, [sp, #12]
 80067be:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067c0:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80067c2:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80067c4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80067c8:	2120      	movs	r1, #32
 80067ca:	f7ff fe6f 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80067ce:	bb20      	cbnz	r0, 800681a <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80067d0:	6821      	ldr	r1, [r4, #0]
 80067d2:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80067d4:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80067d6:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80067d8:	686a      	ldr	r2, [r5, #4]
 80067da:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80067dc:	68aa      	ldr	r2, [r5, #8]
 80067de:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80067e0:	680a      	ldr	r2, [r1, #0]
 80067e2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80067e6:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80067e8:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80067ea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80067ee:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80067f0:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 80067f2:	68ea      	ldr	r2, [r5, #12]
 80067f4:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80067f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80067fc:	f7ff fda6 	bl	800634c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	463a      	mov	r2, r7
 8006804:	2108      	movs	r1, #8
 8006806:	4620      	mov	r0, r4
 8006808:	9600      	str	r6, [sp, #0]
 800680a:	f7ff fe4f 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800680e:	b920      	cbnz	r0, 800681a <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	2208      	movs	r2, #8
 8006814:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8006816:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800681a:	2300      	movs	r3, #0
 800681c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006820:	b004      	add	sp, #16
 8006822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8006826:	2002      	movs	r0, #2
 8006828:	e7f7      	b.n	800681a <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800682a:	2002      	movs	r0, #2
 800682c:	e7f8      	b.n	8006820 <HAL_QSPI_AutoPolling+0x92>

0800682e <HAL_QSPI_MemoryMapped>:
{
 800682e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006830:	4604      	mov	r4, r0
 8006832:	4616      	mov	r6, r2
 8006834:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006836:	f7fd ff59 	bl	80046ec <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800683a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800683e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006840:	2a01      	cmp	r2, #1
 8006842:	d033      	beq.n	80068ac <HAL_QSPI_MemoryMapped+0x7e>
 8006844:	2201      	movs	r2, #1
 8006846:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800684a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800684e:	2a01      	cmp	r2, #1
 8006850:	d12a      	bne.n	80068a8 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006852:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006854:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006856:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006858:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800685a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800685e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006860:	9100      	str	r1, [sp, #0]
 8006862:	2120      	movs	r1, #32
 8006864:	f7ff fe22 	bl	80064ac <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006868:	4605      	mov	r5, r0
 800686a:	b9b8      	cbnz	r0, 800689c <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	6872      	ldr	r2, [r6, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8006872:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8006874:	f020 0008 	bic.w	r0, r0, #8
 8006878:	ea40 0002 	orr.w	r0, r0, r2
 800687c:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800687e:	d107      	bne.n	8006890 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8006880:	6832      	ldr	r2, [r6, #0]
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8006884:	2210      	movs	r2, #16
 8006886:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800688e:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8006890:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8006894:	4639      	mov	r1, r7
 8006896:	4620      	mov	r0, r4
 8006898:	f7ff fd58 	bl	800634c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800689c:	2300      	movs	r3, #0
 800689e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80068a2:	4628      	mov	r0, r5
 80068a4:	b003      	add	sp, #12
 80068a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80068a8:	2502      	movs	r5, #2
 80068aa:	e7f7      	b.n	800689c <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80068ac:	2502      	movs	r5, #2
 80068ae:	e7f8      	b.n	80068a2 <HAL_QSPI_MemoryMapped+0x74>

080068b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068b2:	4604      	mov	r4, r0
 80068b4:	b908      	cbnz	r0, 80068ba <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80068b6:	2001      	movs	r0, #1
 80068b8:	e08b      	b.n	80069d2 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ba:	6803      	ldr	r3, [r0, #0]
 80068bc:	07df      	lsls	r7, r3, #31
 80068be:	d45e      	bmi.n	800697e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	079e      	lsls	r6, r3, #30
 80068c4:	f100 80af 	bmi.w	8006a26 <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	06da      	lsls	r2, r3, #27
 80068cc:	d527      	bpl.n	800691e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ce:	4b9e      	ldr	r3, [pc, #632]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 80068d0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068d4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068d8:	2a08      	cmp	r2, #8
 80068da:	d007      	beq.n	80068ec <HAL_RCC_OscConfig+0x3c>
 80068dc:	2a18      	cmp	r2, #24
 80068de:	f040 8107 	bne.w	8006af0 <HAL_RCC_OscConfig+0x240>
 80068e2:	f001 0203 	and.w	r2, r1, #3
 80068e6:	2a01      	cmp	r2, #1
 80068e8:	f040 8102 	bne.w	8006af0 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	05db      	lsls	r3, r3, #23
 80068f0:	d502      	bpl.n	80068f8 <HAL_RCC_OscConfig+0x48>
 80068f2:	69e3      	ldr	r3, [r4, #28]
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d1de      	bne.n	80068b6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068f8:	f7fd ff10 	bl	800471c <HAL_GetREVID>
 80068fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8006900:	6a21      	ldr	r1, [r4, #32]
 8006902:	4298      	cmp	r0, r3
 8006904:	4b90      	ldr	r3, [pc, #576]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 8006906:	f200 80ec 	bhi.w	8006ae2 <HAL_RCC_OscConfig+0x232>
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	2920      	cmp	r1, #32
 800690e:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8006912:	bf0c      	ite	eq
 8006914:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8006918:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800691c:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	0719      	lsls	r1, r3, #28
 8006922:	f100 8127 	bmi.w	8006b74 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	069a      	lsls	r2, r3, #26
 800692a:	f100 8148 	bmi.w	8006bbe <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	075d      	lsls	r5, r3, #29
 8006932:	d51e      	bpl.n	8006972 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8006934:	4d85      	ldr	r5, [pc, #532]	; (8006b4c <HAL_RCC_OscConfig+0x29c>)
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800693e:	f7fd fed5 	bl	80046ec <HAL_GetTick>
 8006942:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	05da      	lsls	r2, r3, #23
 8006948:	f140 815e 	bpl.w	8006c08 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800694c:	68a3      	ldr	r3, [r4, #8]
 800694e:	4d7e      	ldr	r5, [pc, #504]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 8006950:	2b01      	cmp	r3, #1
 8006952:	f040 8160 	bne.w	8006c16 <HAL_RCC_OscConfig+0x366>
 8006956:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006962:	f7fd fec3 	bl	80046ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006966:	4e78      	ldr	r6, [pc, #480]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8006968:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800696a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800696c:	079b      	lsls	r3, r3, #30
 800696e:	f140 8178 	bpl.w	8006c62 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006972:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006974:	2800      	cmp	r0, #0
 8006976:	f040 817b 	bne.w	8006c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 800697a:	2000      	movs	r0, #0
 800697c:	e029      	b.n	80069d2 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800697e:	4b72      	ldr	r3, [pc, #456]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 8006980:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006982:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006984:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006988:	2a10      	cmp	r2, #16
 800698a:	d005      	beq.n	8006998 <HAL_RCC_OscConfig+0xe8>
 800698c:	2a18      	cmp	r2, #24
 800698e:	d10a      	bne.n	80069a6 <HAL_RCC_OscConfig+0xf6>
 8006990:	f001 0203 	and.w	r2, r1, #3
 8006994:	2a02      	cmp	r2, #2
 8006996:	d106      	bne.n	80069a6 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	039d      	lsls	r5, r3, #14
 800699c:	d590      	bpl.n	80068c0 <HAL_RCC_OscConfig+0x10>
 800699e:	6863      	ldr	r3, [r4, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d18d      	bne.n	80068c0 <HAL_RCC_OscConfig+0x10>
 80069a4:	e787      	b.n	80068b6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069a6:	6862      	ldr	r2, [r4, #4]
 80069a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80069ac:	d112      	bne.n	80069d4 <HAL_RCC_OscConfig+0x124>
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80069b6:	f7fd fe99 	bl	80046ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ba:	4e63      	ldr	r6, [pc, #396]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 80069bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	0398      	lsls	r0, r3, #14
 80069c2:	f53f af7d 	bmi.w	80068c0 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c6:	f7fd fe91 	bl	80046ec <HAL_GetTick>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	2864      	cmp	r0, #100	; 0x64
 80069ce:	d9f6      	bls.n	80069be <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
}
 80069d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069d4:	4d5c      	ldr	r5, [pc, #368]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	b99a      	cbnz	r2, 8006a02 <HAL_RCC_OscConfig+0x152>
 80069da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80069e8:	f7fd fe80 	bl	80046ec <HAL_GetTick>
 80069ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	0399      	lsls	r1, r3, #14
 80069f2:	f57f af65 	bpl.w	80068c0 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f6:	f7fd fe79 	bl	80046ec <HAL_GetTick>
 80069fa:	1b80      	subs	r0, r0, r6
 80069fc:	2864      	cmp	r0, #100	; 0x64
 80069fe:	d9f6      	bls.n	80069ee <HAL_RCC_OscConfig+0x13e>
 8006a00:	e7e6      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a02:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8006a06:	d107      	bne.n	8006a18 <HAL_RCC_OscConfig+0x168>
 8006a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a14:	602b      	str	r3, [r5, #0]
 8006a16:	e7ce      	b.n	80069b6 <HAL_RCC_OscConfig+0x106>
 8006a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a1c:	602b      	str	r3, [r5, #0]
 8006a1e:	682b      	ldr	r3, [r5, #0]
 8006a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a24:	e7f6      	b.n	8006a14 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a26:	4b48      	ldr	r3, [pc, #288]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 8006a28:	68e1      	ldr	r1, [r4, #12]
 8006a2a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a2e:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8006a32:	d003      	beq.n	8006a3c <HAL_RCC_OscConfig+0x18c>
 8006a34:	2a18      	cmp	r2, #24
 8006a36:	d12b      	bne.n	8006a90 <HAL_RCC_OscConfig+0x1e0>
 8006a38:	0782      	lsls	r2, r0, #30
 8006a3a:	d129      	bne.n	8006a90 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	075b      	lsls	r3, r3, #29
 8006a40:	d502      	bpl.n	8006a48 <HAL_RCC_OscConfig+0x198>
 8006a42:	2900      	cmp	r1, #0
 8006a44:	f43f af37 	beq.w	80068b6 <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a48:	4d3f      	ldr	r5, [pc, #252]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
 8006a4a:	682a      	ldr	r2, [r5, #0]
 8006a4c:	f022 0219 	bic.w	r2, r2, #25
 8006a50:	430a      	orrs	r2, r1
 8006a52:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8006a54:	f7fd fe4a 	bl	80046ec <HAL_GetTick>
 8006a58:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a5a:	682b      	ldr	r3, [r5, #0]
 8006a5c:	075f      	lsls	r7, r3, #29
 8006a5e:	d511      	bpl.n	8006a84 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a60:	f7fd fe5c 	bl	800471c <HAL_GetREVID>
 8006a64:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a68:	6922      	ldr	r2, [r4, #16]
 8006a6a:	4298      	cmp	r0, r3
 8006a6c:	686b      	ldr	r3, [r5, #4]
 8006a6e:	d822      	bhi.n	8006ab6 <HAL_RCC_OscConfig+0x206>
 8006a70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a74:	2a40      	cmp	r2, #64	; 0x40
 8006a76:	bf0c      	ite	eq
 8006a78:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8006a7c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8006a80:	606b      	str	r3, [r5, #4]
 8006a82:	e721      	b.n	80068c8 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a84:	f7fd fe32 	bl	80046ec <HAL_GetTick>
 8006a88:	1b80      	subs	r0, r0, r6
 8006a8a:	2802      	cmp	r0, #2
 8006a8c:	d9e5      	bls.n	8006a5a <HAL_RCC_OscConfig+0x1aa>
 8006a8e:	e79f      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a90:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a92:	b1a9      	cbz	r1, 8006ac0 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a94:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a98:	4d2b      	ldr	r5, [pc, #172]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006a9e:	f7fd fe25 	bl	80046ec <HAL_GetTick>
 8006aa2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	0758      	lsls	r0, r3, #29
 8006aa8:	d4da      	bmi.n	8006a60 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aaa:	f7fd fe1f 	bl	80046ec <HAL_GetTick>
 8006aae:	1b80      	subs	r0, r0, r6
 8006ab0:	2802      	cmp	r0, #2
 8006ab2:	d9f7      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x1f4>
 8006ab4:	e78c      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006aba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006abe:	e7df      	b.n	8006a80 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ac4:	4e20      	ldr	r6, [pc, #128]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 8006ac6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ac8:	f7fd fe10 	bl	80046ec <HAL_GetTick>
 8006acc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ace:	6833      	ldr	r3, [r6, #0]
 8006ad0:	0759      	lsls	r1, r3, #29
 8006ad2:	f57f aef9 	bpl.w	80068c8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad6:	f7fd fe09 	bl	80046ec <HAL_GetTick>
 8006ada:	1b40      	subs	r0, r0, r5
 8006adc:	2802      	cmp	r0, #2
 8006ade:	d9f6      	bls.n	8006ace <HAL_RCC_OscConfig+0x21e>
 8006ae0:	e776      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8006ae8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006aec:	60da      	str	r2, [r3, #12]
 8006aee:	e716      	b.n	800691e <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006af0:	69e2      	ldr	r2, [r4, #28]
 8006af2:	b36a      	cbz	r2, 8006b50 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 8006af4:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006af6:	4d14      	ldr	r5, [pc, #80]	; (8006b48 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8006af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006afc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006afe:	f7fd fdf5 	bl	80046ec <HAL_GetTick>
 8006b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	05df      	lsls	r7, r3, #23
 8006b08:	d511      	bpl.n	8006b2e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b0a:	f7fd fe07 	bl	800471c <HAL_GetREVID>
 8006b0e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b12:	6a22      	ldr	r2, [r4, #32]
 8006b14:	4298      	cmp	r0, r3
 8006b16:	d810      	bhi.n	8006b3a <HAL_RCC_OscConfig+0x28a>
 8006b18:	686b      	ldr	r3, [r5, #4]
 8006b1a:	2a20      	cmp	r2, #32
 8006b1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b20:	bf0c      	ite	eq
 8006b22:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006b26:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006b2a:	606b      	str	r3, [r5, #4]
 8006b2c:	e6f7      	b.n	800691e <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b2e:	f7fd fddd 	bl	80046ec <HAL_GetTick>
 8006b32:	1b80      	subs	r0, r0, r6
 8006b34:	2802      	cmp	r0, #2
 8006b36:	d9e5      	bls.n	8006b04 <HAL_RCC_OscConfig+0x254>
 8006b38:	e74a      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b3a:	68eb      	ldr	r3, [r5, #12]
 8006b3c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006b40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006b44:	60eb      	str	r3, [r5, #12]
 8006b46:	e6ea      	b.n	800691e <HAL_RCC_OscConfig+0x6e>
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8006b50:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b52:	4e9f      	ldr	r6, [pc, #636]	; (8006dd0 <HAL_RCC_OscConfig+0x520>)
        __HAL_RCC_CSI_DISABLE();
 8006b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b58:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b5a:	f7fd fdc7 	bl	80046ec <HAL_GetTick>
 8006b5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	05d8      	lsls	r0, r3, #23
 8006b64:	f57f aedb 	bpl.w	800691e <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b68:	f7fd fdc0 	bl	80046ec <HAL_GetTick>
 8006b6c:	1b40      	subs	r0, r0, r5
 8006b6e:	2802      	cmp	r0, #2
 8006b70:	d9f6      	bls.n	8006b60 <HAL_RCC_OscConfig+0x2b0>
 8006b72:	e72d      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b74:	6963      	ldr	r3, [r4, #20]
 8006b76:	4d96      	ldr	r5, [pc, #600]	; (8006dd0 <HAL_RCC_OscConfig+0x520>)
 8006b78:	b183      	cbz	r3, 8006b9c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8006b7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006b82:	f7fd fdb3 	bl	80046ec <HAL_GetTick>
 8006b86:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b88:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b8a:	079b      	lsls	r3, r3, #30
 8006b8c:	f53f aecb 	bmi.w	8006926 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b90:	f7fd fdac 	bl	80046ec <HAL_GetTick>
 8006b94:	1b80      	subs	r0, r0, r6
 8006b96:	2802      	cmp	r0, #2
 8006b98:	d9f6      	bls.n	8006b88 <HAL_RCC_OscConfig+0x2d8>
 8006b9a:	e719      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8006b9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006ba4:	f7fd fda2 	bl	80046ec <HAL_GetTick>
 8006ba8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006baa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006bac:	079f      	lsls	r7, r3, #30
 8006bae:	f57f aeba 	bpl.w	8006926 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb2:	f7fd fd9b 	bl	80046ec <HAL_GetTick>
 8006bb6:	1b80      	subs	r0, r0, r6
 8006bb8:	2802      	cmp	r0, #2
 8006bba:	d9f6      	bls.n	8006baa <HAL_RCC_OscConfig+0x2fa>
 8006bbc:	e708      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006bbe:	69a3      	ldr	r3, [r4, #24]
 8006bc0:	4d83      	ldr	r5, [pc, #524]	; (8006dd0 <HAL_RCC_OscConfig+0x520>)
 8006bc2:	b183      	cbz	r3, 8006be6 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006bcc:	f7fd fd8e 	bl	80046ec <HAL_GetTick>
 8006bd0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	0498      	lsls	r0, r3, #18
 8006bd6:	f53f aeaa 	bmi.w	800692e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006bda:	f7fd fd87 	bl	80046ec <HAL_GetTick>
 8006bde:	1b80      	subs	r0, r0, r6
 8006be0:	2802      	cmp	r0, #2
 8006be2:	d9f6      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x322>
 8006be4:	e6f4      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8006be6:	682b      	ldr	r3, [r5, #0]
 8006be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006bee:	f7fd fd7d 	bl	80046ec <HAL_GetTick>
 8006bf2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	0499      	lsls	r1, r3, #18
 8006bf8:	f57f ae99 	bpl.w	800692e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006bfc:	f7fd fd76 	bl	80046ec <HAL_GetTick>
 8006c00:	1b80      	subs	r0, r0, r6
 8006c02:	2802      	cmp	r0, #2
 8006c04:	d9f6      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x344>
 8006c06:	e6e3      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c08:	f7fd fd70 	bl	80046ec <HAL_GetTick>
 8006c0c:	1b80      	subs	r0, r0, r6
 8006c0e:	2864      	cmp	r0, #100	; 0x64
 8006c10:	f67f ae98 	bls.w	8006944 <HAL_RCC_OscConfig+0x94>
 8006c14:	e6dc      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c16:	b9b3      	cbnz	r3, 8006c46 <HAL_RCC_OscConfig+0x396>
 8006c18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c1a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	672b      	str	r3, [r5, #112]	; 0x70
 8006c24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c26:	f023 0304 	bic.w	r3, r3, #4
 8006c2a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006c2c:	f7fd fd5e 	bl	80046ec <HAL_GetTick>
 8006c30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c34:	0798      	lsls	r0, r3, #30
 8006c36:	f57f ae9c 	bpl.w	8006972 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3a:	f7fd fd57 	bl	80046ec <HAL_GetTick>
 8006c3e:	1b80      	subs	r0, r0, r6
 8006c40:	42b8      	cmp	r0, r7
 8006c42:	d9f6      	bls.n	8006c32 <HAL_RCC_OscConfig+0x382>
 8006c44:	e6c4      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c4a:	d103      	bne.n	8006c54 <HAL_RCC_OscConfig+0x3a4>
 8006c4c:	f043 0304 	orr.w	r3, r3, #4
 8006c50:	672b      	str	r3, [r5, #112]	; 0x70
 8006c52:	e680      	b.n	8006956 <HAL_RCC_OscConfig+0xa6>
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	672b      	str	r3, [r5, #112]	; 0x70
 8006c5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c5c:	f023 0304 	bic.w	r3, r3, #4
 8006c60:	e67c      	b.n	800695c <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c62:	f7fd fd43 	bl	80046ec <HAL_GetTick>
 8006c66:	1b40      	subs	r0, r0, r5
 8006c68:	42b8      	cmp	r0, r7
 8006c6a:	f67f ae7e 	bls.w	800696a <HAL_RCC_OscConfig+0xba>
 8006c6e:	e6af      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006c70:	4d57      	ldr	r5, [pc, #348]	; (8006dd0 <HAL_RCC_OscConfig+0x520>)
 8006c72:	692b      	ldr	r3, [r5, #16]
 8006c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c78:	2b18      	cmp	r3, #24
 8006c7a:	d07a      	beq.n	8006d72 <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 8006c7c:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c7e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006c80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c84:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c86:	d167      	bne.n	8006d58 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 8006c88:	f7fd fd30 	bl	80046ec <HAL_GetTick>
 8006c8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	0199      	lsls	r1, r3, #6
 8006c92:	d45b      	bmi.n	8006d4c <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c94:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006c96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c98:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8006c9c:	f023 0303 	bic.w	r3, r3, #3
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ca4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006ca8:	62ab      	str	r3, [r5, #40]	; 0x28
 8006caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	025b      	lsls	r3, r3, #9
 8006cb4:	0412      	lsls	r2, r2, #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006cc0:	3a01      	subs	r2, #1
 8006cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006cca:	3a01      	subs	r2, #1
 8006ccc:	0612      	lsls	r2, r2, #24
 8006cce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006cd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006cde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006ce0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006cea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006cee:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006cf0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006cf2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006cf4:	f023 030c 	bic.w	r3, r3, #12
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006cfc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006cfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006d00:	f023 0302 	bic.w	r3, r3, #2
 8006d04:	4313      	orrs	r3, r2
 8006d06:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d0e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d16:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d18:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d1e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006d20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006d22:	f043 0301 	orr.w	r3, r3, #1
 8006d26:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006d30:	f7fd fcdc 	bl	80046ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d34:	4d26      	ldr	r5, [pc, #152]	; (8006dd0 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 8006d36:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	019a      	lsls	r2, r3, #6
 8006d3c:	f53f ae1d 	bmi.w	800697a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d40:	f7fd fcd4 	bl	80046ec <HAL_GetTick>
 8006d44:	1b00      	subs	r0, r0, r4
 8006d46:	2802      	cmp	r0, #2
 8006d48:	d9f6      	bls.n	8006d38 <HAL_RCC_OscConfig+0x488>
 8006d4a:	e641      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d4c:	f7fd fcce 	bl	80046ec <HAL_GetTick>
 8006d50:	1b80      	subs	r0, r0, r6
 8006d52:	2802      	cmp	r0, #2
 8006d54:	d99b      	bls.n	8006c8e <HAL_RCC_OscConfig+0x3de>
 8006d56:	e63b      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8006d58:	f7fd fcc8 	bl	80046ec <HAL_GetTick>
 8006d5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	019b      	lsls	r3, r3, #6
 8006d62:	f57f ae0a 	bpl.w	800697a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d66:	f7fd fcc1 	bl	80046ec <HAL_GetTick>
 8006d6a:	1b00      	subs	r0, r0, r4
 8006d6c:	2802      	cmp	r0, #2
 8006d6e:	d9f6      	bls.n	8006d5e <HAL_RCC_OscConfig+0x4ae>
 8006d70:	e62e      	b.n	80069d0 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d72:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d76:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d78:	f43f ae2b 	beq.w	80069d2 <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7c:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006d82:	4281      	cmp	r1, r0
 8006d84:	f47f ad97 	bne.w	80068b6 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d88:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d8e:	428a      	cmp	r2, r1
 8006d90:	f47f ad91 	bne.w	80068b6 <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d94:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006d96:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8006d9a:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d9c:	4291      	cmp	r1, r2
 8006d9e:	f47f ad8a 	bne.w	80068b6 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006da2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006da4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8006da8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006daa:	4291      	cmp	r1, r2
 8006dac:	f47f ad83 	bne.w	80068b6 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006db0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006db2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8006db6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006db8:	4291      	cmp	r1, r2
 8006dba:	f47f ad7c 	bne.w	80068b6 <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006dbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006dc0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006dc4:	3801      	subs	r0, #1
  return HAL_OK;
 8006dc6:	1a18      	subs	r0, r3, r0
 8006dc8:	bf18      	it	ne
 8006dca:	2001      	movne	r0, #1
 8006dcc:	e601      	b.n	80069d2 <HAL_RCC_OscConfig+0x122>
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400

08006dd4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4c23      	ldr	r4, [pc, #140]	; (8006e64 <HAL_RCC_MCOConfig+0x90>)
 8006dd8:	b088      	sub	sp, #32
 8006dda:	460e      	mov	r6, r1
 8006ddc:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006dde:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 8006de2:	b9f8      	cbnz	r0, 8006e24 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8006de4:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de8:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006dec:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8006dee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006df2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006df6:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e00:	2302      	movs	r3, #2
 8006e02:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e06:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006e0c:	4816      	ldr	r0, [pc, #88]	; (8006e68 <HAL_RCC_MCOConfig+0x94>)
 8006e0e:	f7fe faad 	bl	800536c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8006e18:	ea43 0106 	orr.w	r1, r3, r6
 8006e1c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006e1e:	6121      	str	r1, [r4, #16]
  }
}
 8006e20:	b008      	add	sp, #32
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8006e24:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e28:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2c:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006e2e:	480f      	ldr	r0, [pc, #60]	; (8006e6c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8006e30:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006e34:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e40:	2302      	movs	r3, #2
 8006e42:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006e4c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006e4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006e50:	f7fe fa8c 	bl	800536c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006e5a:	ea43 0106 	orr.w	r1, r3, r6
 8006e5e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8006e62:	e7dc      	b.n	8006e1e <HAL_RCC_MCOConfig+0x4a>
 8006e64:	58024400 	.word	0x58024400
 8006e68:	58020000 	.word	0x58020000
 8006e6c:	58020800 	.word	0x58020800

08006e70 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e70:	4b48      	ldr	r3, [pc, #288]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x124>)
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006e78:	2a10      	cmp	r2, #16
{
 8006e7a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e7c:	f000 8086 	beq.w	8006f8c <HAL_RCC_GetSysClockFreq+0x11c>
 8006e80:	2a18      	cmp	r2, #24
 8006e82:	d00c      	beq.n	8006e9e <HAL_RCC_GetSysClockFreq+0x2e>
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	f040 8083 	bne.w	8006f90 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4842      	ldr	r0, [pc, #264]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x128>)
 8006e8e:	f012 0f20 	tst.w	r2, #32
 8006e92:	d003      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006e9a:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8006e9c:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ea0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ea2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8006ea4:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ea8:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8006eae:	d0f5      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006eb0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006eb4:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eb8:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ebc:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ec0:	4362      	muls	r2, r4
 8006ec2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ec6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006eca:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006ecc:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ed0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8006ed4:	d04c      	beq.n	8006f70 <HAL_RCC_GetSysClockFreq+0x100>
 8006ed6:	2902      	cmp	r1, #2
 8006ed8:	d03c      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0xe4>
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d148      	bne.n	8006f70 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	0692      	lsls	r2, r2, #26
 8006ee2:	d527      	bpl.n	8006f34 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ee4:	6819      	ldr	r1, [r3, #0]
 8006ee6:	4a2c      	ldr	r2, [pc, #176]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x128>)
 8006ee8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006eee:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	ee07 2a10 	vmov	s14, r2
 8006ef8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006efc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006f00:	ee06 3a90 	vmov	s13, r3
 8006f04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f12:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006f1c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f1e:	ee07 3a10 	vmov	s14, r3
 8006f22:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f2a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006f2e:	ee17 0a90 	vmov	r0, s15
 8006f32:	e7b3      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a10 	vmov	s14, r3
 8006f3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f4a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f4e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006f52:	e7dd      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a10 	vmov	s14, r3
 8006f5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f6a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8006fa0 <HAL_RCC_GetSysClockFreq+0x130>
 8006f6e:	e7ee      	b.n	8006f4e <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a10 	vmov	s14, r3
 8006f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f82:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f86:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x134>
 8006f8a:	e7e0      	b.n	8006f4e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f8c:	4806      	ldr	r0, [pc, #24]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x138>)
 8006f8e:	e785      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8006f90:	4806      	ldr	r0, [pc, #24]	; (8006fac <HAL_RCC_GetSysClockFreq+0x13c>)
 8006f92:	e783      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x2c>
 8006f94:	58024400 	.word	0x58024400
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	4c742400 	.word	0x4c742400
 8006fa0:	4bbebc20 	.word	0x4bbebc20
 8006fa4:	4a742400 	.word	0x4a742400
 8006fa8:	017d7840 	.word	0x017d7840
 8006fac:	003d0900 	.word	0x003d0900

08006fb0 <HAL_RCC_ClockConfig>:
{
 8006fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	b910      	cbnz	r0, 8006fc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006fba:	2001      	movs	r0, #1
}
 8006fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc0:	4a88      	ldr	r2, [pc, #544]	; (80071e4 <HAL_RCC_ClockConfig+0x234>)
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	f0c0 8093 	bcc.w	80070f4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	075f      	lsls	r7, r3, #29
 8006fd2:	f100 809b 	bmi.w	800710c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd6:	071e      	lsls	r6, r3, #28
 8006fd8:	d50b      	bpl.n	8006ff2 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fda:	4983      	ldr	r1, [pc, #524]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 8006fdc:	6966      	ldr	r6, [r4, #20]
 8006fde:	69c8      	ldr	r0, [r1, #28]
 8006fe0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006fe4:	4286      	cmp	r6, r0
 8006fe6:	d904      	bls.n	8006ff2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fe8:	69ca      	ldr	r2, [r1, #28]
 8006fea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006fee:	4332      	orrs	r2, r6
 8006ff0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff2:	06d8      	lsls	r0, r3, #27
 8006ff4:	d50b      	bpl.n	800700e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ff6:	497c      	ldr	r1, [pc, #496]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 8006ff8:	69a6      	ldr	r6, [r4, #24]
 8006ffa:	69c8      	ldr	r0, [r1, #28]
 8006ffc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8007000:	4286      	cmp	r6, r0
 8007002:	d904      	bls.n	800700e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007004:	69ca      	ldr	r2, [r1, #28]
 8007006:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800700a:	4332      	orrs	r2, r6
 800700c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800700e:	0699      	lsls	r1, r3, #26
 8007010:	d50b      	bpl.n	800702a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007012:	4975      	ldr	r1, [pc, #468]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 8007014:	69e6      	ldr	r6, [r4, #28]
 8007016:	6a08      	ldr	r0, [r1, #32]
 8007018:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800701c:	4286      	cmp	r6, r0
 800701e:	d904      	bls.n	800702a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007020:	6a0a      	ldr	r2, [r1, #32]
 8007022:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007026:	4332      	orrs	r2, r6
 8007028:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800702a:	079a      	lsls	r2, r3, #30
 800702c:	d50b      	bpl.n	8007046 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800702e:	496e      	ldr	r1, [pc, #440]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 8007030:	68e6      	ldr	r6, [r4, #12]
 8007032:	6988      	ldr	r0, [r1, #24]
 8007034:	f000 000f 	and.w	r0, r0, #15
 8007038:	4286      	cmp	r6, r0
 800703a:	d904      	bls.n	8007046 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800703c:	698a      	ldr	r2, [r1, #24]
 800703e:	f022 020f 	bic.w	r2, r2, #15
 8007042:	4332      	orrs	r2, r6
 8007044:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007046:	07df      	lsls	r7, r3, #31
 8007048:	d46e      	bmi.n	8007128 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	079e      	lsls	r6, r3, #30
 800704e:	f100 80a1 	bmi.w	8007194 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007052:	4964      	ldr	r1, [pc, #400]	; (80071e4 <HAL_RCC_ClockConfig+0x234>)
 8007054:	680a      	ldr	r2, [r1, #0]
 8007056:	f002 020f 	and.w	r2, r2, #15
 800705a:	42aa      	cmp	r2, r5
 800705c:	f200 80a8 	bhi.w	80071b0 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007060:	0758      	lsls	r0, r3, #29
 8007062:	f100 80b1 	bmi.w	80071c8 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007066:	0719      	lsls	r1, r3, #28
 8007068:	d50b      	bpl.n	8007082 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800706a:	495f      	ldr	r1, [pc, #380]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 800706c:	6965      	ldr	r5, [r4, #20]
 800706e:	69c8      	ldr	r0, [r1, #28]
 8007070:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007074:	4285      	cmp	r5, r0
 8007076:	d204      	bcs.n	8007082 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007078:	69ca      	ldr	r2, [r1, #28]
 800707a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800707e:	432a      	orrs	r2, r5
 8007080:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007082:	06da      	lsls	r2, r3, #27
 8007084:	d50b      	bpl.n	800709e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007086:	4958      	ldr	r1, [pc, #352]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 8007088:	69a5      	ldr	r5, [r4, #24]
 800708a:	69c8      	ldr	r0, [r1, #28]
 800708c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8007090:	4285      	cmp	r5, r0
 8007092:	d204      	bcs.n	800709e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007094:	69ca      	ldr	r2, [r1, #28]
 8007096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800709a:	432a      	orrs	r2, r5
 800709c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800709e:	069b      	lsls	r3, r3, #26
 80070a0:	d50b      	bpl.n	80070ba <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070a2:	4a51      	ldr	r2, [pc, #324]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 80070a4:	69e0      	ldr	r0, [r4, #28]
 80070a6:	6a11      	ldr	r1, [r2, #32]
 80070a8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80070ac:	4288      	cmp	r0, r1
 80070ae:	d204      	bcs.n	80070ba <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070b0:	6a13      	ldr	r3, [r2, #32]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	4303      	orrs	r3, r0
 80070b8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070ba:	f7ff fed9 	bl	8006e70 <HAL_RCC_GetSysClockFreq>
 80070be:	494a      	ldr	r1, [pc, #296]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 80070c0:	4a4a      	ldr	r2, [pc, #296]	; (80071ec <HAL_RCC_ClockConfig+0x23c>)
 80070c2:	698b      	ldr	r3, [r1, #24]
 80070c4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80070c8:	5cd3      	ldrb	r3, [r2, r3]
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070d0:	698b      	ldr	r3, [r1, #24]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	5cd3      	ldrb	r3, [r2, r3]
 80070d8:	4a45      	ldr	r2, [pc, #276]	; (80071f0 <HAL_RCC_ClockConfig+0x240>)
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	fa20 f303 	lsr.w	r3, r0, r3
 80070e2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80070e4:	4b43      	ldr	r3, [pc, #268]	; (80071f4 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80070e8:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <HAL_RCC_ClockConfig+0x248>)
}
 80070ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	f7f9 bfa0 	b.w	8001034 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	f023 030f 	bic.w	r3, r3, #15
 80070fa:	430b      	orrs	r3, r1
 80070fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fe:	6813      	ldr	r3, [r2, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	428b      	cmp	r3, r1
 8007106:	f47f af58 	bne.w	8006fba <HAL_RCC_ClockConfig+0xa>
 800710a:	e760      	b.n	8006fce <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800710c:	4936      	ldr	r1, [pc, #216]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 800710e:	6926      	ldr	r6, [r4, #16]
 8007110:	6988      	ldr	r0, [r1, #24]
 8007112:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007116:	4286      	cmp	r6, r0
 8007118:	f67f af5d 	bls.w	8006fd6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800711c:	698a      	ldr	r2, [r1, #24]
 800711e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007122:	4332      	orrs	r2, r6
 8007124:	618a      	str	r2, [r1, #24]
 8007126:	e756      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007128:	4b2f      	ldr	r3, [pc, #188]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 800712a:	68a1      	ldr	r1, [r4, #8]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007132:	430a      	orrs	r2, r1
 8007134:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007136:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007138:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800713a:	2a02      	cmp	r2, #2
 800713c:	d11d      	bne.n	800717a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800713e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007142:	f43f af3a 	beq.w	8006fba <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007146:	4e28      	ldr	r6, [pc, #160]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007148:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800714c:	6933      	ldr	r3, [r6, #16]
 800714e:	f023 0307 	bic.w	r3, r3, #7
 8007152:	4313      	orrs	r3, r2
 8007154:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8007156:	f7fd fac9 	bl	80046ec <HAL_GetTick>
 800715a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715c:	6933      	ldr	r3, [r6, #16]
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007164:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007168:	f43f af6f 	beq.w	800704a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716c:	f7fd fabe 	bl	80046ec <HAL_GetTick>
 8007170:	1bc0      	subs	r0, r0, r7
 8007172:	4540      	cmp	r0, r8
 8007174:	d9f2      	bls.n	800715c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8007176:	2003      	movs	r0, #3
 8007178:	e720      	b.n	8006fbc <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800717a:	2a03      	cmp	r2, #3
 800717c:	d102      	bne.n	8007184 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800717e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007182:	e7de      	b.n	8007142 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007184:	2a01      	cmp	r2, #1
 8007186:	d102      	bne.n	800718e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007188:	f413 7f80 	tst.w	r3, #256	; 0x100
 800718c:	e7d9      	b.n	8007142 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800718e:	f013 0f04 	tst.w	r3, #4
 8007192:	e7d6      	b.n	8007142 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007194:	4914      	ldr	r1, [pc, #80]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 8007196:	68e6      	ldr	r6, [r4, #12]
 8007198:	6988      	ldr	r0, [r1, #24]
 800719a:	f000 000f 	and.w	r0, r0, #15
 800719e:	4286      	cmp	r6, r0
 80071a0:	f4bf af57 	bcs.w	8007052 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a4:	698a      	ldr	r2, [r1, #24]
 80071a6:	f022 020f 	bic.w	r2, r2, #15
 80071aa:	4332      	orrs	r2, r6
 80071ac:	618a      	str	r2, [r1, #24]
 80071ae:	e750      	b.n	8007052 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b0:	680a      	ldr	r2, [r1, #0]
 80071b2:	f022 020f 	bic.w	r2, r2, #15
 80071b6:	432a      	orrs	r2, r5
 80071b8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	680a      	ldr	r2, [r1, #0]
 80071bc:	f002 020f 	and.w	r2, r2, #15
 80071c0:	42aa      	cmp	r2, r5
 80071c2:	f47f aefa 	bne.w	8006fba <HAL_RCC_ClockConfig+0xa>
 80071c6:	e74b      	b.n	8007060 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071c8:	4907      	ldr	r1, [pc, #28]	; (80071e8 <HAL_RCC_ClockConfig+0x238>)
 80071ca:	6925      	ldr	r5, [r4, #16]
 80071cc:	6988      	ldr	r0, [r1, #24]
 80071ce:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80071d2:	4285      	cmp	r5, r0
 80071d4:	f4bf af47 	bcs.w	8007066 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071d8:	698a      	ldr	r2, [r1, #24]
 80071da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80071de:	432a      	orrs	r2, r5
 80071e0:	618a      	str	r2, [r1, #24]
 80071e2:	e740      	b.n	8007066 <HAL_RCC_ClockConfig+0xb6>
 80071e4:	52002000 	.word	0x52002000
 80071e8:	58024400 	.word	0x58024400
 80071ec:	0801b224 	.word	0x0801b224
 80071f0:	2400004c 	.word	0x2400004c
 80071f4:	24000048 	.word	0x24000048
 80071f8:	24000054 	.word	0x24000054

080071fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071fc:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071fe:	4c0c      	ldr	r4, [pc, #48]	; (8007230 <HAL_RCC_GetHCLKFreq+0x34>)
 8007200:	f7ff fe36 	bl	8006e70 <HAL_RCC_GetSysClockFreq>
 8007204:	490b      	ldr	r1, [pc, #44]	; (8007234 <HAL_RCC_GetHCLKFreq+0x38>)
 8007206:	69a3      	ldr	r3, [r4, #24]
 8007208:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800720c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800720e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007210:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007214:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007218:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800721c:	5ccb      	ldrb	r3, [r1, r3]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	fa22 f003 	lsr.w	r0, r2, r3
 8007226:	4b04      	ldr	r3, [pc, #16]	; (8007238 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007228:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800722a:	4b04      	ldr	r3, [pc, #16]	; (800723c <HAL_RCC_GetHCLKFreq+0x40>)
 800722c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800722e:	bd10      	pop	{r4, pc}
 8007230:	58024400 	.word	0x58024400
 8007234:	0801b224 	.word	0x0801b224
 8007238:	2400004c 	.word	0x2400004c
 800723c:	24000048 	.word	0x24000048

08007240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007240:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007242:	f7ff ffdb 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007248:	4a05      	ldr	r2, [pc, #20]	; (8007260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007250:	5cd3      	ldrb	r3, [r2, r3]
 8007252:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007256:	40d8      	lsrs	r0, r3
 8007258:	bd08      	pop	{r3, pc}
 800725a:	bf00      	nop
 800725c:	58024400 	.word	0x58024400
 8007260:	0801b224 	.word	0x0801b224

08007264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007264:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007266:	f7ff ffc9 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 800726a:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800726c:	4a05      	ldr	r2, [pc, #20]	; (8007284 <HAL_RCC_GetPCLK2Freq+0x20>)
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007274:	5cd3      	ldrb	r3, [r2, r3]
 8007276:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800727a:	40d8      	lsrs	r0, r3
 800727c:	bd08      	pop	{r3, pc}
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
 8007284:	0801b224 	.word	0x0801b224

08007288 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007288:	233f      	movs	r3, #63	; 0x3f
 800728a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_RCC_GetClockConfig+0x4c>)
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	f002 0207 	and.w	r2, r2, #7
 8007294:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007296:	699a      	ldr	r2, [r3, #24]
 8007298:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800729c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	f002 020f 	and.w	r2, r2, #15
 80072a4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80072a6:	699a      	ldr	r2, [r3, #24]
 80072a8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80072ac:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80072b4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80072b6:	69da      	ldr	r2, [r3, #28]
 80072b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80072bc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072c4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072c6:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <HAL_RCC_GetClockConfig+0x50>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	600b      	str	r3, [r1, #0]
}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	58024400 	.word	0x58024400
 80072d8:	52002000 	.word	0x52002000

080072dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072de:	4c3a      	ldr	r4, [pc, #232]	; (80073c8 <RCCEx_PLL2_Config+0xec>)
{
 80072e0:	4606      	mov	r6, r0
 80072e2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d069      	beq.n	80073c2 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f6:	f7fd f9f9 	bl	80046ec <HAL_GetTick>
 80072fa:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	011a      	lsls	r2, r3, #4
 8007300:	d44b      	bmi.n	800739a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007304:	6832      	ldr	r2, [r6, #0]
 8007306:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800730a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800730e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007310:	68b3      	ldr	r3, [r6, #8]
 8007312:	68f2      	ldr	r2, [r6, #12]
 8007314:	3b01      	subs	r3, #1
 8007316:	3a01      	subs	r2, #1
 8007318:	025b      	lsls	r3, r3, #9
 800731a:	0412      	lsls	r2, r2, #16
 800731c:	b29b      	uxth	r3, r3
 800731e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007322:	4313      	orrs	r3, r2
 8007324:	6872      	ldr	r2, [r6, #4]
 8007326:	3a01      	subs	r2, #1
 8007328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800732c:	4313      	orrs	r3, r2
 800732e:	6932      	ldr	r2, [r6, #16]
 8007330:	3a01      	subs	r2, #1
 8007332:	0612      	lsls	r2, r2, #24
 8007334:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007338:	4313      	orrs	r3, r2
 800733a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800733c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800733e:	6972      	ldr	r2, [r6, #20]
 8007340:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007344:	4313      	orrs	r3, r2
 8007346:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800734a:	69b2      	ldr	r2, [r6, #24]
 800734c:	f023 0320 	bic.w	r3, r3, #32
 8007350:	4313      	orrs	r3, r2
 8007352:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007354:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800735c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800735e:	69f2      	ldr	r2, [r6, #28]
 8007360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007364:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007368:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800736c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800736e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007370:	f043 0310 	orr.w	r3, r3, #16
 8007374:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007378:	b9b5      	cbnz	r5, 80073a8 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800737a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800737e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007380:	4c11      	ldr	r4, [pc, #68]	; (80073c8 <RCCEx_PLL2_Config+0xec>)
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007388:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738a:	f7fd f9af 	bl	80046ec <HAL_GetTick>
 800738e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	d50f      	bpl.n	80073b6 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8007396:	2000      	movs	r0, #0
 8007398:	e005      	b.n	80073a6 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800739a:	f7fd f9a7 	bl	80046ec <HAL_GetTick>
 800739e:	1bc0      	subs	r0, r0, r7
 80073a0:	2802      	cmp	r0, #2
 80073a2:	d9ab      	bls.n	80072fc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80073a4:	2003      	movs	r0, #3
}
 80073a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80073a8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073aa:	bf0c      	ite	eq
 80073ac:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073b0:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80073b4:	e7e3      	b.n	800737e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073b6:	f7fd f999 	bl	80046ec <HAL_GetTick>
 80073ba:	1b40      	subs	r0, r0, r5
 80073bc:	2802      	cmp	r0, #2
 80073be:	d9e7      	bls.n	8007390 <RCCEx_PLL2_Config+0xb4>
 80073c0:	e7f0      	b.n	80073a4 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80073c2:	2001      	movs	r0, #1
 80073c4:	e7ef      	b.n	80073a6 <RCCEx_PLL2_Config+0xca>
 80073c6:	bf00      	nop
 80073c8:	58024400 	.word	0x58024400

080073cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073ce:	4c3a      	ldr	r4, [pc, #232]	; (80074b8 <RCCEx_PLL3_Config+0xec>)
{
 80073d0:	4606      	mov	r6, r0
 80073d2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d069      	beq.n	80074b2 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e6:	f7fd f981 	bl	80046ec <HAL_GetTick>
 80073ea:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	009a      	lsls	r2, r3, #2
 80073f0:	d44b      	bmi.n	800748a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073f4:	6832      	ldr	r2, [r6, #0]
 80073f6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80073fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80073fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007400:	68b3      	ldr	r3, [r6, #8]
 8007402:	68f2      	ldr	r2, [r6, #12]
 8007404:	3b01      	subs	r3, #1
 8007406:	3a01      	subs	r2, #1
 8007408:	025b      	lsls	r3, r3, #9
 800740a:	0412      	lsls	r2, r2, #16
 800740c:	b29b      	uxth	r3, r3
 800740e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007412:	4313      	orrs	r3, r2
 8007414:	6872      	ldr	r2, [r6, #4]
 8007416:	3a01      	subs	r2, #1
 8007418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800741c:	4313      	orrs	r3, r2
 800741e:	6932      	ldr	r2, [r6, #16]
 8007420:	3a01      	subs	r2, #1
 8007422:	0612      	lsls	r2, r2, #24
 8007424:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007428:	4313      	orrs	r3, r2
 800742a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800742c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800742e:	6972      	ldr	r2, [r6, #20]
 8007430:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007434:	4313      	orrs	r3, r2
 8007436:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800743a:	69b2      	ldr	r2, [r6, #24]
 800743c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007440:	4313      	orrs	r3, r2
 8007442:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007446:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800744a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800744c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800744e:	69f2      	ldr	r2, [r6, #28]
 8007450:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007454:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007458:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800745c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800745e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007464:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007466:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007468:	b9b5      	cbnz	r5, 8007498 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800746a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800746e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007470:	4c11      	ldr	r4, [pc, #68]	; (80074b8 <RCCEx_PLL3_Config+0xec>)
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007478:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800747a:	f7fd f937 	bl	80046ec <HAL_GetTick>
 800747e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	d50f      	bpl.n	80074a6 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8007486:	2000      	movs	r0, #0
 8007488:	e005      	b.n	8007496 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800748a:	f7fd f92f 	bl	80046ec <HAL_GetTick>
 800748e:	1bc0      	subs	r0, r0, r7
 8007490:	2802      	cmp	r0, #2
 8007492:	d9ab      	bls.n	80073ec <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8007494:	2003      	movs	r0, #3
}
 8007496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8007498:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800749a:	bf0c      	ite	eq
 800749c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80074a0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80074a4:	e7e3      	b.n	800746e <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80074a6:	f7fd f921 	bl	80046ec <HAL_GetTick>
 80074aa:	1b40      	subs	r0, r0, r5
 80074ac:	2802      	cmp	r0, #2
 80074ae:	d9e7      	bls.n	8007480 <RCCEx_PLL3_Config+0xb4>
 80074b0:	e7f0      	b.n	8007494 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80074b2:	2001      	movs	r0, #1
 80074b4:	e7ef      	b.n	8007496 <RCCEx_PLL3_Config+0xca>
 80074b6:	bf00      	nop
 80074b8:	58024400 	.word	0x58024400

080074bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074c0:	6806      	ldr	r6, [r0, #0]
{
 80074c2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074c4:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 80074c8:	d009      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80074ca:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80074cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d0:	d02e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80074d2:	d813      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80074d4:	b1f3      	cbz	r3, 8007514 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80074d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074da:	d021      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074dc:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074de:	682b      	ldr	r3, [r5, #0]
 80074e0:	05db      	lsls	r3, r3, #23
 80074e2:	f140 8102 	bpl.w	80076ea <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80074e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	f200 80fd 	bhi.w	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80074ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80074f2:	0024      	.short	0x0024
 80074f4:	00f5002b 	.word	0x00f5002b
 80074f8:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 80074fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007500:	d1ec      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007502:	4aa8      	ldr	r2, [pc, #672]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007504:	2600      	movs	r6, #0
 8007506:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8007508:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800750a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800750e:	430b      	orrs	r3, r1
 8007510:	6513      	str	r3, [r2, #80]	; 0x50
 8007512:	e7e4      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4aa3      	ldr	r2, [pc, #652]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007516:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800751e:	e7f0      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007520:	2102      	movs	r1, #2
 8007522:	3004      	adds	r0, #4
 8007524:	f7ff feda 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007528:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800752a:	2800      	cmp	r0, #0
 800752c:	d1d7      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x22>
 800752e:	e7e8      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007530:	2102      	movs	r1, #2
 8007532:	3024      	adds	r0, #36	; 0x24
 8007534:	f7ff ff4a 	bl	80073cc <RCCEx_PLL3_Config>
 8007538:	e7f6      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753a:	4a9a      	ldr	r2, [pc, #616]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800753c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800753e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007542:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8007544:	4634      	mov	r4, r6
 8007546:	e004      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007548:	2100      	movs	r1, #0
 800754a:	1d28      	adds	r0, r5, #4
 800754c:	f7ff fec6 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007550:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007552:	2c00      	cmp	r4, #0
 8007554:	f040 80cb 	bne.w	80076ee <HAL_RCCEx_PeriphCLKConfig+0x232>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007558:	4a92      	ldr	r2, [pc, #584]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800755a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800755c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	430b      	orrs	r3, r1
 8007564:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007566:	682b      	ldr	r3, [r5, #0]
 8007568:	059f      	lsls	r7, r3, #22
 800756a:	d50d      	bpl.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 800756c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	f000 80da 	beq.w	8007728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007574:	f200 80bd 	bhi.w	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80c9 	beq.w	8007710 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	f000 80cc 	beq.w	800771c <HAL_RCCEx_PeriphCLKConfig+0x260>
 8007584:	2601      	movs	r6, #1
 8007586:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	0558      	lsls	r0, r3, #21
 800758c:	d510      	bpl.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 800758e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007596:	f000 80ec 	beq.w	8007772 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800759a:	f200 80cd 	bhi.w	8007738 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 80db 	beq.w	800775a <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80075a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a8:	f000 80dd 	beq.w	8007766 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80075ac:	2601      	movs	r6, #1
 80075ae:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	0519      	lsls	r1, r3, #20
 80075b4:	d510      	bpl.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 80075b6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80075ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075be:	f000 80ff 	beq.w	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80075c2:	f200 80de 	bhi.w	8007782 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80ee 	beq.w	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 80075cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d0:	f000 80f0 	beq.w	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80075d4:	2601      	movs	r6, #1
 80075d6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	019a      	lsls	r2, r3, #6
 80075dc:	d50d      	bpl.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 80075de:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	f000 8107 	beq.w	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80075e6:	f200 80f3 	bhi.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80f3 	beq.w	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	f000 80f9 	beq.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80075f6:	2601      	movs	r6, #1
 80075f8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	04db      	lsls	r3, r3, #19
 80075fe:	d50f      	bpl.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007600:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007606:	f000 8119 	beq.w	800783c <HAL_RCCEx_PeriphCLKConfig+0x380>
 800760a:	f200 80fb 	bhi.w	8007804 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8108 	beq.w	8007824 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007618:	f000 810a 	beq.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800761c:	2601      	movs	r6, #1
 800761e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	049f      	lsls	r7, r3, #18
 8007624:	d50f      	bpl.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800762c:	f000 8126 	beq.w	800787c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007630:	f200 810c 	bhi.w	800784c <HAL_RCCEx_PeriphCLKConfig+0x390>
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8112 	beq.w	800785e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800763a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800763e:	f000 8117 	beq.w	8007870 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8007642:	2601      	movs	r6, #1
 8007644:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	0458      	lsls	r0, r3, #17
 800764a:	d510      	bpl.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 800764c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8007650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007654:	f000 8133 	beq.w	80078be <HAL_RCCEx_PeriphCLKConfig+0x402>
 8007658:	f200 8118 	bhi.w	800788c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 811e 	beq.w	800789e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007666:	f000 8124 	beq.w	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800766a:	2601      	movs	r6, #1
 800766c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	0159      	lsls	r1, r3, #5
 8007672:	d514      	bpl.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch(PeriphClkInit->DsiClockSelection)
 8007674:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007676:	b143      	cbz	r3, 800768a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767c:	f040 8127 	bne.w	80078ce <HAL_RCCEx_PeriphCLKConfig+0x412>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007680:	2101      	movs	r1, #1
 8007682:	1d28      	adds	r0, r5, #4
 8007684:	f7ff fe2a 	bl	80072dc <RCCEx_PLL2_Config>
 8007688:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800768a:	2c00      	cmp	r4, #0
 800768c:	f040 8122 	bne.w	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8007690:	4a44      	ldr	r2, [pc, #272]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007692:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8007694:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800769a:	430b      	orrs	r3, r1
 800769c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	041a      	lsls	r2, r3, #16
 80076a2:	d50d      	bpl.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->FdcanClockSelection)
 80076a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80076a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076aa:	f000 8115 	beq.w	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80076ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b2:	f000 811f 	beq.w	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8113 	beq.w	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80076bc:	2601      	movs	r6, #1
 80076be:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	01db      	lsls	r3, r3, #7
 80076c4:	f140 812c 	bpl.w	8007920 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->FmcClockSelection)
 80076c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	f200 816c 	bhi.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80076d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80076d4:	0118011d 	.word	0x0118011d
 80076d8:	011d0164 	.word	0x011d0164
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076dc:	2100      	movs	r1, #0
 80076de:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80076e2:	f7ff fe73 	bl	80073cc <RCCEx_PLL3_Config>
 80076e6:	e733      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80076e8:	2601      	movs	r6, #1
 80076ea:	4634      	mov	r4, r6
 80076ec:	e73b      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80076ee:	4626      	mov	r6, r4
 80076f0:	e739      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 80076f2:	2bc0      	cmp	r3, #192	; 0xc0
 80076f4:	d003      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x242>
 80076f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fa:	f47f af43 	bne.w	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 80076fe:	b9cc      	cbnz	r4, 8007734 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007700:	4a28      	ldr	r2, [pc, #160]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007702:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8007704:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007706:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800770a:	430b      	orrs	r3, r1
 800770c:	6513      	str	r3, [r2, #80]	; 0x50
 800770e:	e73b      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007710:	4a24      	ldr	r2, [pc, #144]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007712:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007718:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800771a:	e7f0      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800771c:	2100      	movs	r1, #0
 800771e:	1d28      	adds	r0, r5, #4
 8007720:	f7ff fddc 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007724:	4604      	mov	r4, r0
      break;
 8007726:	e7ea      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007728:	2100      	movs	r1, #0
 800772a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800772e:	f7ff fe4d 	bl	80073cc <RCCEx_PLL3_Config>
 8007732:	e7f7      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007734:	4626      	mov	r6, r4
 8007736:	e727      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007738:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800773c:	d003      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800773e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007742:	f47f af33 	bne.w	80075ac <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8007746:	b9d4      	cbnz	r4, 800777e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007748:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800774a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800774e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007750:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8007754:	430b      	orrs	r3, r1
 8007756:	6593      	str	r3, [r2, #88]	; 0x58
 8007758:	e72a      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775a:	4a12      	ldr	r2, [pc, #72]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800775c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800775e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007762:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007764:	e7ef      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007766:	2100      	movs	r1, #0
 8007768:	1d28      	adds	r0, r5, #4
 800776a:	f7ff fdb7 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800776e:	4604      	mov	r4, r0
      break;
 8007770:	e7e9      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007772:	2100      	movs	r1, #0
 8007774:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007778:	f7ff fe28 	bl	80073cc <RCCEx_PLL3_Config>
 800777c:	e7f7      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800777e:	4626      	mov	r6, r4
 8007780:	e716      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007786:	d003      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800778c:	f47f af22 	bne.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8007790:	b9e4      	cbnz	r4, 80077cc <HAL_RCCEx_PeriphCLKConfig+0x310>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007792:	4a04      	ldr	r2, [pc, #16]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007794:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8007798:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800779a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800779e:	430b      	orrs	r3, r1
 80077a0:	6593      	str	r3, [r2, #88]	; 0x58
 80077a2:	e719      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80077a4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a8:	4a9d      	ldr	r2, [pc, #628]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80077aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80077b2:	e7ed      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077b4:	2100      	movs	r1, #0
 80077b6:	1d28      	adds	r0, r5, #4
 80077b8:	f7ff fd90 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077bc:	4604      	mov	r4, r0
      break;
 80077be:	e7e7      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077c0:	2100      	movs	r1, #0
 80077c2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80077c6:	f7ff fe01 	bl	80073cc <RCCEx_PLL3_Config>
 80077ca:	e7f7      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80077cc:	4626      	mov	r6, r4
 80077ce:	e703      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->QspiClockSelection)
 80077d0:	2b30      	cmp	r3, #48	; 0x30
 80077d2:	f47f af10 	bne.w	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 80077d6:	b99c      	cbnz	r4, 8007800 <HAL_RCCEx_PeriphCLKConfig+0x344>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077d8:	4a91      	ldr	r2, [pc, #580]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80077da:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80077dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80077de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80077e2:	430b      	orrs	r3, r1
 80077e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077e6:	e708      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e8:	4a8d      	ldr	r2, [pc, #564]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80077ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80077f2:	e7f0      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077f4:	2102      	movs	r1, #2
 80077f6:	1d28      	adds	r0, r5, #4
 80077f8:	f7ff fd70 	bl	80072dc <RCCEx_PLL2_Config>
 80077fc:	4604      	mov	r4, r0
      break;
 80077fe:	e7ea      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8007800:	4626      	mov	r6, r4
 8007802:	e6fa      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007804:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007808:	d003      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800780a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800780e:	f47f af05 	bne.w	800761c <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8007812:	b9cc      	cbnz	r4, 8007848 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007814:	4a82      	ldr	r2, [pc, #520]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007816:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007818:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781e:	430b      	orrs	r3, r1
 8007820:	6513      	str	r3, [r2, #80]	; 0x50
 8007822:	e6fd      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007824:	4a7e      	ldr	r2, [pc, #504]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007826:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800782c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800782e:	e7f0      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007830:	2100      	movs	r1, #0
 8007832:	1d28      	adds	r0, r5, #4
 8007834:	f7ff fd52 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007838:	4604      	mov	r4, r0
      break;
 800783a:	e7ea      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800783c:	2100      	movs	r1, #0
 800783e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007842:	f7ff fdc3 	bl	80073cc <RCCEx_PLL3_Config>
 8007846:	e7f7      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8007848:	4626      	mov	r6, r4
 800784a:	e6e9      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 800784c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007850:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007854:	d003      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8007856:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800785a:	f47f aef2 	bne.w	8007642 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 800785e:	b99c      	cbnz	r4, 8007888 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007860:	4a6f      	ldr	r2, [pc, #444]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007862:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8007864:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007866:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800786a:	430b      	orrs	r3, r1
 800786c:	6513      	str	r3, [r2, #80]	; 0x50
 800786e:	e6ea      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007870:	2101      	movs	r1, #1
 8007872:	1d28      	adds	r0, r5, #4
 8007874:	f7ff fd32 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007878:	4604      	mov	r4, r0
      break;
 800787a:	e7f0      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800787c:	2101      	movs	r1, #1
 800787e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007882:	f7ff fda3 	bl	80073cc <RCCEx_PLL3_Config>
 8007886:	e7f7      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007888:	4626      	mov	r6, r4
 800788a:	e6dc      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 800788c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007890:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007894:	d003      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800789a:	f47f aee6 	bne.w	800766a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 800789e:	b9a4      	cbnz	r4, 80078ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078a0:	4a5f      	ldr	r2, [pc, #380]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80078a2:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 80078a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80078a8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6593      	str	r3, [r2, #88]	; 0x58
 80078b0:	e6dd      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b2:	2101      	movs	r1, #1
 80078b4:	1d28      	adds	r0, r5, #4
 80078b6:	f7ff fd11 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078ba:	4604      	mov	r4, r0
      break;
 80078bc:	e7ef      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078be:	2101      	movs	r1, #1
 80078c0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80078c4:	f7ff fd82 	bl	80073cc <RCCEx_PLL3_Config>
 80078c8:	e7f7      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80078ca:	4626      	mov	r6, r4
 80078cc:	e6cf      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->DsiClockSelection)
 80078ce:	2601      	movs	r6, #1
 80078d0:	4634      	mov	r4, r6
 80078d2:	e6e4      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078d4:	4626      	mov	r6, r4
 80078d6:	e6e2      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d8:	4a51      	ldr	r2, [pc, #324]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80078da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80078dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80078e2:	b96c      	cbnz	r4, 8007900 <HAL_RCCEx_PeriphCLKConfig+0x444>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078e4:	4a4e      	ldr	r2, [pc, #312]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80078e6:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80078e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80078ea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80078ee:	430b      	orrs	r3, r1
 80078f0:	6513      	str	r3, [r2, #80]	; 0x50
 80078f2:	e6e5      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f4:	2101      	movs	r1, #1
 80078f6:	1d28      	adds	r0, r5, #4
 80078f8:	f7ff fcf0 	bl	80072dc <RCCEx_PLL2_Config>
 80078fc:	4604      	mov	r4, r0
      break;
 80078fe:	e7f0      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007900:	4626      	mov	r6, r4
 8007902:	e6dd      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007904:	4a46      	ldr	r2, [pc, #280]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007906:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800790c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800790e:	2c00      	cmp	r4, #0
 8007910:	d14d      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007912:	4a43      	ldr	r2, [pc, #268]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007914:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007916:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	430b      	orrs	r3, r1
 800791e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	025f      	lsls	r7, r3, #9
 8007924:	d54d      	bpl.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007926:	4f3f      	ldr	r7, [pc, #252]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007930:	f7fc fedc 	bl	80046ec <HAL_GetTick>
 8007934:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	05d8      	lsls	r0, r3, #23
 800793a:	d53a      	bpl.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    if(ret == HAL_OK)
 800793c:	2c00      	cmp	r4, #0
 800793e:	d16d      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x560>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007940:	4b37      	ldr	r3, [pc, #220]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007942:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8007946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007948:	4042      	eors	r2, r0
 800794a:	f412 7f40 	tst.w	r2, #768	; 0x300
 800794e:	d00b      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007952:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007954:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007958:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800795c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800795e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007960:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007964:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007966:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007968:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800796c:	d041      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x536>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800796e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8007972:	492b      	ldr	r1, [pc, #172]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007974:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007978:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800797c:	d14a      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800797e:	6908      	ldr	r0, [r1, #16]
 8007980:	4a29      	ldr	r2, [pc, #164]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8007982:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8007986:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800798a:	4302      	orrs	r2, r0
 800798c:	610a      	str	r2, [r1, #16]
 800798e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007992:	4a23      	ldr	r2, [pc, #140]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007994:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007996:	430b      	orrs	r3, r1
 8007998:	6713      	str	r3, [r2, #112]	; 0x70
 800799a:	e012      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800799c:	2102      	movs	r1, #2
 800799e:	1d28      	adds	r0, r5, #4
 80079a0:	f7ff fc9c 	bl	80072dc <RCCEx_PLL2_Config>
 80079a4:	4604      	mov	r4, r0
      break;
 80079a6:	e7b2      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->FmcClockSelection)
 80079a8:	2601      	movs	r6, #1
 80079aa:	4634      	mov	r4, r6
 80079ac:	e7b8      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80079ae:	4626      	mov	r6, r4
 80079b0:	e7b6      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b2:	f7fc fe9b 	bl	80046ec <HAL_GetTick>
 80079b6:	eba0 0008 	sub.w	r0, r0, r8
 80079ba:	2864      	cmp	r0, #100	; 0x64
 80079bc:	d9bb      	bls.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x47a>
        ret = HAL_TIMEOUT;
 80079be:	2603      	movs	r6, #3
 80079c0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	d509      	bpl.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x520>
    switch(PeriphClkInit->Usart16ClockSelection)
 80079c8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d043      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80079ce:	d82d      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d031      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d038      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80079d8:	2601      	movs	r6, #1
 80079da:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	079b      	lsls	r3, r3, #30
 80079e0:	d54e      	bpl.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80079e2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d861      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80079e8:	e8df f003 	tbb	[pc, r3]
 80079ec:	425a3d42 	.word	0x425a3d42
 80079f0:	4242      	.short	0x4242
        tickstart = HAL_GetTick();
 80079f2:	f7fc fe7b 	bl	80046ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8007a20 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 80079fa:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fc:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a00:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007a04:	0799      	lsls	r1, r3, #30
 8007a06:	d4b2      	bmi.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a08:	f7fc fe70 	bl	80046ec <HAL_GetTick>
 8007a0c:	1bc0      	subs	r0, r0, r7
 8007a0e:	4548      	cmp	r0, r9
 8007a10:	d9f6      	bls.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8007a12:	e7d4      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x502>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a14:	690a      	ldr	r2, [r1, #16]
 8007a16:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007a1a:	e7b7      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007a1c:	4626      	mov	r6, r4
 8007a1e:	e7d0      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007a20:	58024400 	.word	0x58024400
 8007a24:	58024800 	.word	0x58024800
 8007a28:	00ffffcf 	.word	0x00ffffcf
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a2c:	f023 0208 	bic.w	r2, r3, #8
 8007a30:	2a20      	cmp	r2, #32
 8007a32:	d001      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a34:	2b18      	cmp	r3, #24
 8007a36:	d1cf      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if(ret == HAL_OK)
 8007a38:	b99c      	cbnz	r4, 8007a62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a3a:	4a1f      	ldr	r2, [pc, #124]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007a3c:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8007a3e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007a40:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6553      	str	r3, [r2, #84]	; 0x54
 8007a48:	e7c8      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x520>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	1d28      	adds	r0, r5, #4
 8007a4e:	f7ff fc45 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a52:	4604      	mov	r4, r0
      break;
 8007a54:	e7f0      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a56:	2101      	movs	r1, #1
 8007a58:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007a5c:	f7ff fcb6 	bl	80073cc <RCCEx_PLL3_Config>
 8007a60:	e7f7      	b.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007a62:	4626      	mov	r6, r4
 8007a64:	e7ba      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x520>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a66:	2101      	movs	r1, #1
 8007a68:	1d28      	adds	r0, r5, #4
 8007a6a:	f7ff fc37 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a6e:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007a70:	b9fc      	cbnz	r4, 8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a72:	4a11      	ldr	r2, [pc, #68]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 8007a74:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8007a76:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007a78:	f023 0307 	bic.w	r3, r3, #7
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	075f      	lsls	r7, r3, #29
 8007a84:	d52a      	bpl.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a86:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007a8a:	2b05      	cmp	r3, #5
 8007a8c:	f200 813d 	bhi.w	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007a90:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007a94:	00140019 	.word	0x00140019
 8007a98:	00190135 	.word	0x00190135
 8007a9c:	00190019 	.word	0x00190019
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007aa6:	f7ff fc91 	bl	80073cc <RCCEx_PLL3_Config>
 8007aaa:	e7e0      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007aac:	2601      	movs	r6, #1
 8007aae:	4634      	mov	r4, r6
 8007ab0:	e7e6      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007ab2:	4626      	mov	r6, r4
 8007ab4:	e7e4      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007ab6:	bf00      	nop
 8007ab8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007abc:	2101      	movs	r1, #1
 8007abe:	1d28      	adds	r0, r5, #4
 8007ac0:	f7ff fc0c 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ac4:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007ac6:	2c00      	cmp	r4, #0
 8007ac8:	f040 8122 	bne.w	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x854>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007acc:	4aab      	ldr	r2, [pc, #684]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007ace:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8007ad2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ad4:	f023 0307 	bic.w	r3, r3, #7
 8007ad8:	430b      	orrs	r3, r1
 8007ada:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	0698      	lsls	r0, r3, #26
 8007ae0:	d510      	bpl.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x648>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ae2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aea:	f000 812c 	beq.w	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8007aee:	f200 8111 	bhi.w	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x858>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8117 	beq.w	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8007af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007afc:	f000 811d 	beq.w	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x87e>
 8007b00:	2601      	movs	r6, #1
 8007b02:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	0659      	lsls	r1, r3, #25
 8007b08:	d510      	bpl.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x670>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007b0a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8007b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b12:	f000 813b 	beq.w	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8007b16:	f200 811e 	bhi.w	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 8124 	beq.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8007b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b24:	f000 812c 	beq.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007b28:	2601      	movs	r6, #1
 8007b2a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	061a      	lsls	r2, r3, #24
 8007b30:	d510      	bpl.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x698>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b32:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8007b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b3a:	f000 8148 	beq.w	8007dce <HAL_RCCEx_PeriphCLKConfig+0x912>
 8007b3e:	f200 812d 	bhi.w	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 8133 	beq.w	8007dae <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8007b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4c:	f000 8139 	beq.w	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8007b50:	2601      	movs	r6, #1
 8007b52:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	071b      	lsls	r3, r3, #28
 8007b58:	d514      	bpl.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007b5a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8007b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b62:	d107      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b64:	2102      	movs	r1, #2
 8007b66:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b6a:	f7ff fc2f 	bl	80073cc <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	bf18      	it	ne
 8007b72:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b74:	4a81      	ldr	r2, [pc, #516]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007b76:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8007b7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007b7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b80:	430b      	orrs	r3, r1
 8007b82:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	06df      	lsls	r7, r3, #27
 8007b88:	d514      	bpl.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007b8a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007b94:	2102      	movs	r1, #2
 8007b96:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b9a:	f7ff fc17 	bl	80073cc <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	bf18      	it	ne
 8007ba2:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ba4:	4a75      	ldr	r2, [pc, #468]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007ba6:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8007baa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	0318      	lsls	r0, r3, #12
 8007bb8:	d51a      	bpl.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->AdcClockSelection)
 8007bba:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8007bbe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007bc2:	f000 810c 	beq.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0x922>
 8007bc6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007bca:	d006      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	f040 810c 	bne.w	8007dea <HAL_RCCEx_PeriphCLKConfig+0x92e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bd2:	1d28      	adds	r0, r5, #4
 8007bd4:	f7ff fb82 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bd8:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007bda:	2c00      	cmp	r4, #0
 8007bdc:	f040 8108 	bne.w	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007be0:	4a66      	ldr	r2, [pc, #408]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007be2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8007be6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007be8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	0359      	lsls	r1, r3, #13
 8007bf4:	d51c      	bpl.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x774>
    switch(PeriphClkInit->UsbClockSelection)
 8007bf6:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bfe:	f000 80f9 	beq.w	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007c02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c06:	d008      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8007c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c0c:	f040 80f9 	bne.w	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x946>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c10:	4a5a      	ldr	r2, [pc, #360]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007c12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c18:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007c1a:	2c00      	cmp	r4, #0
 8007c1c:	f040 80f4 	bne.w	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c20:	4a56      	ldr	r2, [pc, #344]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007c22:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8007c26:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007c28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	03da      	lsls	r2, r3, #15
 8007c34:	d509      	bpl.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007c36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80e7 	beq.w	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x950>
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c42:	f000 80f1 	beq.w	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8007c46:	2601      	movs	r6, #1
 8007c48:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	d507      	bpl.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c50:	2102      	movs	r1, #2
 8007c52:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007c56:	f7ff fbb9 	bl	80073cc <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	bf18      	it	ne
 8007c5e:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	039f      	lsls	r7, r3, #14
 8007c64:	d50b      	bpl.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->RngClockSelection)
 8007c66:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8007c6a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007c6e:	f000 80f1 	beq.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007c72:	f200 80e1 	bhi.w	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007c76:	2900      	cmp	r1, #0
 8007c78:	f000 80e4 	beq.w	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007c7c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c7e:	02dc      	lsls	r4, r3, #11
 8007c80:	d506      	bpl.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c82:	493e      	ldr	r1, [pc, #248]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007c84:	6f68      	ldr	r0, [r5, #116]	; 0x74
 8007c86:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007c88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007c8c:	4302      	orrs	r2, r0
 8007c8e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c90:	00d8      	lsls	r0, r3, #3
 8007c92:	d507      	bpl.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c94:	4939      	ldr	r1, [pc, #228]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007c96:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8007c9a:	690a      	ldr	r2, [r1, #16]
 8007c9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ca0:	4302      	orrs	r2, r0
 8007ca2:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ca4:	0299      	lsls	r1, r3, #10
 8007ca6:	d506      	bpl.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ca8:	4934      	ldr	r1, [pc, #208]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007caa:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8007cac:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007cae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007cb2:	4302      	orrs	r2, r0
 8007cb4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007cb6:	005a      	lsls	r2, r3, #1
 8007cb8:	d509      	bpl.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x812>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cba:	4a30      	ldr	r2, [pc, #192]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007cbc:	6911      	ldr	r1, [r2, #16]
 8007cbe:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007cc2:	6111      	str	r1, [r2, #16]
 8007cc4:	6911      	ldr	r1, [r2, #16]
 8007cc6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8007cca:	4301      	orrs	r1, r0
 8007ccc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	da06      	bge.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x824>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007cd2:	492a      	ldr	r1, [pc, #168]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007cd4:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8007cd6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cdc:	4302      	orrs	r2, r0
 8007cde:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	d507      	bpl.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ce4:	4a25      	ldr	r2, [pc, #148]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007ce6:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8007cea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007cec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007cf4:	1e30      	subs	r0, r6, #0
 8007cf6:	bf18      	it	ne
 8007cf8:	2001      	movne	r0, #1
 8007cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cfe:	2101      	movs	r1, #1
 8007d00:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007d04:	f7ff fb62 	bl	80073cc <RCCEx_PLL3_Config>
 8007d08:	e6dc      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d0a:	2601      	movs	r6, #1
 8007d0c:	4634      	mov	r4, r6
 8007d0e:	e6e5      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x620>
 8007d10:	4626      	mov	r6, r4
 8007d12:	e6e3      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d18:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007d1c:	d003      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8007d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d22:	f47f aeed 	bne.w	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 8007d26:	b9a4      	cbnz	r4, 8007d52 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d28:	4a14      	ldr	r2, [pc, #80]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007d2a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8007d2e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d30:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6553      	str	r3, [r2, #84]	; 0x54
 8007d38:	e6e4      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x648>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	1d28      	adds	r0, r5, #4
 8007d3e:	f7ff facd 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d42:	4604      	mov	r4, r0
      break;
 8007d44:	e7ef      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d46:	2102      	movs	r1, #2
 8007d48:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007d4c:	f7ff fb3e 	bl	80073cc <RCCEx_PLL3_Config>
 8007d50:	e7f7      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8007d52:	4626      	mov	r6, r4
 8007d54:	e6d6      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x648>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d5a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007d5e:	d003      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8007d60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d64:	f47f aee0 	bne.w	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if(ret == HAL_OK)
 8007d68:	b9b4      	cbnz	r4, 8007d98 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d6a:	4a04      	ldr	r2, [pc, #16]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007d6c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8007d70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d72:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007d76:	430b      	orrs	r3, r1
 8007d78:	6593      	str	r3, [r2, #88]	; 0x58
 8007d7a:	e6d7      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x670>
 8007d7c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d80:	2100      	movs	r1, #0
 8007d82:	1d28      	adds	r0, r5, #4
 8007d84:	f7ff faaa 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d88:	4604      	mov	r4, r0
      break;
 8007d8a:	e7ed      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007d92:	f7ff fb1b 	bl	80073cc <RCCEx_PLL3_Config>
 8007d96:	e7f7      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8007d98:	4626      	mov	r6, r4
 8007d9a:	e6c7      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x670>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007da0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007da4:	d003      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8007da6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007daa:	f47f aed1 	bne.w	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x694>
    if(ret == HAL_OK)
 8007dae:	b9a4      	cbnz	r4, 8007dda <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007db0:	4a2c      	ldr	r2, [pc, #176]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007db2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8007db6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007db8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8007dc0:	e6c8      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x698>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	1d28      	adds	r0, r5, #4
 8007dc6:	f7ff fa89 	bl	80072dc <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dca:	4604      	mov	r4, r0
      break;
 8007dcc:	e7ef      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dce:	2102      	movs	r1, #2
 8007dd0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007dd4:	f7ff fafa 	bl	80073cc <RCCEx_PLL3_Config>
 8007dd8:	e7f7      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x90e>
 8007dda:	4626      	mov	r6, r4
 8007ddc:	e6ba      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x698>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dde:	2102      	movs	r1, #2
 8007de0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007de4:	f7ff faf2 	bl	80073cc <RCCEx_PLL3_Config>
 8007de8:	e6f6      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch(PeriphClkInit->AdcClockSelection)
 8007dea:	2601      	movs	r6, #1
 8007dec:	4634      	mov	r4, r6
 8007dee:	e6ff      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8007df0:	4626      	mov	r6, r4
 8007df2:	e6fd      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df4:	2101      	movs	r1, #1
 8007df6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007dfa:	f7ff fae7 	bl	80073cc <RCCEx_PLL3_Config>
 8007dfe:	4604      	mov	r4, r0
      break;
 8007e00:	e70b      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x75e>
    switch(PeriphClkInit->UsbClockSelection)
 8007e02:	2601      	movs	r6, #1
 8007e04:	4634      	mov	r4, r6
 8007e06:	e713      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x774>
 8007e08:	4626      	mov	r6, r4
 8007e0a:	e711      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x774>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0c:	4a15      	ldr	r2, [pc, #84]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007e0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007e16:	b96c      	cbnz	r4, 8007e34 <HAL_RCCEx_PeriphCLKConfig+0x978>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e18:	4a12      	ldr	r2, [pc, #72]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007e1a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8007e1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e22:	430b      	orrs	r3, r1
 8007e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e26:	e710      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e28:	2102      	movs	r1, #2
 8007e2a:	1d28      	adds	r0, r5, #4
 8007e2c:	f7ff fa56 	bl	80072dc <RCCEx_PLL2_Config>
 8007e30:	4604      	mov	r4, r0
      break;
 8007e32:	e7f0      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007e34:	4626      	mov	r6, r4
 8007e36:	e708      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    switch(PeriphClkInit->RngClockSelection)
 8007e38:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007e3c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007e40:	f47f af1c 	bne.w	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    if(ret == HAL_OK)
 8007e44:	b964      	cbnz	r4, 8007e60 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e46:	4807      	ldr	r0, [pc, #28]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007e48:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007e4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	6542      	str	r2, [r0, #84]	; 0x54
 8007e52:	e714      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e54:	4803      	ldr	r0, [pc, #12]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8007e56:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007e58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e5c:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8007e5e:	e7f1      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007e60:	4626      	mov	r6, r4
 8007e62:	e70c      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8007e64:	58024400 	.word	0x58024400

08007e68 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	b1f0      	cbz	r0, 8007eae <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007e70:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007e74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e78:	b91b      	cbnz	r3, 8007e82 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007e7a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007e7e:	f7f9 f809 	bl	8000e94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e82:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007e84:	1d21      	adds	r1, r4, #4
 8007e86:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007e8c:	f000 fa1f 	bl	80082ce <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007e90:	6862      	ldr	r2, [r4, #4]
 8007e92:	4629      	mov	r1, r5
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	f000 fa55 	bl	8008344 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007e9a:	4a06      	ldr	r2, [pc, #24]	; (8007eb4 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 8007e9c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007eac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007eae:	2001      	movs	r0, #1
 8007eb0:	e7fc      	b.n	8007eac <HAL_SDRAM_Init+0x44>
 8007eb2:	bf00      	nop
 8007eb4:	52004000 	.word	0x52004000

08007eb8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8007ebc:	f7f9 f876 	bl	8000fac <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8007ec0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007ec4:	f000 fa74 	bl	80083b0 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8007ece:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 8007ed2:	bd10      	pop	{r4, pc}

08007ed4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007ed4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007ed6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007eda:	4605      	mov	r5, r0
 8007edc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007ede:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007ee0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8007ee2:	d010      	beq.n	8007f06 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007ee4:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8007ee8:	2c01      	cmp	r4, #1
 8007eea:	d110      	bne.n	8007f0e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007eec:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007eee:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007ef0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007ef4:	f000 fa6b 	bl	80083ce <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d104      	bne.n	8007f08 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007efe:	2305      	movs	r3, #5
 8007f00:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007f04:	2000      	movs	r0, #0
}
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007f08:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8007f0c:	e7fa      	b.n	8007f04 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8007f0e:	2001      	movs	r0, #1
 8007f10:	e7f9      	b.n	8007f06 <HAL_SDRAM_SendCommand+0x32>

08007f12 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007f12:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f14:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007f18:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	b2d8      	uxtb	r0, r3
 8007f1e:	d00d      	beq.n	8007f3c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007f20:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	b2dd      	uxtb	r5, r3
 8007f28:	d109      	bne.n	8007f3e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f2a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f2c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f32:	f000 fa5e 	bl	80083f2 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007f36:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007f38:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e7fc      	b.n	8007f3c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08007f42 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d12f      	bne.n	8007fac <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4e:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007f50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f54:	6803      	ldr	r3, [r0, #0]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01a      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5e:	d017      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f60:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00f      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f78:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f80:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <HAL_TIM_Base_Start+0x4c>
 8007f88:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d107      	bne.n	8007fa0 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f90:	6899      	ldr	r1, [r3, #8]
 8007f92:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <HAL_TIM_Base_Start+0x70>)
 8007f94:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f96:	2a06      	cmp	r2, #6
 8007f98:	d006      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x64>
 8007f9a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007f9e:	d003      	beq.n	8007fa8 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fa8:	2000      	movs	r0, #0
}
 8007faa:	4770      	bx	lr
    return HAL_ERROR;
 8007fac:	2001      	movs	r0, #1
 8007fae:	4770      	bx	lr
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	00010007 	.word	0x00010007

08007fb8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d133      	bne.n	8008028 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc6:	6803      	ldr	r3, [r0, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd0:	4a16      	ldr	r2, [pc, #88]	; (800802c <HAL_TIM_Base_Start_IT+0x74>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d01a      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fda:	d017      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8007fdc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d013      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8007fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00f      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8007fec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00b      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8007ff4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d007      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8007ffc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <HAL_TIM_Base_Start_IT+0x54>
 8008004:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008008:	4293      	cmp	r3, r2
 800800a:	d107      	bne.n	800801c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800800c:	6899      	ldr	r1, [r3, #8]
 800800e:	4a08      	ldr	r2, [pc, #32]	; (8008030 <HAL_TIM_Base_Start_IT+0x78>)
 8008010:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008012:	2a06      	cmp	r2, #6
 8008014:	d006      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x6c>
 8008016:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800801a:	d003      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008024:	2000      	movs	r0, #0
}
 8008026:	4770      	bx	lr
    return HAL_ERROR;
 8008028:	2001      	movs	r0, #1
 800802a:	4770      	bx	lr
 800802c:	40010000 	.word	0x40010000
 8008030:	00010007 	.word	0x00010007

08008034 <HAL_TIM_OC_DelayElapsedCallback>:
 8008034:	4770      	bx	lr

08008036 <HAL_TIM_IC_CaptureCallback>:
 8008036:	4770      	bx	lr

08008038 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008038:	4770      	bx	lr

0800803a <HAL_TIM_TriggerCallback>:
 800803a:	4770      	bx	lr

0800803c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800803c:	6803      	ldr	r3, [r0, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	0791      	lsls	r1, r2, #30
{
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008046:	d50f      	bpl.n	8008068 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	0792      	lsls	r2, r2, #30
 800804c:	d50c      	bpl.n	8008068 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800804e:	f06f 0202 	mvn.w	r2, #2
 8008052:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008054:	2201      	movs	r2, #1
 8008056:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	0799      	lsls	r1, r3, #30
 800805c:	f000 8085 	beq.w	800816a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008060:	f7ff ffe9 	bl	8008036 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008064:	2300      	movs	r3, #0
 8008066:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	0752      	lsls	r2, r2, #29
 800806e:	d510      	bpl.n	8008092 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	0750      	lsls	r0, r2, #29
 8008074:	d50d      	bpl.n	8008092 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008076:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800807e:	2202      	movs	r2, #2
 8008080:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008088:	d075      	beq.n	8008176 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800808a:	f7ff ffd4 	bl	8008036 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	2300      	movs	r3, #0
 8008090:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	691a      	ldr	r2, [r3, #16]
 8008096:	0711      	lsls	r1, r2, #28
 8008098:	d50f      	bpl.n	80080ba <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	0712      	lsls	r2, r2, #28
 800809e:	d50c      	bpl.n	80080ba <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080a8:	2204      	movs	r2, #4
 80080aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	d067      	beq.n	8008182 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	f7ff ffc0 	bl	8008036 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b6:	2300      	movs	r3, #0
 80080b8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	06d0      	lsls	r0, r2, #27
 80080c0:	d510      	bpl.n	80080e4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	06d1      	lsls	r1, r2, #27
 80080c6:	d50d      	bpl.n	80080e4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080c8:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d0:	2208      	movs	r2, #8
 80080d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80080da:	d058      	beq.n	800818e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80080dc:	f7ff ffab 	bl	8008036 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e0:	2300      	movs	r3, #0
 80080e2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	07d2      	lsls	r2, r2, #31
 80080ea:	d508      	bpl.n	80080fe <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	07d0      	lsls	r0, r2, #31
 80080f0:	d505      	bpl.n	80080fe <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080f2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fa:	f7f8 fd1f 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	691a      	ldr	r2, [r3, #16]
 8008102:	0611      	lsls	r1, r2, #24
 8008104:	d508      	bpl.n	8008118 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	0612      	lsls	r2, r2, #24
 800810a:	d505      	bpl.n	8008118 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800810c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008110:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008112:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008114:	f000 f8d9 	bl	80082ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	05d0      	lsls	r0, r2, #23
 800811e:	d508      	bpl.n	8008132 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	0611      	lsls	r1, r2, #24
 8008124:	d505      	bpl.n	8008132 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008126:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800812a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800812c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800812e:	f000 f8cd 	bl	80082cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	0652      	lsls	r2, r2, #25
 8008138:	d508      	bpl.n	800814c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	0650      	lsls	r0, r2, #25
 800813e:	d505      	bpl.n	800814c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008140:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008144:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008146:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008148:	f7ff ff77 	bl	800803a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	0691      	lsls	r1, r2, #26
 8008152:	d522      	bpl.n	800819a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	0692      	lsls	r2, r2, #26
 8008158:	d51f      	bpl.n	800819a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800815a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800815e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008160:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008166:	f000 b8af 	b.w	80082c8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800816a:	f7ff ff63 	bl	8008034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816e:	4620      	mov	r0, r4
 8008170:	f7ff ff62 	bl	8008038 <HAL_TIM_PWM_PulseFinishedCallback>
 8008174:	e776      	b.n	8008064 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	f7ff ff5d 	bl	8008034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817a:	4620      	mov	r0, r4
 800817c:	f7ff ff5c 	bl	8008038 <HAL_TIM_PWM_PulseFinishedCallback>
 8008180:	e785      	b.n	800808e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008182:	f7ff ff57 	bl	8008034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff ff56 	bl	8008038 <HAL_TIM_PWM_PulseFinishedCallback>
 800818c:	e793      	b.n	80080b6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800818e:	f7ff ff51 	bl	8008034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff ff50 	bl	8008038 <HAL_TIM_PWM_PulseFinishedCallback>
 8008198:	e7a2      	b.n	80080e0 <HAL_TIM_IRQHandler+0xa4>
}
 800819a:	bd10      	pop	{r4, pc}

0800819c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800819c:	4a30      	ldr	r2, [pc, #192]	; (8008260 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800819e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081a0:	4290      	cmp	r0, r2
 80081a2:	d012      	beq.n	80081ca <TIM_Base_SetConfig+0x2e>
 80081a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80081a8:	d00f      	beq.n	80081ca <TIM_Base_SetConfig+0x2e>
 80081aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80081ae:	4290      	cmp	r0, r2
 80081b0:	d00b      	beq.n	80081ca <TIM_Base_SetConfig+0x2e>
 80081b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081b6:	4290      	cmp	r0, r2
 80081b8:	d007      	beq.n	80081ca <TIM_Base_SetConfig+0x2e>
 80081ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081be:	4290      	cmp	r0, r2
 80081c0:	d003      	beq.n	80081ca <TIM_Base_SetConfig+0x2e>
 80081c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081c6:	4290      	cmp	r0, r2
 80081c8:	d119      	bne.n	80081fe <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80081ca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80081d0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081d2:	4a23      	ldr	r2, [pc, #140]	; (8008260 <TIM_Base_SetConfig+0xc4>)
 80081d4:	4290      	cmp	r0, r2
 80081d6:	d01d      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 80081d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80081dc:	d01a      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 80081de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80081e2:	4290      	cmp	r0, r2
 80081e4:	d016      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 80081e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081ea:	4290      	cmp	r0, r2
 80081ec:	d012      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 80081ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081f2:	4290      	cmp	r0, r2
 80081f4:	d00e      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 80081f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80081fa:	4290      	cmp	r0, r2
 80081fc:	d00a      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 80081fe:	4a19      	ldr	r2, [pc, #100]	; (8008264 <TIM_Base_SetConfig+0xc8>)
 8008200:	4290      	cmp	r0, r2
 8008202:	d007      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 8008204:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008208:	4290      	cmp	r0, r2
 800820a:	d003      	beq.n	8008214 <TIM_Base_SetConfig+0x78>
 800820c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008210:	4290      	cmp	r0, r2
 8008212:	d103      	bne.n	800821c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008218:	68ca      	ldr	r2, [r1, #12]
 800821a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800821c:	694a      	ldr	r2, [r1, #20]
 800821e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008222:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008224:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008226:	688b      	ldr	r3, [r1, #8]
 8008228:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800822a:	680b      	ldr	r3, [r1, #0]
 800822c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <TIM_Base_SetConfig+0xc4>)
 8008230:	4298      	cmp	r0, r3
 8008232:	d00f      	beq.n	8008254 <TIM_Base_SetConfig+0xb8>
 8008234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008238:	4298      	cmp	r0, r3
 800823a:	d00b      	beq.n	8008254 <TIM_Base_SetConfig+0xb8>
 800823c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8008240:	4298      	cmp	r0, r3
 8008242:	d007      	beq.n	8008254 <TIM_Base_SetConfig+0xb8>
 8008244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008248:	4298      	cmp	r0, r3
 800824a:	d003      	beq.n	8008254 <TIM_Base_SetConfig+0xb8>
 800824c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008250:	4298      	cmp	r0, r3
 8008252:	d101      	bne.n	8008258 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008254:	690b      	ldr	r3, [r1, #16]
 8008256:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008258:	2301      	movs	r3, #1
 800825a:	6143      	str	r3, [r0, #20]
}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	40010000 	.word	0x40010000
 8008264:	40014000 	.word	0x40014000

08008268 <HAL_TIM_Base_Init>:
{
 8008268:	b510      	push	{r4, lr}
  if (htim == NULL)
 800826a:	4604      	mov	r4, r0
 800826c:	b350      	cbz	r0, 80082c4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800826e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008276:	b91b      	cbnz	r3, 8008280 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8008278:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800827c:	f7ff fe61 	bl	8007f42 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008282:	6820      	ldr	r0, [r4, #0]
 8008284:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8008286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800828a:	f7ff ff87 	bl	800819c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828e:	2301      	movs	r3, #1
  return HAL_OK;
 8008290:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008292:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008296:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800829a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800829e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80082a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80082a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80082b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80082ba:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80082be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80082c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082c4:	2001      	movs	r0, #1
 80082c6:	e7fc      	b.n	80082c2 <HAL_TIM_Base_Init+0x5a>

080082c8 <HAL_TIMEx_CommutCallback>:
 80082c8:	4770      	bx	lr

080082ca <HAL_TIMEx_BreakCallback>:
 80082ca:	4770      	bx	lr

080082cc <HAL_TIMEx_Break2Callback>:
 80082cc:	4770      	bx	lr

080082ce <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80082ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80082d2:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082d4:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80082d8:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80082dc:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80082e0:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80082e4:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 80082e8:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80082ea:	b9a2      	cbnz	r2, 8008316 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80082ec:	ea43 0209 	orr.w	r2, r3, r9
 80082f0:	6801      	ldr	r1, [r0, #0]
 80082f2:	432a      	orrs	r2, r5
 80082f4:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80082f8:	ea42 0308 	orr.w	r3, r2, r8
 80082fc:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8008300:	ea43 030e 	orr.w	r3, r3, lr
 8008304:	ea43 030c 	orr.w	r3, r3, ip
 8008308:	433b      	orrs	r3, r7
 800830a:	4333      	orrs	r3, r6
 800830c:	430b      	orrs	r3, r1
 800830e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8008310:	2000      	movs	r0, #0
 8008312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008316:	6802      	ldr	r2, [r0, #0]
 8008318:	ea43 0309 	orr.w	r3, r3, r9
 800831c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8008320:	4313      	orrs	r3, r2
 8008322:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008324:	ea45 0308 	orr.w	r3, r5, r8
 8008328:	6842      	ldr	r2, [r0, #4]
 800832a:	ea43 030e 	orr.w	r3, r3, lr
 800832e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8008332:	ea43 030c 	orr.w	r3, r3, ip
 8008336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800833a:	433b      	orrs	r3, r7
 800833c:	4333      	orrs	r3, r6
 800833e:	4313      	orrs	r3, r2
 8008340:	6043      	str	r3, [r0, #4]
 8008342:	e7e5      	b.n	8008310 <FMC_SDRAM_Init+0x42>

08008344 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008344:	68cb      	ldr	r3, [r1, #12]
 8008346:	f103 3cff 	add.w	ip, r3, #4294967295
 800834a:	694b      	ldr	r3, [r1, #20]
{
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800834e:	3b01      	subs	r3, #1
 8008350:	680f      	ldr	r7, [r1, #0]
 8008352:	684c      	ldr	r4, [r1, #4]
 8008354:	688e      	ldr	r6, [r1, #8]
 8008356:	051b      	lsls	r3, r3, #20
 8008358:	690d      	ldr	r5, [r1, #16]
 800835a:	3c01      	subs	r4, #1
 800835c:	6989      	ldr	r1, [r1, #24]
 800835e:	3e01      	subs	r6, #1
 8008360:	3d01      	subs	r5, #1
 8008362:	3f01      	subs	r7, #1
 8008364:	3901      	subs	r1, #1
 8008366:	0124      	lsls	r4, r4, #4
 8008368:	0236      	lsls	r6, r6, #8
 800836a:	042d      	lsls	r5, r5, #16
 800836c:	0609      	lsls	r1, r1, #24
 800836e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8008372:	b95a      	cbnz	r2, 800838c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008374:	433b      	orrs	r3, r7
 8008376:	6882      	ldr	r2, [r0, #8]
 8008378:	4323      	orrs	r3, r4
 800837a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800837e:	4333      	orrs	r3, r6
 8008380:	432b      	orrs	r3, r5
 8008382:	430b      	orrs	r3, r1
 8008384:	4313      	orrs	r3, r2
 8008386:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8008388:	2000      	movs	r0, #0
 800838a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800838c:	6882      	ldr	r2, [r0, #8]
 800838e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008392:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8008396:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008398:	ea44 0306 	orr.w	r3, r4, r6
 800839c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800839e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80083a0:	68c2      	ldr	r2, [r0, #12]
 80083a2:	432b      	orrs	r3, r5
 80083a4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80083a8:	430b      	orrs	r3, r1
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60c3      	str	r3, [r0, #12]
 80083ae:	e7eb      	b.n	8008388 <FMC_SDRAM_Timing_Init+0x44>

080083b0 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 80083b0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80083b4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80083b8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 80083bc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80083c0:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 80083c6:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 80083c8:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	4770      	bx	lr

080083ce <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083ce:	6902      	ldr	r2, [r0, #16]
{
 80083d0:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80083d2:	e9d1 3400 	ldrd	r3, r4, [r1]
 80083d6:	0d92      	lsrs	r2, r2, #22
 80083d8:	4323      	orrs	r3, r4
 80083da:	68cc      	ldr	r4, [r1, #12]
 80083dc:	0592      	lsls	r2, r2, #22
 80083de:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80083e2:	4313      	orrs	r3, r2
 80083e4:	688a      	ldr	r2, [r1, #8]
 80083e6:	3a01      	subs	r2, #1
 80083e8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80083ec:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80083ee:	2000      	movs	r0, #0
 80083f0:	bd10      	pop	{r4, pc}

080083f2 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80083f2:	6943      	ldr	r3, [r0, #20]
 80083f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80083f8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80083fc:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8008400:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8008402:	2000      	movs	r0, #0
 8008404:	4770      	bx	lr

08008406 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008406:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008408:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800840c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800840e:	f001 fe03 	bl	800a018 <xTaskGetSchedulerState>
 8008412:	2801      	cmp	r0, #1
 8008414:	d003      	beq.n	800841e <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800841a:	f000 bbcb 	b.w	8008bb4 <xPortSysTickHandler>
}
 800841e:	bd08      	pop	{r3, pc}

08008420 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008420:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008424:	b92b      	cbnz	r3, 8008432 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008426:	4b06      	ldr	r3, [pc, #24]	; (8008440 <osKernelInitialize+0x20>)
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	b928      	cbnz	r0, 8008438 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008430:	4770      	bx	lr
    stat = osErrorISR;
 8008432:	f06f 0005 	mvn.w	r0, #5
 8008436:	4770      	bx	lr
    } else {
      stat = osError;
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	240023f4 	.word	0x240023f4

08008444 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008444:	b510      	push	{r4, lr}
 8008446:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800844a:	b95c      	cbnz	r4, 8008464 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800844c:	4b08      	ldr	r3, [pc, #32]	; (8008470 <osKernelStart+0x2c>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	2a01      	cmp	r2, #1
 8008452:	d10a      	bne.n	800846a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008454:	4a07      	ldr	r2, [pc, #28]	; (8008474 <osKernelStart+0x30>)
 8008456:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008458:	2202      	movs	r2, #2
 800845a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800845c:	f001 fc80 	bl	8009d60 <vTaskStartScheduler>
      stat = osOK;
 8008460:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008462:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008464:	f06f 0005 	mvn.w	r0, #5
 8008468:	e7fb      	b.n	8008462 <osKernelStart+0x1e>
      stat = osError;
 800846a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800846e:	e7f8      	b.n	8008462 <osKernelStart+0x1e>
 8008470:	240023f4 	.word	0x240023f4
 8008474:	e000ed00 	.word	0xe000ed00

08008478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800847a:	4614      	mov	r4, r2
 800847c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800847e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008480:	460b      	mov	r3, r1
  hTask = NULL;
 8008482:	9205      	str	r2, [sp, #20]
 8008484:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008488:	b9d2      	cbnz	r2, 80084c0 <osThreadNew+0x48>
 800848a:	b1c8      	cbz	r0, 80084c0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800848c:	2c00      	cmp	r4, #0
 800848e:	d02f      	beq.n	80084f0 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008490:	69a5      	ldr	r5, [r4, #24]
 8008492:	2d00      	cmp	r5, #0
 8008494:	bf08      	it	eq
 8008496:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008498:	1e69      	subs	r1, r5, #1
 800849a:	46ac      	mov	ip, r5
 800849c:	2937      	cmp	r1, #55	; 0x37
 800849e:	d82b      	bhi.n	80084f8 <osThreadNew+0x80>
 80084a0:	6861      	ldr	r1, [r4, #4]
 80084a2:	07c9      	lsls	r1, r1, #31
 80084a4:	d428      	bmi.n	80084f8 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80084a6:	6966      	ldr	r6, [r4, #20]
 80084a8:	b16e      	cbz	r6, 80084c6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084aa:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80084ac:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084ae:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80084b2:	b157      	cbz	r7, 80084ca <osThreadNew+0x52>
 80084b4:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80084b8:	d902      	bls.n	80084c0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084ba:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084bc:	b104      	cbz	r4, 80084c0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084be:	b9ee      	cbnz	r6, 80084fc <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80084c0:	9805      	ldr	r0, [sp, #20]
}
 80084c2:	b007      	add	sp, #28
 80084c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80084c6:	2280      	movs	r2, #128	; 0x80
 80084c8:	e7f0      	b.n	80084ac <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ca:	f1be 0f00 	cmp.w	lr, #0
 80084ce:	d1f7      	bne.n	80084c0 <osThreadNew+0x48>
      if (mem == 0) {
 80084d0:	6924      	ldr	r4, [r4, #16]
 80084d2:	2c00      	cmp	r4, #0
 80084d4:	d1f4      	bne.n	80084c0 <osThreadNew+0x48>
 80084d6:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80084d8:	a905      	add	r1, sp, #20
 80084da:	b292      	uxth	r2, r2
 80084dc:	e9cd c100 	strd	ip, r1, [sp]
 80084e0:	4621      	mov	r1, r4
 80084e2:	f001 fadc 	bl	8009a9e <xTaskCreate>
 80084e6:	2801      	cmp	r0, #1
            hTask = NULL;
 80084e8:	bf1c      	itt	ne
 80084ea:	2300      	movne	r3, #0
 80084ec:	9305      	strne	r3, [sp, #20]
 80084ee:	e7e7      	b.n	80084c0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 80084f0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80084f4:	2280      	movs	r2, #128	; 0x80
 80084f6:	e7ef      	b.n	80084d8 <osThreadNew+0x60>
        return (NULL);
 80084f8:	4610      	mov	r0, r2
 80084fa:	e7e2      	b.n	80084c2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084fc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8008500:	9500      	str	r5, [sp, #0]
 8008502:	f001 fa94 	bl	8009a2e <xTaskCreateStatic>
 8008506:	9005      	str	r0, [sp, #20]
 8008508:	e7da      	b.n	80084c0 <osThreadNew+0x48>

0800850a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800850a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800850c:	4604      	mov	r4, r0
 800850e:	460e      	mov	r6, r1
 8008510:	4615      	mov	r5, r2
 8008512:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008516:	b11a      	cbz	r2, 8008520 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8008518:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800851a:	4620      	mov	r0, r4
 800851c:	b003      	add	sp, #12
 800851e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008520:	2800      	cmp	r0, #0
 8008522:	d0f9      	beq.n	8008518 <osSemaphoreNew+0xe>
 8008524:	4288      	cmp	r0, r1
 8008526:	d3f7      	bcc.n	8008518 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8008528:	b1e5      	cbz	r5, 8008564 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800852a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800852e:	b1bb      	cbz	r3, 8008560 <osSemaphoreNew+0x56>
 8008530:	2f4f      	cmp	r7, #79	; 0x4f
 8008532:	d9f1      	bls.n	8008518 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8008534:	2801      	cmp	r0, #1
 8008536:	d12a      	bne.n	800858e <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008538:	2103      	movs	r1, #3
 800853a:	9100      	str	r1, [sp, #0]
 800853c:	4611      	mov	r1, r2
 800853e:	f000 fce1 	bl	8008f04 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8008542:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008544:	2800      	cmp	r0, #0
 8008546:	d0e7      	beq.n	8008518 <osSemaphoreNew+0xe>
 8008548:	b1de      	cbz	r6, 8008582 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800854a:	2300      	movs	r3, #0
 800854c:	461a      	mov	r2, r3
 800854e:	4619      	mov	r1, r3
 8008550:	f000 fd8d 	bl	800906e <xQueueGenericSend>
 8008554:	2801      	cmp	r0, #1
 8008556:	d014      	beq.n	8008582 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8008558:	4620      	mov	r0, r4
 800855a:	f001 f8c9 	bl	80096f0 <vQueueDelete>
 800855e:	e7db      	b.n	8008518 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008560:	2f00      	cmp	r7, #0
 8008562:	d1d9      	bne.n	8008518 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8008564:	2c01      	cmp	r4, #1
 8008566:	d105      	bne.n	8008574 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8008568:	2203      	movs	r2, #3
 800856a:	2100      	movs	r1, #0
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fd17 	bl	8008fa0 <xQueueGenericCreate>
 8008572:	e7e6      	b.n	8008542 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008574:	4620      	mov	r0, r4
 8008576:	4631      	mov	r1, r6
 8008578:	f000 fd5b 	bl	8009032 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800857c:	4604      	mov	r4, r0
 800857e:	2800      	cmp	r0, #0
 8008580:	d0ca      	beq.n	8008518 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 8008582:	b955      	cbnz	r5, 800859a <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 8008584:	4629      	mov	r1, r5
 8008586:	4620      	mov	r0, r4
 8008588:	f001 f88c 	bl	80096a4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800858c:	e7c5      	b.n	800851a <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800858e:	461a      	mov	r2, r3
 8008590:	f000 fd2d 	bl	8008fee <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8008594:	4604      	mov	r4, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d0be      	beq.n	8008518 <osSemaphoreNew+0xe>
          name = attr->name;
 800859a:	682d      	ldr	r5, [r5, #0]
 800859c:	e7f2      	b.n	8008584 <osSemaphoreNew+0x7a>

0800859e <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800859e:	b513      	push	{r0, r1, r4, lr}
 80085a0:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80085a2:	b308      	cbz	r0, 80085e8 <osSemaphoreAcquire+0x4a>
 80085a4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80085a8:	b1b3      	cbz	r3, 80085d8 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 80085aa:	b9e9      	cbnz	r1, 80085e8 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80085ac:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80085ae:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80085b0:	f001 f828 	bl	8009604 <xQueueReceiveFromISR>
 80085b4:	2801      	cmp	r0, #1
 80085b6:	d114      	bne.n	80085e2 <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	b913      	cbnz	r3, 80085c2 <osSemaphoreAcquire+0x24>
  stat = osOK;
 80085bc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80085be:	b002      	add	sp, #8
 80085c0:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80085c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	e7f1      	b.n	80085bc <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80085d8:	f000 ff51 	bl	800947e <xQueueSemaphoreTake>
 80085dc:	2801      	cmp	r0, #1
 80085de:	d0ed      	beq.n	80085bc <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 80085e0:	b92c      	cbnz	r4, 80085ee <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 80085e2:	f06f 0002 	mvn.w	r0, #2
 80085e6:	e7ea      	b.n	80085be <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80085e8:	f06f 0003 	mvn.w	r0, #3
 80085ec:	e7e7      	b.n	80085be <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 80085ee:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80085f2:	e7e4      	b.n	80085be <osSemaphoreAcquire+0x20>

080085f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80085f4:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80085f6:	b310      	cbz	r0, 800863e <osSemaphoreRelease+0x4a>
 80085f8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80085fc:	b1b3      	cbz	r3, 800862c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 80085fe:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008600:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8008602:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008604:	f000 fe48 	bl	8009298 <xQueueGiveFromISR>
 8008608:	2801      	cmp	r0, #1
 800860a:	d115      	bne.n	8008638 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	b913      	cbnz	r3, 8008616 <osSemaphoreRelease+0x22>
  stat = osOK;
 8008610:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8008612:	b002      	add	sp, #8
 8008614:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8008616:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800861a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	e7f1      	b.n	8008610 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800862c:	461a      	mov	r2, r3
 800862e:	4619      	mov	r1, r3
 8008630:	f000 fd1d 	bl	800906e <xQueueGenericSend>
 8008634:	2801      	cmp	r0, #1
 8008636:	d0eb      	beq.n	8008610 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8008638:	f06f 0002 	mvn.w	r0, #2
 800863c:	e7e9      	b.n	8008612 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800863e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8008642:	e7e6      	b.n	8008612 <osSemaphoreRelease+0x1e>

08008644 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	460e      	mov	r6, r1
 800864a:	4614      	mov	r4, r2
 800864c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008650:	b11f      	cbz	r7, 800865a <osMessageQueueNew+0x16>
  hQueue = NULL;
 8008652:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008654:	4628      	mov	r0, r5
 8008656:	b003      	add	sp, #12
 8008658:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800865a:	2800      	cmp	r0, #0
 800865c:	d0f9      	beq.n	8008652 <osMessageQueueNew+0xe>
 800865e:	2900      	cmp	r1, #0
 8008660:	d0f7      	beq.n	8008652 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8008662:	b1da      	cbz	r2, 800869c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008664:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8008668:	b183      	cbz	r3, 800868c <osMessageQueueNew+0x48>
 800866a:	2a4f      	cmp	r2, #79	; 0x4f
 800866c:	d9f1      	bls.n	8008652 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800866e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008670:	2a00      	cmp	r2, #0
 8008672:	d0ee      	beq.n	8008652 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008674:	434d      	muls	r5, r1
 8008676:	6966      	ldr	r6, [r4, #20]
 8008678:	42ae      	cmp	r6, r5
 800867a:	d3ea      	bcc.n	8008652 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800867c:	9700      	str	r7, [sp, #0]
 800867e:	f000 fc41 	bl	8008f04 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008682:	4605      	mov	r5, r0
 8008684:	2800      	cmp	r0, #0
 8008686:	d0e4      	beq.n	8008652 <osMessageQueueNew+0xe>
        name = attr->name;
 8008688:	6824      	ldr	r4, [r4, #0]
 800868a:	e011      	b.n	80086b0 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800868c:	2a00      	cmp	r2, #0
 800868e:	d1e0      	bne.n	8008652 <osMessageQueueNew+0xe>
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1dd      	bne.n	8008652 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008696:	6963      	ldr	r3, [r4, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1da      	bne.n	8008652 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800869c:	4628      	mov	r0, r5
 800869e:	2200      	movs	r2, #0
 80086a0:	4631      	mov	r1, r6
 80086a2:	f000 fc7d 	bl	8008fa0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80086a6:	4605      	mov	r5, r0
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d0d2      	beq.n	8008652 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80086ac:	2c00      	cmp	r4, #0
 80086ae:	d1eb      	bne.n	8008688 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80086b0:	4621      	mov	r1, r4
 80086b2:	4628      	mov	r0, r5
 80086b4:	f000 fff6 	bl	80096a4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80086b8:	e7cc      	b.n	8008654 <osMessageQueueNew+0x10>

080086ba <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80086ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086bc:	461c      	mov	r4, r3
 80086be:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80086c2:	b1c6      	cbz	r6, 80086f6 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086c4:	b318      	cbz	r0, 800870e <osMessageQueuePut+0x54>
 80086c6:	b311      	cbz	r1, 800870e <osMessageQueuePut+0x54>
 80086c8:	bb0b      	cbnz	r3, 800870e <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80086ca:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80086cc:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80086ce:	f000 fd81 	bl	80091d4 <xQueueGenericSendFromISR>
 80086d2:	2801      	cmp	r0, #1
 80086d4:	d118      	bne.n	8008708 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	b913      	cbnz	r3, 80086e0 <osMessageQueuePut+0x26>
  stat = osOK;
 80086da:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80086dc:	b002      	add	sp, #8
 80086de:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80086e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80086e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	e7f1      	b.n	80086da <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086f6:	b150      	cbz	r0, 800870e <osMessageQueuePut+0x54>
 80086f8:	b149      	cbz	r1, 800870e <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80086fa:	4633      	mov	r3, r6
 80086fc:	4622      	mov	r2, r4
 80086fe:	f000 fcb6 	bl	800906e <xQueueGenericSend>
 8008702:	2801      	cmp	r0, #1
 8008704:	d0e9      	beq.n	80086da <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8008706:	b92c      	cbnz	r4, 8008714 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 8008708:	f06f 0002 	mvn.w	r0, #2
 800870c:	e7e6      	b.n	80086dc <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800870e:	f06f 0003 	mvn.w	r0, #3
 8008712:	e7e3      	b.n	80086dc <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8008714:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008718:	e7e0      	b.n	80086dc <osMessageQueuePut+0x22>

0800871a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800871a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800871c:	461c      	mov	r4, r3
 800871e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008722:	b1c3      	cbz	r3, 8008756 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008724:	b310      	cbz	r0, 800876c <osMessageQueueGet+0x52>
 8008726:	b309      	cbz	r1, 800876c <osMessageQueueGet+0x52>
 8008728:	bb04      	cbnz	r4, 800876c <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800872a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800872c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800872e:	f000 ff69 	bl	8009604 <xQueueReceiveFromISR>
 8008732:	2801      	cmp	r0, #1
 8008734:	d117      	bne.n	8008766 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	b913      	cbnz	r3, 8008740 <osMessageQueueGet+0x26>
  stat = osOK;
 800873a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800873c:	b003      	add	sp, #12
 800873e:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8008740:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008748:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	e7f1      	b.n	800873a <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008756:	b148      	cbz	r0, 800876c <osMessageQueueGet+0x52>
 8008758:	b141      	cbz	r1, 800876c <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800875a:	4622      	mov	r2, r4
 800875c:	f000 fdf0 	bl	8009340 <xQueueReceive>
 8008760:	2801      	cmp	r0, #1
 8008762:	d0ea      	beq.n	800873a <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8008764:	b92c      	cbnz	r4, 8008772 <osMessageQueueGet+0x58>
          stat = osErrorResource;
 8008766:	f06f 0002 	mvn.w	r0, #2
 800876a:	e7e7      	b.n	800873c <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800876c:	f06f 0003 	mvn.w	r0, #3
 8008770:	e7e4      	b.n	800873c <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8008772:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008776:	e7e1      	b.n	800873c <osMessageQueueGet+0x22>

08008778 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008778:	4b03      	ldr	r3, [pc, #12]	; (8008788 <vApplicationGetIdleTaskMemory+0x10>)
 800877a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800877c:	4b03      	ldr	r3, [pc, #12]	; (800878c <vApplicationGetIdleTaskMemory+0x14>)
 800877e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	6013      	str	r3, [r2, #0]
}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	24002394 	.word	0x24002394
 800878c:	24002194 	.word	0x24002194

08008790 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008790:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <vApplicationGetTimerTaskMemory+0x10>)
 8008792:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008794:	4b03      	ldr	r3, [pc, #12]	; (80087a4 <vApplicationGetTimerTaskMemory+0x14>)
 8008796:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800879c:	6013      	str	r3, [r2, #0]
}
 800879e:	4770      	bx	lr
 80087a0:	240027f8 	.word	0x240027f8
 80087a4:	240023f8 	.word	0x240023f8

080087a8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <prvInsertBlockIntoFreeList+0x40>)
{
 80087aa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087ac:	461a      	mov	r2, r3
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4283      	cmp	r3, r0
 80087b2:	d3fb      	bcc.n	80087ac <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087b4:	6854      	ldr	r4, [r2, #4]
 80087b6:	1911      	adds	r1, r2, r4
 80087b8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087ba:	bf01      	itttt	eq
 80087bc:	6841      	ldreq	r1, [r0, #4]
 80087be:	4610      	moveq	r0, r2
 80087c0:	1909      	addeq	r1, r1, r4
 80087c2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087c4:	6844      	ldr	r4, [r0, #4]
 80087c6:	1901      	adds	r1, r0, r4
 80087c8:	428b      	cmp	r3, r1
 80087ca:	d107      	bne.n	80087dc <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087cc:	4907      	ldr	r1, [pc, #28]	; (80087ec <prvInsertBlockIntoFreeList+0x44>)
 80087ce:	6809      	ldr	r1, [r1, #0]
 80087d0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087d2:	bf1f      	itttt	ne
 80087d4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087d6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087d8:	1909      	addne	r1, r1, r4
 80087da:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087dc:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087de:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087e0:	bf18      	it	ne
 80087e2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	bf00      	nop
 80087e8:	2400a870 	.word	0x2400a870
 80087ec:	24002858 	.word	0x24002858

080087f0 <pvPortMalloc>:
{
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80087f6:	f001 f97f 	bl	8009af8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80087fa:	4842      	ldr	r0, [pc, #264]	; (8008904 <pvPortMalloc+0x114>)
 80087fc:	4d42      	ldr	r5, [pc, #264]	; (8008908 <pvPortMalloc+0x118>)
 80087fe:	6803      	ldr	r3, [r0, #0]
 8008800:	bb0b      	cbnz	r3, 8008846 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8008802:	4942      	ldr	r1, [pc, #264]	; (800890c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008804:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008806:	4e42      	ldr	r6, [pc, #264]	; (8008910 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008808:	bf1b      	ittet	ne
 800880a:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800880c:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008810:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008814:	f023 0307 	bicne.w	r3, r3, #7
 8008818:	bf1c      	itt	ne
 800881a:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800881c:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800881e:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008820:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008822:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008824:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 8008826:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008828:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800882c:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008830:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8008832:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008834:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008838:	4a36      	ldr	r2, [pc, #216]	; (8008914 <pvPortMalloc+0x124>)
 800883a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800883c:	4a36      	ldr	r2, [pc, #216]	; (8008918 <pvPortMalloc+0x128>)
 800883e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008844:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008846:	682f      	ldr	r7, [r5, #0]
 8008848:	4227      	tst	r7, r4
 800884a:	d155      	bne.n	80088f8 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800884c:	2c00      	cmp	r4, #0
 800884e:	d046      	beq.n	80088de <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8008850:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008854:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008856:	bf1c      	itt	ne
 8008858:	f023 0307 	bicne.w	r3, r3, #7
 800885c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800885e:	2b00      	cmp	r3, #0
 8008860:	d04a      	beq.n	80088f8 <pvPortMalloc+0x108>
 8008862:	4c2d      	ldr	r4, [pc, #180]	; (8008918 <pvPortMalloc+0x128>)
 8008864:	6826      	ldr	r6, [r4, #0]
 8008866:	429e      	cmp	r6, r3
 8008868:	d346      	bcc.n	80088f8 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800886a:	4a29      	ldr	r2, [pc, #164]	; (8008910 <pvPortMalloc+0x120>)
 800886c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800886e:	6869      	ldr	r1, [r5, #4]
 8008870:	4299      	cmp	r1, r3
 8008872:	d204      	bcs.n	800887e <pvPortMalloc+0x8e>
 8008874:	f8d5 c000 	ldr.w	ip, [r5]
 8008878:	f1bc 0f00 	cmp.w	ip, #0
 800887c:	d115      	bne.n	80088aa <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	42a8      	cmp	r0, r5
 8008882:	d039      	beq.n	80088f8 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008884:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008886:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008888:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800888c:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800888e:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008890:	d912      	bls.n	80088b8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008892:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008894:	0742      	lsls	r2, r0, #29
 8008896:	d00b      	beq.n	80088b0 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	e7fe      	b.n	80088a8 <pvPortMalloc+0xb8>
 80088aa:	462a      	mov	r2, r5
 80088ac:	4665      	mov	r5, ip
 80088ae:	e7de      	b.n	800886e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088b0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088b2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088b4:	f7ff ff78 	bl	80087a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088b8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088ba:	4916      	ldr	r1, [pc, #88]	; (8008914 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088bc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088be:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 80088c0:	4a16      	ldr	r2, [pc, #88]	; (800891c <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 80088c2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088c4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80088c6:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80088c8:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088ca:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088cc:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088ce:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 80088d2:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088d6:	bf38      	it	cc
 80088d8:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088da:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 80088dc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80088de:	f001 f9af 	bl	8009c40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e2:	0763      	lsls	r3, r4, #29
 80088e4:	d00a      	beq.n	80088fc <pvPortMalloc+0x10c>
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	e7fe      	b.n	80088f6 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 80088f8:	2400      	movs	r4, #0
 80088fa:	e7f0      	b.n	80088de <pvPortMalloc+0xee>
}
 80088fc:	4620      	mov	r0, r4
 80088fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008902:	bf00      	nop
 8008904:	24002858 	.word	0x24002858
 8008908:	2400a85c 	.word	0x2400a85c
 800890c:	2400285c 	.word	0x2400285c
 8008910:	2400a870 	.word	0x2400a870
 8008914:	2400a864 	.word	0x2400a864
 8008918:	2400a860 	.word	0x2400a860
 800891c:	2400a868 	.word	0x2400a868

08008920 <vPortFree>:
{
 8008920:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008922:	4604      	mov	r4, r0
 8008924:	b390      	cbz	r0, 800898c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008926:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <vPortFree+0x70>)
 8008928:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	4213      	tst	r3, r2
 8008930:	d108      	bne.n	8008944 <vPortFree+0x24>
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	e7fe      	b.n	8008942 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008944:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008948:	b141      	cbz	r1, 800895c <vPortFree+0x3c>
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	e7fe      	b.n	800895a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800895c:	ea23 0302 	bic.w	r3, r3, r2
 8008960:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008964:	f001 f8c8 	bl	8009af8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008968:	4a0a      	ldr	r2, [pc, #40]	; (8008994 <vPortFree+0x74>)
 800896a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800896e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008972:	6811      	ldr	r1, [r2, #0]
 8008974:	440b      	add	r3, r1
 8008976:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008978:	f7ff ff16 	bl	80087a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800897c:	4a06      	ldr	r2, [pc, #24]	; (8008998 <vPortFree+0x78>)
 800897e:	6813      	ldr	r3, [r2, #0]
 8008980:	3301      	adds	r3, #1
}
 8008982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8008986:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008988:	f001 b95a 	b.w	8009c40 <xTaskResumeAll>
}
 800898c:	bd10      	pop	{r4, pc}
 800898e:	bf00      	nop
 8008990:	2400a85c 	.word	0x2400a85c
 8008994:	2400a860 	.word	0x2400a860
 8008998:	2400a86c 	.word	0x2400a86c

0800899c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800899c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089b0:	4770      	bx	lr

080089b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089b6:	4770      	bx	lr

080089b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80089b8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089ba:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80089bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089c4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80089c6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80089c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80089ca:	3301      	adds	r3, #1
 80089cc:	6003      	str	r3, [r0, #0]
}
 80089ce:	4770      	bx	lr

080089d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089d0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089d2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089d4:	1c63      	adds	r3, r4, #1
 80089d6:	d10a      	bne.n	80089ee <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089d8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089de:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089e0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80089e2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80089e4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80089e6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80089e8:	3301      	adds	r3, #1
 80089ea:	6003      	str	r3, [r0, #0]
}
 80089ec:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089ee:	f100 0208 	add.w	r2, r0, #8
 80089f2:	4613      	mov	r3, r2
 80089f4:	6852      	ldr	r2, [r2, #4]
 80089f6:	6815      	ldr	r5, [r2, #0]
 80089f8:	42a5      	cmp	r5, r4
 80089fa:	d9fa      	bls.n	80089f2 <vListInsert+0x22>
 80089fc:	e7ed      	b.n	80089da <vListInsert+0xa>

080089fe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089fe:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a00:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008a04:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a06:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a08:	6859      	ldr	r1, [r3, #4]
 8008a0a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a0c:	bf08      	it	eq
 8008a0e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a10:	2200      	movs	r2, #0
 8008a12:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	3a01      	subs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a1a:	6818      	ldr	r0, [r3, #0]
}
 8008a1c:	4770      	bx	lr
	...

08008a20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a20:	4808      	ldr	r0, [pc, #32]	; (8008a44 <prvPortStartFirstTask+0x24>)
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	6800      	ldr	r0, [r0, #0]
 8008a26:	f380 8808 	msr	MSP, r0
 8008a2a:	f04f 0000 	mov.w	r0, #0
 8008a2e:	f380 8814 	msr	CONTROL, r0
 8008a32:	b662      	cpsie	i
 8008a34:	b661      	cpsie	f
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	df00      	svc	0
 8008a40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a42:	0000      	.short	0x0000
 8008a44:	e000ed08 	.word	0xe000ed08

08008a48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a58 <vPortEnableVFP+0x10>
 8008a4c:	6801      	ldr	r1, [r0, #0]
 8008a4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a52:	6001      	str	r1, [r0, #0]
 8008a54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a56:	0000      	.short	0x0000
 8008a58:	e000ed88 	.word	0xe000ed88

08008a5c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8008a5c:	2300      	movs	r3, #0
{
 8008a5e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008a60:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008a62:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <prvTaskExitError+0x3c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	d008      	beq.n	8008a7c <prvTaskExitError+0x20>
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	e7fe      	b.n	8008a7a <prvTaskExitError+0x1e>
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0fc      	beq.n	8008a8c <prvTaskExitError+0x30>
}
 8008a92:	b002      	add	sp, #8
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	24000058 	.word	0x24000058

08008a9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008aa0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008aa4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008aa8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008aaa:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008aac:	4b03      	ldr	r3, [pc, #12]	; (8008abc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008aae:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ab0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ab2:	f06f 0302 	mvn.w	r3, #2
 8008ab6:	6203      	str	r3, [r0, #32]
}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	08008a5d 	.word	0x08008a5d

08008ac0 <SVC_Handler>:
	__asm volatile (
 8008ac0:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <pxCurrentTCBConst2>)
 8008ac2:	6819      	ldr	r1, [r3, #0]
 8008ac4:	6808      	ldr	r0, [r1, #0]
 8008ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aca:	f380 8809 	msr	PSP, r0
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f04f 0000 	mov.w	r0, #0
 8008ad6:	f380 8811 	msr	BASEPRI, r0
 8008ada:	4770      	bx	lr
 8008adc:	f3af 8000 	nop.w

08008ae0 <pxCurrentTCBConst2>:
 8008ae0:	2400a8c0 	.word	0x2400a8c0

08008ae4 <vPortEnterCritical>:
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008af4:	4a0a      	ldr	r2, [pc, #40]	; (8008b20 <vPortEnterCritical+0x3c>)
 8008af6:	6813      	ldr	r3, [r2, #0]
 8008af8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8008afa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008afc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008afe:	d10e      	bne.n	8008b1e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b04:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	b143      	cbz	r3, 8008b1e <vPortEnterCritical+0x3a>
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	e7fe      	b.n	8008b1c <vPortEnterCritical+0x38>
}
 8008b1e:	4770      	bx	lr
 8008b20:	24000058 	.word	0x24000058

08008b24 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008b24:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <vPortExitCritical+0x24>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	b943      	cbnz	r3, 8008b3c <vPortExitCritical+0x18>
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	e7fe      	b.n	8008b3a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b40:	b90b      	cbnz	r3, 8008b46 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b42:	f383 8811 	msr	BASEPRI, r3
}
 8008b46:	4770      	bx	lr
 8008b48:	24000058 	.word	0x24000058
 8008b4c:	00000000 	.word	0x00000000

08008b50 <PendSV_Handler>:
	__asm volatile
 8008b50:	f3ef 8009 	mrs	r0, PSP
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <pxCurrentTCBConst>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	f01e 0f10 	tst.w	lr, #16
 8008b60:	bf08      	it	eq
 8008b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	6010      	str	r0, [r2, #0]
 8008b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b74:	f380 8811 	msr	BASEPRI, r0
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f001 f93c 	bl	8009dfc <vTaskSwitchContext>
 8008b84:	f04f 0000 	mov.w	r0, #0
 8008b88:	f380 8811 	msr	BASEPRI, r0
 8008b8c:	bc09      	pop	{r0, r3}
 8008b8e:	6819      	ldr	r1, [r3, #0]
 8008b90:	6808      	ldr	r0, [r1, #0]
 8008b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b96:	f01e 0f10 	tst.w	lr, #16
 8008b9a:	bf08      	it	eq
 8008b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ba0:	f380 8809 	msr	PSP, r0
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w

08008bb0 <pxCurrentTCBConst>:
 8008bb0:	2400a8c0 	.word	0x2400a8c0

08008bb4 <xPortSysTickHandler>:
{
 8008bb4:	b508      	push	{r3, lr}
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008bc6:	f000 ffa5 	bl	8009b14 <xTaskIncrementTick>
 8008bca:	b128      	cbz	r0, 8008bd8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f383 8811 	msr	BASEPRI, r3
}
 8008bde:	bd08      	pop	{r3, pc}

08008be0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008be0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008be4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bea:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bee:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <vPortSetupTimerInterrupt+0x20>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bfa:	2307      	movs	r3, #7
 8008bfc:	6113      	str	r3, [r2, #16]
}
 8008bfe:	4770      	bx	lr
 8008c00:	24000048 	.word	0x24000048

08008c04 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8008c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c0a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8008c0e:	4a3a      	ldr	r2, [pc, #232]	; (8008cf8 <xPortStartScheduler+0xf4>)
 8008c10:	4291      	cmp	r1, r2
 8008c12:	d108      	bne.n	8008c26 <xPortStartScheduler+0x22>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	e7fe      	b.n	8008c24 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c26:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008c2a:	4b34      	ldr	r3, [pc, #208]	; (8008cfc <xPortStartScheduler+0xf8>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d108      	bne.n	8008c42 <xPortStartScheduler+0x3e>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	e7fe      	b.n	8008c40 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c42:	4b2f      	ldr	r3, [pc, #188]	; (8008d00 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c44:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c46:	781a      	ldrb	r2, [r3, #0]
 8008c48:	b2d2      	uxtb	r2, r2
 8008c4a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c4c:	22ff      	movs	r2, #255	; 0xff
 8008c4e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c50:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c52:	4a2c      	ldr	r2, [pc, #176]	; (8008d04 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008c5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c62:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c64:	2307      	movs	r3, #7
 8008c66:	4a28      	ldr	r2, [pc, #160]	; (8008d08 <xPortStartScheduler+0x104>)
 8008c68:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008c6e:	1e5c      	subs	r4, r3, #1
 8008c70:	0600      	lsls	r0, r0, #24
 8008c72:	d40c      	bmi.n	8008c8e <xPortStartScheduler+0x8a>
 8008c74:	b111      	cbz	r1, 8008c7c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	d011      	beq.n	8008ca0 <xPortStartScheduler+0x9c>
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	e7fe      	b.n	8008c8c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008c92:	2101      	movs	r1, #1
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f88d 3003 	strb.w	r3, [sp, #3]
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	e7e4      	b.n	8008c6a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ca4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8008ca8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008caa:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	4a14      	ldr	r2, [pc, #80]	; (8008d00 <xPortStartScheduler+0xfc>)
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cb4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cbc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cc0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008cc4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cc8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008ccc:	f7ff ff88 	bl	8008be0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008cd0:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <xPortStartScheduler+0x108>)
 8008cd2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008cd4:	f7ff feb8 	bl	8008a48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cd8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008cdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ce0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008ce4:	f7ff fe9c 	bl	8008a20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008ce8:	f001 f888 	bl	8009dfc <vTaskSwitchContext>
}
 8008cec:	4628      	mov	r0, r5
	prvTaskExitError();
 8008cee:	f7ff feb5 	bl	8008a5c <prvTaskExitError>
}
 8008cf2:	b003      	add	sp, #12
 8008cf4:	bd30      	pop	{r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	410fc271 	.word	0x410fc271
 8008cfc:	410fc270 	.word	0x410fc270
 8008d00:	e000e400 	.word	0xe000e400
 8008d04:	2400a878 	.word	0x2400a878
 8008d08:	2400a87c 	.word	0x2400a87c
 8008d0c:	24000058 	.word	0x24000058

08008d10 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d10:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d14:	2b0f      	cmp	r3, #15
 8008d16:	d90e      	bls.n	8008d36 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d18:	4a11      	ldr	r2, [pc, #68]	; (8008d60 <vPortValidateInterruptPriority+0x50>)
 8008d1a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d1c:	4a11      	ldr	r2, [pc, #68]	; (8008d64 <vPortValidateInterruptPriority+0x54>)
 8008d1e:	7812      	ldrb	r2, [r2, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d908      	bls.n	8008d36 <vPortValidateInterruptPriority+0x26>
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	e7fe      	b.n	8008d34 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d3a:	4a0b      	ldr	r2, [pc, #44]	; (8008d68 <vPortValidateInterruptPriority+0x58>)
 8008d3c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d908      	bls.n	8008d5c <vPortValidateInterruptPriority+0x4c>
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	e7fe      	b.n	8008d5a <vPortValidateInterruptPriority+0x4a>
	}
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e3f0 	.word	0xe000e3f0
 8008d64:	2400a878 	.word	0x2400a878
 8008d68:	2400a87c 	.word	0x2400a87c

08008d6c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d70:	f7ff feb8 	bl	8008ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d74:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008d76:	f7ff fed5 	bl	8008b24 <vPortExitCritical>

	return xReturn;
}
 8008d7a:	fab4 f084 	clz	r0, r4
 8008d7e:	0940      	lsrs	r0, r0, #5
 8008d80:	bd10      	pop	{r4, pc}

08008d82 <prvCopyDataToQueue>:
{
 8008d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d84:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d86:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8008d88:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d8a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d8c:	b952      	cbnz	r2, 8008da4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d8e:	6807      	ldr	r7, [r0, #0]
 8008d90:	bb47      	cbnz	r7, 8008de4 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d92:	6880      	ldr	r0, [r0, #8]
 8008d94:	f001 f990 	bl	800a0b8 <xTaskPriorityDisinherit>
 8008d98:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d9a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d9c:	3601      	adds	r6, #1
}
 8008d9e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008da0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008da4:	b965      	cbnz	r5, 8008dc0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008da6:	6840      	ldr	r0, [r0, #4]
 8008da8:	f010 fa46 	bl	8019238 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008db0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008db2:	68a2      	ldr	r2, [r4, #8]
 8008db4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008db6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008db8:	d3f0      	bcc.n	8008d9c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	6063      	str	r3, [r4, #4]
 8008dbe:	e7ed      	b.n	8008d9c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dc0:	68c0      	ldr	r0, [r0, #12]
 8008dc2:	f010 fa39 	bl	8019238 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dc8:	68e3      	ldr	r3, [r4, #12]
 8008dca:	4251      	negs	r1, r2
 8008dcc:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dd2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dd4:	bf3e      	ittt	cc
 8008dd6:	68a3      	ldrcc	r3, [r4, #8]
 8008dd8:	185b      	addcc	r3, r3, r1
 8008dda:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008ddc:	2d02      	cmp	r5, #2
 8008dde:	d101      	bne.n	8008de4 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008de0:	b116      	cbz	r6, 8008de8 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8008de2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008de4:	2500      	movs	r5, #0
 8008de6:	e7d9      	b.n	8008d9c <prvCopyDataToQueue+0x1a>
 8008de8:	4635      	mov	r5, r6
 8008dea:	e7d7      	b.n	8008d9c <prvCopyDataToQueue+0x1a>

08008dec <prvCopyDataFromQueue>:
{
 8008dec:	4603      	mov	r3, r0
 8008dee:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008df2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008df4:	b162      	cbz	r2, 8008e10 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008df6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008df8:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dfa:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008dfc:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dfe:	60dc      	str	r4, [r3, #12]
}
 8008e00:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e04:	bf24      	itt	cs
 8008e06:	6819      	ldrcs	r1, [r3, #0]
 8008e08:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e0a:	68d9      	ldr	r1, [r3, #12]
 8008e0c:	f010 ba14 	b.w	8019238 <memcpy>
}
 8008e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <prvUnlockQueue>:
{
 8008e16:	b570      	push	{r4, r5, r6, lr}
 8008e18:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008e1a:	f7ff fe63 	bl	8008ae4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008e1e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e22:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008e26:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e28:	2d00      	cmp	r5, #0
 8008e2a:	dc14      	bgt.n	8008e56 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008e2c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e2e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8008e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008e36:	f7ff fe75 	bl	8008b24 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008e3a:	f7ff fe53 	bl	8008ae4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008e3e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008e42:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e44:	2d00      	cmp	r5, #0
 8008e46:	dc12      	bgt.n	8008e6e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008e48:	23ff      	movs	r3, #255	; 0xff
 8008e4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008e52:	f7ff be67 	b.w	8008b24 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0e7      	beq.n	8008e2c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f001 f849 	bl	8009ef4 <xTaskRemoveFromEventList>
 8008e62:	b108      	cbz	r0, 8008e68 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008e64:	f001 f8d2 	bl	800a00c <vTaskMissedYield>
			--cTxLock;
 8008e68:	3d01      	subs	r5, #1
 8008e6a:	b26d      	sxtb	r5, r5
 8008e6c:	e7dc      	b.n	8008e28 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0e9      	beq.n	8008e48 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e74:	4630      	mov	r0, r6
 8008e76:	f001 f83d 	bl	8009ef4 <xTaskRemoveFromEventList>
 8008e7a:	b108      	cbz	r0, 8008e80 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008e7c:	f001 f8c6 	bl	800a00c <vTaskMissedYield>
				--cRxLock;
 8008e80:	3d01      	subs	r5, #1
 8008e82:	b26d      	sxtb	r5, r5
 8008e84:	e7de      	b.n	8008e44 <prvUnlockQueue+0x2e>

08008e86 <xQueueGenericReset>:
{
 8008e86:	b538      	push	{r3, r4, r5, lr}
 8008e88:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	b940      	cbnz	r0, 8008ea0 <xQueueGenericReset+0x1a>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8008ea0:	f7ff fe20 	bl	8008ae4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eaa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eac:	434b      	muls	r3, r1
 8008eae:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eb0:	1a5b      	subs	r3, r3, r1
 8008eb2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eb4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008eb6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eb8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008eba:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ebc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8008ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008ec6:	b9a5      	cbnz	r5, 8008ef2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	b173      	cbz	r3, 8008eea <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ecc:	f104 0010 	add.w	r0, r4, #16
 8008ed0:	f001 f810 	bl	8009ef4 <xTaskRemoveFromEventList>
 8008ed4:	b148      	cbz	r0, 8008eea <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008ed6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008eea:	f7ff fe1b 	bl	8008b24 <vPortExitCritical>
}
 8008eee:	2001      	movs	r0, #1
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ef2:	f104 0010 	add.w	r0, r4, #16
 8008ef6:	f7ff fd51 	bl	800899c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008efa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008efe:	f7ff fd4d 	bl	800899c <vListInitialise>
 8008f02:	e7f2      	b.n	8008eea <xQueueGenericReset+0x64>

08008f04 <xQueueGenericCreateStatic>:
	{
 8008f04:	b513      	push	{r0, r1, r4, lr}
 8008f06:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f08:	b940      	cbnz	r0, 8008f1c <xQueueGenericCreateStatic+0x18>
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	e7fe      	b.n	8008f1a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8008f1c:	b943      	cbnz	r3, 8008f30 <xQueueGenericCreateStatic+0x2c>
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	e7fe      	b.n	8008f2e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f30:	b14a      	cbz	r2, 8008f46 <xQueueGenericCreateStatic+0x42>
 8008f32:	b991      	cbnz	r1, 8008f5a <xQueueGenericCreateStatic+0x56>
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	e7fe      	b.n	8008f44 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f46:	b141      	cbz	r1, 8008f5a <xQueueGenericCreateStatic+0x56>
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f5a:	2350      	movs	r3, #80	; 0x50
 8008f5c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	2b50      	cmp	r3, #80	; 0x50
 8008f62:	d008      	beq.n	8008f76 <xQueueGenericCreateStatic+0x72>
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	e7fe      	b.n	8008f74 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f76:	2900      	cmp	r1, #0
 8008f78:	bf08      	it	eq
 8008f7a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f7c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	6022      	str	r2, [r4, #0]
 8008f82:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008f86:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f7ff ff7a 	bl	8008e86 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008f92:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8008f96:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008f98:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8008f9c:	b002      	add	sp, #8
 8008f9e:	bd10      	pop	{r4, pc}

08008fa0 <xQueueGenericCreate>:
	{
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	b940      	cbnz	r0, 8008fbc <xQueueGenericCreate+0x1c>
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	e7fe      	b.n	8008fba <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fbc:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008fbe:	3050      	adds	r0, #80	; 0x50
 8008fc0:	f7ff fc16 	bl	80087f0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	b170      	cbz	r0, 8008fe6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fce:	b165      	cbz	r5, 8008fea <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fd0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008fda:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fde:	f7ff ff52 	bl	8008e86 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008fe2:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fea:	4603      	mov	r3, r0
 8008fec:	e7f2      	b.n	8008fd4 <xQueueGenericCreate+0x34>

08008fee <xQueueCreateCountingSemaphoreStatic>:
	{
 8008fee:	b513      	push	{r0, r1, r4, lr}
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8008ff4:	b940      	cbnz	r0, 8009008 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	e7fe      	b.n	8009006 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009008:	4288      	cmp	r0, r1
 800900a:	d208      	bcs.n	800901e <xQueueCreateCountingSemaphoreStatic+0x30>
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	e7fe      	b.n	800901c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800901e:	2202      	movs	r2, #2
 8009020:	9200      	str	r2, [sp, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	4611      	mov	r1, r2
 8009026:	f7ff ff6d 	bl	8008f04 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800902a:	b100      	cbz	r0, 800902e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800902c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800902e:	b002      	add	sp, #8
 8009030:	bd10      	pop	{r4, pc}

08009032 <xQueueCreateCountingSemaphore>:
	{
 8009032:	b510      	push	{r4, lr}
 8009034:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8009036:	b940      	cbnz	r0, 800904a <xQueueCreateCountingSemaphore+0x18>
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	e7fe      	b.n	8009048 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800904a:	4288      	cmp	r0, r1
 800904c:	d208      	bcs.n	8009060 <xQueueCreateCountingSemaphore+0x2e>
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	e7fe      	b.n	800905e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009060:	2202      	movs	r2, #2
 8009062:	2100      	movs	r1, #0
 8009064:	f7ff ff9c 	bl	8008fa0 <xQueueGenericCreate>
		if( xHandle != NULL )
 8009068:	b100      	cbz	r0, 800906c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800906a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800906c:	bd10      	pop	{r4, pc}

0800906e <xQueueGenericSend>:
{
 800906e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009072:	b085      	sub	sp, #20
 8009074:	4688      	mov	r8, r1
 8009076:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009078:	4604      	mov	r4, r0
{
 800907a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800907c:	b940      	cbnz	r0, 8009090 <xQueueGenericSend+0x22>
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	e7fe      	b.n	800908e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009090:	b951      	cbnz	r1, 80090a8 <xQueueGenericSend+0x3a>
 8009092:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009094:	b143      	cbz	r3, 80090a8 <xQueueGenericSend+0x3a>
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	e7fe      	b.n	80090a6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090a8:	2f02      	cmp	r7, #2
 80090aa:	d10b      	bne.n	80090c4 <xQueueGenericSend+0x56>
 80090ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d008      	beq.n	80090c4 <xQueueGenericSend+0x56>
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	e7fe      	b.n	80090c2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090c4:	f000 ffa8 	bl	800a018 <xTaskGetSchedulerState>
 80090c8:	4606      	mov	r6, r0
 80090ca:	b950      	cbnz	r0, 80090e2 <xQueueGenericSend+0x74>
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	b14b      	cbz	r3, 80090e4 <xQueueGenericSend+0x76>
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericSend+0x72>
 80090e2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80090e4:	f04f 0900 	mov.w	r9, #0
 80090e8:	e037      	b.n	800915a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80090ea:	9d01      	ldr	r5, [sp, #4]
 80090ec:	b91d      	cbnz	r5, 80090f6 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80090ee:	f7ff fd19 	bl	8008b24 <vPortExitCritical>
			return errQUEUE_FULL;
 80090f2:	2000      	movs	r0, #0
 80090f4:	e052      	b.n	800919c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 80090f6:	b916      	cbnz	r6, 80090fe <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090f8:	a802      	add	r0, sp, #8
 80090fa:	f000 ff3f 	bl	8009f7c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80090fe:	f7ff fd11 	bl	8008b24 <vPortExitCritical>
		vTaskSuspendAll();
 8009102:	f000 fcf9 	bl	8009af8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009106:	f7ff fced 	bl	8008ae4 <vPortEnterCritical>
 800910a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800910e:	2bff      	cmp	r3, #255	; 0xff
 8009110:	d101      	bne.n	8009116 <xQueueGenericSend+0xa8>
 8009112:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8009116:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800911a:	2bff      	cmp	r3, #255	; 0xff
 800911c:	d101      	bne.n	8009122 <xQueueGenericSend+0xb4>
 800911e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8009122:	f7ff fcff 	bl	8008b24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009126:	a901      	add	r1, sp, #4
 8009128:	a802      	add	r0, sp, #8
 800912a:	f000 ff33 	bl	8009f94 <xTaskCheckForTimeOut>
 800912e:	2800      	cmp	r0, #0
 8009130:	d14a      	bne.n	80091c8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009132:	f7ff fcd7 	bl	8008ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009136:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800913a:	429a      	cmp	r2, r3
 800913c:	d131      	bne.n	80091a2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800913e:	f7ff fcf1 	bl	8008b24 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009142:	9901      	ldr	r1, [sp, #4]
 8009144:	f104 0010 	add.w	r0, r4, #16
 8009148:	f000 fe9c 	bl	8009e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff fe62 	bl	8008e16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009152:	f000 fd75 	bl	8009c40 <xTaskResumeAll>
 8009156:	b360      	cbz	r0, 80091b2 <xQueueGenericSend+0x144>
 8009158:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800915a:	f7ff fcc3 	bl	8008ae4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800915e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009160:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009162:	429a      	cmp	r2, r3
 8009164:	d301      	bcc.n	800916a <xQueueGenericSend+0xfc>
 8009166:	2f02      	cmp	r7, #2
 8009168:	d1bf      	bne.n	80090ea <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800916a:	463a      	mov	r2, r7
 800916c:	4641      	mov	r1, r8
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff fe07 	bl	8008d82 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009176:	b11b      	cbz	r3, 8009180 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009178:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800917c:	f000 feba 	bl	8009ef4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009180:	b148      	cbz	r0, 8009196 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8009182:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009196:	f7ff fcc5 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 800919a:	2001      	movs	r0, #1
}
 800919c:	b005      	add	sp, #20
 800919e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80091a2:	f7ff fcbf 	bl	8008b24 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff fe35 	bl	8008e16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ac:	f000 fd48 	bl	8009c40 <xTaskResumeAll>
 80091b0:	e7d2      	b.n	8009158 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80091b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	e7c7      	b.n	8009158 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80091c8:	4620      	mov	r0, r4
 80091ca:	f7ff fe24 	bl	8008e16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091ce:	f000 fd37 	bl	8009c40 <xTaskResumeAll>
 80091d2:	e78e      	b.n	80090f2 <xQueueGenericSend+0x84>

080091d4 <xQueueGenericSendFromISR>:
{
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	4689      	mov	r9, r1
 80091da:	4690      	mov	r8, r2
 80091dc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80091de:	4604      	mov	r4, r0
 80091e0:	b940      	cbnz	r0, 80091f4 <xQueueGenericSendFromISR+0x20>
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	e7fe      	b.n	80091f2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091f4:	b951      	cbnz	r1, 800920c <xQueueGenericSendFromISR+0x38>
 80091f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80091f8:	b143      	cbz	r3, 800920c <xQueueGenericSendFromISR+0x38>
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	e7fe      	b.n	800920a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800920c:	2f02      	cmp	r7, #2
 800920e:	d10b      	bne.n	8009228 <xQueueGenericSendFromISR+0x54>
 8009210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009212:	2b01      	cmp	r3, #1
 8009214:	d008      	beq.n	8009228 <xQueueGenericSendFromISR+0x54>
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	e7fe      	b.n	8009226 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009228:	f7ff fd72 	bl	8008d10 <vPortValidateInterruptPriority>
	__asm volatile
 800922c:	f3ef 8611 	mrs	r6, BASEPRI
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009240:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009244:	429a      	cmp	r2, r3
 8009246:	d301      	bcc.n	800924c <xQueueGenericSendFromISR+0x78>
 8009248:	2f02      	cmp	r7, #2
 800924a:	d123      	bne.n	8009294 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800924c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009250:	463a      	mov	r2, r7
 8009252:	4649      	mov	r1, r9
 8009254:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8009256:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800925a:	f7ff fd92 	bl	8008d82 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800925e:	1c6b      	adds	r3, r5, #1
 8009260:	d113      	bne.n	800928a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009264:	b90b      	cbnz	r3, 800926a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8009266:	2001      	movs	r0, #1
 8009268:	e00b      	b.n	8009282 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800926a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800926e:	f000 fe41 	bl	8009ef4 <xTaskRemoveFromEventList>
 8009272:	2800      	cmp	r0, #0
 8009274:	d0f7      	beq.n	8009266 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8009276:	f1b8 0f00 	cmp.w	r8, #0
 800927a:	d0f4      	beq.n	8009266 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800927c:	2001      	movs	r0, #1
 800927e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8009282:	f386 8811 	msr	BASEPRI, r6
}
 8009286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800928a:	3501      	adds	r5, #1
 800928c:	b26d      	sxtb	r5, r5
 800928e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8009292:	e7e8      	b.n	8009266 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8009294:	2000      	movs	r0, #0
 8009296:	e7f4      	b.n	8009282 <xQueueGenericSendFromISR+0xae>

08009298 <xQueueGiveFromISR>:
{
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800929c:	4604      	mov	r4, r0
 800929e:	b940      	cbnz	r0, 80092b2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	e7fe      	b.n	80092b0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80092b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80092b4:	b143      	cbz	r3, 80092c8 <xQueueGiveFromISR+0x30>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	e7fe      	b.n	80092c6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80092c8:	6803      	ldr	r3, [r0, #0]
 80092ca:	b953      	cbnz	r3, 80092e2 <xQueueGiveFromISR+0x4a>
 80092cc:	6883      	ldr	r3, [r0, #8]
 80092ce:	b143      	cbz	r3, 80092e2 <xQueueGiveFromISR+0x4a>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	e7fe      	b.n	80092e0 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092e2:	f7ff fd15 	bl	8008d10 <vPortValidateInterruptPriority>
	__asm volatile
 80092e6:	f3ef 8611 	mrs	r6, BASEPRI
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092fe:	4293      	cmp	r3, r2
 8009300:	d91c      	bls.n	800933c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009302:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009306:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8009308:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800930a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800930c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800930e:	d110      	bne.n	8009332 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009312:	b90b      	cbnz	r3, 8009318 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8009314:	2001      	movs	r0, #1
 8009316:	e009      	b.n	800932c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009318:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800931c:	f000 fdea 	bl	8009ef4 <xTaskRemoveFromEventList>
 8009320:	2800      	cmp	r0, #0
 8009322:	d0f7      	beq.n	8009314 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8009324:	2d00      	cmp	r5, #0
 8009326:	d0f5      	beq.n	8009314 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009328:	2001      	movs	r0, #1
 800932a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800932c:	f386 8811 	msr	BASEPRI, r6
}
 8009330:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009332:	3301      	adds	r3, #1
 8009334:	b25b      	sxtb	r3, r3
 8009336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800933a:	e7eb      	b.n	8009314 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800933c:	2000      	movs	r0, #0
 800933e:	e7f5      	b.n	800932c <xQueueGiveFromISR+0x94>

08009340 <xQueueReceive>:
{
 8009340:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009344:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8009346:	4604      	mov	r4, r0
{
 8009348:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800934a:	b940      	cbnz	r0, 800935e <xQueueReceive+0x1e>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	e7fe      	b.n	800935c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800935e:	b951      	cbnz	r1, 8009376 <xQueueReceive+0x36>
 8009360:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009362:	b143      	cbz	r3, 8009376 <xQueueReceive+0x36>
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	e7fe      	b.n	8009374 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009376:	f000 fe4f 	bl	800a018 <xTaskGetSchedulerState>
 800937a:	4606      	mov	r6, r0
 800937c:	b950      	cbnz	r0, 8009394 <xQueueReceive+0x54>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	b14b      	cbz	r3, 8009396 <xQueueReceive+0x56>
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	e7fe      	b.n	8009392 <xQueueReceive+0x52>
 8009394:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	e03d      	b.n	8009418 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800939c:	9d01      	ldr	r5, [sp, #4]
 800939e:	b91d      	cbnz	r5, 80093a8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80093a0:	f7ff fbc0 	bl	8008b24 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80093a4:	2000      	movs	r0, #0
 80093a6:	e056      	b.n	8009456 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80093a8:	b916      	cbnz	r6, 80093b0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093aa:	a802      	add	r0, sp, #8
 80093ac:	f000 fde6 	bl	8009f7c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80093b0:	f7ff fbb8 	bl	8008b24 <vPortExitCritical>
		vTaskSuspendAll();
 80093b4:	f000 fba0 	bl	8009af8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093b8:	f7ff fb94 	bl	8008ae4 <vPortEnterCritical>
 80093bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093c0:	2bff      	cmp	r3, #255	; 0xff
 80093c2:	d101      	bne.n	80093c8 <xQueueReceive+0x88>
 80093c4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80093c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80093cc:	2bff      	cmp	r3, #255	; 0xff
 80093ce:	d101      	bne.n	80093d4 <xQueueReceive+0x94>
 80093d0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80093d4:	f7ff fba6 	bl	8008b24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093d8:	a901      	add	r1, sp, #4
 80093da:	a802      	add	r0, sp, #8
 80093dc:	f000 fdda 	bl	8009f94 <xTaskCheckForTimeOut>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d141      	bne.n	8009468 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff fcc1 	bl	8008d6c <prvIsQueueEmpty>
 80093ea:	b3b8      	cbz	r0, 800945c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093ec:	9901      	ldr	r1, [sp, #4]
 80093ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093f2:	f000 fd47 	bl	8009e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff fd0d 	bl	8008e16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093fc:	f000 fc20 	bl	8009c40 <xTaskResumeAll>
 8009400:	b948      	cbnz	r0, 8009416 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8009402:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009418:	f7ff fb64 	bl	8008ae4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800941c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800941e:	2d00      	cmp	r5, #0
 8009420:	d0bc      	beq.n	800939c <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009422:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009424:	4639      	mov	r1, r7
 8009426:	4620      	mov	r0, r4
 8009428:	f7ff fce0 	bl	8008dec <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800942c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	b173      	cbz	r3, 8009450 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009432:	f104 0010 	add.w	r0, r4, #16
 8009436:	f000 fd5d 	bl	8009ef4 <xTaskRemoveFromEventList>
 800943a:	b148      	cbz	r0, 8009450 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800943c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009450:	f7ff fb68 	bl	8008b24 <vPortExitCritical>
				return pdPASS;
 8009454:	2001      	movs	r0, #1
}
 8009456:	b004      	add	sp, #16
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff fcda 	bl	8008e16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009462:	f000 fbed 	bl	8009c40 <xTaskResumeAll>
 8009466:	e7d6      	b.n	8009416 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8009468:	4620      	mov	r0, r4
 800946a:	f7ff fcd4 	bl	8008e16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800946e:	f000 fbe7 	bl	8009c40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff fc7a 	bl	8008d6c <prvIsQueueEmpty>
 8009478:	2800      	cmp	r0, #0
 800947a:	d0cc      	beq.n	8009416 <xQueueReceive+0xd6>
 800947c:	e792      	b.n	80093a4 <xQueueReceive+0x64>

0800947e <xQueueSemaphoreTake>:
{
 800947e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009480:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8009482:	4604      	mov	r4, r0
{
 8009484:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009486:	b940      	cbnz	r0, 800949a <xQueueSemaphoreTake+0x1c>
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	e7fe      	b.n	8009498 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800949a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800949c:	b145      	cbz	r5, 80094b0 <xQueueSemaphoreTake+0x32>
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	e7fe      	b.n	80094ae <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094b0:	f000 fdb2 	bl	800a018 <xTaskGetSchedulerState>
 80094b4:	4606      	mov	r6, r0
 80094b6:	b950      	cbnz	r0, 80094ce <xQueueSemaphoreTake+0x50>
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	b15b      	cbz	r3, 80094d4 <xQueueSemaphoreTake+0x56>
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	e7fe      	b.n	80094cc <xQueueSemaphoreTake+0x4e>
 80094ce:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80094d0:	2700      	movs	r7, #0
 80094d2:	e053      	b.n	800957c <xQueueSemaphoreTake+0xfe>
 80094d4:	4605      	mov	r5, r0
 80094d6:	e7fb      	b.n	80094d0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	b963      	cbnz	r3, 80094f6 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80094dc:	b145      	cbz	r5, 80094f0 <xQueueSemaphoreTake+0x72>
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	e7fe      	b.n	80094ee <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 80094f0:	f7ff fb18 	bl	8008b24 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80094f4:	e062      	b.n	80095bc <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80094f6:	b916      	cbnz	r6, 80094fe <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094f8:	a802      	add	r0, sp, #8
 80094fa:	f000 fd3f 	bl	8009f7c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80094fe:	f7ff fb11 	bl	8008b24 <vPortExitCritical>
		vTaskSuspendAll();
 8009502:	f000 faf9 	bl	8009af8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009506:	f7ff faed 	bl	8008ae4 <vPortEnterCritical>
 800950a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800950e:	2bff      	cmp	r3, #255	; 0xff
 8009510:	d101      	bne.n	8009516 <xQueueSemaphoreTake+0x98>
 8009512:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8009516:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800951a:	2bff      	cmp	r3, #255	; 0xff
 800951c:	d101      	bne.n	8009522 <xQueueSemaphoreTake+0xa4>
 800951e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009522:	f7ff faff 	bl	8008b24 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009526:	a901      	add	r1, sp, #4
 8009528:	a802      	add	r0, sp, #8
 800952a:	f000 fd33 	bl	8009f94 <xTaskCheckForTimeOut>
 800952e:	2800      	cmp	r0, #0
 8009530:	d14d      	bne.n	80095ce <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff fc1a 	bl	8008d6c <prvIsQueueEmpty>
 8009538:	2800      	cmp	r0, #0
 800953a:	d042      	beq.n	80095c2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	b93b      	cbnz	r3, 8009550 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8009540:	f7ff fad0 	bl	8008ae4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009544:	68a0      	ldr	r0, [r4, #8]
 8009546:	f000 fd77 	bl	800a038 <xTaskPriorityInherit>
 800954a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800954c:	f7ff faea 	bl	8008b24 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009550:	9901      	ldr	r1, [sp, #4]
 8009552:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009556:	f000 fc95 	bl	8009e84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800955a:	4620      	mov	r0, r4
 800955c:	f7ff fc5b 	bl	8008e16 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009560:	f000 fb6e 	bl	8009c40 <xTaskResumeAll>
 8009564:	b948      	cbnz	r0, 800957a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8009566:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800956a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800957c:	f7ff fab2 	bl	8008ae4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0a8      	beq.n	80094d8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009586:	3b01      	subs	r3, #1
 8009588:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	b913      	cbnz	r3, 8009594 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800958e:	f000 fe29 	bl	800a1e4 <pvTaskIncrementMutexHeldCount>
 8009592:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	b173      	cbz	r3, 80095b6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009598:	f104 0010 	add.w	r0, r4, #16
 800959c:	f000 fcaa 	bl	8009ef4 <xTaskRemoveFromEventList>
 80095a0:	b148      	cbz	r0, 80095b6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80095a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80095a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80095b6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80095b8:	f7ff fab4 	bl	8008b24 <vPortExitCritical>
}
 80095bc:	4628      	mov	r0, r5
 80095be:	b005      	add	sp, #20
 80095c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7ff fc27 	bl	8008e16 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095c8:	f000 fb3a 	bl	8009c40 <xTaskResumeAll>
 80095cc:	e7d5      	b.n	800957a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fc21 	bl	8008e16 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095d4:	f000 fb34 	bl	8009c40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095d8:	4620      	mov	r0, r4
 80095da:	f7ff fbc7 	bl	8008d6c <prvIsQueueEmpty>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d0cb      	beq.n	800957a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 80095e2:	2d00      	cmp	r5, #0
 80095e4:	d0ea      	beq.n	80095bc <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 80095e6:	f7ff fa7d 	bl	8008ae4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80095ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095ec:	b119      	cbz	r1, 80095f6 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80095ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095f0:	6819      	ldr	r1, [r3, #0]
 80095f2:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80095f6:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80095f8:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80095fa:	f000 fda1 	bl	800a140 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80095fe:	f7ff fa91 	bl	8008b24 <vPortExitCritical>
 8009602:	e7db      	b.n	80095bc <xQueueSemaphoreTake+0x13e>

08009604 <xQueueReceiveFromISR>:
{
 8009604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009608:	4689      	mov	r9, r1
 800960a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800960c:	4605      	mov	r5, r0
 800960e:	b940      	cbnz	r0, 8009622 <xQueueReceiveFromISR+0x1e>
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	e7fe      	b.n	8009620 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009622:	b951      	cbnz	r1, 800963a <xQueueReceiveFromISR+0x36>
 8009624:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009626:	b143      	cbz	r3, 800963a <xQueueReceiveFromISR+0x36>
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	e7fe      	b.n	8009638 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800963a:	f7ff fb69 	bl	8008d10 <vPortValidateInterruptPriority>
	__asm volatile
 800963e:	f3ef 8711 	mrs	r7, BASEPRI
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009652:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009654:	b31c      	cbz	r4, 800969e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009656:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800965a:	4649      	mov	r1, r9
 800965c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800965e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8009660:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009662:	f7ff fbc3 	bl	8008dec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009666:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009668:	1c73      	adds	r3, r6, #1
 800966a:	d113      	bne.n	8009694 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800966c:	692b      	ldr	r3, [r5, #16]
 800966e:	b90b      	cbnz	r3, 8009674 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8009670:	2001      	movs	r0, #1
 8009672:	e00b      	b.n	800968c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009674:	f105 0010 	add.w	r0, r5, #16
 8009678:	f000 fc3c 	bl	8009ef4 <xTaskRemoveFromEventList>
 800967c:	2800      	cmp	r0, #0
 800967e:	d0f7      	beq.n	8009670 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8009680:	f1b8 0f00 	cmp.w	r8, #0
 8009684:	d0f4      	beq.n	8009670 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009686:	2001      	movs	r0, #1
 8009688:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800968c:	f387 8811 	msr	BASEPRI, r7
}
 8009690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009694:	3601      	adds	r6, #1
 8009696:	b276      	sxtb	r6, r6
 8009698:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800969c:	e7e8      	b.n	8009670 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800969e:	4620      	mov	r0, r4
 80096a0:	e7f4      	b.n	800968c <xQueueReceiveFromISR+0x88>
	...

080096a4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096a4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096a6:	4a07      	ldr	r2, [pc, #28]	; (80096c4 <vQueueAddToRegistry+0x20>)
	{
 80096a8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80096ae:	b92c      	cbnz	r4, 80096bc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096b8:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096ba:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096bc:	3301      	adds	r3, #1
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d1f3      	bne.n	80096aa <vQueueAddToRegistry+0x6>
 80096c2:	e7fa      	b.n	80096ba <vQueueAddToRegistry+0x16>
 80096c4:	2400a880 	.word	0x2400a880

080096c8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096c8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80096ca:	4a08      	ldr	r2, [pc, #32]	; (80096ec <vQueueUnregisterQueue+0x24>)
	{
 80096cc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80096ce:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80096d2:	684c      	ldr	r4, [r1, #4]
 80096d4:	4284      	cmp	r4, r0
 80096d6:	d104      	bne.n	80096e2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80096d8:	2000      	movs	r0, #0
 80096da:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80096de:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80096e0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096e2:	3301      	adds	r3, #1
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d1f2      	bne.n	80096ce <vQueueUnregisterQueue+0x6>
 80096e8:	e7fa      	b.n	80096e0 <vQueueUnregisterQueue+0x18>
 80096ea:	bf00      	nop
 80096ec:	2400a880 	.word	0x2400a880

080096f0 <vQueueDelete>:
{
 80096f0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80096f2:	4604      	mov	r4, r0
 80096f4:	b940      	cbnz	r0, 8009708 <vQueueDelete+0x18>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	e7fe      	b.n	8009706 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8009708:	f7ff ffde 	bl	80096c8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800970c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009710:	b923      	cbnz	r3, 800971c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8009712:	4620      	mov	r0, r4
}
 8009714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8009718:	f7ff b902 	b.w	8008920 <vPortFree>
}
 800971c:	bd10      	pop	{r4, pc}

0800971e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800971e:	b570      	push	{r4, r5, r6, lr}
 8009720:	4604      	mov	r4, r0
 8009722:	460d      	mov	r5, r1
 8009724:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009726:	f7ff f9dd 	bl	8008ae4 <vPortEnterCritical>
 800972a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800972e:	2bff      	cmp	r3, #255	; 0xff
 8009730:	d102      	bne.n	8009738 <vQueueWaitForMessageRestricted+0x1a>
 8009732:	2300      	movs	r3, #0
 8009734:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009738:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800973c:	2bff      	cmp	r3, #255	; 0xff
 800973e:	d102      	bne.n	8009746 <vQueueWaitForMessageRestricted+0x28>
 8009740:	2300      	movs	r3, #0
 8009742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009746:	f7ff f9ed 	bl	8008b24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800974a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800974c:	b92b      	cbnz	r3, 800975a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800974e:	4632      	mov	r2, r6
 8009750:	4629      	mov	r1, r5
 8009752:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009756:	f000 fbaf 	bl	8009eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800975a:	4620      	mov	r0, r4
	}
 800975c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8009760:	f7ff bb59 	b.w	8008e16 <prvUnlockQueue>

08009764 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009768:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800976a:	f7ff f9bb 	bl	8008ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800976e:	4b2f      	ldr	r3, [pc, #188]	; (800982c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8009770:	4e2f      	ldr	r6, [pc, #188]	; (8009830 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4f2f      	ldr	r7, [pc, #188]	; (8009834 <prvAddNewTaskToReadyList+0xd0>)
 8009776:	3201      	adds	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800977a:	6835      	ldr	r5, [r6, #0]
 800977c:	2d00      	cmp	r5, #0
 800977e:	d14a      	bne.n	8009816 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009780:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d11f      	bne.n	80097c8 <prvAddNewTaskToReadyList+0x64>
 8009788:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800978a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800978c:	4640      	mov	r0, r8
 800978e:	f7ff f905 	bl	800899c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009792:	f108 0814 	add.w	r8, r8, #20
 8009796:	2d38      	cmp	r5, #56	; 0x38
 8009798:	d1f7      	bne.n	800978a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800979a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800985c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800979e:	4d26      	ldr	r5, [pc, #152]	; (8009838 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80097a0:	4640      	mov	r0, r8
 80097a2:	f7ff f8fb 	bl	800899c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7ff f8f8 	bl	800899c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097ac:	4823      	ldr	r0, [pc, #140]	; (800983c <prvAddNewTaskToReadyList+0xd8>)
 80097ae:	f7ff f8f5 	bl	800899c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097b2:	4823      	ldr	r0, [pc, #140]	; (8009840 <prvAddNewTaskToReadyList+0xdc>)
 80097b4:	f7ff f8f2 	bl	800899c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097b8:	4822      	ldr	r0, [pc, #136]	; (8009844 <prvAddNewTaskToReadyList+0xe0>)
 80097ba:	f7ff f8ef 	bl	800899c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097be:	4b22      	ldr	r3, [pc, #136]	; (8009848 <prvAddNewTaskToReadyList+0xe4>)
 80097c0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097c4:	4b21      	ldr	r3, [pc, #132]	; (800984c <prvAddNewTaskToReadyList+0xe8>)
 80097c6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80097c8:	4a21      	ldr	r2, [pc, #132]	; (8009850 <prvAddNewTaskToReadyList+0xec>)
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	3301      	adds	r3, #1
 80097ce:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80097d0:	4a20      	ldr	r2, [pc, #128]	; (8009854 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097d2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80097d4:	6811      	ldr	r1, [r2, #0]
 80097d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80097d8:	428b      	cmp	r3, r1
 80097da:	d900      	bls.n	80097de <prvAddNewTaskToReadyList+0x7a>
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	2014      	movs	r0, #20
 80097e0:	1d21      	adds	r1, r4, #4
 80097e2:	fb00 7003 	mla	r0, r0, r3, r7
 80097e6:	f7ff f8e7 	bl	80089b8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80097ea:	f7ff f99b 	bl	8008b24 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80097ee:	4b1a      	ldr	r3, [pc, #104]	; (8009858 <prvAddNewTaskToReadyList+0xf4>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	b173      	cbz	r3, 8009812 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097f4:	6833      	ldr	r3, [r6, #0]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d209      	bcs.n	8009812 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80097fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	f3bf 8f6f 	isb	sy
}
 8009812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009816:	4b10      	ldr	r3, [pc, #64]	; (8009858 <prvAddNewTaskToReadyList+0xf4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1d4      	bne.n	80097c8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800981e:	6833      	ldr	r3, [r6, #0]
 8009820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009822:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009824:	429a      	cmp	r2, r3
 8009826:	d8cf      	bhi.n	80097c8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009828:	6034      	str	r4, [r6, #0]
 800982a:	e7cd      	b.n	80097c8 <prvAddNewTaskToReadyList+0x64>
 800982c:	2400ad2c 	.word	0x2400ad2c
 8009830:	2400a8c0 	.word	0x2400a8c0
 8009834:	2400a8cc 	.word	0x2400a8cc
 8009838:	2400ad54 	.word	0x2400ad54
 800983c:	2400ad74 	.word	0x2400ad74
 8009840:	2400ada0 	.word	0x2400ada0
 8009844:	2400ad8c 	.word	0x2400ad8c
 8009848:	2400a8c4 	.word	0x2400a8c4
 800984c:	2400a8c8 	.word	0x2400a8c8
 8009850:	2400ad38 	.word	0x2400ad38
 8009854:	2400ad3c 	.word	0x2400ad3c
 8009858:	2400ad88 	.word	0x2400ad88
 800985c:	2400ad40 	.word	0x2400ad40

08009860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8009864:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009866:	4e15      	ldr	r6, [pc, #84]	; (80098bc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8009868:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800986a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800986c:	6830      	ldr	r0, [r6, #0]
 800986e:	3004      	adds	r0, #4
 8009870:	f7ff f8c5 	bl	80089fe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009874:	1c63      	adds	r3, r4, #1
 8009876:	d107      	bne.n	8009888 <prvAddCurrentTaskToDelayedList+0x28>
 8009878:	b137      	cbz	r7, 8009888 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800987a:	6831      	ldr	r1, [r6, #0]
 800987c:	4810      	ldr	r0, [pc, #64]	; (80098c0 <prvAddCurrentTaskToDelayedList+0x60>)
 800987e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009880:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009884:	f7ff b898 	b.w	80089b8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009888:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800988a:	6833      	ldr	r3, [r6, #0]
 800988c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800988e:	d307      	bcc.n	80098a0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009890:	4b0c      	ldr	r3, [pc, #48]	; (80098c4 <prvAddCurrentTaskToDelayedList+0x64>)
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	6831      	ldr	r1, [r6, #0]
}
 8009896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800989a:	3104      	adds	r1, #4
 800989c:	f7ff b898 	b.w	80089d0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098a0:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <prvAddCurrentTaskToDelayedList+0x68>)
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	6831      	ldr	r1, [r6, #0]
 80098a6:	3104      	adds	r1, #4
 80098a8:	f7ff f892 	bl	80089d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <prvAddCurrentTaskToDelayedList+0x6c>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	42a2      	cmp	r2, r4
 80098b2:	d900      	bls.n	80098b6 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80098b4:	601c      	str	r4, [r3, #0]
}
 80098b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b8:	2400adb4 	.word	0x2400adb4
 80098bc:	2400a8c0 	.word	0x2400a8c0
 80098c0:	2400ad8c 	.word	0x2400ad8c
 80098c4:	2400a8c8 	.word	0x2400a8c8
 80098c8:	2400a8c4 	.word	0x2400a8c4
 80098cc:	2400ad68 	.word	0x2400ad68

080098d0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098d0:	4a06      	ldr	r2, [pc, #24]	; (80098ec <prvResetNextTaskUnblockTime+0x1c>)
 80098d2:	6813      	ldr	r3, [r2, #0]
 80098d4:	6819      	ldr	r1, [r3, #0]
 80098d6:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <prvResetNextTaskUnblockTime+0x20>)
 80098d8:	b919      	cbnz	r1, 80098e2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80098da:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098de:	601a      	str	r2, [r3, #0]
}
 80098e0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e2:	6812      	ldr	r2, [r2, #0]
 80098e4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098e6:	68d2      	ldr	r2, [r2, #12]
 80098e8:	6852      	ldr	r2, [r2, #4]
 80098ea:	e7f8      	b.n	80098de <prvResetNextTaskUnblockTime+0xe>
 80098ec:	2400a8c4 	.word	0x2400a8c4
 80098f0:	2400ad68 	.word	0x2400ad68

080098f4 <prvDeleteTCB>:
	{
 80098f4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098f6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 80098fa:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098fc:	b93b      	cbnz	r3, 800990e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80098fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009900:	f7ff f80e 	bl	8008920 <vPortFree>
				vPortFree( pxTCB );
 8009904:	4620      	mov	r0, r4
	}
 8009906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800990a:	f7ff b809 	b.w	8008920 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800990e:	2b01      	cmp	r3, #1
 8009910:	d0f9      	beq.n	8009906 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009912:	2b02      	cmp	r3, #2
 8009914:	d008      	beq.n	8009928 <prvDeleteTCB+0x34>
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	e7fe      	b.n	8009926 <prvDeleteTCB+0x32>
	}
 8009928:	bd10      	pop	{r4, pc}
	...

0800992c <prvIdleTask>:
{
 800992c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800992e:	4c14      	ldr	r4, [pc, #80]	; (8009980 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009930:	4f14      	ldr	r7, [pc, #80]	; (8009984 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8009932:	4d15      	ldr	r5, [pc, #84]	; (8009988 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	b983      	cbnz	r3, 800995a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009938:	4b14      	ldr	r3, [pc, #80]	; (800998c <prvIdleTask+0x60>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d909      	bls.n	8009954 <prvIdleTask+0x28>
				taskYIELD();
 8009940:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009948:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009954:	f7f6 fd14 	bl	8000380 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009958:	e7eb      	b.n	8009932 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800995a:	f7ff f8c3 	bl	8008ae4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009962:	1d30      	adds	r0, r6, #4
 8009964:	f7ff f84b 	bl	80089fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	3b01      	subs	r3, #1
 800996c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009974:	f7ff f8d6 	bl	8008b24 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009978:	4630      	mov	r0, r6
 800997a:	f7ff ffbb 	bl	80098f4 <prvDeleteTCB>
 800997e:	e7d9      	b.n	8009934 <prvIdleTask+0x8>
 8009980:	2400ad30 	.word	0x2400ad30
 8009984:	2400ada0 	.word	0x2400ada0
 8009988:	2400ad2c 	.word	0x2400ad2c
 800998c:	2400a8cc 	.word	0x2400a8cc

08009990 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009994:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009998:	4606      	mov	r6, r0
 800999a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800999c:	21a5      	movs	r1, #165	; 0xa5
 800999e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80099a0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099a2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80099a6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80099ac:	f00f fc52 	bl	8019254 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80099b2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099b4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80099b8:	b3b5      	cbz	r5, 8009a28 <prvInitialiseNewTask.constprop.0+0x98>
 80099ba:	1e6b      	subs	r3, r5, #1
 80099bc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80099c0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099c2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80099c6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80099ca:	b108      	cbz	r0, 80099d0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099cc:	42ab      	cmp	r3, r5
 80099ce:	d1f8      	bne.n	80099c2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099d0:	2300      	movs	r3, #0
 80099d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099d6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80099d8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099dc:	1d20      	adds	r0, r4, #4
 80099de:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80099e0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 80099e4:	bf28      	it	cs
 80099e6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80099e8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80099ea:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099f0:	f7fe ffdf 	bl	80089b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099f4:	f104 0018 	add.w	r0, r4, #24
 80099f8:	f7fe ffdb 	bl	80089b2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80099fc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a00:	463a      	mov	r2, r7
 8009a02:	4631      	mov	r1, r6
 8009a04:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a06:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a08:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a0a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8009a0c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a10:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a14:	f7ff f842 	bl	8008a9c <pxPortInitialiseStack>
 8009a18:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009a1a:	f1b8 0f00 	cmp.w	r8, #0
 8009a1e:	d001      	beq.n	8009a24 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a20:	f8c8 4000 	str.w	r4, [r8]
}
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8009a2c:	e7d3      	b.n	80099d6 <prvInitialiseNewTask.constprop.0+0x46>

08009a2e <xTaskCreateStatic>:
	{
 8009a2e:	b570      	push	{r4, r5, r6, lr}
 8009a30:	b086      	sub	sp, #24
 8009a32:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009a36:	b945      	cbnz	r5, 8009a4a <xTaskCreateStatic+0x1c>
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	e7fe      	b.n	8009a48 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8009a4a:	b944      	cbnz	r4, 8009a5e <xTaskCreateStatic+0x30>
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	e7fe      	b.n	8009a5c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a5e:	2660      	movs	r6, #96	; 0x60
 8009a60:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a62:	9e05      	ldr	r6, [sp, #20]
 8009a64:	2e60      	cmp	r6, #96	; 0x60
 8009a66:	d008      	beq.n	8009a7a <xTaskCreateStatic+0x4c>
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	e7fe      	b.n	8009a78 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a7a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a7c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a7e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a80:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a84:	ad04      	add	r5, sp, #16
 8009a86:	9402      	str	r4, [sp, #8]
 8009a88:	9501      	str	r5, [sp, #4]
 8009a8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009a8c:	9500      	str	r5, [sp, #0]
 8009a8e:	f7ff ff7f 	bl	8009990 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff fe66 	bl	8009764 <prvAddNewTaskToReadyList>
	}
 8009a98:	9804      	ldr	r0, [sp, #16]
 8009a9a:	b006      	add	sp, #24
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}

08009a9e <xTaskCreate>:
	{
 8009a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aa2:	4607      	mov	r7, r0
 8009aa4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009aa6:	0090      	lsls	r0, r2, #2
	{
 8009aa8:	4688      	mov	r8, r1
 8009aaa:	4616      	mov	r6, r2
 8009aac:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009aae:	f7fe fe9f 	bl	80087f0 <pvPortMalloc>
			if( pxStack != NULL )
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	b1e8      	cbz	r0, 8009af2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ab6:	2060      	movs	r0, #96	; 0x60
 8009ab8:	f7fe fe9a 	bl	80087f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009abc:	4604      	mov	r4, r0
 8009abe:	b1a8      	cbz	r0, 8009aec <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac0:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8009ac2:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ac8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009acc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ace:	9002      	str	r0, [sp, #8]
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	9301      	str	r3, [sp, #4]
 8009ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	464b      	mov	r3, r9
 8009ada:	f7ff ff59 	bl	8009990 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f7ff fe40 	bl	8009764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ae4:	2001      	movs	r0, #1
	}
 8009ae6:	b005      	add	sp, #20
 8009ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009aec:	4628      	mov	r0, r5
 8009aee:	f7fe ff17 	bl	8008920 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009af2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009af6:	e7f6      	b.n	8009ae6 <xTaskCreate+0x48>

08009af8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009af8:	4a02      	ldr	r2, [pc, #8]	; (8009b04 <vTaskSuspendAll+0xc>)
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	6013      	str	r3, [r2, #0]
}
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	2400ad34 	.word	0x2400ad34

08009b08 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009b08:	4b01      	ldr	r3, [pc, #4]	; (8009b10 <xTaskGetTickCount+0x8>)
 8009b0a:	6818      	ldr	r0, [r3, #0]
}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2400adb4 	.word	0x2400adb4

08009b14 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b14:	4b3f      	ldr	r3, [pc, #252]	; (8009c14 <xTaskIncrementTick+0x100>)
 8009b16:	681b      	ldr	r3, [r3, #0]
{
 8009b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d172      	bne.n	8009c06 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b20:	4b3d      	ldr	r3, [pc, #244]	; (8009c18 <xTaskIncrementTick+0x104>)
 8009b22:	681d      	ldr	r5, [r3, #0]
 8009b24:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009b26:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b28:	b9bd      	cbnz	r5, 8009b5a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009b2a:	4b3c      	ldr	r3, [pc, #240]	; (8009c1c <xTaskIncrementTick+0x108>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	6812      	ldr	r2, [r2, #0]
 8009b30:	b142      	cbz	r2, 8009b44 <xTaskIncrementTick+0x30>
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	e7fe      	b.n	8009b42 <xTaskIncrementTick+0x2e>
 8009b44:	4a36      	ldr	r2, [pc, #216]	; (8009c20 <xTaskIncrementTick+0x10c>)
 8009b46:	6819      	ldr	r1, [r3, #0]
 8009b48:	6810      	ldr	r0, [r2, #0]
 8009b4a:	6018      	str	r0, [r3, #0]
 8009b4c:	6011      	str	r1, [r2, #0]
 8009b4e:	4a35      	ldr	r2, [pc, #212]	; (8009c24 <xTaskIncrementTick+0x110>)
 8009b50:	6813      	ldr	r3, [r2, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	f7ff febb 	bl	80098d0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b5a:	4e33      	ldr	r6, [pc, #204]	; (8009c28 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8009b5c:	2400      	movs	r4, #0
 8009b5e:	4f33      	ldr	r7, [pc, #204]	; (8009c2c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b60:	6833      	ldr	r3, [r6, #0]
 8009b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009c38 <xTaskIncrementTick+0x124>
 8009b66:	429d      	cmp	r5, r3
 8009b68:	d211      	bcs.n	8009b8e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b6e:	2214      	movs	r2, #20
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	4353      	muls	r3, r2
 8009b74:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8009b76:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8009b78:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <xTaskIncrementTick+0x11c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8009b7c:	bf28      	it	cs
 8009b7e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	bf18      	it	ne
 8009b84:	2401      	movne	r4, #1
}
 8009b86:	4620      	mov	r0, r4
 8009b88:	b003      	add	sp, #12
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009c1c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8009b92:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8009c3c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b96:	f8d9 3000 	ldr.w	r3, [r9]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	b91b      	cbnz	r3, 8009ba6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	6033      	str	r3, [r6, #0]
					break;
 8009ba4:	e7e1      	b.n	8009b6a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba6:	f8d9 3000 	ldr.w	r3, [r9]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bb0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8009bb4:	4295      	cmp	r5, r2
 8009bb6:	d201      	bcs.n	8009bbc <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8009bb8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bba:	e7d6      	b.n	8009b6a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bbc:	f10b 0104 	add.w	r1, fp, #4
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	9101      	str	r1, [sp, #4]
 8009bc4:	f7fe ff1b 	bl	80089fe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bc8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8009bcc:	9901      	ldr	r1, [sp, #4]
 8009bce:	b122      	cbz	r2, 8009bda <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bd0:	f10b 0018 	add.w	r0, fp, #24
 8009bd4:	f7fe ff13 	bl	80089fe <uxListRemove>
 8009bd8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8009bda:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8009bde:	f8da 2000 	ldr.w	r2, [sl]
 8009be2:	4290      	cmp	r0, r2
 8009be4:	d901      	bls.n	8009bea <xTaskIncrementTick+0xd6>
 8009be6:	f8ca 0000 	str.w	r0, [sl]
 8009bea:	2314      	movs	r3, #20
 8009bec:	fb03 7000 	mla	r0, r3, r0, r7
 8009bf0:	f7fe fee2 	bl	80089b8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bf4:	f8d8 1000 	ldr.w	r1, [r8]
 8009bf8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8009bfc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	bf28      	it	cs
 8009c02:	2401      	movcs	r4, #1
 8009c04:	e7c7      	b.n	8009b96 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8009c06:	4a0b      	ldr	r2, [pc, #44]	; (8009c34 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8009c08:	2400      	movs	r4, #0
		++xPendedTicks;
 8009c0a:	6813      	ldr	r3, [r2, #0]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8009c10:	e7b9      	b.n	8009b86 <xTaskIncrementTick+0x72>
 8009c12:	bf00      	nop
 8009c14:	2400ad34 	.word	0x2400ad34
 8009c18:	2400adb4 	.word	0x2400adb4
 8009c1c:	2400a8c4 	.word	0x2400a8c4
 8009c20:	2400a8c8 	.word	0x2400a8c8
 8009c24:	2400ad6c 	.word	0x2400ad6c
 8009c28:	2400ad68 	.word	0x2400ad68
 8009c2c:	2400a8cc 	.word	0x2400a8cc
 8009c30:	2400adb8 	.word	0x2400adb8
 8009c34:	2400ad70 	.word	0x2400ad70
 8009c38:	2400a8c0 	.word	0x2400a8c0
 8009c3c:	2400ad3c 	.word	0x2400ad3c

08009c40 <xTaskResumeAll>:
{
 8009c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8009c42:	4c31      	ldr	r4, [pc, #196]	; (8009d08 <xTaskResumeAll+0xc8>)
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	b943      	cbnz	r3, 8009c5a <xTaskResumeAll+0x1a>
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	e7fe      	b.n	8009c58 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009c5a:	f7fe ff43 	bl	8008ae4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c64:	6824      	ldr	r4, [r4, #0]
 8009c66:	b12c      	cbz	r4, 8009c74 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009c68:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009c6a:	f7fe ff5b 	bl	8008b24 <vPortExitCritical>
}
 8009c6e:	4620      	mov	r0, r4
 8009c70:	b003      	add	sp, #12
 8009c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c74:	4b25      	ldr	r3, [pc, #148]	; (8009d0c <xTaskResumeAll+0xcc>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f5      	beq.n	8009c68 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c7c:	4d24      	ldr	r5, [pc, #144]	; (8009d10 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8009c7e:	4e25      	ldr	r6, [pc, #148]	; (8009d14 <xTaskResumeAll+0xd4>)
 8009c80:	4f25      	ldr	r7, [pc, #148]	; (8009d18 <xTaskResumeAll+0xd8>)
 8009c82:	e01e      	b.n	8009cc2 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c84:	68eb      	ldr	r3, [r5, #12]
 8009c86:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c88:	f104 0018 	add.w	r0, r4, #24
 8009c8c:	f7fe feb7 	bl	80089fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c90:	1d21      	adds	r1, r4, #4
 8009c92:	4608      	mov	r0, r1
 8009c94:	9101      	str	r1, [sp, #4]
 8009c96:	f7fe feb2 	bl	80089fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c9c:	6832      	ldr	r2, [r6, #0]
 8009c9e:	9901      	ldr	r1, [sp, #4]
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d900      	bls.n	8009ca6 <xTaskResumeAll+0x66>
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	2014      	movs	r0, #20
 8009ca8:	fb00 7003 	mla	r0, r0, r3, r7
 8009cac:	f7fe fe84 	bl	80089b8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <xTaskResumeAll+0xdc>)
 8009cb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d302      	bcc.n	8009cc2 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 8009cbc:	4b18      	ldr	r3, [pc, #96]	; (8009d20 <xTaskResumeAll+0xe0>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1dd      	bne.n	8009c84 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8009cc8:	b10c      	cbz	r4, 8009cce <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8009cca:	f7ff fe01 	bl	80098d0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009cce:	4d15      	ldr	r5, [pc, #84]	; (8009d24 <xTaskResumeAll+0xe4>)
 8009cd0:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009cd2:	b144      	cbz	r4, 8009ce6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8009cd4:	4e12      	ldr	r6, [pc, #72]	; (8009d20 <xTaskResumeAll+0xe0>)
 8009cd6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009cd8:	f7ff ff1c 	bl	8009b14 <xTaskIncrementTick>
 8009cdc:	b100      	cbz	r0, 8009ce0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8009cde:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ce0:	3c01      	subs	r4, #1
 8009ce2:	d1f9      	bne.n	8009cd8 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8009ce4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009ce6:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <xTaskResumeAll+0xe0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0bc      	beq.n	8009c68 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 8009cee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009d02:	2401      	movs	r4, #1
 8009d04:	e7b1      	b.n	8009c6a <xTaskResumeAll+0x2a>
 8009d06:	bf00      	nop
 8009d08:	2400ad34 	.word	0x2400ad34
 8009d0c:	2400ad2c 	.word	0x2400ad2c
 8009d10:	2400ad74 	.word	0x2400ad74
 8009d14:	2400ad3c 	.word	0x2400ad3c
 8009d18:	2400a8cc 	.word	0x2400a8cc
 8009d1c:	2400a8c0 	.word	0x2400a8c0
 8009d20:	2400adb8 	.word	0x2400adb8
 8009d24:	2400ad70 	.word	0x2400ad70

08009d28 <vTaskSetApplicationTaskTag>:
	{
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	460d      	mov	r5, r1
		if( xTask == NULL )
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	b908      	cbnz	r0, 8009d34 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <vTaskSetApplicationTaskTag+0x1c>)
 8009d32:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8009d34:	f7fe fed6 	bl	8008ae4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8009d38:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8009d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8009d3e:	f7fe bef1 	b.w	8008b24 <vPortExitCritical>
 8009d42:	bf00      	nop
 8009d44:	2400a8c0 	.word	0x2400a8c0

08009d48 <xTaskCallApplicationTaskHook>:
	{
 8009d48:	4603      	mov	r3, r0
 8009d4a:	4608      	mov	r0, r1
		if( xTask == NULL )
 8009d4c:	b90b      	cbnz	r3, 8009d52 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8009d4e:	4b03      	ldr	r3, [pc, #12]	; (8009d5c <xTaskCallApplicationTaskHook+0x14>)
 8009d50:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8009d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d54:	b103      	cbz	r3, 8009d58 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8009d56:	4718      	bx	r3
	}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	4770      	bx	lr
 8009d5c:	2400a8c0 	.word	0x2400a8c0

08009d60 <vTaskStartScheduler>:
{
 8009d60:	b510      	push	{r4, lr}
 8009d62:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d64:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d66:	aa07      	add	r2, sp, #28
 8009d68:	a906      	add	r1, sp, #24
 8009d6a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d6c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d70:	f7fe fd02 	bl	8008778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d74:	9b05      	ldr	r3, [sp, #20]
 8009d76:	9a07      	ldr	r2, [sp, #28]
 8009d78:	9302      	str	r3, [sp, #8]
 8009d7a:	9b06      	ldr	r3, [sp, #24]
 8009d7c:	4919      	ldr	r1, [pc, #100]	; (8009de4 <vTaskStartScheduler+0x84>)
 8009d7e:	481a      	ldr	r0, [pc, #104]	; (8009de8 <vTaskStartScheduler+0x88>)
 8009d80:	e9cd 4300 	strd	r4, r3, [sp]
 8009d84:	4623      	mov	r3, r4
 8009d86:	f7ff fe52 	bl	8009a2e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8009d8a:	b340      	cbz	r0, 8009dde <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8009d8c:	f000 fa88 	bl	800a2a0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009d90:	2801      	cmp	r0, #1
 8009d92:	d119      	bne.n	8009dc8 <vTaskStartScheduler+0x68>
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009da4:	f04f 32ff 	mov.w	r2, #4294967295
 8009da8:	4b10      	ldr	r3, [pc, #64]	; (8009dec <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 8009daa:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009dae:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <vTaskStartScheduler+0x90>)
 8009db0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009db2:	4b10      	ldr	r3, [pc, #64]	; (8009df4 <vTaskStartScheduler+0x94>)
 8009db4:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8009db6:	4b10      	ldr	r3, [pc, #64]	; (8009df8 <vTaskStartScheduler+0x98>)
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f7ff ffc5 	bl	8009d48 <xTaskCallApplicationTaskHook>
}
 8009dbe:	b008      	add	sp, #32
 8009dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009dc4:	f7fe bf1e 	b.w	8008c04 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d108      	bne.n	8009dde <vTaskStartScheduler+0x7e>
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	e7fe      	b.n	8009ddc <vTaskStartScheduler+0x7c>
}
 8009dde:	b008      	add	sp, #32
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	bf00      	nop
 8009de4:	0801b234 	.word	0x0801b234
 8009de8:	0800992d 	.word	0x0800992d
 8009dec:	2400ad68 	.word	0x2400ad68
 8009df0:	2400ad88 	.word	0x2400ad88
 8009df4:	2400adb4 	.word	0x2400adb4
 8009df8:	2400a8c0 	.word	0x2400a8c0

08009dfc <vTaskSwitchContext>:
{
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dfe:	4b1c      	ldr	r3, [pc, #112]	; (8009e70 <vTaskSwitchContext+0x74>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	4b1c      	ldr	r3, [pc, #112]	; (8009e74 <vTaskSwitchContext+0x78>)
 8009e04:	b112      	cbz	r2, 8009e0c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009e06:	2201      	movs	r2, #1
 8009e08:	601a      	str	r2, [r3, #0]
}
 8009e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8009e0c:	4c1a      	ldr	r4, [pc, #104]	; (8009e78 <vTaskSwitchContext+0x7c>)
 8009e0e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e10:	4e1a      	ldr	r6, [pc, #104]	; (8009e7c <vTaskSwitchContext+0x80>)
 8009e12:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8009e14:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8009e16:	6820      	ldr	r0, [r4, #0]
 8009e18:	f7ff ff96 	bl	8009d48 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1c:	6832      	ldr	r2, [r6, #0]
 8009e1e:	4918      	ldr	r1, [pc, #96]	; (8009e80 <vTaskSwitchContext+0x84>)
 8009e20:	fb07 f302 	mul.w	r3, r7, r2
 8009e24:	58cd      	ldr	r5, [r1, r3]
 8009e26:	18c8      	adds	r0, r1, r3
 8009e28:	b1ad      	cbz	r5, 8009e56 <vTaskSwitchContext+0x5a>
 8009e2a:	6845      	ldr	r5, [r0, #4]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	686d      	ldr	r5, [r5, #4]
 8009e30:	440b      	add	r3, r1
 8009e32:	429d      	cmp	r5, r3
 8009e34:	6045      	str	r5, [r0, #4]
 8009e36:	bf04      	itt	eq
 8009e38:	686b      	ldreq	r3, [r5, #4]
 8009e3a:	6043      	streq	r3, [r0, #4]
 8009e3c:	2314      	movs	r3, #20
 8009e3e:	fb03 1102 	mla	r1, r3, r2, r1
 8009e42:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8009e44:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8009e4c:	6820      	ldr	r0, [r4, #0]
}
 8009e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8009e52:	f7ff bf79 	b.w	8009d48 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e56:	b942      	cbnz	r2, 8009e6a <vTaskSwitchContext+0x6e>
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	e7fe      	b.n	8009e68 <vTaskSwitchContext+0x6c>
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	e7d8      	b.n	8009e20 <vTaskSwitchContext+0x24>
 8009e6e:	bf00      	nop
 8009e70:	2400ad34 	.word	0x2400ad34
 8009e74:	2400adb8 	.word	0x2400adb8
 8009e78:	2400a8c0 	.word	0x2400a8c0
 8009e7c:	2400ad3c 	.word	0x2400ad3c
 8009e80:	2400a8cc 	.word	0x2400a8cc

08009e84 <vTaskPlaceOnEventList>:
{
 8009e84:	b510      	push	{r4, lr}
 8009e86:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009e88:	b940      	cbnz	r0, 8009e9c <vTaskPlaceOnEventList+0x18>
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	e7fe      	b.n	8009e9a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e9c:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <vTaskPlaceOnEventList+0x30>)
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	3118      	adds	r1, #24
 8009ea2:	f7fe fd95 	bl	80089d0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	2101      	movs	r1, #1
}
 8009eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009eae:	f7ff bcd7 	b.w	8009860 <prvAddCurrentTaskToDelayedList>
 8009eb2:	bf00      	nop
 8009eb4:	2400a8c0 	.word	0x2400a8c0

08009eb8 <vTaskPlaceOnEventListRestricted>:
	{
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	460d      	mov	r5, r1
 8009ebc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8009ebe:	b940      	cbnz	r0, 8009ed2 <vTaskPlaceOnEventListRestricted+0x1a>
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	e7fe      	b.n	8009ed0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ed2:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <vTaskPlaceOnEventListRestricted+0x38>)
 8009ed4:	6819      	ldr	r1, [r3, #0]
 8009ed6:	3118      	adds	r1, #24
 8009ed8:	f7fe fd6e 	bl	80089b8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009edc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ede:	4621      	mov	r1, r4
 8009ee0:	bf0c      	ite	eq
 8009ee2:	4628      	moveq	r0, r5
 8009ee4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8009ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eec:	f7ff bcb8 	b.w	8009860 <prvAddCurrentTaskToDelayedList>
 8009ef0:	2400a8c0 	.word	0x2400a8c0

08009ef4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef4:	68c3      	ldr	r3, [r0, #12]
{
 8009ef6:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009efa:	b944      	cbnz	r4, 8009f0e <xTaskRemoveFromEventList+0x1a>
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	e7fe      	b.n	8009f0c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f0e:	f104 0118 	add.w	r1, r4, #24
 8009f12:	4608      	mov	r0, r1
 8009f14:	9101      	str	r1, [sp, #4]
 8009f16:	f7fe fd72 	bl	80089fe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f1a:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <xTaskRemoveFromEventList+0x70>)
 8009f1c:	9901      	ldr	r1, [sp, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	b9e3      	cbnz	r3, 8009f5c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f22:	1d21      	adds	r1, r4, #4
 8009f24:	4608      	mov	r0, r1
 8009f26:	9101      	str	r1, [sp, #4]
 8009f28:	f7fe fd69 	bl	80089fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f2c:	4a0e      	ldr	r2, [pc, #56]	; (8009f68 <xTaskRemoveFromEventList+0x74>)
 8009f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009f30:	6810      	ldr	r0, [r2, #0]
 8009f32:	9901      	ldr	r1, [sp, #4]
 8009f34:	4283      	cmp	r3, r0
 8009f36:	d900      	bls.n	8009f3a <xTaskRemoveFromEventList+0x46>
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	4a0c      	ldr	r2, [pc, #48]	; (8009f6c <xTaskRemoveFromEventList+0x78>)
 8009f3c:	2014      	movs	r0, #20
 8009f3e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f42:	f7fe fd39 	bl	80089b8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <xTaskRemoveFromEventList+0x7c>)
 8009f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d906      	bls.n	8009f60 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8009f52:	2001      	movs	r0, #1
 8009f54:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <xTaskRemoveFromEventList+0x80>)
 8009f56:	6018      	str	r0, [r3, #0]
}
 8009f58:	b002      	add	sp, #8
 8009f5a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f5c:	4806      	ldr	r0, [pc, #24]	; (8009f78 <xTaskRemoveFromEventList+0x84>)
 8009f5e:	e7f0      	b.n	8009f42 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8009f60:	2000      	movs	r0, #0
	return xReturn;
 8009f62:	e7f9      	b.n	8009f58 <xTaskRemoveFromEventList+0x64>
 8009f64:	2400ad34 	.word	0x2400ad34
 8009f68:	2400ad3c 	.word	0x2400ad3c
 8009f6c:	2400a8cc 	.word	0x2400a8cc
 8009f70:	2400a8c0 	.word	0x2400a8c0
 8009f74:	2400adb8 	.word	0x2400adb8
 8009f78:	2400ad74 	.word	0x2400ad74

08009f7c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f7c:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <vTaskInternalSetTimeOutState+0x10>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f82:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <vTaskInternalSetTimeOutState+0x14>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6043      	str	r3, [r0, #4]
}
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	2400ad6c 	.word	0x2400ad6c
 8009f90:	2400adb4 	.word	0x2400adb4

08009f94 <xTaskCheckForTimeOut>:
{
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009f98:	4605      	mov	r5, r0
 8009f9a:	b940      	cbnz	r0, 8009fae <xTaskCheckForTimeOut+0x1a>
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	e7fe      	b.n	8009fac <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009fae:	b941      	cbnz	r1, 8009fc2 <xTaskCheckForTimeOut+0x2e>
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	e7fe      	b.n	8009fc0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009fc2:	f7fe fd8f 	bl	8008ae4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <xTaskCheckForTimeOut+0x70>)
 8009fc8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	d010      	beq.n	8009ff2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fd0:	480d      	ldr	r0, [pc, #52]	; (800a008 <xTaskCheckForTimeOut+0x74>)
 8009fd2:	682e      	ldr	r6, [r5, #0]
 8009fd4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fd6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fd8:	4286      	cmp	r6, r0
 8009fda:	d001      	beq.n	8009fe0 <xTaskCheckForTimeOut+0x4c>
 8009fdc:	428a      	cmp	r2, r1
 8009fde:	d90f      	bls.n	800a000 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fe0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fe2:	4283      	cmp	r3, r0
 8009fe4:	d90a      	bls.n	8009ffc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009fe6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fe8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8009fea:	4413      	add	r3, r2
 8009fec:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fee:	f7ff ffc5 	bl	8009f7c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009ff2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009ff4:	f7fe fd96 	bl	8008b24 <vPortExitCritical>
}
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a000:	2401      	movs	r4, #1
 800a002:	e7f7      	b.n	8009ff4 <xTaskCheckForTimeOut+0x60>
 800a004:	2400adb4 	.word	0x2400adb4
 800a008:	2400ad6c 	.word	0x2400ad6c

0800a00c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a00c:	4b01      	ldr	r3, [pc, #4]	; (800a014 <vTaskMissedYield+0x8>)
 800a00e:	2201      	movs	r2, #1
 800a010:	601a      	str	r2, [r3, #0]
}
 800a012:	4770      	bx	lr
 800a014:	2400adb8 	.word	0x2400adb8

0800a018 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a018:	4b05      	ldr	r3, [pc, #20]	; (800a030 <xTaskGetSchedulerState+0x18>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	b133      	cbz	r3, 800a02c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <xTaskGetSchedulerState+0x1c>)
 800a020:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800a022:	2b00      	cmp	r3, #0
 800a024:	bf0c      	ite	eq
 800a026:	2002      	moveq	r0, #2
 800a028:	2000      	movne	r0, #0
 800a02a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a02c:	2001      	movs	r0, #1
	}
 800a02e:	4770      	bx	lr
 800a030:	2400ad88 	.word	0x2400ad88
 800a034:	2400ad34 	.word	0x2400ad34

0800a038 <xTaskPriorityInherit>:
	{
 800a038:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800a03a:	4604      	mov	r4, r0
 800a03c:	b340      	cbz	r0, 800a090 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a03e:	4d1b      	ldr	r5, [pc, #108]	; (800a0ac <xTaskPriorityInherit+0x74>)
 800a040:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a042:	682a      	ldr	r2, [r5, #0]
 800a044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a046:	4293      	cmp	r3, r2
 800a048:	d228      	bcs.n	800a09c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a04a:	6982      	ldr	r2, [r0, #24]
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	db04      	blt.n	800a05a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a050:	682a      	ldr	r2, [r5, #0]
 800a052:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a054:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a058:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a05a:	2214      	movs	r2, #20
 800a05c:	4e14      	ldr	r6, [pc, #80]	; (800a0b0 <xTaskPriorityInherit+0x78>)
 800a05e:	fb02 6303 	mla	r3, r2, r3, r6
 800a062:	6962      	ldr	r2, [r4, #20]
 800a064:	429a      	cmp	r2, r3
 800a066:	d115      	bne.n	800a094 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a068:	1d21      	adds	r1, r4, #4
 800a06a:	4608      	mov	r0, r1
 800a06c:	9101      	str	r1, [sp, #4]
 800a06e:	f7fe fcc6 	bl	80089fe <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a072:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a074:	4a0f      	ldr	r2, [pc, #60]	; (800a0b4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a078:	6810      	ldr	r0, [r2, #0]
 800a07a:	9901      	ldr	r1, [sp, #4]
 800a07c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a07e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a080:	d900      	bls.n	800a084 <xTaskPriorityInherit+0x4c>
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	2014      	movs	r0, #20
 800a086:	fb00 6003 	mla	r0, r0, r3, r6
 800a08a:	f7fe fc95 	bl	80089b8 <vListInsertEnd>
				xReturn = pdTRUE;
 800a08e:	2001      	movs	r0, #1
	}
 800a090:	b002      	add	sp, #8
 800a092:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a09a:	e7f8      	b.n	800a08e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a0a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800a0a2:	42a0      	cmp	r0, r4
 800a0a4:	bf2c      	ite	cs
 800a0a6:	2000      	movcs	r0, #0
 800a0a8:	2001      	movcc	r0, #1
 800a0aa:	e7f1      	b.n	800a090 <xTaskPriorityInherit+0x58>
 800a0ac:	2400a8c0 	.word	0x2400a8c0
 800a0b0:	2400a8cc 	.word	0x2400a8cc
 800a0b4:	2400ad3c 	.word	0x2400ad3c

0800a0b8 <xTaskPriorityDisinherit>:
	{
 800a0b8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800a0ba:	b910      	cbnz	r0, 800a0c2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800a0bc:	2000      	movs	r0, #0
	}
 800a0be:	b002      	add	sp, #8
 800a0c0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <xTaskPriorityDisinherit+0x7c>)
 800a0c4:	681c      	ldr	r4, [r3, #0]
 800a0c6:	4284      	cmp	r4, r0
 800a0c8:	d008      	beq.n	800a0dc <xTaskPriorityDisinherit+0x24>
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	e7fe      	b.n	800a0da <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a0de:	b943      	cbnz	r3, 800a0f2 <xTaskPriorityDisinherit+0x3a>
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	e7fe      	b.n	800a0f0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800a0f4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800a0f8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0fa:	4291      	cmp	r1, r2
 800a0fc:	d0de      	beq.n	800a0bc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1dc      	bne.n	800a0bc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a102:	1d21      	adds	r1, r4, #4
 800a104:	4608      	mov	r0, r1
 800a106:	9101      	str	r1, [sp, #4]
 800a108:	f7fe fc79 	bl	80089fe <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a10c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800a10e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a114:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a116:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a118:	4a07      	ldr	r2, [pc, #28]	; (800a138 <xTaskPriorityDisinherit+0x80>)
 800a11a:	6810      	ldr	r0, [r2, #0]
 800a11c:	4283      	cmp	r3, r0
 800a11e:	d900      	bls.n	800a122 <xTaskPriorityDisinherit+0x6a>
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	4a06      	ldr	r2, [pc, #24]	; (800a13c <xTaskPriorityDisinherit+0x84>)
 800a124:	2014      	movs	r0, #20
 800a126:	fb00 2003 	mla	r0, r0, r3, r2
 800a12a:	f7fe fc45 	bl	80089b8 <vListInsertEnd>
					xReturn = pdTRUE;
 800a12e:	2001      	movs	r0, #1
		return xReturn;
 800a130:	e7c5      	b.n	800a0be <xTaskPriorityDisinherit+0x6>
 800a132:	bf00      	nop
 800a134:	2400a8c0 	.word	0x2400a8c0
 800a138:	2400ad3c 	.word	0x2400ad3c
 800a13c:	2400a8cc 	.word	0x2400a8cc

0800a140 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800a140:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800a142:	4604      	mov	r4, r0
 800a144:	2800      	cmp	r0, #0
 800a146:	d044      	beq.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800a148:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a14a:	b942      	cbnz	r2, 800a15e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	e7fe      	b.n	800a15c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a15e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a160:	4299      	cmp	r1, r3
 800a162:	bf38      	it	cc
 800a164:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a166:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a168:	428b      	cmp	r3, r1
 800a16a:	d032      	beq.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a16c:	2a01      	cmp	r2, #1
 800a16e:	d130      	bne.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800a170:	4a19      	ldr	r2, [pc, #100]	; (800a1d8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800a172:	6812      	ldr	r2, [r2, #0]
 800a174:	4282      	cmp	r2, r0
 800a176:	d108      	bne.n	800a18a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	e7fe      	b.n	800a188 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a18a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a18c:	4d13      	ldr	r5, [pc, #76]	; (800a1dc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a18e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a190:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800a194:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a196:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a19a:	bfa8      	it	ge
 800a19c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1a0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a2:	bfa8      	it	ge
 800a1a4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d113      	bne.n	800a1d2 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1aa:	1d01      	adds	r1, r0, #4
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	9101      	str	r1, [sp, #4]
 800a1b0:	f7fe fc25 	bl	80089fe <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800a1b4:	4a0a      	ldr	r2, [pc, #40]	; (800a1e0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800a1b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1b8:	6810      	ldr	r0, [r2, #0]
 800a1ba:	9901      	ldr	r1, [sp, #4]
 800a1bc:	4283      	cmp	r3, r0
 800a1be:	d900      	bls.n	800a1c2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	2014      	movs	r0, #20
 800a1c4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800a1c8:	b003      	add	sp, #12
 800a1ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800a1ce:	f7fe bbf3 	b.w	80089b8 <vListInsertEnd>
	}
 800a1d2:	b003      	add	sp, #12
 800a1d4:	bd30      	pop	{r4, r5, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2400a8c0 	.word	0x2400a8c0
 800a1dc:	2400a8cc 	.word	0x2400a8cc
 800a1e0:	2400ad3c 	.word	0x2400ad3c

0800a1e4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800a1e4:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <pvTaskIncrementMutexHeldCount+0x14>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	b11a      	cbz	r2, 800a1f2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1ea:	6819      	ldr	r1, [r3, #0]
 800a1ec:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a1ee:	3201      	adds	r2, #1
 800a1f0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800a1f2:	6818      	ldr	r0, [r3, #0]
	}
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	2400a8c0 	.word	0x2400a8c0

0800a1fc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800a1fe:	4c11      	ldr	r4, [pc, #68]	; (800a244 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800a200:	f7fe fc70 	bl	8008ae4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	b9bd      	cbnz	r5, 800a238 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a208:	4f0f      	ldr	r7, [pc, #60]	; (800a248 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800a20a:	4e10      	ldr	r6, [pc, #64]	; (800a24c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7fe fbc5 	bl	800899c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a212:	4630      	mov	r0, r6
 800a214:	f7fe fbc2 	bl	800899c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a21a:	4a0e      	ldr	r2, [pc, #56]	; (800a254 <prvCheckForValidListAndQueue+0x58>)
 800a21c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800a21e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a220:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800a222:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <prvCheckForValidListAndQueue+0x5c>)
 800a224:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a226:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <prvCheckForValidListAndQueue+0x60>)
 800a228:	9500      	str	r5, [sp, #0]
 800a22a:	f7fe fe6b 	bl	8008f04 <xQueueGenericCreateStatic>
 800a22e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a230:	b110      	cbz	r0, 800a238 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a232:	490b      	ldr	r1, [pc, #44]	; (800a260 <prvCheckForValidListAndQueue+0x64>)
 800a234:	f7ff fa36 	bl	80096a4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800a238:	b003      	add	sp, #12
 800a23a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800a23e:	f7fe bc71 	b.w	8008b24 <vPortExitCritical>
 800a242:	bf00      	nop
 800a244:	2400aee0 	.word	0x2400aee0
 800a248:	2400ae64 	.word	0x2400ae64
 800a24c:	2400ae78 	.word	0x2400ae78
 800a250:	2400adbc 	.word	0x2400adbc
 800a254:	2400adc4 	.word	0x2400adc4
 800a258:	2400adc0 	.word	0x2400adc0
 800a25c:	2400ae90 	.word	0x2400ae90
 800a260:	0801b239 	.word	0x0801b239

0800a264 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800a264:	4291      	cmp	r1, r2
{
 800a266:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a268:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a26a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800a26c:	d80a      	bhi.n	800a284 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	6983      	ldr	r3, [r0, #24]
 800a272:	429a      	cmp	r2, r3
 800a274:	d20d      	bcs.n	800a292 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a276:	1d01      	adds	r1, r0, #4
 800a278:	4b07      	ldr	r3, [pc, #28]	; (800a298 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	f7fe fba8 	bl	80089d0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a280:	2000      	movs	r0, #0
}
 800a282:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a284:	429a      	cmp	r2, r3
 800a286:	d201      	bcs.n	800a28c <prvInsertTimerInActiveList+0x28>
 800a288:	4299      	cmp	r1, r3
 800a28a:	d202      	bcs.n	800a292 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a28c:	1d01      	adds	r1, r0, #4
 800a28e:	4b03      	ldr	r3, [pc, #12]	; (800a29c <prvInsertTimerInActiveList+0x38>)
 800a290:	e7f3      	b.n	800a27a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800a292:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a294:	e7f5      	b.n	800a282 <prvInsertTimerInActiveList+0x1e>
 800a296:	bf00      	nop
 800a298:	2400adc0 	.word	0x2400adc0
 800a29c:	2400adbc 	.word	0x2400adbc

0800a2a0 <xTimerCreateTimerTask>:
{
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a2a4:	f7ff ffaa 	bl	800a1fc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a2a8:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <xTimerCreateTimerTask+0x54>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	b1b3      	cbz	r3, 800a2dc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ae:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2b0:	aa07      	add	r2, sp, #28
 800a2b2:	a906      	add	r1, sp, #24
 800a2b4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2b6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2ba:	f7fe fa69 	bl	8008790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	9a07      	ldr	r2, [sp, #28]
 800a2c2:	9302      	str	r3, [sp, #8]
 800a2c4:	9b06      	ldr	r3, [sp, #24]
 800a2c6:	490c      	ldr	r1, [pc, #48]	; (800a2f8 <xTimerCreateTimerTask+0x58>)
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	480b      	ldr	r0, [pc, #44]	; (800a2fc <xTimerCreateTimerTask+0x5c>)
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	f7ff fbac 	bl	8009a2e <xTaskCreateStatic>
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <xTimerCreateTimerTask+0x60>)
 800a2d8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a2da:	b940      	cbnz	r0, 800a2ee <xTimerCreateTimerTask+0x4e>
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a2ec:	e7fe      	b.n	800a2ec <xTimerCreateTimerTask+0x4c>
}
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	b008      	add	sp, #32
 800a2f2:	bd10      	pop	{r4, pc}
 800a2f4:	2400aee0 	.word	0x2400aee0
 800a2f8:	0801b23e 	.word	0x0801b23e
 800a2fc:	0800a405 	.word	0x0800a405
 800a300:	2400aee4 	.word	0x2400aee4

0800a304 <xTimerGenericCommand>:
{
 800a304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a306:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800a308:	4604      	mov	r4, r0
{
 800a30a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800a30c:	b940      	cbnz	r0, 800a320 <xTimerGenericCommand+0x1c>
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	e7fe      	b.n	800a31e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800a320:	4d0c      	ldr	r5, [pc, #48]	; (800a354 <xTimerGenericCommand+0x50>)
 800a322:	6828      	ldr	r0, [r5, #0]
 800a324:	b178      	cbz	r0, 800a346 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a326:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a328:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a32a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a32e:	dc0c      	bgt.n	800a34a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a330:	f7ff fe72 	bl	800a018 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a334:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a336:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a338:	4669      	mov	r1, sp
 800a33a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a33c:	bf0c      	ite	eq
 800a33e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a340:	461a      	movne	r2, r3
 800a342:	f7fe fe94 	bl	800906e <xQueueGenericSend>
}
 800a346:	b004      	add	sp, #16
 800a348:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a34a:	2300      	movs	r3, #0
 800a34c:	4669      	mov	r1, sp
 800a34e:	f7fe ff41 	bl	80091d4 <xQueueGenericSendFromISR>
 800a352:	e7f8      	b.n	800a346 <xTimerGenericCommand+0x42>
 800a354:	2400aee0 	.word	0x2400aee0

0800a358 <prvSampleTimeNow>:
{
 800a358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800a35c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a400 <prvSampleTimeNow+0xa8>
{
 800a360:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800a362:	f7ff fbd1 	bl	8009b08 <xTaskGetTickCount>
 800a366:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800a368:	f8d8 3000 	ldr.w	r3, [r8]
 800a36c:	4283      	cmp	r3, r0
 800a36e:	d940      	bls.n	800a3f2 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a370:	4f21      	ldr	r7, [pc, #132]	; (800a3f8 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a372:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	b95a      	cbnz	r2, 800a394 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800a37c:	4a1f      	ldr	r2, [pc, #124]	; (800a3fc <prvSampleTimeNow+0xa4>)
 800a37e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a380:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800a382:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800a384:	6039      	str	r1, [r7, #0]
}
 800a386:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800a388:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800a38a:	f8c8 5000 	str.w	r5, [r8]
}
 800a38e:	b004      	add	sp, #16
 800a390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a394:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a396:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a398:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a39c:	1d21      	adds	r1, r4, #4
 800a39e:	4608      	mov	r0, r1
 800a3a0:	9103      	str	r1, [sp, #12]
 800a3a2:	f7fe fb2c 	bl	80089fe <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3a6:	6a23      	ldr	r3, [r4, #32]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a3b0:	9903      	ldr	r1, [sp, #12]
 800a3b2:	f013 0f04 	tst.w	r3, #4
 800a3b6:	d0de      	beq.n	800a376 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3b8:	69a3      	ldr	r3, [r4, #24]
 800a3ba:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800a3bc:	459a      	cmp	sl, r3
 800a3be:	d205      	bcs.n	800a3cc <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3c0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3c2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3c4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3c6:	f7fe fb03 	bl	80089d0 <vListInsert>
 800a3ca:	e7d4      	b.n	800a376 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f8cd 9000 	str.w	r9, [sp]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f7ff ff94 	bl	800a304 <xTimerGenericCommand>
				configASSERT( xResult );
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d1ca      	bne.n	800a376 <prvSampleTimeNow+0x1e>
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	e7fe      	b.n	800a3f0 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e7c7      	b.n	800a386 <prvSampleTimeNow+0x2e>
 800a3f6:	bf00      	nop
 800a3f8:	2400adbc 	.word	0x2400adbc
 800a3fc:	2400adc0 	.word	0x2400adc0
 800a400:	2400ae8c 	.word	0x2400ae8c

0800a404 <prvTimerTask>:
{
 800a404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a408:	4d6e      	ldr	r5, [pc, #440]	; (800a5c4 <prvTimerTask+0x1c0>)
{
 800a40a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a40c:	4e6e      	ldr	r6, [pc, #440]	; (800a5c8 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	f8d3 8000 	ldr.w	r8, [r3]
 800a414:	f1b8 0f00 	cmp.w	r8, #0
 800a418:	d035      	beq.n	800a486 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a41a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a41c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a41e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800a422:	f7ff fb69 	bl	8009af8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a426:	a804      	add	r0, sp, #16
 800a428:	f7ff ff96 	bl	800a358 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a42c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a42e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800a430:	2b00      	cmp	r3, #0
 800a432:	d169      	bne.n	800a508 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a434:	2c00      	cmp	r4, #0
 800a436:	d14c      	bne.n	800a4d2 <prvTimerTask+0xce>
 800a438:	4540      	cmp	r0, r8
 800a43a:	d350      	bcc.n	800a4de <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800a43c:	f7ff fc00 	bl	8009c40 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a446:	1d38      	adds	r0, r7, #4
 800a448:	f7fe fad9 	bl	80089fe <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a44c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a450:	0758      	lsls	r0, r3, #29
 800a452:	d51a      	bpl.n	800a48a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a454:	69b9      	ldr	r1, [r7, #24]
 800a456:	4643      	mov	r3, r8
 800a458:	464a      	mov	r2, r9
 800a45a:	4638      	mov	r0, r7
 800a45c:	4441      	add	r1, r8
 800a45e:	f7ff ff01 	bl	800a264 <prvInsertTimerInActiveList>
 800a462:	b1b0      	cbz	r0, 800a492 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a464:	4623      	mov	r3, r4
 800a466:	4642      	mov	r2, r8
 800a468:	4621      	mov	r1, r4
 800a46a:	4638      	mov	r0, r7
 800a46c:	9400      	str	r4, [sp, #0]
 800a46e:	f7ff ff49 	bl	800a304 <xTimerGenericCommand>
			configASSERT( xResult );
 800a472:	b970      	cbnz	r0, 800a492 <prvTimerTask+0x8e>
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	e7fe      	b.n	800a484 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a486:	2401      	movs	r4, #1
 800a488:	e7cb      	b.n	800a422 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	4638      	mov	r0, r7
 800a496:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a498:	2200      	movs	r2, #0
 800a49a:	a904      	add	r1, sp, #16
 800a49c:	6830      	ldr	r0, [r6, #0]
 800a49e:	f7fe ff4f 	bl	8009340 <xQueueReceive>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0b3      	beq.n	800a40e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4a6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4a8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	db2f      	blt.n	800a50e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4ae:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4b0:	6963      	ldr	r3, [r4, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d132      	bne.n	800a51c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4b6:	a803      	add	r0, sp, #12
 800a4b8:	f7ff ff4e 	bl	800a358 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a4bc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4be:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800a4c0:	2b09      	cmp	r3, #9
 800a4c2:	d8e9      	bhi.n	800a498 <prvTimerTask+0x94>
 800a4c4:	e8df f003 	tbb	[pc, r3]
 800a4c8:	572e2e2e 	.word	0x572e2e2e
 800a4cc:	2e2e765e 	.word	0x2e2e765e
 800a4d0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4d2:	4b3e      	ldr	r3, [pc, #248]	; (800a5cc <prvTimerTask+0x1c8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681c      	ldr	r4, [r3, #0]
 800a4d8:	fab4 f484 	clz	r4, r4
 800a4dc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4de:	4622      	mov	r2, r4
 800a4e0:	eba8 0109 	sub.w	r1, r8, r9
 800a4e4:	6830      	ldr	r0, [r6, #0]
 800a4e6:	f7ff f91a 	bl	800971e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ea:	f7ff fba9 	bl	8009c40 <xTaskResumeAll>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d1d2      	bne.n	800a498 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800a4f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	e7c7      	b.n	800a498 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800a508:	f7ff fb9a 	bl	8009c40 <xTaskResumeAll>
}
 800a50c:	e7c4      	b.n	800a498 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a50e:	9b05      	ldr	r3, [sp, #20]
 800a510:	9907      	ldr	r1, [sp, #28]
 800a512:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a514:	9b04      	ldr	r3, [sp, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	dbbe      	blt.n	800a498 <prvTimerTask+0x94>
 800a51a:	e7c8      	b.n	800a4ae <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a51c:	1d20      	adds	r0, r4, #4
 800a51e:	f7fe fa6e 	bl	80089fe <uxListRemove>
 800a522:	e7c8      	b.n	800a4b6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a524:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a528:	4620      	mov	r0, r4
 800a52a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a52c:	f043 0301 	orr.w	r3, r3, #1
 800a530:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a534:	9b05      	ldr	r3, [sp, #20]
 800a536:	4419      	add	r1, r3
 800a538:	f7ff fe94 	bl	800a264 <prvInsertTimerInActiveList>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d0ab      	beq.n	800a498 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a540:	6a23      	ldr	r3, [r4, #32]
 800a542:	4620      	mov	r0, r4
 800a544:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a546:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a54a:	0759      	lsls	r1, r3, #29
 800a54c:	d5a4      	bpl.n	800a498 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a54e:	69a2      	ldr	r2, [r4, #24]
 800a550:	2300      	movs	r3, #0
 800a552:	9905      	ldr	r1, [sp, #20]
 800a554:	4620      	mov	r0, r4
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	440a      	add	r2, r1
 800a55a:	4619      	mov	r1, r3
 800a55c:	f7ff fed2 	bl	800a304 <xTimerGenericCommand>
							configASSERT( xResult );
 800a560:	2800      	cmp	r0, #0
 800a562:	d199      	bne.n	800a498 <prvTimerTask+0x94>
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	e7fe      	b.n	800a574 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a576:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a57a:	f023 0301 	bic.w	r3, r3, #1
 800a57e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a582:	e789      	b.n	800a498 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a584:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a590:	9905      	ldr	r1, [sp, #20]
 800a592:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a594:	b941      	cbnz	r1, 800a5a8 <prvTimerTask+0x1a4>
 800a596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	e7fe      	b.n	800a5a6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	4401      	add	r1, r0
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f7ff fe59 	bl	800a264 <prvInsertTimerInActiveList>
					break;
 800a5b2:	e771      	b.n	800a498 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a5b8:	079a      	lsls	r2, r3, #30
 800a5ba:	d4de      	bmi.n	800a57a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f7fe f9af 	bl	8008920 <vPortFree>
 800a5c2:	e769      	b.n	800a498 <prvTimerTask+0x94>
 800a5c4:	2400adbc 	.word	0x2400adbc
 800a5c8:	2400aee0 	.word	0x2400aee0
 800a5cc:	2400adc0 	.word	0x2400adc0

0800a5d0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800a5d0:	8880      	ldrh	r0, [r0, #4]
 800a5d2:	4770      	bx	lr

0800a5d4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	8083      	strh	r3, [r0, #4]
 800a5d8:	4770      	bx	lr
	...

0800a5dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	6803      	ldr	r3, [r0, #0]
 800a5e0:	460e      	mov	r6, r1
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	4798      	blx	r3
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	1b34      	subs	r4, r6, r4
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	b2a4      	uxth	r4, r4
 800a5f6:	4798      	blx	r3
 800a5f8:	88ab      	ldrh	r3, [r5, #4]
 800a5fa:	fbb4 f4f0 	udiv	r4, r4, r0
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	d805      	bhi.n	800a60e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800a602:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800a604:	211d      	movs	r1, #29
 800a606:	4a0e      	ldr	r2, [pc, #56]	; (800a640 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800a608:	480e      	ldr	r0, [pc, #56]	; (800a644 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800a60a:	f00e fd97 	bl	801913c <__assert_func>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	2100      	movs	r1, #0
 800a612:	4628      	mov	r0, r5
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	4798      	blx	r3
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	4607      	mov	r7, r0
 800a61c:	4628      	mov	r0, r5
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	4798      	blx	r3
 800a622:	1bf3      	subs	r3, r6, r7
 800a624:	b29b      	uxth	r3, r3
 800a626:	fbb3 f2f0 	udiv	r2, r3, r0
 800a62a:	fb02 3010 	mls	r0, r2, r0, r3
 800a62e:	b118      	cbz	r0, 800a638 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800a630:	4b05      	ldr	r3, [pc, #20]	; (800a648 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800a632:	211e      	movs	r1, #30
 800a634:	4a02      	ldr	r2, [pc, #8]	; (800a640 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800a636:	e7e7      	b.n	800a608 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800a638:	4620      	mov	r0, r4
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	0801b246 	.word	0x0801b246
 800a640:	0801b3b2 	.word	0x0801b3b2
 800a644:	0801b25b 	.word	0x0801b25b
 800a648:	0801b289 	.word	0x0801b289

0800a64c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	460d      	mov	r5, r1
 800a652:	4604      	mov	r4, r0
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	4798      	blx	r3
 800a658:	4285      	cmp	r5, r0
 800a65a:	d905      	bls.n	800a668 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800a65e:	212f      	movs	r1, #47	; 0x2f
 800a660:	4a0c      	ldr	r2, [pc, #48]	; (800a694 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800a662:	480d      	ldr	r0, [pc, #52]	; (800a698 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800a664:	f00e fd6a 	bl	801913c <__assert_func>
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	4620      	mov	r0, r4
 800a66c:	88a5      	ldrh	r5, [r4, #4]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	4798      	blx	r3
 800a672:	4285      	cmp	r5, r0
 800a674:	d303      	bcc.n	800a67e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800a678:	2130      	movs	r1, #48	; 0x30
 800a67a:	4a06      	ldr	r2, [pc, #24]	; (800a694 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800a67c:	e7f1      	b.n	800a662 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	4620      	mov	r0, r4
 800a682:	88a1      	ldrh	r1, [r4, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	4798      	blx	r3
 800a688:	88a3      	ldrh	r3, [r4, #4]
 800a68a:	3301      	adds	r3, #1
 800a68c:	80a3      	strh	r3, [r4, #4]
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	0801b303 	.word	0x0801b303
 800a694:	0801b3f5 	.word	0x0801b3f5
 800a698:	0801b25b 	.word	0x0801b25b
 800a69c:	0801b31a 	.word	0x0801b31a

0800a6a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	6803      	ldr	r3, [r0, #0]
 800a6a4:	4616      	mov	r6, r2
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	6a1b      	ldr	r3, [r3, #32]
 800a6ac:	4798      	blx	r3
 800a6ae:	4286      	cmp	r6, r0
 800a6b0:	d905      	bls.n	800a6be <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800a6b2:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800a6b4:	2139      	movs	r1, #57	; 0x39
 800a6b6:	4a06      	ldr	r2, [pc, #24]	; (800a6d0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800a6b8:	4806      	ldr	r0, [pc, #24]	; (800a6d4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800a6ba:	f00e fd3f 	bl	801913c <__assert_func>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6ca:	4718      	bx	r3
 800a6cc:	0801b303 	.word	0x0801b303
 800a6d0:	0801b368 	.word	0x0801b368
 800a6d4:	0801b25b 	.word	0x0801b25b

0800a6d8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800a6d8:	4770      	bx	lr
	...

0800a6dc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800a6dc:	4a02      	ldr	r2, [pc, #8]	; (800a6e8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800a6de:	6002      	str	r2, [r0, #0]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	8082      	strh	r2, [r0, #4]
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	0801b33c 	.word	0x0801b33c

0800a6ec <_ZN8touchgfx9Container13getFirstChildEv>:
 800a6ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a6ee:	4770      	bx	lr

0800a6f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800a6f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	b12b      	cbz	r3, 800a702 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800a6f6:	b920      	cbnz	r0, 800a702 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800a6f8:	1a5a      	subs	r2, r3, r1
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	4250      	negs	r0, r2
 800a6fe:	4150      	adcs	r0, r2
 800a700:	e7f8      	b.n	800a6f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800a702:	4770      	bx	lr

0800a704 <_ZN8touchgfx9Container9removeAllEv>:
 800a704:	2200      	movs	r2, #0
 800a706:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a708:	b123      	cbz	r3, 800a714 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800a70a:	6999      	ldr	r1, [r3, #24]
 800a70c:	6281      	str	r1, [r0, #40]	; 0x28
 800a70e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800a712:	e7f8      	b.n	800a706 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800a714:	4770      	bx	lr

0800a716 <_ZN8touchgfx9Container6unlinkEv>:
 800a716:	2300      	movs	r3, #0
 800a718:	6283      	str	r3, [r0, #40]	; 0x28
 800a71a:	4770      	bx	lr

0800a71c <_ZNK8touchgfx9Container12getSolidRectEv>:
 800a71c:	2200      	movs	r2, #0
 800a71e:	8002      	strh	r2, [r0, #0]
 800a720:	8042      	strh	r2, [r0, #2]
 800a722:	8082      	strh	r2, [r0, #4]
 800a724:	80c2      	strh	r2, [r0, #6]
 800a726:	4770      	bx	lr

0800a728 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	460d      	mov	r5, r1
 800a72c:	4616      	mov	r6, r2
 800a72e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a730:	b13c      	cbz	r4, 800a742 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	4620      	mov	r0, r4
 800a736:	4632      	mov	r2, r6
 800a738:	4629      	mov	r1, r5
 800a73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73c:	4798      	blx	r3
 800a73e:	69a4      	ldr	r4, [r4, #24]
 800a740:	e7f6      	b.n	800a730 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800a742:	bd70      	pop	{r4, r5, r6, pc}

0800a744 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	460d      	mov	r5, r1
 800a748:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a74a:	b134      	cbz	r4, 800a75a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	4798      	blx	r3
 800a756:	69a4      	ldr	r4, [r4, #24]
 800a758:	e7f7      	b.n	800a74a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800a75a:	bd38      	pop	{r3, r4, r5, pc}

0800a75c <_ZNK8touchgfx9Container17invalidateContentEv>:
 800a75c:	b510      	push	{r4, lr}
 800a75e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a760:	b12c      	cbz	r4, 800a76e <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	4620      	mov	r0, r4
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	4798      	blx	r3
 800a76a:	69a4      	ldr	r4, [r4, #24]
 800a76c:	e7f8      	b.n	800a760 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800a76e:	bd10      	pop	{r4, pc}

0800a770 <_ZN8touchgfx9ContainerD1Ev>:
 800a770:	4770      	bx	lr

0800a772 <_ZN8touchgfx9ContainerD0Ev>:
 800a772:	b510      	push	{r4, lr}
 800a774:	4604      	mov	r4, r0
 800a776:	212c      	movs	r1, #44	; 0x2c
 800a778:	f00e fcb1 	bl	80190de <_ZdlPvj>
 800a77c:	4620      	mov	r0, r4
 800a77e:	bd10      	pop	{r4, pc}

0800a780 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800a780:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a782:	b19b      	cbz	r3, 800a7ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800a784:	428b      	cmp	r3, r1
 800a786:	d109      	bne.n	800a79c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800a788:	699a      	ldr	r2, [r3, #24]
 800a78a:	2100      	movs	r1, #0
 800a78c:	6159      	str	r1, [r3, #20]
 800a78e:	6282      	str	r2, [r0, #40]	; 0x28
 800a790:	b902      	cbnz	r2, 800a794 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800a792:	4770      	bx	lr
 800a794:	6199      	str	r1, [r3, #24]
 800a796:	4770      	bx	lr
 800a798:	4613      	mov	r3, r2
 800a79a:	b13a      	cbz	r2, 800a7ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	428a      	cmp	r2, r1
 800a7a0:	d1fa      	bne.n	800a798 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800a7a2:	698a      	ldr	r2, [r1, #24]
 800a7a4:	619a      	str	r2, [r3, #24]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800a7ac:	4770      	bx	lr

0800a7ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800a7ae:	b410      	push	{r4}
 800a7b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	b92b      	cbnz	r3, 800a7c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800a7b6:	6803      	ldr	r3, [r0, #0]
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c0:	4718      	bx	r3
 800a7c2:	b941      	cbnz	r1, 800a7d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800a7c4:	6193      	str	r3, [r2, #24]
 800a7c6:	6282      	str	r2, [r0, #40]	; 0x28
 800a7c8:	6154      	str	r4, [r2, #20]
 800a7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0f9      	beq.n	800a7ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800a7d6:	4299      	cmp	r1, r3
 800a7d8:	6998      	ldr	r0, [r3, #24]
 800a7da:	d1f9      	bne.n	800a7d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800a7dc:	6190      	str	r0, [r2, #24]
 800a7de:	618a      	str	r2, [r1, #24]
 800a7e0:	e7f2      	b.n	800a7c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800a7e4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800a7e4:	4288      	cmp	r0, r1
 800a7e6:	b508      	push	{r3, lr}
 800a7e8:	d105      	bne.n	800a7f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800a7ea:	4b11      	ldr	r3, [pc, #68]	; (800a830 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800a7ec:	2120      	movs	r1, #32
 800a7ee:	4a11      	ldr	r2, [pc, #68]	; (800a834 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a7f0:	4811      	ldr	r0, [pc, #68]	; (800a838 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800a7f2:	f00e fca3 	bl	801913c <__assert_func>
 800a7f6:	694b      	ldr	r3, [r1, #20]
 800a7f8:	b11b      	cbz	r3, 800a802 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800a7fa:	4b10      	ldr	r3, [pc, #64]	; (800a83c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800a7fc:	2121      	movs	r1, #33	; 0x21
 800a7fe:	4a0d      	ldr	r2, [pc, #52]	; (800a834 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a800:	e7f6      	b.n	800a7f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800a802:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800a806:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a808:	b913      	cbnz	r3, 800a810 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800a80a:	6281      	str	r1, [r0, #40]	; 0x28
 800a80c:	bd08      	pop	{r3, pc}
 800a80e:	4613      	mov	r3, r2
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	b12a      	cbz	r2, 800a820 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800a814:	428b      	cmp	r3, r1
 800a816:	d1fa      	bne.n	800a80e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800a81a:	2132      	movs	r1, #50	; 0x32
 800a81c:	4a05      	ldr	r2, [pc, #20]	; (800a834 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a81e:	e7e7      	b.n	800a7f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800a820:	428b      	cmp	r3, r1
 800a822:	d103      	bne.n	800a82c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800a826:	2135      	movs	r1, #53	; 0x35
 800a828:	4a02      	ldr	r2, [pc, #8]	; (800a834 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800a82a:	e7e1      	b.n	800a7f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800a82c:	6199      	str	r1, [r3, #24]
 800a82e:	e7ed      	b.n	800a80c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800a830:	0801b433 	.word	0x0801b433
 800a834:	0801b58c 	.word	0x0801b58c
 800a838:	0801b45f 	.word	0x0801b45f
 800a83c:	0801b492 	.word	0x0801b492
 800a840:	0801b4c8 	.word	0x0801b4c8

0800a844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a848:	461f      	mov	r7, r3
 800a84a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a84e:	460d      	mov	r5, r1
 800a850:	4616      	mov	r6, r2
 800a852:	b103      	cbz	r3, 800a856 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800a854:	6038      	str	r0, [r7, #0]
 800a856:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a858:	b314      	cbz	r4, 800a8a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800a85a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800a85e:	b1eb      	cbz	r3, 800a89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a860:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800a864:	428d      	cmp	r5, r1
 800a866:	db19      	blt.n	800a89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a868:	b289      	uxth	r1, r1
 800a86a:	8923      	ldrh	r3, [r4, #8]
 800a86c:	440b      	add	r3, r1
 800a86e:	b21b      	sxth	r3, r3
 800a870:	429d      	cmp	r5, r3
 800a872:	da13      	bge.n	800a89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a874:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800a878:	4296      	cmp	r6, r2
 800a87a:	db0f      	blt.n	800a89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a87c:	b292      	uxth	r2, r2
 800a87e:	8963      	ldrh	r3, [r4, #10]
 800a880:	4413      	add	r3, r2
 800a882:	b21b      	sxth	r3, r3
 800a884:	429e      	cmp	r6, r3
 800a886:	da09      	bge.n	800a89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	1ab2      	subs	r2, r6, r2
 800a88c:	1a69      	subs	r1, r5, r1
 800a88e:	4620      	mov	r0, r4
 800a890:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800a894:	b212      	sxth	r2, r2
 800a896:	463b      	mov	r3, r7
 800a898:	b209      	sxth	r1, r1
 800a89a:	47c0      	blx	r8
 800a89c:	69a4      	ldr	r4, [r4, #24]
 800a89e:	e7db      	b.n	800a858 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4c6d      	ldr	r4, [pc, #436]	; (800aa60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800a8aa:	b0a1      	sub	sp, #132	; 0x84
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	6824      	ldr	r4, [r4, #0]
 800a8b0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800a8b2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800a8b6:	2400      	movs	r4, #0
 800a8b8:	9303      	str	r3, [sp, #12]
 800a8ba:	802c      	strh	r4, [r5, #0]
 800a8bc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800a8be:	802c      	strh	r4, [r5, #0]
 800a8c0:	601c      	str	r4, [r3, #0]
 800a8c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800a8c6:	f7ff ffbd 	bl	800a844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800a8ca:	f1b9 0f03 	cmp.w	r9, #3
 800a8ce:	f340 80c1 	ble.w	800aa54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	a80c      	add	r0, sp, #48	; 0x30
 800a8d6:	f004 fbef 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a8da:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800a8de:	9306      	str	r3, [sp, #24]
 800a8e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800a8e4:	9307      	str	r3, [sp, #28]
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	f8d3 a000 	ldr.w	sl, [r3]
 800a8ec:	f1ba 0f00 	cmp.w	sl, #0
 800a8f0:	f000 80b3 	beq.w	800aa5a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800a8f4:	4651      	mov	r1, sl
 800a8f6:	a810      	add	r0, sp, #64	; 0x40
 800a8f8:	f004 fbde 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a8fc:	2002      	movs	r0, #2
 800a8fe:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	9a06      	ldr	r2, [sp, #24]
 800a906:	fb91 f1f0 	sdiv	r1, r1, r0
 800a90a:	189d      	adds	r5, r3, r2
 800a90c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800a910:	9a07      	ldr	r2, [sp, #28]
 800a912:	4419      	add	r1, r3
 800a914:	9b02      	ldr	r3, [sp, #8]
 800a916:	4413      	add	r3, r2
 800a918:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800a91c:	1a6d      	subs	r5, r5, r1
 800a91e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800a922:	fb92 f2f0 	sdiv	r2, r2, r0
 800a926:	440a      	add	r2, r1
 800a928:	1a9b      	subs	r3, r3, r2
 800a92a:	435b      	muls	r3, r3
 800a92c:	fb05 3505 	mla	r5, r5, r5, r3
 800a930:	4f4c      	ldr	r7, [pc, #304]	; (800aa64 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800a932:	ac10      	add	r4, sp, #64	; 0x40
 800a934:	f1b9 0f0c 	cmp.w	r9, #12
 800a938:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a93a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a93c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a93e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a940:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a944:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800a948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a94c:	f04f 0303 	mov.w	r3, #3
 800a950:	bfd8      	it	le
 800a952:	f109 32ff 	addle.w	r2, r9, #4294967295
 800a956:	f04f 0400 	mov.w	r4, #0
 800a95a:	f8cd 9000 	str.w	r9, [sp]
 800a95e:	bfcc      	ite	gt
 800a960:	4698      	movgt	r8, r3
 800a962:	fb92 f8f3 	sdivle	r8, r2, r3
 800a966:	1c63      	adds	r3, r4, #1
 800a968:	aa10      	add	r2, sp, #64	; 0x40
 800a96a:	f004 0401 	and.w	r4, r4, #1
 800a96e:	f04f 0b00 	mov.w	fp, #0
 800a972:	9308      	str	r3, [sp, #32]
 800a974:	9b00      	ldr	r3, [sp, #0]
 800a976:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800a97a:	fb93 f3f8 	sdiv	r3, r3, r8
 800a97e:	3404      	adds	r4, #4
 800a980:	b29b      	uxth	r3, r3
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	9a04      	ldr	r2, [sp, #16]
 800a986:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a98a:	fb13 f302 	smulbb	r3, r3, r2
 800a98e:	9a01      	ldr	r2, [sp, #4]
 800a990:	b29b      	uxth	r3, r3
 800a992:	1899      	adds	r1, r3, r2
 800a994:	9305      	str	r3, [sp, #20]
 800a996:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a99a:	b209      	sxth	r1, r1
 800a99c:	4299      	cmp	r1, r3
 800a99e:	db4d      	blt.n	800aa3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a9a0:	8932      	ldrh	r2, [r6, #8]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	b21b      	sxth	r3, r3
 800a9a6:	4299      	cmp	r1, r3
 800a9a8:	da48      	bge.n	800aa3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	6827      	ldr	r7, [r4, #0]
 800a9ae:	fb17 f703 	smulbb	r7, r7, r3
 800a9b2:	9b02      	ldr	r3, [sp, #8]
 800a9b4:	b2bf      	uxth	r7, r7
 800a9b6:	18fa      	adds	r2, r7, r3
 800a9b8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a9bc:	b212      	sxth	r2, r2
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	db3c      	blt.n	800aa3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a9c2:	8970      	ldrh	r0, [r6, #10]
 800a9c4:	4403      	add	r3, r0
 800a9c6:	b21b      	sxth	r3, r3
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	da37      	bge.n	800aa3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d2:	ab0b      	add	r3, sp, #44	; 0x2c
 800a9d4:	f7ff ff36 	bl	800a844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800a9d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9da:	b37a      	cbz	r2, 800aa3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a9dc:	4552      	cmp	r2, sl
 800a9de:	d02d      	beq.n	800aa3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	a80e      	add	r0, sp, #56	; 0x38
 800a9e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e6:	f004 fb67 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a9ea:	f04f 0e02 	mov.w	lr, #2
 800a9ee:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800a9f2:	9a06      	ldr	r2, [sp, #24]
 800a9f4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800a9f8:	9b01      	ldr	r3, [sp, #4]
 800a9fa:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800a9fe:	4413      	add	r3, r2
 800aa00:	9a07      	ldr	r2, [sp, #28]
 800aa02:	fb91 f1fe 	sdiv	r1, r1, lr
 800aa06:	fb9c fcfe 	sdiv	ip, ip, lr
 800aa0a:	4401      	add	r1, r0
 800aa0c:	1a58      	subs	r0, r3, r1
 800aa0e:	9b02      	ldr	r3, [sp, #8]
 800aa10:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800aa14:	4413      	add	r3, r2
 800aa16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa18:	448c      	add	ip, r1
 800aa1a:	eba3 030c 	sub.w	r3, r3, ip
 800aa1e:	435b      	muls	r3, r3
 800aa20:	fb00 3300 	mla	r3, r0, r0, r3
 800aa24:	42ab      	cmp	r3, r5
 800aa26:	d208      	bcs.n	800aa3a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800aa28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa2a:	461d      	mov	r5, r3
 800aa2c:	9803      	ldr	r0, [sp, #12]
 800aa2e:	6001      	str	r1, [r0, #0]
 800aa30:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800aa32:	9805      	ldr	r0, [sp, #20]
 800aa34:	8008      	strh	r0, [r1, #0]
 800aa36:	992b      	ldr	r1, [sp, #172]	; 0xac
 800aa38:	800f      	strh	r7, [r1, #0]
 800aa3a:	4692      	mov	sl, r2
 800aa3c:	f10b 0b01 	add.w	fp, fp, #1
 800aa40:	3408      	adds	r4, #8
 800aa42:	f1bb 0f04 	cmp.w	fp, #4
 800aa46:	d19d      	bne.n	800a984 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800aa48:	9b00      	ldr	r3, [sp, #0]
 800aa4a:	9c08      	ldr	r4, [sp, #32]
 800aa4c:	444b      	add	r3, r9
 800aa4e:	4544      	cmp	r4, r8
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	d188      	bne.n	800a966 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800aa54:	b021      	add	sp, #132	; 0x84
 800aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5a:	f04f 35ff 	mov.w	r5, #4294967295
 800aa5e:	e767      	b.n	800a930 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800aa60:	2400aef4 	.word	0x2400aef4
 800aa64:	0801a2b4 	.word	0x0801a2b4

0800aa68 <_ZN8touchgfx4RectaNERKS0_>:
 800aa68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800aa70:	888c      	ldrh	r4, [r1, #4]
 800aa72:	f9b0 9000 	ldrsh.w	r9, [r0]
 800aa76:	443c      	add	r4, r7
 800aa78:	b2a4      	uxth	r4, r4
 800aa7a:	fa0f f884 	sxth.w	r8, r4
 800aa7e:	45c1      	cmp	r9, r8
 800aa80:	da2f      	bge.n	800aae2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aa82:	8882      	ldrh	r2, [r0, #4]
 800aa84:	444a      	add	r2, r9
 800aa86:	b292      	uxth	r2, r2
 800aa88:	fa0f fe82 	sxth.w	lr, r2
 800aa8c:	4577      	cmp	r7, lr
 800aa8e:	da28      	bge.n	800aae2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aa90:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800aa94:	88cb      	ldrh	r3, [r1, #6]
 800aa96:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800aa9a:	442b      	add	r3, r5
 800aa9c:	b21b      	sxth	r3, r3
 800aa9e:	429e      	cmp	r6, r3
 800aaa0:	da1f      	bge.n	800aae2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aaa2:	88c3      	ldrh	r3, [r0, #6]
 800aaa4:	4433      	add	r3, r6
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	fa0f fc83 	sxth.w	ip, r3
 800aaac:	4565      	cmp	r5, ip
 800aaae:	da18      	bge.n	800aae2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800aab0:	454f      	cmp	r7, r9
 800aab2:	bfb8      	it	lt
 800aab4:	464f      	movlt	r7, r9
 800aab6:	42b5      	cmp	r5, r6
 800aab8:	bfb8      	it	lt
 800aaba:	4635      	movlt	r5, r6
 800aabc:	45f0      	cmp	r8, lr
 800aabe:	bfd8      	it	le
 800aac0:	4622      	movle	r2, r4
 800aac2:	1bd2      	subs	r2, r2, r7
 800aac4:	8082      	strh	r2, [r0, #4]
 800aac6:	884a      	ldrh	r2, [r1, #2]
 800aac8:	88c9      	ldrh	r1, [r1, #6]
 800aaca:	8007      	strh	r7, [r0, #0]
 800aacc:	440a      	add	r2, r1
 800aace:	8045      	strh	r5, [r0, #2]
 800aad0:	b292      	uxth	r2, r2
 800aad2:	b211      	sxth	r1, r2
 800aad4:	458c      	cmp	ip, r1
 800aad6:	bfa8      	it	ge
 800aad8:	4613      	movge	r3, r2
 800aada:	1b5b      	subs	r3, r3, r5
 800aadc:	80c3      	strh	r3, [r0, #6]
 800aade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae2:	2300      	movs	r3, #0
 800aae4:	8003      	strh	r3, [r0, #0]
 800aae6:	8043      	strh	r3, [r0, #2]
 800aae8:	8083      	strh	r3, [r0, #4]
 800aaea:	80c3      	strh	r3, [r0, #6]
 800aaec:	e7f7      	b.n	800aade <_ZN8touchgfx4RectaNERKS0_+0x76>

0800aaee <_ZNK8touchgfx4Rect7isEmptyEv>:
 800aaee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dd06      	ble.n	800ab04 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800aaf6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800aafa:	2800      	cmp	r0, #0
 800aafc:	bfcc      	ite	gt
 800aafe:	2000      	movgt	r0, #0
 800ab00:	2001      	movle	r0, #1
 800ab02:	4770      	bx	lr
 800ab04:	2001      	movs	r0, #1
 800ab06:	4770      	bx	lr

0800ab08 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4604      	mov	r4, r0
 800ab10:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ab12:	8003      	strh	r3, [r0, #0]
 800ab14:	8043      	strh	r3, [r0, #2]
 800ab16:	8083      	strh	r3, [r0, #4]
 800ab18:	80c3      	strh	r3, [r0, #6]
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	d040      	beq.n	800aba0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ab1e:	1d28      	adds	r0, r5, #4
 800ab20:	f7ff ffe5 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ab24:	b988      	cbnz	r0, 800ab4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ab26:	4620      	mov	r0, r4
 800ab28:	f7ff ffe1 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ab2c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ab30:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ab34:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ab38:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ab3c:	b138      	cbz	r0, 800ab4e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ab3e:	8022      	strh	r2, [r4, #0]
 800ab40:	8063      	strh	r3, [r4, #2]
 800ab42:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ab46:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ab4a:	69ad      	ldr	r5, [r5, #24]
 800ab4c:	e7e5      	b.n	800ab1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ab4e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ab52:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ab56:	4290      	cmp	r0, r2
 800ab58:	4607      	mov	r7, r0
 800ab5a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ab5e:	460e      	mov	r6, r1
 800ab60:	bfa8      	it	ge
 800ab62:	4617      	movge	r7, r2
 800ab64:	4299      	cmp	r1, r3
 800ab66:	4472      	add	r2, lr
 800ab68:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ab6c:	bfa8      	it	ge
 800ab6e:	461e      	movge	r6, r3
 800ab70:	4440      	add	r0, r8
 800ab72:	4471      	add	r1, lr
 800ab74:	4463      	add	r3, ip
 800ab76:	b200      	sxth	r0, r0
 800ab78:	8027      	strh	r7, [r4, #0]
 800ab7a:	b212      	sxth	r2, r2
 800ab7c:	8066      	strh	r6, [r4, #2]
 800ab7e:	b209      	sxth	r1, r1
 800ab80:	b21b      	sxth	r3, r3
 800ab82:	4290      	cmp	r0, r2
 800ab84:	bfac      	ite	ge
 800ab86:	ebc7 0200 	rsbge	r2, r7, r0
 800ab8a:	ebc7 0202 	rsblt	r2, r7, r2
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	bfac      	ite	ge
 800ab92:	ebc6 0301 	rsbge	r3, r6, r1
 800ab96:	ebc6 0303 	rsblt	r3, r6, r3
 800ab9a:	80a2      	strh	r2, [r4, #4]
 800ab9c:	80e3      	strh	r3, [r4, #6]
 800ab9e:	e7d4      	b.n	800ab4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800aba0:	4620      	mov	r0, r4
 800aba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aba6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800aba6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800abaa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800abae:	b383      	cbz	r3, 800ac12 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800abb0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800abb2:	b374      	cbz	r4, 800ac12 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800abb4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800abb8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800abbc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800abc0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800abc4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800abc8:	b303      	cbz	r3, 800ac0c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800abca:	4668      	mov	r0, sp
 800abcc:	1d21      	adds	r1, r4, #4
 800abce:	f8ad 5000 	strh.w	r5, [sp]
 800abd2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800abd6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800abda:	f8ad 8006 	strh.w	r8, [sp, #6]
 800abde:	f7ff ff43 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800abe2:	4668      	mov	r0, sp
 800abe4:	f7ff ff83 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800abe8:	b980      	cbnz	r0, 800ac0c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800abea:	f8bd 3000 	ldrh.w	r3, [sp]
 800abee:	4669      	mov	r1, sp
 800abf0:	88a2      	ldrh	r2, [r4, #4]
 800abf2:	4620      	mov	r0, r4
 800abf4:	1a9b      	subs	r3, r3, r2
 800abf6:	88e2      	ldrh	r2, [r4, #6]
 800abf8:	f8ad 3000 	strh.w	r3, [sp]
 800abfc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	4798      	blx	r3
 800ac0c:	69a4      	ldr	r4, [r4, #24]
 800ac0e:	2c00      	cmp	r4, #0
 800ac10:	d1d8      	bne.n	800abc4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ac12:	b002      	add	sp, #8
 800ac14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac18 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ac18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac1a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ac1e:	460d      	mov	r5, r1
 800ac20:	4616      	mov	r6, r2
 800ac22:	b323      	cbz	r3, 800ac6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ac24:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ac26:	b314      	cbz	r4, 800ac6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ac28:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ac2c:	b1eb      	cbz	r3, 800ac6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ac2e:	6828      	ldr	r0, [r5, #0]
 800ac30:	466b      	mov	r3, sp
 800ac32:	6869      	ldr	r1, [r5, #4]
 800ac34:	c303      	stmia	r3!, {r0, r1}
 800ac36:	4668      	mov	r0, sp
 800ac38:	1d21      	adds	r1, r4, #4
 800ac3a:	f7ff ff15 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800ac3e:	4668      	mov	r0, sp
 800ac40:	f7ff ff55 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ac44:	b988      	cbnz	r0, 800ac6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ac46:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac4a:	4669      	mov	r1, sp
 800ac4c:	88a2      	ldrh	r2, [r4, #4]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	1a9b      	subs	r3, r3, r2
 800ac52:	88e2      	ldrh	r2, [r4, #6]
 800ac54:	f8ad 3000 	strh.w	r3, [sp]
 800ac58:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ac5c:	1a9b      	subs	r3, r3, r2
 800ac5e:	4632      	mov	r2, r6
 800ac60:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac68:	4798      	blx	r3
 800ac6a:	69a4      	ldr	r4, [r4, #24]
 800ac6c:	e7db      	b.n	800ac26 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800ac6e:	b002      	add	sp, #8
 800ac70:	bd70      	pop	{r4, r5, r6, pc}

0800ac72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800ac72:	6803      	ldr	r3, [r0, #0]
 800ac74:	b513      	push	{r0, r1, r4, lr}
 800ac76:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e9cd 3300 	strd	r3, r3, [sp]
 800ac80:	466b      	mov	r3, sp
 800ac82:	47a0      	blx	r4
 800ac84:	b002      	add	sp, #8
 800ac86:	bd10      	pop	{r4, pc}

0800ac88 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800ac88:	2301      	movs	r3, #1
 800ac8a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ac8e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ac92:	4770      	bx	lr

0800ac94 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800ac94:	2301      	movs	r3, #1
 800ac96:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ac9a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ac9e:	4770      	bx	lr

0800aca0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800aca0:	6843      	ldr	r3, [r0, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	725a      	strb	r2, [r3, #9]
 800aca6:	6840      	ldr	r0, [r0, #4]
 800aca8:	6803      	ldr	r3, [r0, #0]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	4718      	bx	r3

0800acae <_ZN8touchgfx3HAL8flushDMAEv>:
 800acae:	6840      	ldr	r0, [r0, #4]
 800acb0:	6803      	ldr	r3, [r0, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	4718      	bx	r3

0800acb6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800acb6:	b530      	push	{r4, r5, lr}
 800acb8:	b08b      	sub	sp, #44	; 0x2c
 800acba:	6804      	ldr	r4, [r0, #0]
 800acbc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800acc0:	9509      	str	r5, [sp, #36]	; 0x24
 800acc2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800acc6:	9508      	str	r5, [sp, #32]
 800acc8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800accc:	9507      	str	r5, [sp, #28]
 800acce:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800acd2:	9506      	str	r5, [sp, #24]
 800acd4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800acd8:	9505      	str	r5, [sp, #20]
 800acda:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800acde:	9504      	str	r5, [sp, #16]
 800ace0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800ace4:	9503      	str	r5, [sp, #12]
 800ace6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800acea:	9502      	str	r5, [sp, #8]
 800acec:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800acf0:	e9cd 3500 	strd	r3, r5, [sp]
 800acf4:	4613      	mov	r3, r2
 800acf6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800acf8:	2200      	movs	r2, #0
 800acfa:	47a0      	blx	r4
 800acfc:	b00b      	add	sp, #44	; 0x2c
 800acfe:	bd30      	pop	{r4, r5, pc}

0800ad00 <_ZN8touchgfx3HAL10beginFrameEv>:
 800ad00:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	b123      	cbz	r3, 800ad10 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ad06:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800ad0a:	f080 0001 	eor.w	r0, r0, #1
 800ad0e:	4770      	bx	lr
 800ad10:	2001      	movs	r0, #1
 800ad12:	4770      	bx	lr
 800ad14:	2400aef2 	.word	0x2400aef2

0800ad18 <_ZN8touchgfx3HAL8endFrameEv>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	6840      	ldr	r0, [r0, #4]
 800ad1e:	6803      	ldr	r3, [r0, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	4798      	blx	r3
 800ad24:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800ad28:	b113      	cbz	r3, 800ad30 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ad30:	bd10      	pop	{r4, pc}

0800ad32 <_ZN8touchgfx3HAL10initializeEv>:
 800ad32:	b510      	push	{r4, lr}
 800ad34:	4604      	mov	r4, r0
 800ad36:	f7f6 fe01 	bl	800193c <_ZN8touchgfx10OSWrappers10initializeEv>
 800ad3a:	6860      	ldr	r0, [r4, #4]
 800ad3c:	6803      	ldr	r3, [r0, #0]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	4798      	blx	r3
 800ad42:	68e0      	ldr	r0, [r4, #12]
 800ad44:	6803      	ldr	r3, [r0, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	4798      	blx	r3
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	4718      	bx	r3
	...

0800ad58 <_ZN8touchgfx3HAL4tickEv>:
 800ad58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad5a:	6803      	ldr	r3, [r0, #0]
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	4d5b      	ldr	r5, [pc, #364]	; (800aecc <_ZN8touchgfx3HAL4tickEv+0x174>)
 800ad60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad64:	4798      	blx	r3
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f000 8095 	beq.w	800ae96 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800ad6c:	2001      	movs	r0, #1
 800ad6e:	2600      	movs	r6, #0
 800ad70:	f7f6 fb09 	bl	8001386 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ad74:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800ad78:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800ad7c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800ad80:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800ad84:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800ad88:	b133      	cbz	r3, 800ad98 <_ZN8touchgfx3HAL4tickEv+0x40>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ad92:	4798      	blx	r3
 800ad94:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800ad98:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800ad9c:	2601      	movs	r6, #1
 800ad9e:	6862      	ldr	r2, [r4, #4]
 800ada0:	f083 0301 	eor.w	r3, r3, #1
 800ada4:	702e      	strb	r6, [r5, #0]
 800ada6:	7253      	strb	r3, [r2, #9]
 800ada8:	f003 f95c 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
 800adac:	6803      	ldr	r3, [r0, #0]
 800adae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb0:	4798      	blx	r3
 800adb2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800adb6:	b90b      	cbnz	r3, 800adbc <_ZN8touchgfx3HAL4tickEv+0x64>
 800adb8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800adbc:	f003 f952 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
 800adc0:	6803      	ldr	r3, [r0, #0]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	4798      	blx	r3
 800adc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc8:	6803      	ldr	r3, [r0, #0]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	4798      	blx	r3
 800adce:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800add2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800add6:	3b01      	subs	r3, #1
 800add8:	b2db      	uxtb	r3, r3
 800adda:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800adde:	b10a      	cbz	r2, 800ade4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1eb      	bne.n	800adbc <_ZN8touchgfx3HAL4tickEv+0x64>
 800ade4:	4a3a      	ldr	r2, [pc, #232]	; (800aed0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800ade6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800adea:	7813      	ldrb	r3, [r2, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	b25b      	sxtb	r3, r3
 800adf0:	4299      	cmp	r1, r3
 800adf2:	7013      	strb	r3, [r2, #0]
 800adf4:	dc10      	bgt.n	800ae18 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800adf6:	2300      	movs	r3, #0
 800adf8:	68e0      	ldr	r0, [r4, #12]
 800adfa:	a902      	add	r1, sp, #8
 800adfc:	7013      	strb	r3, [r2, #0]
 800adfe:	aa03      	add	r2, sp, #12
 800ae00:	6803      	ldr	r3, [r0, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	4798      	blx	r3
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d050      	beq.n	800aeae <_ZN8touchgfx3HAL4tickEv+0x156>
 800ae0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ae10:	4620      	mov	r0, r4
 800ae12:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ae16:	4798      	blx	r3
 800ae18:	2300      	movs	r3, #0
 800ae1a:	6960      	ldr	r0, [r4, #20]
 800ae1c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ae20:	b158      	cbz	r0, 800ae3a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800ae22:	6803      	ldr	r3, [r0, #0]
 800ae24:	f10d 0107 	add.w	r1, sp, #7
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	4798      	blx	r3
 800ae2c:	b128      	cbz	r0, 800ae3a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800ae2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae30:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ae34:	6803      	ldr	r3, [r0, #0]
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	4798      	blx	r3
 800ae3a:	f104 001c 	add.w	r0, r4, #28
 800ae3e:	f00e f899 	bl	8018f74 <_ZN8touchgfx8Gestures4tickEv>
 800ae42:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800ae46:	b30b      	cbz	r3, 800ae8c <_ZN8touchgfx3HAL4tickEv+0x134>
 800ae48:	6920      	ldr	r0, [r4, #16]
 800ae4a:	6803      	ldr	r3, [r0, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	4798      	blx	r3
 800ae50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae52:	4606      	mov	r6, r0
 800ae54:	b903      	cbnz	r3, 800ae58 <_ZN8touchgfx3HAL4tickEv+0x100>
 800ae56:	6720      	str	r0, [r4, #112]	; 0x70
 800ae58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae5a:	4a1e      	ldr	r2, [pc, #120]	; (800aed4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800ae5c:	1af3      	subs	r3, r6, r3
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d914      	bls.n	800ae8c <_ZN8touchgfx3HAL4tickEv+0x134>
 800ae62:	6920      	ldr	r0, [r4, #16]
 800ae64:	6803      	ldr	r3, [r0, #0]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	4798      	blx	r3
 800ae6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae6c:	2264      	movs	r2, #100	; 0x64
 800ae6e:	1af3      	subs	r3, r6, r3
 800ae70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae74:	fbb0 f0f3 	udiv	r0, r0, r3
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dc1d      	bgt.n	800aeb8 <_ZN8touchgfx3HAL4tickEv+0x160>
 800ae7c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800ae80:	6920      	ldr	r0, [r4, #16]
 800ae82:	2100      	movs	r1, #0
 800ae84:	6803      	ldr	r3, [r0, #0]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	4798      	blx	r3
 800ae8a:	6726      	str	r6, [r4, #112]	; 0x70
 800ae8c:	f003 f8ea 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
 800ae90:	6803      	ldr	r3, [r0, #0]
 800ae92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae94:	4798      	blx	r3
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ae9e:	4798      	blx	r3
 800aea0:	2001      	movs	r0, #1
 800aea2:	f7f6 fa71 	bl	8001388 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800aea6:	2300      	movs	r3, #0
 800aea8:	702b      	strb	r3, [r5, #0]
 800aeaa:	b004      	add	sp, #16
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4798      	blx	r3
 800aeb6:	e7af      	b.n	800ae18 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800aeb8:	2863      	cmp	r0, #99	; 0x63
 800aeba:	bfcb      	itete	gt
 800aebc:	2300      	movgt	r3, #0
 800aebe:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800aec2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800aec6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800aeca:	e7d9      	b.n	800ae80 <_ZN8touchgfx3HAL4tickEv+0x128>
 800aecc:	2400aef8 	.word	0x2400aef8
 800aed0:	2400aef9 	.word	0x2400aef9
 800aed4:	05f5e100 	.word	0x05f5e100

0800aed8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800aed8:	f7f6 bd60 	b.w	800199c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800aedc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800aedc:	6581      	str	r1, [r0, #88]	; 0x58
 800aede:	301c      	adds	r0, #28
 800aee0:	f00e b846 	b.w	8018f70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800aee4 <_ZN8touchgfx3HAL5touchEll>:
 800aee4:	b530      	push	{r4, r5, lr}
 800aee6:	b087      	sub	sp, #28
 800aee8:	4604      	mov	r4, r0
 800aeea:	a804      	add	r0, sp, #16
 800aeec:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800aef0:	f002 fe16 	bl	800db20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	a906      	add	r1, sp, #24
 800aef8:	a803      	add	r0, sp, #12
 800aefa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aefe:	9b05      	ldr	r3, [sp, #20]
 800af00:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800af04:	f002 fe5e 	bl	800dbc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800af08:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800af0c:	f104 001c 	add.w	r0, r4, #28
 800af10:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800af14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800af18:	b189      	cbz	r1, 800af3e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800af1a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	4613      	mov	r3, r2
 800af22:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800af26:	462a      	mov	r2, r5
 800af28:	f00e f832 	bl	8018f90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800af2c:	b128      	cbz	r0, 800af3a <_ZN8touchgfx3HAL5touchEll+0x56>
 800af2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800af32:	65e3      	str	r3, [r4, #92]	; 0x5c
 800af34:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800af38:	6623      	str	r3, [r4, #96]	; 0x60
 800af3a:	b007      	add	sp, #28
 800af3c:	bd30      	pop	{r4, r5, pc}
 800af3e:	f00e f867 	bl	8019010 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800af42:	2301      	movs	r3, #1
 800af44:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800af48:	e7f1      	b.n	800af2e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800af4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800af4a:	b510      	push	{r4, lr}
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d046      	beq.n	800afde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800af50:	ea81 0002 	eor.w	r0, r1, r2
 800af54:	07c4      	lsls	r4, r0, #31
 800af56:	d508      	bpl.n	800af6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800af58:	440b      	add	r3, r1
 800af5a:	3a01      	subs	r2, #1
 800af5c:	428b      	cmp	r3, r1
 800af5e:	d93e      	bls.n	800afde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800af60:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800af64:	f801 0b01 	strb.w	r0, [r1], #1
 800af68:	e7f8      	b.n	800af5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800af6a:	07d0      	lsls	r0, r2, #31
 800af6c:	bf42      	ittt	mi
 800af6e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800af72:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800af76:	f801 0b01 	strbmi.w	r0, [r1], #1
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d911      	bls.n	800afa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800af7e:	ea81 0402 	eor.w	r4, r1, r2
 800af82:	4610      	mov	r0, r2
 800af84:	07a4      	lsls	r4, r4, #30
 800af86:	d022      	beq.n	800afce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800af88:	f023 0401 	bic.w	r4, r3, #1
 800af8c:	440c      	add	r4, r1
 800af8e:	428c      	cmp	r4, r1
 800af90:	4602      	mov	r2, r0
 800af92:	d904      	bls.n	800af9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800af94:	8812      	ldrh	r2, [r2, #0]
 800af96:	3002      	adds	r0, #2
 800af98:	f821 2b02 	strh.w	r2, [r1], #2
 800af9c:	e7f7      	b.n	800af8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	f023 0003 	bic.w	r0, r3, #3
 800afa6:	4408      	add	r0, r1
 800afa8:	4288      	cmp	r0, r1
 800afaa:	4614      	mov	r4, r2
 800afac:	d904      	bls.n	800afb8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800afae:	6824      	ldr	r4, [r4, #0]
 800afb0:	3204      	adds	r2, #4
 800afb2:	f841 4b04 	str.w	r4, [r1], #4
 800afb6:	e7f7      	b.n	800afa8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	3a01      	subs	r2, #1
 800afbe:	440b      	add	r3, r1
 800afc0:	428b      	cmp	r3, r1
 800afc2:	d90c      	bls.n	800afde <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800afc4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800afc8:	f801 0b01 	strb.w	r0, [r1], #1
 800afcc:	e7f8      	b.n	800afc0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800afce:	0790      	lsls	r0, r2, #30
 800afd0:	d0e7      	beq.n	800afa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800afd2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800afd6:	3b02      	subs	r3, #2
 800afd8:	f821 0b02 	strh.w	r0, [r1], #2
 800afdc:	e7e1      	b.n	800afa2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800afde:	2001      	movs	r0, #1
 800afe0:	bd10      	pop	{r4, pc}

0800afe2 <_ZN8touchgfx3HAL7noTouchEv>:
 800afe2:	b510      	push	{r4, lr}
 800afe4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800afe8:	4604      	mov	r4, r0
 800afea:	b153      	cbz	r3, 800b002 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800afec:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800aff0:	2101      	movs	r1, #1
 800aff2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800aff6:	301c      	adds	r0, #28
 800aff8:	f00e f80a 	bl	8019010 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800affc:	2300      	movs	r3, #0
 800affe:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b002:	bd10      	pop	{r4, pc}

0800b004 <_ZN8touchgfx3HAL3lcdEv>:
 800b004:	4b04      	ldr	r3, [pc, #16]	; (800b018 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b00c:	b10a      	cbz	r2, 800b012 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800b00e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b010:	b900      	cbnz	r0, 800b014 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800b012:	6898      	ldr	r0, [r3, #8]
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	2400aef4 	.word	0x2400aef4

0800b01c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800b01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b020:	4604      	mov	r4, r0
 800b022:	6980      	ldr	r0, [r0, #24]
 800b024:	b085      	sub	sp, #20
 800b026:	460f      	mov	r7, r1
 800b028:	4690      	mov	r8, r2
 800b02a:	4699      	mov	r9, r3
 800b02c:	b930      	cbnz	r0, 800b03c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800b02e:	4b1c      	ldr	r3, [pc, #112]	; (800b0a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800b030:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800b034:	4a1b      	ldr	r2, [pc, #108]	; (800b0a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800b036:	481c      	ldr	r0, [pc, #112]	; (800b0a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800b038:	f00e f880 	bl	801913c <__assert_func>
 800b03c:	ad04      	add	r5, sp, #16
 800b03e:	2600      	movs	r6, #0
 800b040:	f845 6d04 	str.w	r6, [r5, #-4]!
 800b044:	6806      	ldr	r6, [r0, #0]
 800b046:	9501      	str	r5, [sp, #4]
 800b048:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800b04c:	9500      	str	r5, [sp, #0]
 800b04e:	6835      	ldr	r5, [r6, #0]
 800b050:	47a8      	blx	r5
 800b052:	4d16      	ldr	r5, [pc, #88]	; (800b0ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800b054:	4606      	mov	r6, r0
 800b056:	f8a5 9000 	strh.w	r9, [r5]
 800b05a:	f7ff ffd3 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b05e:	6803      	ldr	r3, [r0, #0]
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	4798      	blx	r3
 800b064:	2801      	cmp	r0, #1
 800b066:	d012      	beq.n	800b08e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800b068:	d306      	bcc.n	800b078 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800b06a:	280d      	cmp	r0, #13
 800b06c:	d80b      	bhi.n	800b086 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800b06e:	4b10      	ldr	r3, [pc, #64]	; (800b0b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800b070:	f240 115b 	movw	r1, #347	; 0x15b
 800b074:	4a0b      	ldr	r2, [pc, #44]	; (800b0a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800b076:	e7de      	b.n	800b036 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800b078:	882b      	ldrh	r3, [r5, #0]
 800b07a:	fb08 7203 	mla	r2, r8, r3, r7
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800b084:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b086:	4630      	mov	r0, r6
 800b088:	b005      	add	sp, #20
 800b08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b08e:	882a      	ldrh	r2, [r5, #0]
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	fb08 7202 	mla	r2, r8, r2, r7
 800b096:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b09a:	1a9a      	subs	r2, r3, r2
 800b09c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800b09e:	e7f2      	b.n	800b086 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800b0a0:	0801b72d 	.word	0x0801b72d
 800b0a4:	0801b9eb 	.word	0x0801b9eb
 800b0a8:	0801b772 	.word	0x0801b772
 800b0ac:	2400aeee 	.word	0x2400aeee
 800b0b0:	0801b798 	.word	0x0801b798

0800b0b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	b08b      	sub	sp, #44	; 0x2c
 800b0b8:	4617      	mov	r7, r2
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	460e      	mov	r6, r1
 800b0be:	461d      	mov	r5, r3
 800b0c0:	f7ff ffa0 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b0c4:	6803      	ldr	r3, [r0, #0]
 800b0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c8:	4798      	blx	r3
 800b0ca:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b0ce:	9007      	str	r0, [sp, #28]
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	6822      	ldr	r2, [r4, #0]
 800b0d4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800b0da:	4620      	mov	r0, r4
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	9306      	str	r3, [sp, #24]
 800b0e0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800b0e4:	9305      	str	r3, [sp, #20]
 800b0e6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b0ea:	9304      	str	r3, [sp, #16]
 800b0ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b0f0:	9303      	str	r3, [sp, #12]
 800b0f2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800b0f6:	9302      	str	r3, [sp, #8]
 800b0f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b0fc:	e9cd 5300 	strd	r5, r3, [sp]
 800b100:	463b      	mov	r3, r7
 800b102:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800b104:	2200      	movs	r2, #0
 800b106:	47a8      	blx	r5
 800b108:	b00b      	add	sp, #44	; 0x2c
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10c:	2400aeee 	.word	0x2400aeee

0800b110 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800b110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b114:	4698      	mov	r8, r3
 800b116:	6803      	ldr	r3, [r0, #0]
 800b118:	b08b      	sub	sp, #44	; 0x2c
 800b11a:	4617      	mov	r7, r2
 800b11c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800b11e:	460e      	mov	r6, r1
 800b120:	4b13      	ldr	r3, [pc, #76]	; (800b170 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800b122:	4604      	mov	r4, r0
 800b124:	f8b3 9000 	ldrh.w	r9, [r3]
 800b128:	f7ff ff6c 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b12c:	6803      	ldr	r3, [r0, #0]
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	4798      	blx	r3
 800b132:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b136:	2200      	movs	r2, #0
 800b138:	4631      	mov	r1, r6
 800b13a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800b13e:	2302      	movs	r3, #2
 800b140:	4620      	mov	r0, r4
 800b142:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800b146:	2301      	movs	r3, #1
 800b148:	9305      	str	r3, [sp, #20]
 800b14a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b14e:	9304      	str	r3, [sp, #16]
 800b150:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800b160:	e9cd 8300 	strd	r8, r3, [sp]
 800b164:	463b      	mov	r3, r7
 800b166:	47a8      	blx	r5
 800b168:	b00b      	add	sp, #44	; 0x2c
 800b16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b16e:	bf00      	nop
 800b170:	2400aeee 	.word	0x2400aeee

0800b174 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800b174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b178:	4698      	mov	r8, r3
 800b17a:	6803      	ldr	r3, [r0, #0]
 800b17c:	b087      	sub	sp, #28
 800b17e:	460e      	mov	r6, r1
 800b180:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800b182:	4617      	mov	r7, r2
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800b186:	4604      	mov	r4, r0
 800b188:	f8b3 9000 	ldrh.w	r9, [r3]
 800b18c:	f7ff ff3a 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b190:	6803      	ldr	r3, [r0, #0]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4798      	blx	r3
 800b196:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800b19a:	463a      	mov	r2, r7
 800b19c:	4631      	mov	r1, r6
 800b19e:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1a2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800b1a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	9302      	str	r3, [sp, #8]
 800b1ae:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	4643      	mov	r3, r8
 800b1bc:	47a8      	blx	r5
 800b1be:	b007      	add	sp, #28
 800b1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c4:	2400aeee 	.word	0x2400aeee

0800b1c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	b08f      	sub	sp, #60	; 0x3c
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	460d      	mov	r5, r1
 800b1d4:	4691      	mov	r9, r2
 800b1d6:	461e      	mov	r6, r3
 800b1d8:	f005 fb28 	bl	801082c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	f000 809c 	beq.w	800b31a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f8df b194 	ldr.w	fp, [pc, #404]	; 800b37c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800b1ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f0:	4798      	blx	r3
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f8df a188 	ldr.w	sl, [pc, #392]	; 800b380 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800b1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fc:	4798      	blx	r3
 800b1fe:	f8bb 3000 	ldrh.w	r3, [fp]
 800b202:	4f5b      	ldr	r7, [pc, #364]	; (800b370 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	f8ba 3000 	ldrh.w	r3, [sl]
 800b20a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800b20e:	4640      	mov	r0, r8
 800b210:	9302      	str	r3, [sp, #8]
 800b212:	883b      	ldrh	r3, [r7, #0]
 800b214:	9303      	str	r3, [sp, #12]
 800b216:	4b57      	ldr	r3, [pc, #348]	; (800b374 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b218:	881a      	ldrh	r2, [r3, #0]
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	9204      	str	r2, [sp, #16]
 800b21e:	f005 fc65 	bl	8010aec <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b222:	8038      	strh	r0, [r7, #0]
 800b224:	4640      	mov	r0, r8
 800b226:	f005 fca5 	bl	8010b74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b22a:	9b05      	ldr	r3, [sp, #20]
 800b22c:	8018      	strh	r0, [r3, #0]
 800b22e:	4b52      	ldr	r3, [pc, #328]	; (800b378 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d174      	bne.n	800b320 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800b236:	883b      	ldrh	r3, [r7, #0]
 800b238:	f8aa 0000 	strh.w	r0, [sl]
 800b23c:	f8ab 3000 	strh.w	r3, [fp]
 800b240:	4648      	mov	r0, r9
 800b242:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800b246:	f005 faf1 	bl	801082c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800b24a:	2200      	movs	r2, #0
 800b24c:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800b250:	4611      	mov	r1, r2
 800b252:	4628      	mov	r0, r5
 800b254:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800b258:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800b25c:	f7f7 f933 	bl	80024c6 <_ZN8touchgfx8Drawable5setXYEss>
 800b260:	2301      	movs	r3, #1
 800b262:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800b266:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b26a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd5c      	ble.n	800b32c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800b272:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800b276:	2b00      	cmp	r3, #0
 800b278:	dd58      	ble.n	800b32c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800b27a:	462a      	mov	r2, r5
 800b27c:	ab0a      	add	r3, sp, #40	; 0x28
 800b27e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b282:	6851      	ldr	r1, [r2, #4]
 800b284:	c303      	stmia	r3!, {r0, r1}
 800b286:	4631      	mov	r1, r6
 800b288:	a80a      	add	r0, sp, #40	; 0x28
 800b28a:	f7ff fbed 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800b28e:	4b38      	ldr	r3, [pc, #224]	; (800b370 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800b290:	2100      	movs	r1, #0
 800b292:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b296:	4b37      	ldr	r3, [pc, #220]	; (800b374 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b298:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b29c:	aa0a      	add	r2, sp, #40	; 0x28
 800b29e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2a2:	910c      	str	r1, [sp, #48]	; 0x30
 800b2a4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800b2a8:	ab08      	add	r3, sp, #32
 800b2aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	a90c      	add	r1, sp, #48	; 0x30
 800b2b6:	f7ff fbd7 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800b2ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d13c      	bne.n	800b33a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800b2c6:	2600      	movs	r6, #0
 800b2c8:	696b      	ldr	r3, [r5, #20]
 800b2ca:	a908      	add	r1, sp, #32
 800b2cc:	682a      	ldr	r2, [r5, #0]
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	9305      	str	r3, [sp, #20]
 800b2d2:	616e      	str	r6, [r5, #20]
 800b2d4:	6892      	ldr	r2, [r2, #8]
 800b2d6:	4790      	blx	r2
 800b2d8:	9b05      	ldr	r3, [sp, #20]
 800b2da:	4652      	mov	r2, sl
 800b2dc:	4649      	mov	r1, r9
 800b2de:	616b      	str	r3, [r5, #20]
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800b2e6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800b2ea:	f7f7 f8ec 	bl	80024c6 <_ZN8touchgfx8Drawable5setXYEss>
 800b2ee:	9a01      	ldr	r2, [sp, #4]
 800b2f0:	4b22      	ldr	r3, [pc, #136]	; (800b37c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	801a      	strh	r2, [r3, #0]
 800b2f6:	9a02      	ldr	r2, [sp, #8]
 800b2f8:	4b21      	ldr	r3, [pc, #132]	; (800b380 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800b2fa:	801a      	strh	r2, [r3, #0]
 800b2fc:	9a03      	ldr	r2, [sp, #12]
 800b2fe:	4b1c      	ldr	r3, [pc, #112]	; (800b370 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800b300:	801a      	strh	r2, [r3, #0]
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800b304:	9a04      	ldr	r2, [sp, #16]
 800b306:	801a      	strh	r2, [r3, #0]
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800b30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b310:	4798      	blx	r3
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	4620      	mov	r0, r4
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	4798      	blx	r3
 800b31a:	b00f      	add	sp, #60	; 0x3c
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	883b      	ldrh	r3, [r7, #0]
 800b322:	f8ab 0000 	strh.w	r0, [fp]
 800b326:	f8aa 3000 	strh.w	r3, [sl]
 800b32a:	e789      	b.n	800b240 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800b32c:	462a      	mov	r2, r5
 800b32e:	ab0a      	add	r3, sp, #40	; 0x28
 800b330:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b334:	6851      	ldr	r1, [r2, #4]
 800b336:	c303      	stmia	r3!, {r0, r1}
 800b338:	e7a9      	b.n	800b28e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800b33a:	a807      	add	r0, sp, #28
 800b33c:	f005 fce8 	bl	8010d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b340:	4606      	mov	r6, r0
 800b342:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b344:	6803      	ldr	r3, [r0, #0]
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	4798      	blx	r3
 800b34a:	4286      	cmp	r6, r0
 800b34c:	d1b8      	bne.n	800b2c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800b34e:	f7ff fe59 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b352:	6803      	ldr	r3, [r0, #0]
 800b354:	4606      	mov	r6, r0
 800b356:	a807      	add	r0, sp, #28
 800b358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35a:	9305      	str	r3, [sp, #20]
 800b35c:	f005 fcd8 	bl	8010d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800b360:	9b05      	ldr	r3, [sp, #20]
 800b362:	4601      	mov	r1, r0
 800b364:	4630      	mov	r0, r6
 800b366:	4798      	blx	r3
 800b368:	f080 0001 	eor.w	r0, r0, #1
 800b36c:	b2c0      	uxtb	r0, r0
 800b36e:	e7a8      	b.n	800b2c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800b370:	2400aee8 	.word	0x2400aee8
 800b374:	2400aeea 	.word	0x2400aeea
 800b378:	2400aeec 	.word	0x2400aeec
 800b37c:	2400aeee 	.word	0x2400aeee
 800b380:	2400aef0 	.word	0x2400aef0

0800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800b384:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800b386:	b510      	push	{r4, lr}
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	4604      	mov	r4, r0
 800b38c:	b13b      	cbz	r3, 800b39e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b38e:	6803      	ldr	r3, [r0, #0]
 800b390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b392:	4798      	blx	r3
 800b394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b396:	4283      	cmp	r3, r0
 800b398:	d101      	bne.n	800b39e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800b39a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b39c:	bd10      	pop	{r4, pc}
 800b39e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b3a0:	e7fc      	b.n	800b39c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800b3a2:	bf00      	nop
 800b3a4:	2400aef2 	.word	0x2400aef2

0800b3a8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ac:	b08a      	sub	sp, #40	; 0x28
 800b3ae:	4692      	mov	sl, r2
 800b3b0:	461d      	mov	r5, r3
 800b3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b6:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 800b3ba:	2400      	movs	r4, #0
 800b3bc:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800b3c6:	fb09 a505 	mla	r5, r9, r5, sl
 800b3ca:	9404      	str	r4, [sp, #16]
 800b3cc:	f8ad 8018 	strh.w	r8, [sp, #24]
 800b3d0:	f8ad 701a 	strh.w	r7, [sp, #26]
 800b3d4:	f88d 4020 	strb.w	r4, [sp, #32]
 800b3d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b3dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b3e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b3e4:	f7ff ffce 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b3e8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b3ec:	f8ad 901e 	strh.w	r9, [sp, #30]
 800b3f0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b3f4:	9505      	str	r5, [sp, #20]
 800b3f6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800b3fa:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b3fe:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b402:	f1b8 0f00 	cmp.w	r8, #0
 800b406:	d000      	beq.n	800b40a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 800b408:	b937      	cbnz	r7, 800b418 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800b40c:	f240 2102 	movw	r1, #514	; 0x202
 800b410:	4a0c      	ldr	r2, [pc, #48]	; (800b444 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800b412:	480d      	ldr	r0, [pc, #52]	; (800b448 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800b414:	f00d fe92 	bl	801913c <__assert_func>
 800b418:	6833      	ldr	r3, [r6, #0]
 800b41a:	4630      	mov	r0, r6
 800b41c:	9c01      	ldr	r4, [sp, #4]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b420:	4798      	blx	r3
 800b422:	4220      	tst	r0, r4
 800b424:	d104      	bne.n	800b430 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 800b426:	4b09      	ldr	r3, [pc, #36]	; (800b44c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 800b428:	f240 2103 	movw	r1, #515	; 0x203
 800b42c:	4a05      	ldr	r2, [pc, #20]	; (800b444 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800b42e:	e7f0      	b.n	800b412 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 800b430:	6870      	ldr	r0, [r6, #4]
 800b432:	a901      	add	r1, sp, #4
 800b434:	6803      	ldr	r3, [r0, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	4798      	blx	r3
 800b43a:	b00a      	add	sp, #40	; 0x28
 800b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b440:	0801b5c7 	.word	0x0801b5c7
 800b444:	0801b820 	.word	0x0801b820
 800b448:	0801b772 	.word	0x0801b772
 800b44c:	0801b5ff 	.word	0x0801b5ff

0800b450 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	b08b      	sub	sp, #44	; 0x2c
 800b456:	4693      	mov	fp, r2
 800b458:	461d      	mov	r5, r3
 800b45a:	2400      	movs	r4, #0
 800b45c:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 800b460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b464:	468a      	mov	sl, r1
 800b466:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 800b46a:	fb09 b505 	mla	r5, r9, r5, fp
 800b46e:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800b472:	4606      	mov	r6, r0
 800b474:	9404      	str	r4, [sp, #16]
 800b476:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b47a:	f7ff ff83 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b47e:	f8ad 8018 	strh.w	r8, [sp, #24]
 800b482:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b486:	f8ad 701a 	strh.w	r7, [sp, #26]
 800b48a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800b48e:	9505      	str	r5, [sp, #20]
 800b490:	f8ad 901e 	strh.w	r9, [sp, #30]
 800b494:	f8cd a010 	str.w	sl, [sp, #16]
 800b498:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b49c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800b4a0:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800b4a4:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800b4a8:	f1b8 0f00 	cmp.w	r8, #0
 800b4ac:	d000      	beq.n	800b4b0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 800b4ae:	b937      	cbnz	r7, 800b4be <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 800b4b0:	4b0d      	ldr	r3, [pc, #52]	; (800b4e8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800b4b2:	f240 2119 	movw	r1, #537	; 0x219
 800b4b6:	4a0d      	ldr	r2, [pc, #52]	; (800b4ec <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800b4b8:	480d      	ldr	r0, [pc, #52]	; (800b4f0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800b4ba:	f00d fe3f 	bl	801913c <__assert_func>
 800b4be:	6833      	ldr	r3, [r6, #0]
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	9c01      	ldr	r4, [sp, #4]
 800b4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c6:	4798      	blx	r3
 800b4c8:	4220      	tst	r0, r4
 800b4ca:	d104      	bne.n	800b4d6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 800b4ce:	f240 211a 	movw	r1, #538	; 0x21a
 800b4d2:	4a06      	ldr	r2, [pc, #24]	; (800b4ec <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800b4d4:	e7f0      	b.n	800b4b8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 800b4d6:	6870      	ldr	r0, [r6, #4]
 800b4d8:	a901      	add	r1, sp, #4
 800b4da:	6803      	ldr	r3, [r0, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	4798      	blx	r3
 800b4e0:	b00b      	add	sp, #44	; 0x2c
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0801b644 	.word	0x0801b644
 800b4ec:	0801b896 	.word	0x0801b896
 800b4f0:	0801b772 	.word	0x0801b772
 800b4f4:	0801b67c 	.word	0x0801b67c

0800b4f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800b4f8:	b508      	push	{r3, lr}
 800b4fa:	290d      	cmp	r1, #13
 800b4fc:	d817      	bhi.n	800b52e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800b4fe:	e8df f001 	tbb	[pc, r1]
 800b502:	090b      	.short	0x090b
 800b504:	0d0d0d07 	.word	0x0d0d0d07
 800b508:	1414140d 	.word	0x1414140d
 800b50c:	0d0d1414 	.word	0x0d0d1414
 800b510:	2020      	movs	r0, #32
 800b512:	bd08      	pop	{r3, pc}
 800b514:	2018      	movs	r0, #24
 800b516:	e7fc      	b.n	800b512 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b518:	2010      	movs	r0, #16
 800b51a:	e7fa      	b.n	800b512 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800b51e:	f240 2183 	movw	r1, #643	; 0x283
 800b522:	4a05      	ldr	r2, [pc, #20]	; (800b538 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800b524:	4805      	ldr	r0, [pc, #20]	; (800b53c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800b526:	f00d fe09 	bl	801913c <__assert_func>
 800b52a:	2008      	movs	r0, #8
 800b52c:	e7f1      	b.n	800b512 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b52e:	2000      	movs	r0, #0
 800b530:	e7ef      	b.n	800b512 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800b532:	bf00      	nop
 800b534:	0801b7ee 	.word	0x0801b7ee
 800b538:	0801bbc1 	.word	0x0801bbc1
 800b53c:	0801b772 	.word	0x0801b772

0800b540 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	460d      	mov	r5, r1
 800b544:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800b548:	4616      	mov	r6, r2
 800b54a:	461c      	mov	r4, r3
 800b54c:	f7ff ffd4 	bl	800b4f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800b550:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800b554:	10c0      	asrs	r0, r0, #3
 800b556:	fb06 5101 	mla	r1, r6, r1, r5
 800b55a:	fb00 4001 	mla	r0, r0, r1, r4
 800b55e:	bd70      	pop	{r4, r5, r6, pc}

0800b560 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800b560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	b08c      	sub	sp, #48	; 0x30
 800b566:	f04f 0c00 	mov.w	ip, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	469a      	mov	sl, r3
 800b56e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 800b572:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800b576:	2d0b      	cmp	r5, #11
 800b578:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800b57c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800b580:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800b584:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 800b588:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 800b58c:	f8cd c018 	str.w	ip, [sp, #24]
 800b590:	d130      	bne.n	800b5f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 800b592:	2080      	movs	r0, #128	; 0x80
 800b594:	9205      	str	r2, [sp, #20]
 800b596:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800b59a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800b59e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800b5a2:	f8ad 7020 	strh.w	r7, [sp, #32]
 800b5a6:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800b5aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff fee8 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b5b4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	4651      	mov	r1, sl
 800b5bc:	4620      	mov	r0, r4
 800b5be:	e9cd 9800 	strd	r9, r8, [sp]
 800b5c2:	f7ff ffbd 	bl	800b540 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800b5c6:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800b5ca:	9007      	str	r0, [sp, #28]
 800b5cc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 800b5d6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800b5da:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800b5de:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b5e2:	b107      	cbz	r7, 800b5e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 800b5e4:	b9d6      	cbnz	r6, 800b61c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 800b5e6:	4b17      	ldr	r3, [pc, #92]	; (800b644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800b5e8:	f240 11c9 	movw	r1, #457	; 0x1c9
 800b5ec:	4a16      	ldr	r2, [pc, #88]	; (800b648 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800b5ee:	4817      	ldr	r0, [pc, #92]	; (800b64c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800b5f0:	f00d fda4 	bl	801913c <__assert_func>
 800b5f4:	2d02      	cmp	r5, #2
 800b5f6:	d108      	bne.n	800b60a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800b5f8:	2bff      	cmp	r3, #255	; 0xff
 800b5fa:	d104      	bne.n	800b606 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	bf14      	ite	ne
 800b600:	2040      	movne	r0, #64	; 0x40
 800b602:	2020      	moveq	r0, #32
 800b604:	e7c6      	b.n	800b594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800b606:	2040      	movs	r0, #64	; 0x40
 800b608:	e7c4      	b.n	800b594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800b60a:	2bff      	cmp	r3, #255	; 0xff
 800b60c:	d104      	bne.n	800b618 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 800b60e:	2800      	cmp	r0, #0
 800b610:	bf14      	ite	ne
 800b612:	2004      	movne	r0, #4
 800b614:	2001      	moveq	r0, #1
 800b616:	e7bd      	b.n	800b594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800b618:	2004      	movs	r0, #4
 800b61a:	e7bb      	b.n	800b594 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	4620      	mov	r0, r4
 800b620:	9d03      	ldr	r5, [sp, #12]
 800b622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b624:	4798      	blx	r3
 800b626:	4228      	tst	r0, r5
 800b628:	d104      	bne.n	800b634 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 800b62c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800b630:	4a05      	ldr	r2, [pc, #20]	; (800b648 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800b632:	e7dc      	b.n	800b5ee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800b634:	6860      	ldr	r0, [r4, #4]
 800b636:	a903      	add	r1, sp, #12
 800b638:	6803      	ldr	r3, [r0, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	4798      	blx	r3
 800b63e:	b00c      	add	sp, #48	; 0x30
 800b640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b644:	0801b5c7 	.word	0x0801b5c7
 800b648:	0801ba4f 	.word	0x0801ba4f
 800b64c:	0801b772 	.word	0x0801b772
 800b650:	0801b5ff 	.word	0x0801b5ff

0800b654 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	b08d      	sub	sp, #52	; 0x34
 800b65a:	469b      	mov	fp, r3
 800b65c:	2500      	movs	r5, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 800b664:	4692      	mov	sl, r2
 800b666:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 800b66a:	4689      	mov	r9, r1
 800b66c:	2fff      	cmp	r7, #255	; 0xff
 800b66e:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800b672:	9506      	str	r5, [sp, #24]
 800b674:	bf14      	ite	ne
 800b676:	2308      	movne	r3, #8
 800b678:	2302      	moveq	r3, #2
 800b67a:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800b67e:	f7ff fe81 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b682:	465a      	mov	r2, fp
 800b684:	4603      	mov	r3, r0
 800b686:	4651      	mov	r1, sl
 800b688:	4620      	mov	r0, r4
 800b68a:	e9cd 8600 	strd	r8, r6, [sp]
 800b68e:	f7ff ff57 	bl	800b540 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800b692:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800b696:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800b69a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b69e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800b6a2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800b6a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800b6aa:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800b6ae:	9d03      	ldr	r5, [sp, #12]
 800b6b0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	9007      	str	r0, [sp, #28]
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 800b6be:	f8cd 9018 	str.w	r9, [sp, #24]
 800b6c2:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800b6c6:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800b6ca:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d0:	4798      	blx	r3
 800b6d2:	4228      	tst	r0, r5
 800b6d4:	d106      	bne.n	800b6e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800b6d8:	f44f 710c 	mov.w	r1, #560	; 0x230
 800b6dc:	4a06      	ldr	r2, [pc, #24]	; (800b6f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800b6de:	4807      	ldr	r0, [pc, #28]	; (800b6fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 800b6e0:	f00d fd2c 	bl	801913c <__assert_func>
 800b6e4:	6860      	ldr	r0, [r4, #4]
 800b6e6:	a903      	add	r1, sp, #12
 800b6e8:	6803      	ldr	r3, [r0, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	4798      	blx	r3
 800b6ee:	b00d      	add	sp, #52	; 0x34
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f4:	0801b5ff 	.word	0x0801b5ff
 800b6f8:	0801bb26 	.word	0x0801bb26
 800b6fc:	0801b772 	.word	0x0801b772

0800b700 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800b700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b704:	461f      	mov	r7, r3
 800b706:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800b708:	460d      	mov	r5, r1
 800b70a:	4616      	mov	r6, r2
 800b70c:	f8b3 8000 	ldrh.w	r8, [r3]
 800b710:	4604      	mov	r4, r0
 800b712:	f7ff fc77 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b716:	6803      	ldr	r3, [r0, #0]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	4798      	blx	r3
 800b71c:	463b      	mov	r3, r7
 800b71e:	4632      	mov	r2, r6
 800b720:	4629      	mov	r1, r5
 800b722:	e9cd 8000 	strd	r8, r0, [sp]
 800b726:	4620      	mov	r0, r4
 800b728:	f7ff ff0a 	bl	800b540 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800b72c:	b002      	add	sp, #8
 800b72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b732:	bf00      	nop
 800b734:	2400aeee 	.word	0x2400aeee

0800b738 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800b738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b73c:	b08b      	sub	sp, #44	; 0x2c
 800b73e:	4699      	mov	r9, r3
 800b740:	4690      	mov	r8, r2
 800b742:	4604      	mov	r4, r0
 800b744:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800b748:	2500      	movs	r5, #0
 800b74a:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 800b74e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800b752:	9504      	str	r5, [sp, #16]
 800b754:	f8ad 7018 	strh.w	r7, [sp, #24]
 800b758:	f8ad 601a 	strh.w	r6, [sp, #26]
 800b75c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b760:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b764:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b768:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b76c:	f88d 3020 	strb.w	r3, [sp, #32]
 800b770:	f7ff fe08 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b774:	464a      	mov	r2, r9
 800b776:	4603      	mov	r3, r0
 800b778:	4641      	mov	r1, r8
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff ffc0 	bl	800b700 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b780:	4b19      	ldr	r3, [pc, #100]	; (800b7e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800b782:	9005      	str	r0, [sp, #20]
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b78a:	f7ff fc3b 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b78e:	6803      	ldr	r3, [r0, #0]
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	4798      	blx	r3
 800b794:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800b798:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800b79c:	b107      	cbz	r7, 800b7a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800b79e:	b936      	cbnz	r6, 800b7ae <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800b7a0:	4b12      	ldr	r3, [pc, #72]	; (800b7ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800b7a2:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800b7a6:	4a12      	ldr	r2, [pc, #72]	; (800b7f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800b7a8:	4812      	ldr	r0, [pc, #72]	; (800b7f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800b7aa:	f00d fcc7 	bl	801913c <__assert_func>
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	9e01      	ldr	r6, [sp, #4]
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b6:	4798      	blx	r3
 800b7b8:	4230      	tst	r0, r6
 800b7ba:	d104      	bne.n	800b7c6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800b7bc:	4b0e      	ldr	r3, [pc, #56]	; (800b7f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 800b7be:	f240 11e7 	movw	r1, #487	; 0x1e7
 800b7c2:	4a0b      	ldr	r2, [pc, #44]	; (800b7f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800b7c4:	e7f0      	b.n	800b7a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800b7c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7c8:	a901      	add	r1, sp, #4
 800b7ca:	6860      	ldr	r0, [r4, #4]
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800b7d2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800b7d6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800b7da:	6803      	ldr	r3, [r0, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	4798      	blx	r3
 800b7e0:	b00b      	add	sp, #44	; 0x2c
 800b7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e6:	bf00      	nop
 800b7e8:	2400aeee 	.word	0x2400aeee
 800b7ec:	0801b5c7 	.word	0x0801b5c7
 800b7f0:	0801b8fb 	.word	0x0801b8fb
 800b7f4:	0801b772 	.word	0x0801b772
 800b7f8:	0801b5ff 	.word	0x0801b5ff

0800b7fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fe:	b08d      	sub	sp, #52	; 0x34
 800b800:	4604      	mov	r4, r0
 800b802:	466b      	mov	r3, sp
 800b804:	e883 0006 	stmia.w	r3, {r1, r2}
 800b808:	4b21      	ldr	r3, [pc, #132]	; (800b890 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	b933      	cbnz	r3, 800b81c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800b80e:	4b21      	ldr	r3, [pc, #132]	; (800b894 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800b810:	f240 2141 	movw	r1, #577	; 0x241
 800b814:	4a20      	ldr	r2, [pc, #128]	; (800b898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800b816:	4821      	ldr	r0, [pc, #132]	; (800b89c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800b818:	f00d fc90 	bl	801913c <__assert_func>
 800b81c:	2300      	movs	r3, #0
 800b81e:	2501      	movs	r5, #1
 800b820:	f8bd 6000 	ldrh.w	r6, [sp]
 800b824:	9306      	str	r3, [sp, #24]
 800b826:	6803      	ldr	r3, [r0, #0]
 800b828:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800b82c:	9503      	str	r5, [sp, #12]
 800b82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b830:	4798      	blx	r3
 800b832:	463a      	mov	r2, r7
 800b834:	4631      	mov	r1, r6
 800b836:	4603      	mov	r3, r0
 800b838:	4620      	mov	r0, r4
 800b83a:	f7ff ff61 	bl	800b700 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b83e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b840:	9004      	str	r0, [sp, #16]
 800b842:	9307      	str	r3, [sp, #28]
 800b844:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b848:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b84c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b850:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800b854:	4b12      	ldr	r3, [pc, #72]	; (800b8a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800b85c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800b860:	f7ff fbd0 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b864:	6803      	ldr	r3, [r0, #0]
 800b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b868:	4798      	blx	r3
 800b86a:	23ff      	movs	r3, #255	; 0xff
 800b86c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800b870:	a903      	add	r1, sp, #12
 800b872:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800b876:	6860      	ldr	r0, [r4, #4]
 800b878:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800b87c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800b880:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800b884:	6803      	ldr	r3, [r0, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	4798      	blx	r3
 800b88a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b88c:	b00d      	add	sp, #52	; 0x34
 800b88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b890:	2400aef3 	.word	0x2400aef3
 800b894:	0801b6c6 	.word	0x0801b6c6
 800b898:	0801b9a5 	.word	0x0801b9a5
 800b89c:	0801b772 	.word	0x0801b772
 800b8a0:	2400aeee 	.word	0x2400aeee

0800b8a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	b08c      	sub	sp, #48	; 0x30
 800b8aa:	461e      	mov	r6, r3
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	466d      	mov	r5, sp
 800b8b2:	9306      	str	r3, [sp, #24]
 800b8b4:	6803      	ldr	r3, [r0, #0]
 800b8b6:	e885 0006 	stmia.w	r5, {r1, r2}
 800b8ba:	2501      	movs	r5, #1
 800b8bc:	f8bd 7000 	ldrh.w	r7, [sp]
 800b8c0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800b8c4:	9503      	str	r5, [sp, #12]
 800b8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c8:	4798      	blx	r3
 800b8ca:	4642      	mov	r2, r8
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f7ff ff15 	bl	800b700 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b8d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b8da:	9004      	str	r0, [sp, #16]
 800b8dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b8e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b8e4:	9607      	str	r6, [sp, #28]
 800b8e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800b8ea:	4b10      	ldr	r3, [pc, #64]	; (800b92c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800b8f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8f4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800b8f8:	f7ff fb84 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 800b8fc:	6803      	ldr	r3, [r0, #0]
 800b8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b900:	4798      	blx	r3
 800b902:	23ff      	movs	r3, #255	; 0xff
 800b904:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800b908:	a903      	add	r1, sp, #12
 800b90a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800b90e:	6860      	ldr	r0, [r4, #4]
 800b910:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800b914:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800b918:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800b91c:	6803      	ldr	r3, [r0, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	4798      	blx	r3
 800b922:	4630      	mov	r0, r6
 800b924:	b00c      	add	sp, #48	; 0x30
 800b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b92a:	bf00      	nop
 800b92c:	2400aeee 	.word	0x2400aeee

0800b930 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800b930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b932:	b085      	sub	sp, #20
 800b934:	4605      	mov	r5, r0
 800b936:	ac02      	add	r4, sp, #8
 800b938:	e884 0006 	stmia.w	r4, {r1, r2}
 800b93c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800b940:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800b944:	f7ff fd1e 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b948:	4631      	mov	r1, r6
 800b94a:	4603      	mov	r3, r0
 800b94c:	463a      	mov	r2, r7
 800b94e:	4628      	mov	r0, r5
 800b950:	f7ff fed6 	bl	800b700 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800b954:	4a05      	ldr	r2, [pc, #20]	; (800b96c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800b956:	682b      	ldr	r3, [r5, #0]
 800b958:	8812      	ldrh	r2, [r2, #0]
 800b95a:	9200      	str	r2, [sp, #0]
 800b95c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800b95e:	4603      	mov	r3, r0
 800b960:	4628      	mov	r0, r5
 800b962:	e894 0006 	ldmia.w	r4, {r1, r2}
 800b966:	47b0      	blx	r6
 800b968:	b005      	add	sp, #20
 800b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b96c:	2400aeee 	.word	0x2400aeee

0800b970 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800b976:	4604      	mov	r4, r0
 800b978:	b19b      	cbz	r3, 800b9a2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800b97a:	2002      	movs	r0, #2
 800b97c:	f7f5 fd05 	bl	800138a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800b980:	2300      	movs	r3, #0
 800b982:	4620      	mov	r0, r4
 800b984:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b988:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800b992:	f7ff fcf7 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b996:	4601      	mov	r1, r0
 800b998:	4620      	mov	r0, r4
 800b99a:	462b      	mov	r3, r5
 800b99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9a0:	4718      	bx	r3
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}

0800b9a4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	2003      	movs	r0, #3
 800b9ac:	b149      	cbz	r1, 800b9c2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800b9ae:	f7f5 fcea 	bl	8001386 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b9b2:	6928      	ldr	r0, [r5, #16]
 800b9b4:	b168      	cbz	r0, 800b9d2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800b9b6:	6803      	ldr	r3, [r0, #0]
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9c0:	4718      	bx	r3
 800b9c2:	f7f5 fce1 	bl	8001388 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b9c6:	6928      	ldr	r0, [r5, #16]
 800b9c8:	b118      	cbz	r0, 800b9d2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800b9ca:	6803      	ldr	r3, [r0, #0]
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	e7f4      	b.n	800b9bc <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}

0800b9d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800b9da:	4604      	mov	r4, r0
 800b9dc:	460d      	mov	r5, r1
 800b9de:	428b      	cmp	r3, r1
 800b9e0:	d006      	beq.n	800b9f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800b9e2:	6803      	ldr	r3, [r0, #0]
 800b9e4:	b929      	cbnz	r1, 800b9f2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800b9e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b9ea:	4798      	blx	r3
 800b9ec:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
 800b9f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b9f6:	e7f8      	b.n	800b9ea <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800b9f8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	; (800ba30 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	4604      	mov	r4, r0
 800ba00:	b95b      	cbnz	r3, 800ba1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ba02:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d007      	beq.n	800ba1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ba0a:	6840      	ldr	r0, [r0, #4]
 800ba0c:	f000 f93c 	bl	800bc88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ba10:	b118      	cbz	r0, 800ba1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ba12:	6862      	ldr	r2, [r4, #4]
 800ba14:	7a53      	ldrb	r3, [r2, #9]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0fc      	beq.n	800ba14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ba1a:	f7f5 ffb7 	bl	800198c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ba1e:	4620      	mov	r0, r4
 800ba20:	2100      	movs	r1, #0
 800ba22:	f7ff ffd7 	bl	800b9d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7ff fcac 	bl	800b384 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ba2c:	bd10      	pop	{r4, pc}
 800ba2e:	bf00      	nop
 800ba30:	2400aef2 	.word	0x2400aef2

0800ba34 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ba34:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ba38:	1a13      	subs	r3, r2, r0
 800ba3a:	4258      	negs	r0, r3
 800ba3c:	4158      	adcs	r0, r3
 800ba3e:	4770      	bx	lr

0800ba40 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ba40:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ba44:	1a9b      	subs	r3, r3, r2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	bfdc      	itt	le
 800ba4a:	6882      	ldrle	r2, [r0, #8]
 800ba4c:	189b      	addle	r3, r3, r2
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	bfcc      	ite	gt
 800ba52:	2000      	movgt	r0, #0
 800ba54:	2001      	movle	r0, #1
 800ba56:	4770      	bx	lr

0800ba58 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ba58:	6902      	ldr	r2, [r0, #16]
 800ba5a:	6843      	ldr	r3, [r0, #4]
 800ba5c:	2024      	movs	r0, #36	; 0x24
 800ba5e:	fb00 3002 	mla	r0, r0, r2, r3
 800ba62:	4770      	bx	lr

0800ba64 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ba64:	6803      	ldr	r3, [r0, #0]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	4718      	bx	r3

0800ba6a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ba6a:	4770      	bx	lr

0800ba6c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ba6c:	4770      	bx	lr

0800ba6e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800ba6e:	4770      	bx	lr

0800ba70 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800ba70:	2301      	movs	r3, #1
 800ba72:	b570      	push	{r4, r5, r6, lr}
 800ba74:	7203      	strb	r3, [r0, #8]
 800ba76:	4604      	mov	r4, r0
 800ba78:	6840      	ldr	r0, [r0, #4]
 800ba7a:	6803      	ldr	r3, [r0, #0]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	4798      	blx	r3
 800ba80:	6803      	ldr	r3, [r0, #0]
 800ba82:	4605      	mov	r5, r0
 800ba84:	2b40      	cmp	r3, #64	; 0x40
 800ba86:	d039      	beq.n	800bafc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ba88:	d815      	bhi.n	800bab6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	d022      	beq.n	800bad4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800ba8e:	d808      	bhi.n	800baa2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d033      	beq.n	800bafc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d108      	bne.n	800baaa <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	4798      	blx	r3
 800baa0:	e025      	b.n	800baee <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800baa2:	2b08      	cmp	r3, #8
 800baa4:	d01e      	beq.n	800bae4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	d028      	beq.n	800bafc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800baaa:	4b17      	ldr	r3, [pc, #92]	; (800bb08 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800baac:	2188      	movs	r1, #136	; 0x88
 800baae:	4a17      	ldr	r2, [pc, #92]	; (800bb0c <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800bab0:	4817      	ldr	r0, [pc, #92]	; (800bb10 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800bab2:	f00d fb43 	bl	801913c <__assert_func>
 800bab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baba:	d01f      	beq.n	800bafc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800babc:	d804      	bhi.n	800bac8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800babe:	2b80      	cmp	r3, #128	; 0x80
 800bac0:	d01c      	beq.n	800bafc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800bac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bac6:	e7ef      	b.n	800baa8 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800bac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bacc:	d016      	beq.n	800bafc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800bace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bad2:	e7e0      	b.n	800ba96 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	7f01      	ldrb	r1, [r0, #28]
 800bad8:	4620      	mov	r0, r4
 800bada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800badc:	4798      	blx	r3
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae2:	e006      	b.n	800baf2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	7f01      	ldrb	r1, [r0, #28]
 800bae8:	4620      	mov	r0, r4
 800baea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baec:	4798      	blx	r3
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf2:	4629      	mov	r1, r5
 800baf4:	4620      	mov	r0, r4
 800baf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bafa:	4718      	bx	r3
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	4620      	mov	r0, r4
 800bb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb02:	4798      	blx	r3
 800bb04:	e7eb      	b.n	800bade <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800bb06:	bf00      	nop
 800bb08:	0801bc0a 	.word	0x0801bc0a
 800bb0c:	0801bccc 	.word	0x0801bccc
 800bb10:	0801bc2f 	.word	0x0801bc2f

0800bb14 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	4604      	mov	r4, r0
 800bb18:	460e      	mov	r6, r1
 800bb1a:	6860      	ldr	r0, [r4, #4]
 800bb1c:	6803      	ldr	r3, [r0, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	4798      	blx	r3
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d1f9      	bne.n	800bb1a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800bb26:	4d0d      	ldr	r5, [pc, #52]	; (800bb5c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800bb28:	6828      	ldr	r0, [r5, #0]
 800bb2a:	6803      	ldr	r3, [r0, #0]
 800bb2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb2e:	4798      	blx	r3
 800bb30:	f7f5 ff3a 	bl	80019a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800bb34:	6828      	ldr	r0, [r5, #0]
 800bb36:	2101      	movs	r1, #1
 800bb38:	f7ff ff4c 	bl	800b9d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800bb3c:	6860      	ldr	r0, [r4, #4]
 800bb3e:	4631      	mov	r1, r6
 800bb40:	6803      	ldr	r3, [r0, #0]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	4798      	blx	r3
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	4620      	mov	r0, r4
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	4798      	blx	r3
 800bb4e:	6828      	ldr	r0, [r5, #0]
 800bb50:	6803      	ldr	r3, [r0, #0]
 800bb52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb58:	4718      	bx	r3
 800bb5a:	bf00      	nop
 800bb5c:	2400aef4 	.word	0x2400aef4

0800bb60 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800bb60:	b508      	push	{r3, lr}
 800bb62:	f7f5 ff13 	bl	800198c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800bb66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb6a:	f7f5 bf17 	b.w	800199c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800bb6e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	4604      	mov	r4, r0
 800bb72:	2114      	movs	r1, #20
 800bb74:	f00d fab3 	bl	80190de <_ZdlPvj>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	bd10      	pop	{r4, pc}

0800bb7c <_ZN8touchgfx13DMA_Interface5startEv>:
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	4604      	mov	r4, r0
 800bb80:	6840      	ldr	r0, [r0, #4]
 800bb82:	6803      	ldr	r3, [r0, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4798      	blx	r3
 800bb88:	b948      	cbnz	r0, 800bb9e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800bb8a:	7a63      	ldrb	r3, [r4, #9]
 800bb8c:	b13b      	cbz	r3, 800bb9e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800bb8e:	7a23      	ldrb	r3, [r4, #8]
 800bb90:	b92b      	cbnz	r3, 800bb9e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	4620      	mov	r0, r4
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb9c:	4718      	bx	r3
 800bb9e:	bd10      	pop	{r4, pc}

0800bba0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800bba6:	1ad2      	subs	r2, r2, r3
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	bfdc      	itt	le
 800bbac:	6884      	ldrle	r4, [r0, #8]
 800bbae:	1912      	addle	r2, r2, r4
 800bbb0:	2a01      	cmp	r2, #1
 800bbb2:	dd17      	ble.n	800bbe4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 800bbb4:	6842      	ldr	r2, [r0, #4]
 800bbb6:	2424      	movs	r4, #36	; 0x24
 800bbb8:	fb04 2303 	mla	r3, r4, r3, r2
 800bbbc:	f101 0220 	add.w	r2, r1, #32
 800bbc0:	f851 4b04 	ldr.w	r4, [r1], #4
 800bbc4:	4291      	cmp	r1, r2
 800bbc6:	f843 4b04 	str.w	r4, [r3], #4
 800bbca:	d1f9      	bne.n	800bbc0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800bbcc:	780a      	ldrb	r2, [r1, #0]
 800bbce:	701a      	strb	r2, [r3, #0]
 800bbd0:	68c3      	ldr	r3, [r0, #12]
 800bbd2:	6882      	ldr	r2, [r0, #8]
 800bbd4:	f3bf 8f5b 	dmb	ish
 800bbd8:	3301      	adds	r3, #1
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	bfd8      	it	le
 800bbde:	1a9b      	suble	r3, r3, r2
 800bbe0:	60c3      	str	r3, [r0, #12]
 800bbe2:	bd10      	pop	{r4, pc}
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800bbe6:	2136      	movs	r1, #54	; 0x36
 800bbe8:	4a02      	ldr	r2, [pc, #8]	; (800bbf4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800bbea:	4803      	ldr	r0, [pc, #12]	; (800bbf8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800bbec:	f00d faa6 	bl	801913c <__assert_func>
 800bbf0:	0801bc55 	.word	0x0801bc55
 800bbf4:	0801bcfc 	.word	0x0801bcfc
 800bbf8:	0801bc2f 	.word	0x0801bc2f

0800bbfc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	6803      	ldr	r3, [r0, #0]
 800bc00:	4604      	mov	r4, r0
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4798      	blx	r3
 800bc06:	b128      	cbz	r0, 800bc14 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800bc08:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800bc0a:	213c      	movs	r1, #60	; 0x3c
 800bc0c:	4a07      	ldr	r2, [pc, #28]	; (800bc2c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800bc0e:	4808      	ldr	r0, [pc, #32]	; (800bc30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800bc10:	f00d fa94 	bl	801913c <__assert_func>
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	68a2      	ldr	r2, [r4, #8]
 800bc18:	f3bf 8f5b 	dmb	ish
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	bfd8      	it	le
 800bc22:	1a9b      	suble	r3, r3, r2
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	bd10      	pop	{r4, pc}
 800bc28:	0801bc78 	.word	0x0801bc78
 800bc2c:	0801bd4a 	.word	0x0801bd4a
 800bc30:	0801bc2f 	.word	0x0801bc2f

0800bc34 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	6840      	ldr	r0, [r0, #4]
 800bc3a:	6803      	ldr	r3, [r0, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4798      	blx	r3
 800bc40:	4605      	mov	r5, r0
 800bc42:	b930      	cbnz	r0, 800bc52 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800bc44:	7a23      	ldrb	r3, [r4, #8]
 800bc46:	b123      	cbz	r3, 800bc52 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800bc48:	6860      	ldr	r0, [r4, #4]
 800bc4a:	6803      	ldr	r3, [r0, #0]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	4798      	blx	r3
 800bc50:	7225      	strb	r5, [r4, #8]
 800bc52:	6860      	ldr	r0, [r4, #4]
 800bc54:	6803      	ldr	r3, [r0, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4798      	blx	r3
 800bc5a:	b928      	cbnz	r0, 800bc68 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc66:	4718      	bx	r3
 800bc68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc6c:	f7f5 bea4 	b.w	80019b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800bc70 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	6082      	str	r2, [r0, #8]
 800bc74:	2200      	movs	r2, #0
 800bc76:	4c03      	ldr	r4, [pc, #12]	; (800bc84 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800bc78:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800bc7c:	e9c0 4100 	strd	r4, r1, [r0]
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	bf00      	nop
 800bc84:	0801bcb0 	.word	0x0801bcb0

0800bc88 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800bc88:	6840      	ldr	r0, [r0, #4]
 800bc8a:	6803      	ldr	r3, [r0, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4718      	bx	r3

0800bc90 <_ZN8touchgfx8TextArea8setWidthEs>:
 800bc90:	b530      	push	{r4, r5, lr}
 800bc92:	b085      	sub	sp, #20
 800bc94:	6803      	ldr	r3, [r0, #0]
 800bc96:	4604      	mov	r4, r0
 800bc98:	8101      	strh	r1, [r0, #8]
 800bc9a:	466d      	mov	r5, sp
 800bc9c:	4601      	mov	r1, r0
 800bc9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca2:	343c      	adds	r4, #60	; 0x3c
 800bca4:	4628      	mov	r0, r5
 800bca6:	4798      	blx	r3
 800bca8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bcac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bcb0:	b005      	add	sp, #20
 800bcb2:	bd30      	pop	{r4, r5, pc}

0800bcb4 <_ZN8touchgfx8TextArea9setHeightEs>:
 800bcb4:	b530      	push	{r4, r5, lr}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	6803      	ldr	r3, [r0, #0]
 800bcba:	4604      	mov	r4, r0
 800bcbc:	8141      	strh	r1, [r0, #10]
 800bcbe:	466d      	mov	r5, sp
 800bcc0:	4601      	mov	r1, r0
 800bcc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcc6:	343c      	adds	r4, #60	; 0x3c
 800bcc8:	4628      	mov	r0, r5
 800bcca:	4798      	blx	r3
 800bccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bcd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bcd4:	b005      	add	sp, #20
 800bcd6:	bd30      	pop	{r4, r5, pc}

0800bcd8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800bcd8:	2200      	movs	r2, #0
 800bcda:	8002      	strh	r2, [r0, #0]
 800bcdc:	8042      	strh	r2, [r0, #2]
 800bcde:	8082      	strh	r2, [r0, #4]
 800bce0:	80c2      	strh	r2, [r0, #6]
 800bce2:	4770      	bx	lr

0800bce4 <_ZN8touchgfx8TextArea8setAlphaEh>:
 800bce4:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 800bce8:	4770      	bx	lr

0800bcea <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	6803      	ldr	r3, [r0, #0]
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4615      	mov	r5, r2
 800bcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf4:	4798      	blx	r3
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd02:	4718      	bx	r3

0800bd04 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800bd04:	2000      	movs	r0, #0
 800bd06:	4770      	bx	lr

0800bd08 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 800bd08:	2000      	movs	r0, #0
 800bd0a:	4770      	bx	lr

0800bd0c <_ZN8touchgfx8TextAreaD1Ev>:
 800bd0c:	4770      	bx	lr
	...

0800bd10 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	6803      	ldr	r3, [r0, #0]
 800bd14:	4604      	mov	r4, r0
 800bd16:	b28d      	uxth	r5, r1
 800bd18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800bd1a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800bd1c:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	b92b      	cbnz	r3, 800bd2e <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800bd22:	4b10      	ldr	r3, [pc, #64]	; (800bd64 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800bd24:	21ae      	movs	r1, #174	; 0xae
 800bd26:	4a10      	ldr	r2, [pc, #64]	; (800bd68 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800bd28:	4810      	ldr	r0, [pc, #64]	; (800bd6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800bd2a:	f00d fa07 	bl	801913c <__assert_func>
 800bd2e:	4910      	ldr	r1, [pc, #64]	; (800bd70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800bd30:	8809      	ldrh	r1, [r1, #0]
 800bd32:	4291      	cmp	r1, r2
 800bd34:	d803      	bhi.n	800bd3e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800bd36:	4b0f      	ldr	r3, [pc, #60]	; (800bd74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800bd38:	21af      	movs	r1, #175	; 0xaf
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	; (800bd68 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800bd3c:	e7f4      	b.n	800bd28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800bd3e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800bd42:	4b0d      	ldr	r3, [pc, #52]	; (800bd78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bd4a:	6803      	ldr	r3, [r0, #0]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4e:	4798      	blx	r3
 800bd50:	1a29      	subs	r1, r5, r0
 800bd52:	4633      	mov	r3, r6
 800bd54:	4620      	mov	r0, r4
 800bd56:	b209      	sxth	r1, r1
 800bd58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd5c:	4718      	bx	r3
 800bd5e:	bf00      	nop
 800bd60:	2400af44 	.word	0x2400af44
 800bd64:	0801bd7a 	.word	0x0801bd7a
 800bd68:	0801beb4 	.word	0x0801beb4
 800bd6c:	0801bdbc 	.word	0x0801bdbc
 800bd70:	2400af48 	.word	0x2400af48
 800bd74:	0801bde5 	.word	0x0801bde5
 800bd78:	2400af4c 	.word	0x2400af4c

0800bd7c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800bd7c:	4b1b      	ldr	r3, [pc, #108]	; (800bdec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800bd7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd82:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800bd84:	4604      	mov	r4, r0
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	d92d      	bls.n	800bde8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>
 800bd8c:	4b18      	ldr	r3, [pc, #96]	; (800bdf0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	b92b      	cbnz	r3, 800bd9e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x22>
 800bd92:	4b18      	ldr	r3, [pc, #96]	; (800bdf4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800bd94:	21ae      	movs	r1, #174	; 0xae
 800bd96:	4a18      	ldr	r2, [pc, #96]	; (800bdf8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800bd98:	4818      	ldr	r0, [pc, #96]	; (800bdfc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800bd9a:	f00d f9cf 	bl	801913c <__assert_func>
 800bd9e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800bda2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800bda6:	4b16      	ldr	r3, [pc, #88]	; (800be00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x84>)
 800bda8:	7855      	ldrb	r5, [r2, #1]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800bdb0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800bdb4:	6833      	ldr	r3, [r6, #0]
 800bdb6:	69df      	ldr	r7, [r3, #28]
 800bdb8:	4b12      	ldr	r3, [pc, #72]	; (800be04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x88>)
 800bdba:	6818      	ldr	r0, [r3, #0]
 800bdbc:	f7f6 fd78 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdc8:	4798      	blx	r3
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	4681      	mov	r9, r0
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdd4:	4798      	blx	r3
 800bdd6:	464b      	mov	r3, r9
 800bdd8:	9000      	str	r0, [sp, #0]
 800bdda:	4642      	mov	r2, r8
 800bddc:	4629      	mov	r1, r5
 800bdde:	4630      	mov	r0, r6
 800bde0:	47b8      	blx	r7
 800bde2:	b003      	add	sp, #12
 800bde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde8:	2000      	movs	r0, #0
 800bdea:	e7fa      	b.n	800bde2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x66>
 800bdec:	2400af48 	.word	0x2400af48
 800bdf0:	2400af44 	.word	0x2400af44
 800bdf4:	0801bd7a 	.word	0x0801bd7a
 800bdf8:	0801beb4 	.word	0x0801beb4
 800bdfc:	0801bdbc 	.word	0x0801bdbc
 800be00:	2400af4c 	.word	0x2400af4c
 800be04:	2400af50 	.word	0x2400af50

0800be08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800be08:	b40e      	push	{r1, r2, r3}
 800be0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800bf00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 800be12:	b09c      	sub	sp, #112	; 0x70
 800be14:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800be16:	4604      	mov	r4, r0
 800be18:	f8b9 3000 	ldrh.w	r3, [r9]
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d965      	bls.n	800beec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 800be20:	ab26      	add	r3, sp, #152	; 0x98
 800be22:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800bf04 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 800be26:	9302      	str	r3, [sp, #8]
 800be28:	f8da 3000 	ldr.w	r3, [sl]
 800be2c:	b92b      	cbnz	r3, 800be3a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x32>
 800be2e:	4b30      	ldr	r3, [pc, #192]	; (800bef0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 800be30:	21ae      	movs	r1, #174	; 0xae
 800be32:	4a30      	ldr	r2, [pc, #192]	; (800bef4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 800be34:	4830      	ldr	r0, [pc, #192]	; (800bef8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800be36:	f00d f981 	bl	801913c <__assert_func>
 800be3a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800bf08 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800be3e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800be42:	f8d8 3000 	ldr.w	r3, [r8]
 800be46:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	4628      	mov	r0, r5
 800be4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be50:	4798      	blx	r3
 800be52:	4606      	mov	r6, r0
 800be54:	b207      	sxth	r7, r0
 800be56:	a803      	add	r0, sp, #12
 800be58:	f003 fce6 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	4628      	mov	r0, r5
 800be60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be62:	4798      	blx	r3
 800be64:	682b      	ldr	r3, [r5, #0]
 800be66:	4683      	mov	fp, r0
 800be68:	4628      	mov	r0, r5
 800be6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be6c:	4798      	blx	r3
 800be6e:	465b      	mov	r3, fp
 800be70:	9000      	str	r0, [sp, #0]
 800be72:	a803      	add	r0, sp, #12
 800be74:	9925      	ldr	r1, [sp, #148]	; 0x94
 800be76:	9a02      	ldr	r2, [sp, #8]
 800be78:	f003 fd42 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800be7c:	f8da 3000 	ldr.w	r3, [sl]
 800be80:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800be84:	2b00      	cmp	r3, #0
 800be86:	d0d2      	beq.n	800be2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x26>
 800be88:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800be8a:	f8b9 0000 	ldrh.w	r0, [r9]
 800be8e:	4290      	cmp	r0, r2
 800be90:	d926      	bls.n	800bee0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 800be92:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800be96:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800be9a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800be9e:	786a      	ldrb	r2, [r5, #1]
 800bea0:	8925      	ldrh	r5, [r4, #8]
 800bea2:	f8d8 3000 	ldr.w	r3, [r8]
 800bea6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800beaa:	eba5 050c 	sub.w	r5, r5, ip
 800beae:	b22d      	sxth	r5, r5
 800beb0:	9500      	str	r5, [sp, #0]
 800beb2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800beb6:	a803      	add	r0, sp, #12
 800beb8:	f001 fbd0 	bl	800d65c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800bebc:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800bec0:	b203      	sxth	r3, r0
 800bec2:	18b9      	adds	r1, r7, r2
 800bec4:	2900      	cmp	r1, #0
 800bec6:	dd0f      	ble.n	800bee8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 800bec8:	3b01      	subs	r3, #1
 800beca:	fb13 f302 	smulbb	r3, r3, r2
 800bece:	fb16 3300 	smlabb	r3, r6, r0, r3
 800bed2:	b21f      	sxth	r7, r3
 800bed4:	4638      	mov	r0, r7
 800bed6:	b01c      	add	sp, #112	; 0x70
 800bed8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	b003      	add	sp, #12
 800bede:	4770      	bx	lr
 800bee0:	4b06      	ldr	r3, [pc, #24]	; (800befc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800bee2:	21af      	movs	r1, #175	; 0xaf
 800bee4:	4a03      	ldr	r2, [pc, #12]	; (800bef4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 800bee6:	e7a5      	b.n	800be34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2c>
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dcf3      	bgt.n	800bed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800beec:	2700      	movs	r7, #0
 800beee:	e7f1      	b.n	800bed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800bef0:	0801bd7a 	.word	0x0801bd7a
 800bef4:	0801beb4 	.word	0x0801beb4
 800bef8:	0801bdbc 	.word	0x0801bdbc
 800befc:	0801bde5 	.word	0x0801bde5
 800bf00:	2400af48 	.word	0x2400af48
 800bf04:	2400af44 	.word	0x2400af44
 800bf08:	2400af4c 	.word	0x2400af4c

0800bf0c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800bf0c:	4b6d      	ldr	r3, [pc, #436]	; (800c0c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b8>)
 800bf0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf12:	460c      	mov	r4, r1
 800bf14:	881a      	ldrh	r2, [r3, #0]
 800bf16:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800bf18:	b0b9      	sub	sp, #228	; 0xe4
 800bf1a:	4681      	mov	r9, r0
 800bf1c:	428a      	cmp	r2, r1
 800bf1e:	9302      	str	r3, [sp, #8]
 800bf20:	d809      	bhi.n	800bf36 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2a>
 800bf22:	2300      	movs	r3, #0
 800bf24:	f04f 32ff 	mov.w	r2, #4294967295
 800bf28:	6083      	str	r3, [r0, #8]
 800bf2a:	e9c0 3200 	strd	r3, r2, [r0]
 800bf2e:	4648      	mov	r0, r9
 800bf30:	b039      	add	sp, #228	; 0xe4
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	4a64      	ldr	r2, [pc, #400]	; (800c0c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1bc>)
 800bf38:	6813      	ldr	r3, [r2, #0]
 800bf3a:	4692      	mov	sl, r2
 800bf3c:	b92b      	cbnz	r3, 800bf4a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3e>
 800bf3e:	4b63      	ldr	r3, [pc, #396]	; (800c0cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c0>)
 800bf40:	21ae      	movs	r1, #174	; 0xae
 800bf42:	4a63      	ldr	r2, [pc, #396]	; (800c0d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 800bf44:	4863      	ldr	r0, [pc, #396]	; (800c0d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c8>)
 800bf46:	f00d f8f9 	bl	801913c <__assert_func>
 800bf4a:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800bf4e:	4b62      	ldr	r3, [pc, #392]	; (800c0d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1cc>)
 800bf50:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800c0e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d4>
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f8db 0000 	ldr.w	r0, [fp]
 800bf5a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800bf5e:	f7f6 fca7 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800bf62:	4680      	mov	r8, r0
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	4628      	mov	r0, r5
 800bf68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6a:	4798      	blx	r3
 800bf6c:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 800bf6e:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
 800bf72:	4406      	add	r6, r0
 800bf74:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf78:	b2b6      	uxth	r6, r6
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	f040 80b2 	bne.w	800c0e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d8>
 800bf80:	a806      	add	r0, sp, #24
 800bf82:	f003 fc51 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800bf86:	682b      	ldr	r3, [r5, #0]
 800bf88:	4628      	mov	r0, r5
 800bf8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8c:	4798      	blx	r3
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	4683      	mov	fp, r0
 800bf92:	4628      	mov	r0, r5
 800bf94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf96:	4798      	blx	r3
 800bf98:	6822      	ldr	r2, [r4, #0]
 800bf9a:	9005      	str	r0, [sp, #20]
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bfa0:	4790      	blx	r2
 800bfa2:	6821      	ldr	r1, [r4, #0]
 800bfa4:	9004      	str	r0, [sp, #16]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 800bfac:	4788      	blx	r1
 800bfae:	9a04      	ldr	r2, [sp, #16]
 800bfb0:	4641      	mov	r1, r8
 800bfb2:	46b8      	mov	r8, r7
 800bfb4:	9001      	str	r0, [sp, #4]
 800bfb6:	a806      	add	r0, sp, #24
 800bfb8:	9200      	str	r2, [sp, #0]
 800bfba:	465a      	mov	r2, fp
 800bfbc:	9b05      	ldr	r3, [sp, #20]
 800bfbe:	f003 fcb4 	bl	800f92a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800bfc2:	f8da 3000 	ldr.w	r3, [sl]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0b9      	beq.n	800bf3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 800bfca:	9902      	ldr	r1, [sp, #8]
 800bfcc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800bfce:	8809      	ldrh	r1, [r1, #0]
 800bfd0:	4291      	cmp	r1, r2
 800bfd2:	d803      	bhi.n	800bfdc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xd0>
 800bfd4:	4b41      	ldr	r3, [pc, #260]	; (800c0dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d0>)
 800bfd6:	21af      	movs	r1, #175	; 0xaf
 800bfd8:	4a3d      	ldr	r2, [pc, #244]	; (800c0d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 800bfda:	e7b3      	b.n	800bf44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x38>
 800bfdc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bfe6:	a806      	add	r0, sp, #24
 800bfe8:	785b      	ldrb	r3, [r3, #1]
 800bfea:	3701      	adds	r7, #1
 800bfec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800bff0:	b2bf      	uxth	r7, r7
 800bff2:	f001 f887 	bl	800d104 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800bff6:	4580      	cmp	r8, r0
 800bff8:	bfb8      	it	lt
 800bffa:	fa0f f880 	sxthlt.w	r8, r0
 800bffe:	a806      	add	r0, sp, #24
 800c000:	f003 fc3a 	bl	800f878 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800c004:	2800      	cmp	r0, #0
 800c006:	d0dc      	beq.n	800bfc2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb6>
 800c008:	fb16 f607 	smulbb	r6, r6, r7
 800c00c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 800c00e:	1bf6      	subs	r6, r6, r7
 800c010:	b2b6      	uxth	r6, r6
 800c012:	fa0f fb86 	sxth.w	fp, r6
 800c016:	f1bb 0f00 	cmp.w	fp, #0
 800c01a:	dd06      	ble.n	800c02a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x11e>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	4628      	mov	r0, r5
 800c020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c022:	4798      	blx	r3
 800c024:	4430      	add	r0, r6
 800c026:	fa0f fb80 	sxth.w	fp, r0
 800c02a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c02e:	4620      	mov	r0, r4
 800c030:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c038:	bf0c      	ite	eq
 800c03a:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 800c03e:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 800c042:	4798      	blx	r3
 800c044:	2801      	cmp	r0, #1
 800c046:	fa1f f288 	uxth.w	r2, r8
 800c04a:	f000 80f7 	beq.w	800c23c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x330>
 800c04e:	2802      	cmp	r0, #2
 800c050:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800c054:	f000 80f9 	beq.w	800c24a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x33e>
 800c058:	7a29      	ldrb	r1, [r5, #8]
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	7a68      	ldrb	r0, [r5, #9]
 800c05e:	1a5b      	subs	r3, r3, r1
 800c060:	4401      	add	r1, r0
 800c062:	b29b      	uxth	r3, r3
 800c064:	440a      	add	r2, r1
 800c066:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800c06a:	b21e      	sxth	r6, r3
 800c06c:	b292      	uxth	r2, r2
 800c06e:	2902      	cmp	r1, #2
 800c070:	b217      	sxth	r7, r2
 800c072:	f000 80ed 	beq.w	800c250 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x344>
 800c076:	2903      	cmp	r1, #3
 800c078:	f000 80f3 	beq.w	800c262 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x356>
 800c07c:	2901      	cmp	r1, #1
 800c07e:	f040 80f9 	bne.w	800c274 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x368>
 800c082:	8923      	ldrh	r3, [r4, #8]
 800c084:	463a      	mov	r2, r7
 800c086:	4635      	mov	r5, r6
 800c088:	465f      	mov	r7, fp
 800c08a:	eba3 030b 	sub.w	r3, r3, fp
 800c08e:	4693      	mov	fp, r2
 800c090:	b21e      	sxth	r6, r3
 800c092:	f8da 3000 	ldr.w	r3, [sl]
 800c096:	2b00      	cmp	r3, #0
 800c098:	f43f af51 	beq.w	800bf3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 800c09c:	9b02      	ldr	r3, [sp, #8]
 800c09e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	428b      	cmp	r3, r1
 800c0a4:	d996      	bls.n	800bfd4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	f7f6 fc01 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800c0ae:	f8a9 6000 	strh.w	r6, [r9]
 800c0b2:	f8a9 5002 	strh.w	r5, [r9, #2]
 800c0b6:	f8a9 7004 	strh.w	r7, [r9, #4]
 800c0ba:	f8a9 b006 	strh.w	fp, [r9, #6]
 800c0be:	f8c9 0008 	str.w	r0, [r9, #8]
 800c0c2:	e734      	b.n	800bf2e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x22>
 800c0c4:	2400af48 	.word	0x2400af48
 800c0c8:	2400af44 	.word	0x2400af44
 800c0cc:	0801bd7a 	.word	0x0801bd7a
 800c0d0:	0801beb4 	.word	0x0801beb4
 800c0d4:	0801bdbc 	.word	0x0801bdbc
 800c0d8:	2400af4c 	.word	0x2400af4c
 800c0dc:	0801bde5 	.word	0x0801bde5
 800c0e0:	2400af50 	.word	0x2400af50
 800c0e4:	af1f      	add	r7, sp, #124	; 0x7c
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	f003 fb9e 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f2:	4798      	blx	r3
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	4683      	mov	fp, r0
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0fc:	4798      	blx	r3
 800c0fe:	6822      	ldr	r2, [r4, #0]
 800c100:	9005      	str	r0, [sp, #20]
 800c102:	4620      	mov	r0, r4
 800c104:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c106:	4790      	blx	r2
 800c108:	6821      	ldr	r1, [r4, #0]
 800c10a:	9004      	str	r0, [sp, #16]
 800c10c:	4620      	mov	r0, r4
 800c10e:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 800c112:	4788      	blx	r1
 800c114:	9a04      	ldr	r2, [sp, #16]
 800c116:	9001      	str	r0, [sp, #4]
 800c118:	4641      	mov	r1, r8
 800c11a:	9200      	str	r2, [sp, #0]
 800c11c:	4638      	mov	r0, r7
 800c11e:	465a      	mov	r2, fp
 800c120:	9b05      	ldr	r3, [sp, #20]
 800c122:	f003 fc02 	bl	800f92a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800c126:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c12a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800c12e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800c132:	f9b4 b008 	ldrsh.w	fp, [r4, #8]
 800c136:	bf12      	itee	ne
 800c138:	4613      	movne	r3, r2
 800c13a:	465b      	moveq	r3, fp
 800c13c:	4693      	moveq	fp, r2
 800c13e:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 800c142:	1a9b      	subs	r3, r3, r2
 800c144:	b29a      	uxth	r2, r3
 800c146:	f8da 3000 	ldr.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f43f aef7 	beq.w	800bf3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 800c150:	9802      	ldr	r0, [sp, #8]
 800c152:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c154:	8800      	ldrh	r0, [r0, #0]
 800c156:	4288      	cmp	r0, r1
 800c158:	f67f af3c 	bls.w	800bfd4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 800c15c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c160:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800c164:	7859      	ldrb	r1, [r3, #1]
 800c166:	2300      	movs	r3, #0
 800c168:	9707      	str	r7, [sp, #28]
 800c16a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800c16e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c172:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800c176:	f88d 1020 	strb.w	r1, [sp, #32]
 800c17a:	9509      	str	r5, [sp, #36]	; 0x24
 800c17c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800c180:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c184:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800c188:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800c18c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800c190:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800c194:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800c198:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 800c19c:	b350      	cbz	r0, 800c1f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c19e:	682b      	ldr	r3, [r5, #0]
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	4798      	blx	r3
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	b320      	cbz	r0, 800c1f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c1aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ac:	4641      	mov	r1, r8
 800c1ae:	6803      	ldr	r3, [r0, #0]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	4798      	blx	r3
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	b1e8      	cbz	r0, 800c1f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c1b8:	7b43      	ldrb	r3, [r0, #13]
 800c1ba:	7a82      	ldrb	r2, [r0, #10]
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800c1c8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 800c1cc:	2b04      	cmp	r3, #4
 800c1ce:	d111      	bne.n	800c1f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 800c1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1d2:	463a      	mov	r2, r7
 800c1d4:	4641      	mov	r1, r8
 800c1d6:	6803      	ldr	r3, [r0, #0]
 800c1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1da:	4798      	blx	r3
 800c1dc:	7b7b      	ldrb	r3, [r7, #13]
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800c1e4:	7abb      	ldrb	r3, [r7, #10]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	4418      	add	r0, r3
 800c1ea:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800c1ee:	4418      	add	r0, r3
 800c1f0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 800c1f4:	b233      	sxth	r3, r6
 800c1f6:	2700      	movs	r7, #0
 800c1f8:	005a      	lsls	r2, r3, #1
 800c1fa:	46b8      	mov	r8, r7
 800c1fc:	455a      	cmp	r2, fp
 800c1fe:	a806      	add	r0, sp, #24
 800c200:	9305      	str	r3, [sp, #20]
 800c202:	f107 0701 	add.w	r7, r7, #1
 800c206:	bfd4      	ite	le
 800c208:	2100      	movle	r1, #0
 800c20a:	2101      	movgt	r1, #1
 800c20c:	9204      	str	r2, [sp, #16]
 800c20e:	f001 f956 	bl	800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800c212:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800c216:	ebab 0b06 	sub.w	fp, fp, r6
 800c21a:	b2bf      	uxth	r7, r7
 800c21c:	4588      	cmp	r8, r1
 800c21e:	fa0f fb8b 	sxth.w	fp, fp
 800c222:	bfb8      	it	lt
 800c224:	fa0f f881 	sxthlt.w	r8, r1
 800c228:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800c22c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c230:	2900      	cmp	r1, #0
 800c232:	f43f aee9 	beq.w	800c008 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800c236:	455b      	cmp	r3, fp
 800c238:	dbe0      	blt.n	800c1fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f0>
 800c23a:	e6e5      	b.n	800c008 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800c23c:	eba6 0308 	sub.w	r3, r6, r8
 800c240:	f04f 0802 	mov.w	r8, #2
 800c244:	fb93 f3f8 	sdiv	r3, r3, r8
 800c248:	e706      	b.n	800c058 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 800c24a:	4413      	add	r3, r2
 800c24c:	1af3      	subs	r3, r6, r3
 800c24e:	e703      	b.n	800c058 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 800c250:	8926      	ldrh	r6, [r4, #8]
 800c252:	8965      	ldrh	r5, [r4, #10]
 800c254:	1ab2      	subs	r2, r6, r2
 800c256:	eba5 050b 	sub.w	r5, r5, fp
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	b22d      	sxth	r5, r5
 800c25e:	b21e      	sxth	r6, r3
 800c260:	e717      	b.n	800c092 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 800c262:	8965      	ldrh	r5, [r4, #10]
 800c264:	2600      	movs	r6, #0
 800c266:	1aaa      	subs	r2, r5, r2
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	b21d      	sxth	r5, r3
 800c26c:	463b      	mov	r3, r7
 800c26e:	465f      	mov	r7, fp
 800c270:	469b      	mov	fp, r3
 800c272:	e70e      	b.n	800c092 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 800c274:	2500      	movs	r5, #0
 800c276:	e70c      	b.n	800c092 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>

0800c278 <_ZN8touchgfx8TextAreaD0Ev>:
 800c278:	b510      	push	{r4, lr}
 800c27a:	4604      	mov	r4, r0
 800c27c:	2148      	movs	r1, #72	; 0x48
 800c27e:	f00c ff2e 	bl	80190de <_ZdlPvj>
 800c282:	4620      	mov	r0, r4
 800c284:	bd10      	pop	{r4, pc}
	...

0800c288 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800c288:	b508      	push	{r3, lr}
 800c28a:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x30>)
 800c28c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	4293      	cmp	r3, r2
 800c292:	d90e      	bls.n	800c2b2 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x2a>
 800c294:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x34>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	b92b      	cbnz	r3, 800c2a6 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x1e>
 800c29a:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x38>)
 800c29c:	21ae      	movs	r1, #174	; 0xae
 800c29e:	4a09      	ldr	r2, [pc, #36]	; (800c2c4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x3c>)
 800c2a0:	4809      	ldr	r0, [pc, #36]	; (800c2c8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x40>)
 800c2a2:	f00c ff4b 	bl	801913c <__assert_func>
 800c2a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800c2aa:	7858      	ldrb	r0, [r3, #1]
 800c2ac:	f000 0003 	and.w	r0, r0, #3
 800c2b0:	bd08      	pop	{r3, pc}
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	e7fc      	b.n	800c2b0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x28>
 800c2b6:	bf00      	nop
 800c2b8:	2400af48 	.word	0x2400af48
 800c2bc:	2400af44 	.word	0x2400af44
 800c2c0:	0801bd7a 	.word	0x0801bd7a
 800c2c4:	0801beb4 	.word	0x0801beb4
 800c2c8:	0801bdbc 	.word	0x0801bdbc

0800c2cc <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800c2cc:	4b16      	ldr	r3, [pc, #88]	; (800c328 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800c2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	428b      	cmp	r3, r1
 800c2da:	d921      	bls.n	800c320 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x54>
 800c2dc:	6803      	ldr	r3, [r0, #0]
 800c2de:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800c2e0:	4b12      	ldr	r3, [pc, #72]	; (800c32c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x60>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	b92b      	cbnz	r3, 800c2f2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x26>
 800c2e6:	4b12      	ldr	r3, [pc, #72]	; (800c330 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x64>)
 800c2e8:	21ae      	movs	r1, #174	; 0xae
 800c2ea:	4a12      	ldr	r2, [pc, #72]	; (800c334 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x68>)
 800c2ec:	4812      	ldr	r0, [pc, #72]	; (800c338 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x6c>)
 800c2ee:	f00c ff25 	bl	801913c <__assert_func>
 800c2f2:	4b12      	ldr	r3, [pc, #72]	; (800c33c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x70>)
 800c2f4:	6818      	ldr	r0, [r3, #0]
 800c2f6:	f7f6 fadb 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	4620      	mov	r0, r4
 800c300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c302:	4798      	blx	r3
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	4607      	mov	r7, r0
 800c308:	4620      	mov	r0, r4
 800c30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c30e:	4798      	blx	r3
 800c310:	463a      	mov	r2, r7
 800c312:	4603      	mov	r3, r0
 800c314:	4631      	mov	r1, r6
 800c316:	4620      	mov	r0, r4
 800c318:	46ac      	mov	ip, r5
 800c31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	4760      	bx	ip
 800c320:	2000      	movs	r0, #0
 800c322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c326:	bf00      	nop
 800c328:	2400af48 	.word	0x2400af48
 800c32c:	2400af44 	.word	0x2400af44
 800c330:	0801bd7a 	.word	0x0801bd7a
 800c334:	0801beb4 	.word	0x0801beb4
 800c338:	0801bdbc 	.word	0x0801bdbc
 800c33c:	2400af50 	.word	0x2400af50

0800c340 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800c340:	b513      	push	{r0, r1, r4, lr}
 800c342:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800c346:	4604      	mov	r4, r0
 800c348:	b343      	cbz	r3, 800c39c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c34a:	4b1b      	ldr	r3, [pc, #108]	; (800c3b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x78>)
 800c34c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	428b      	cmp	r3, r1
 800c352:	d923      	bls.n	800c39c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c354:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dd1f      	ble.n	800c39c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c35c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800c360:	2b00      	cmp	r3, #0
 800c362:	dd1b      	ble.n	800c39c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c364:	4b15      	ldr	r3, [pc, #84]	; (800c3bc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x7c>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	b92b      	cbnz	r3, 800c376 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x36>
 800c36a:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x80>)
 800c36c:	21ae      	movs	r1, #174	; 0xae
 800c36e:	4a15      	ldr	r2, [pc, #84]	; (800c3c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x84>)
 800c370:	4815      	ldr	r0, [pc, #84]	; (800c3c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x88>)
 800c372:	f00c fee3 	bl	801913c <__assert_func>
 800c376:	4b15      	ldr	r3, [pc, #84]	; (800c3cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x8c>)
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	f7f6 fa99 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800c37e:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800c382:	6822      	ldr	r2, [r4, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	db06      	blt.n	800c396 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 800c388:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	db02      	blt.n	800c396 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x56>
 800c390:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c392:	4298      	cmp	r0, r3
 800c394:	d004      	beq.n	800c3a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x60>
 800c396:	6953      	ldr	r3, [r2, #20]
 800c398:	4620      	mov	r0, r4
 800c39a:	4798      	blx	r3
 800c39c:	b002      	add	sp, #8
 800c39e:	bd10      	pop	{r4, pc}
 800c3a0:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800c3a4:	466b      	mov	r3, sp
 800c3a6:	6912      	ldr	r2, [r2, #16]
 800c3a8:	c903      	ldmia	r1, {r0, r1}
 800c3aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	4790      	blx	r2
 800c3b4:	e7f2      	b.n	800c39c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x5c>
 800c3b6:	bf00      	nop
 800c3b8:	2400af48 	.word	0x2400af48
 800c3bc:	2400af44 	.word	0x2400af44
 800c3c0:	0801bd7a 	.word	0x0801bd7a
 800c3c4:	0801beb4 	.word	0x0801beb4
 800c3c8:	0801bdbc 	.word	0x0801bdbc
 800c3cc:	2400af50 	.word	0x2400af50

0800c3d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800c3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d4:	4d56      	ldr	r5, [pc, #344]	; (800c530 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x160>)
 800c3d6:	b08e      	sub	sp, #56	; 0x38
 800c3d8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c3da:	4604      	mov	r4, r0
 800c3dc:	882b      	ldrh	r3, [r5, #0]
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	f240 80a3 	bls.w	800c52a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800c3e4:	6808      	ldr	r0, [r1, #0]
 800c3e6:	ab05      	add	r3, sp, #20
 800c3e8:	6849      	ldr	r1, [r1, #4]
 800c3ea:	4e52      	ldr	r6, [pc, #328]	; (800c534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x164>)
 800c3ec:	c303      	stmia	r3!, {r0, r1}
 800c3ee:	6833      	ldr	r3, [r6, #0]
 800c3f0:	b92b      	cbnz	r3, 800c3fe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800c3f2:	4b51      	ldr	r3, [pc, #324]	; (800c538 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x168>)
 800c3f4:	21ae      	movs	r1, #174	; 0xae
 800c3f6:	4a51      	ldr	r2, [pc, #324]	; (800c53c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 800c3f8:	4851      	ldr	r0, [pc, #324]	; (800c540 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x170>)
 800c3fa:	f00c fe9f 	bl	801913c <__assert_func>
 800c3fe:	4f51      	ldr	r7, [pc, #324]	; (800c544 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x174>)
 800c400:	4611      	mov	r1, r2
 800c402:	6838      	ldr	r0, [r7, #0]
 800c404:	f7f6 fa54 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800c408:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	db11      	blt.n	800c434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 800c410:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	db0d      	blt.n	800c434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 800c418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c41a:	4298      	cmp	r0, r3
 800c41c:	d10a      	bne.n	800c434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 800c41e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800c422:	ab09      	add	r3, sp, #36	; 0x24
 800c424:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c428:	e883 0003 	stmia.w	r3, {r0, r1}
 800c42c:	4619      	mov	r1, r3
 800c42e:	a805      	add	r0, sp, #20
 800c430:	f7fe fb1a 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800c434:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	dd76      	ble.n	800c52a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800c43c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800c440:	2b00      	cmp	r3, #0
 800c442:	dd72      	ble.n	800c52a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800c444:	6833      	ldr	r3, [r6, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0d3      	beq.n	800c3f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 800c44a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c44c:	8829      	ldrh	r1, [r5, #0]
 800c44e:	4291      	cmp	r1, r2
 800c450:	d803      	bhi.n	800c45a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x8a>
 800c452:	4b3d      	ldr	r3, [pc, #244]	; (800c548 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x178>)
 800c454:	21af      	movs	r1, #175	; 0xaf
 800c456:	4a39      	ldr	r2, [pc, #228]	; (800c53c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16c>)
 800c458:	e7ce      	b.n	800c3f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
 800c45a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800c45e:	4b3b      	ldr	r3, [pc, #236]	; (800c54c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800c466:	f1b8 0f00 	cmp.w	r8, #0
 800c46a:	d05e      	beq.n	800c52a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x15a>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	4620      	mov	r0, r4
 800c470:	f894 9036 	ldrb.w	r9, [r4, #54]	; 0x36
 800c474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c476:	4798      	blx	r3
 800c478:	6833      	ldr	r3, [r6, #0]
 800c47a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 800c47e:	f894 c038 	ldrb.w	ip, [r4, #56]	; 0x38
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0b5      	beq.n	800c3f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 800c486:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c488:	f8b5 e000 	ldrh.w	lr, [r5]
 800c48c:	4596      	cmp	lr, r2
 800c48e:	d9e0      	bls.n	800c452 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800c490:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800c494:	f894 a037 	ldrb.w	sl, [r4, #55]	; 0x37
 800c498:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	f894 e039 	ldrb.w	lr, [r4, #57]	; 0x39
 800c4a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c4a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800c4a8:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800c4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4b0:	4b27      	ldr	r3, [pc, #156]	; (800c550 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x180>)
 800c4b2:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4ba:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800c4be:	f88d 9032 	strb.w	r9, [sp, #50]	; 0x32
 800c4c2:	f88d a033 	strb.w	sl, [sp, #51]	; 0x33
 800c4c6:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 800c4ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c4ce:	b122      	cbz	r2, 800c4da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10a>
 800c4d0:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800c4d4:	f1b8 0f00 	cmp.w	r8, #0
 800c4d8:	d101      	bne.n	800c4de <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x10e>
 800c4da:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800c4de:	f10d 091c 	add.w	r9, sp, #28
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	f002 fde7 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c4ea:	6833      	ldr	r3, [r6, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d080      	beq.n	800c3f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
 800c4f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800c4f2:	882b      	ldrh	r3, [r5, #0]
 800c4f4:	428b      	cmp	r3, r1
 800c4f6:	d9ac      	bls.n	800c452 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800c4f8:	6838      	ldr	r0, [r7, #0]
 800c4fa:	f7f6 f9d9 	bl	80028b0 <_ZNK8touchgfx5Texts7getTextEt>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	4605      	mov	r5, r0
 800c502:	4620      	mov	r0, r4
 800c504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c506:	4798      	blx	r3
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	4606      	mov	r6, r0
 800c50c:	4620      	mov	r0, r4
 800c50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c512:	4798      	blx	r3
 800c514:	ab09      	add	r3, sp, #36	; 0x24
 800c516:	9501      	str	r5, [sp, #4]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	ab05      	add	r3, sp, #20
 800c51c:	e9cd 6002 	strd	r6, r0, [sp, #8]
 800c520:	4640      	mov	r0, r8
 800c522:	e899 0006 	ldmia.w	r9, {r1, r2}
 800c526:	f7f6 f975 	bl	8002814 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800c52a:	b00e      	add	sp, #56	; 0x38
 800c52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c530:	2400af48 	.word	0x2400af48
 800c534:	2400af44 	.word	0x2400af44
 800c538:	0801bd7a 	.word	0x0801bd7a
 800c53c:	0801beb4 	.word	0x0801beb4
 800c540:	0801bdbc 	.word	0x0801bdbc
 800c544:	2400af50 	.word	0x2400af50
 800c548:	0801bde5 	.word	0x0801bde5
 800c54c:	2400af4c 	.word	0x2400af4c
 800c550:	2400aef4 	.word	0x2400aef4

0800c554 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	6803      	ldr	r3, [r0, #0]
 800c558:	4604      	mov	r4, r0
 800c55a:	4615      	mov	r5, r2
 800c55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55e:	4798      	blx	r3
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	4629      	mov	r1, r5
 800c564:	4620      	mov	r0, r4
 800c566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c56c:	4718      	bx	r3
	...

0800c570 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800c574:	4604      	mov	r4, r0
 800c576:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d214      	bcs.n	800c5a8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800c57e:	6803      	ldr	r3, [r0, #0]
 800c580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c582:	4798      	blx	r3
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	4605      	mov	r5, r0
 800c588:	4620      	mov	r0, r4
 800c58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c58c:	4798      	blx	r3
 800c58e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c592:	b22d      	sxth	r5, r5
 800c594:	4601      	mov	r1, r0
 800c596:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800c59a:	bf06      	itte	eq
 800c59c:	4602      	moveq	r2, r0
 800c59e:	4629      	moveq	r1, r5
 800c5a0:	462a      	movne	r2, r5
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f7ff ffd6 	bl	800c554 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	bf00      	nop
 800c5ac:	2400af48 	.word	0x2400af48

0800c5b0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800c5b0:	b530      	push	{r4, r5, lr}
 800c5b2:	888b      	ldrh	r3, [r1, #4]
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	8583      	strh	r3, [r0, #44]	; 0x2c
 800c5ba:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800c5be:	b923      	cbnz	r3, 800c5ca <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800c5c0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800c5c4:	b90b      	cbnz	r3, 800c5ca <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800c5c6:	f7ff ffd3 	bl	800c570 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	466d      	mov	r5, sp
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	343c      	adds	r4, #60	; 0x3c
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d8:	4798      	blx	r3
 800c5da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c5de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5e2:	b005      	add	sp, #20
 800c5e4:	bd30      	pop	{r4, r5, pc}

0800c5e6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	8083      	strh	r3, [r0, #4]
 800c5ea:	80c3      	strh	r3, [r0, #6]
 800c5ec:	8003      	strh	r3, [r0, #0]
 800c5ee:	8043      	strh	r3, [r0, #2]
 800c5f0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800c5f4:	2bff      	cmp	r3, #255	; 0xff
 800c5f6:	bf01      	itttt	eq
 800c5f8:	890b      	ldrheq	r3, [r1, #8]
 800c5fa:	8083      	strheq	r3, [r0, #4]
 800c5fc:	894b      	ldrheq	r3, [r1, #10]
 800c5fe:	80c3      	strheq	r3, [r0, #6]
 800c600:	4770      	bx	lr
	...

0800c604 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800c604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c606:	4604      	mov	r4, r0
 800c608:	466b      	mov	r3, sp
 800c60a:	6808      	ldr	r0, [r1, #0]
 800c60c:	6849      	ldr	r1, [r1, #4]
 800c60e:	c303      	stmia	r3!, {r0, r1}
 800c610:	6823      	ldr	r3, [r4, #0]
 800c612:	4669      	mov	r1, sp
 800c614:	4620      	mov	r0, r4
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	4798      	blx	r3
 800c61a:	4b08      	ldr	r3, [pc, #32]	; (800c63c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c622:	b10a      	cbz	r2, 800c628 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800c624:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c626:	b900      	cbnz	r0, 800c62a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800c628:	6898      	ldr	r0, [r3, #8]
 800c62a:	6803      	ldr	r3, [r0, #0]
 800c62c:	4669      	mov	r1, sp
 800c62e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c630:	6a1d      	ldr	r5, [r3, #32]
 800c632:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800c636:	47a8      	blx	r5
 800c638:	b003      	add	sp, #12
 800c63a:	bd30      	pop	{r4, r5, pc}
 800c63c:	2400aef4 	.word	0x2400aef4

0800c640 <_ZN8touchgfx3BoxD1Ev>:
 800c640:	4770      	bx	lr

0800c642 <_ZN8touchgfx3BoxD0Ev>:
 800c642:	b510      	push	{r4, lr}
 800c644:	4604      	mov	r4, r0
 800c646:	212c      	movs	r1, #44	; 0x2c
 800c648:	f00c fd49 	bl	80190de <_ZdlPvj>
 800c64c:	4620      	mov	r0, r4
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800c650:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800c654:	b12a      	cbz	r2, 800c662 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800c656:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800c65a:	b112      	cbz	r2, 800c662 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800c65c:	6803      	ldr	r3, [r0, #0]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	4718      	bx	r3
 800c662:	4770      	bx	lr

0800c664 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800c664:	b510      	push	{r4, lr}
 800c666:	6803      	ldr	r3, [r0, #0]
 800c668:	460c      	mov	r4, r1
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	4798      	blx	r3
 800c66e:	1b03      	subs	r3, r0, r4
 800c670:	4258      	negs	r0, r3
 800c672:	4158      	adcs	r0, r3
 800c674:	bd10      	pop	{r4, pc}
	...

0800c678 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800c678:	4b01      	ldr	r3, [pc, #4]	; (800c680 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800c67a:	6019      	str	r1, [r3, #0]
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	2400aefc 	.word	0x2400aefc

0800c684 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	4696      	mov	lr, r2
 800c68a:	b097      	sub	sp, #92	; 0x5c
 800c68c:	4605      	mov	r5, r0
 800c68e:	4614      	mov	r4, r2
 800c690:	460e      	mov	r6, r1
 800c692:	461f      	mov	r7, r3
 800c694:	f10d 0c1c 	add.w	ip, sp, #28
 800c698:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800c69c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800c6a0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800c6a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c6a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6ac:	f8de 3000 	ldr.w	r3, [lr]
 800c6b0:	f104 0e14 	add.w	lr, r4, #20
 800c6b4:	f8cc 3000 	str.w	r3, [ip]
 800c6b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c6bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c6c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6c4:	f8de 3000 	ldr.w	r3, [lr]
 800c6c8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c6cc:	f8cc 3000 	str.w	r3, [ip]
 800c6d0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c6d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c6d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6dc:	f8de 3000 	ldr.w	r3, [lr]
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	f8cc 3000 	str.w	r3, [ip]
 800c6ea:	682b      	ldr	r3, [r5, #0]
 800c6ec:	9201      	str	r2, [sp, #4]
 800c6ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c6f0:	f8cd 8008 	str.w	r8, [sp, #8]
 800c6f4:	9200      	str	r2, [sp, #0]
 800c6f6:	aa07      	add	r2, sp, #28
 800c6f8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c6fc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800c700:	463b      	mov	r3, r7
 800c702:	47d8      	blx	fp
 800c704:	46a6      	mov	lr, r4
 800c706:	f10d 0c1c 	add.w	ip, sp, #28
 800c70a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c70e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c712:	f8de 3000 	ldr.w	r3, [lr]
 800c716:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c71a:	343c      	adds	r4, #60	; 0x3c
 800c71c:	f8cc 3000 	str.w	r3, [ip]
 800c720:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c72c:	f8de 3000 	ldr.w	r3, [lr]
 800c730:	f8cc 3000 	str.w	r3, [ip]
 800c734:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c73a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	4631      	mov	r1, r6
 800c742:	4628      	mov	r0, r5
 800c744:	f8cc 3000 	str.w	r3, [ip]
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c74e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c750:	f8cd 8008 	str.w	r8, [sp, #8]
 800c754:	9201      	str	r2, [sp, #4]
 800c756:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c758:	9200      	str	r2, [sp, #0]
 800c75a:	aa07      	add	r2, sp, #28
 800c75c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800c75e:	463b      	mov	r3, r7
 800c760:	47a0      	blx	r4
 800c762:	b017      	add	sp, #92	; 0x5c
 800c764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c768 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	b08d      	sub	sp, #52	; 0x34
 800c76e:	4688      	mov	r8, r1
 800c770:	f8d3 c000 	ldr.w	ip, [r3]
 800c774:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c776:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800c77a:	680f      	ldr	r7, [r1, #0]
 800c77c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800c780:	eba7 070c 	sub.w	r7, r7, ip
 800c784:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800c788:	edd3 6a07 	vldr	s13, [r3, #28]
 800c78c:	42bc      	cmp	r4, r7
 800c78e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c790:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c794:	bfa8      	it	ge
 800c796:	463c      	movge	r4, r7
 800c798:	f9b1 9000 	ldrsh.w	r9, [r1]
 800c79c:	f9ba 1000 	ldrsh.w	r1, [sl]
 800c7a0:	ee07 4a90 	vmov	s15, r4
 800c7a4:	eb09 0e0c 	add.w	lr, r9, ip
 800c7a8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800c7ac:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c7b0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c7b4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800c7b8:	4571      	cmp	r1, lr
 800c7ba:	ee25 4a04 	vmul.f32	s8, s10, s8
 800c7be:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c7c2:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c7c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c7ca:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800c7ce:	ee32 1a05 	vadd.f32	s2, s4, s10
 800c7d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c7d6:	ee36 0a84 	vadd.f32	s0, s13, s8
 800c7da:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c7de:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c7e2:	f340 808c 	ble.w	800c8fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800c7e6:	eba1 060e 	sub.w	r6, r1, lr
 800c7ea:	fb96 f5f4 	sdiv	r5, r6, r4
 800c7ee:	ee07 5a10 	vmov	s14, r5
 800c7f2:	2d00      	cmp	r5, #0
 800c7f4:	fb04 6615 	mls	r6, r4, r5, r6
 800c7f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c7fc:	eea7 0a04 	vfma.f32	s0, s14, s8
 800c800:	eee7 0a24 	vfma.f32	s1, s14, s9
 800c804:	eea7 1a05 	vfma.f32	s2, s14, s10
 800c808:	dd12      	ble.n	800c830 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800c80a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800c80e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800c812:	ee31 2a45 	vsub.f32	s4, s2, s10
 800c816:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81e:	bf14      	ite	ne
 800c820:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800c824:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c828:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c82c:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c830:	fb05 f204 	mul.w	r2, r5, r4
 800c834:	1abf      	subs	r7, r7, r2
 800c836:	4494      	add	ip, r2
 800c838:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800c83c:	4411      	add	r1, r2
 800c83e:	eb09 020c 	add.w	r2, r9, ip
 800c842:	b209      	sxth	r1, r1
 800c844:	443a      	add	r2, r7
 800c846:	428a      	cmp	r2, r1
 800c848:	bfc4      	itt	gt
 800c84a:	eba1 0209 	subgt.w	r2, r1, r9
 800c84e:	eba2 070c 	subgt.w	r7, r2, ip
 800c852:	2f00      	cmp	r7, #0
 800c854:	dd50      	ble.n	800c8f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800c856:	fb97 f1f4 	sdiv	r1, r7, r4
 800c85a:	fb04 7211 	mls	r2, r4, r1, r7
 800c85e:	b90a      	cbnz	r2, 800c864 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800c860:	3901      	subs	r1, #1
 800c862:	4622      	mov	r2, r4
 800c864:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800c868:	6840      	ldr	r0, [r0, #4]
 800c86a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800c86e:	44b6      	add	lr, r6
 800c870:	f8d0 a000 	ldr.w	sl, [r0]
 800c874:	2900      	cmp	r1, #0
 800c876:	bfcc      	ite	gt
 800c878:	46a1      	movgt	r9, r4
 800c87a:	4691      	movle	r9, r2
 800c87c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c87e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c880:	fb04 e505 	mla	r5, r4, r5, lr
 800c884:	eef0 6a42 	vmov.f32	s13, s4
 800c888:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c88c:	9008      	str	r0, [sp, #32]
 800c88e:	eeb0 7a61 	vmov.f32	s14, s3
 800c892:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800c89a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800c89e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800c8a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c8a4:	445b      	add	r3, fp
 800c8a6:	9307      	str	r3, [sp, #28]
 800c8a8:	ee16 3a90 	vmov	r3, s13
 800c8ac:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800c8b0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800c8b4:	ee21 3a23 	vmul.f32	s6, s2, s7
 800c8b8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800c8bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c8c0:	ee17 7a90 	vmov	r7, s15
 800c8c4:	ee73 7a42 	vsub.f32	s15, s6, s4
 800c8c8:	fb97 f7f4 	sdiv	r7, r7, r4
 800c8cc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c8d0:	ee17 ca90 	vmov	ip, s15
 800c8d4:	fb9c fcf4 	sdiv	ip, ip, r4
 800c8d8:	fb0c 3306 	mla	r3, ip, r6, r3
 800c8dc:	9302      	str	r3, [sp, #8]
 800c8de:	ee17 3a10 	vmov	r3, s14
 800c8e2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800c8e6:	fb07 3706 	mla	r7, r7, r6, r3
 800c8ea:	eba9 0306 	sub.w	r3, r9, r6
 800c8ee:	e9cd 4700 	strd	r4, r7, [sp]
 800c8f2:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c8f6:	47a0      	blx	r4
 800c8f8:	b00d      	add	sp, #52	; 0x34
 800c8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fe:	2500      	movs	r5, #0
 800c900:	462e      	mov	r6, r5
 800c902:	e799      	b.n	800c838 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800c904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c908:	b0db      	sub	sp, #364	; 0x16c
 800c90a:	461d      	mov	r5, r3
 800c90c:	4614      	mov	r4, r2
 800c90e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800c912:	910f      	str	r1, [sp, #60]	; 0x3c
 800c914:	4629      	mov	r1, r5
 800c916:	930a      	str	r3, [sp, #40]	; 0x28
 800c918:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800c91c:	9009      	str	r0, [sp, #36]	; 0x24
 800c91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c920:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800c924:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800c928:	9310      	str	r3, [sp, #64]	; 0x40
 800c92a:	6803      	ldr	r3, [r0, #0]
 800c92c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800c92e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c932:	47b8      	blx	r7
 800c934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c936:	6058      	str	r0, [r3, #4]
 800c938:	2800      	cmp	r0, #0
 800c93a:	f000 83a1 	beq.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c93e:	682b      	ldr	r3, [r5, #0]
 800c940:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800c944:	ed94 7a02 	vldr	s14, [r4, #8]
 800c948:	9314      	str	r3, [sp, #80]	; 0x50
 800c94a:	686b      	ldr	r3, [r5, #4]
 800c94c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c950:	9315      	str	r3, [sp, #84]	; 0x54
 800c952:	4bc1      	ldr	r3, [pc, #772]	; (800cc58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800c954:	7819      	ldrb	r1, [r3, #0]
 800c956:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c95a:	2900      	cmp	r1, #0
 800c95c:	bf16      	itet	ne
 800c95e:	4619      	movne	r1, r3
 800c960:	4611      	moveq	r1, r2
 800c962:	4613      	movne	r3, r2
 800c964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c968:	9116      	str	r1, [sp, #88]	; 0x58
 800c96a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800c96e:	f240 8387 	bls.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c972:	ed94 7a07 	vldr	s14, [r4, #28]
 800c976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97e:	f240 837f 	bls.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c982:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800c986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98e:	f240 8377 	bls.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c992:	6822      	ldr	r2, [r4, #0]
 800c994:	4bb1      	ldr	r3, [pc, #708]	; (800cc5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800c996:	429a      	cmp	r2, r3
 800c998:	f2c0 8372 	blt.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c99c:	49b0      	ldr	r1, [pc, #704]	; (800cc60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800c99e:	6963      	ldr	r3, [r4, #20]
 800c9a0:	428a      	cmp	r2, r1
 800c9a2:	f300 836d 	bgt.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c9a6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c9aa:	48ae      	ldr	r0, [pc, #696]	; (800cc64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800c9ac:	33ff      	adds	r3, #255	; 0xff
 800c9ae:	4283      	cmp	r3, r0
 800c9b0:	f200 8366 	bhi.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c9b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c9b6:	4dac      	ldr	r5, [pc, #688]	; (800cc68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800c9b8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c9bc:	33ff      	adds	r3, #255	; 0xff
 800c9be:	42ab      	cmp	r3, r5
 800c9c0:	f200 835e 	bhi.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c9c4:	6862      	ldr	r2, [r4, #4]
 800c9c6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800c9ca:	33ff      	adds	r3, #255	; 0xff
 800c9cc:	4283      	cmp	r3, r0
 800c9ce:	f200 8357 	bhi.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c9d2:	69a1      	ldr	r1, [r4, #24]
 800c9d4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800c9d8:	33ff      	adds	r3, #255	; 0xff
 800c9da:	4283      	cmp	r3, r0
 800c9dc:	f200 8350 	bhi.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c9e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c9e2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800c9e6:	30ff      	adds	r0, #255	; 0xff
 800c9e8:	42a8      	cmp	r0, r5
 800c9ea:	f200 8349 	bhi.w	800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c9ee:	428a      	cmp	r2, r1
 800c9f0:	f280 8110 	bge.w	800cc14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	f300 8119 	bgt.w	800cc2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	f280 811d 	bge.w	800cc3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800ca00:	2502      	movs	r5, #2
 800ca02:	2701      	movs	r7, #1
 800ca04:	46a9      	mov	r9, r5
 800ca06:	46b8      	mov	r8, r7
 800ca08:	f04f 0a00 	mov.w	sl, #0
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	a849      	add	r0, sp, #292	; 0x124
 800ca10:	f003 fccc 	bl	80103ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800ca14:	4622      	mov	r2, r4
 800ca16:	4653      	mov	r3, sl
 800ca18:	a949      	add	r1, sp, #292	; 0x124
 800ca1a:	f8cd 9000 	str.w	r9, [sp]
 800ca1e:	a819      	add	r0, sp, #100	; 0x64
 800ca20:	f003 fdf4 	bl	801060c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ca24:	4622      	mov	r2, r4
 800ca26:	4653      	mov	r3, sl
 800ca28:	a949      	add	r1, sp, #292	; 0x124
 800ca2a:	f8cd 8000 	str.w	r8, [sp]
 800ca2e:	a829      	add	r0, sp, #164	; 0xa4
 800ca30:	f003 fdec 	bl	801060c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ca34:	4643      	mov	r3, r8
 800ca36:	4622      	mov	r2, r4
 800ca38:	a949      	add	r1, sp, #292	; 0x124
 800ca3a:	f8cd 9000 	str.w	r9, [sp]
 800ca3e:	a839      	add	r0, sp, #228	; 0xe4
 800ca40:	f003 fde4 	bl	801060c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ca44:	42af      	cmp	r7, r5
 800ca46:	af12      	add	r7, sp, #72	; 0x48
 800ca48:	bfb7      	itett	lt
 800ca4a:	2300      	movlt	r3, #0
 800ca4c:	2301      	movge	r3, #1
 800ca4e:	ad29      	addlt	r5, sp, #164	; 0xa4
 800ca50:	ac19      	addlt	r4, sp, #100	; 0x64
 800ca52:	bfb1      	iteee	lt
 800ca54:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ca56:	ad19      	addge	r5, sp, #100	; 0x64
 800ca58:	930e      	strge	r3, [sp, #56]	; 0x38
 800ca5a:	ac29      	addge	r4, sp, #164	; 0xa4
 800ca5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ca62:	e887 0003 	stmia.w	r7, {r0, r1}
 800ca66:	b928      	cbnz	r0, 800ca74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800ca68:	4b80      	ldr	r3, [pc, #512]	; (800cc6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800ca6a:	6818      	ldr	r0, [r3, #0]
 800ca6c:	6803      	ldr	r3, [r0, #0]
 800ca6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca70:	4798      	blx	r3
 800ca72:	6038      	str	r0, [r7, #0]
 800ca74:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ca76:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ca7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca7e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800ca80:	930c      	str	r3, [sp, #48]	; 0x30
 800ca82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca84:	6963      	ldr	r3, [r4, #20]
 800ca86:	440b      	add	r3, r1
 800ca88:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800ca8c:	4408      	add	r0, r1
 800ca8e:	b200      	sxth	r0, r0
 800ca90:	4283      	cmp	r3, r0
 800ca92:	900d      	str	r0, [sp, #52]	; 0x34
 800ca94:	f280 80dd 	bge.w	800cc52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800ca98:	428b      	cmp	r3, r1
 800ca9a:	da08      	bge.n	800caae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	dd06      	ble.n	800caae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800caa0:	1acb      	subs	r3, r1, r3
 800caa2:	429a      	cmp	r2, r3
 800caa4:	f2c0 80e4 	blt.w	800cc70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f300 80e2 	bgt.w	800cc72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800caae:	6967      	ldr	r7, [r4, #20]
 800cab0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800cab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cab6:	443b      	add	r3, r7
 800cab8:	461f      	mov	r7, r3
 800caba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cabc:	1bdf      	subs	r7, r3, r7
 800cabe:	4297      	cmp	r7, r2
 800cac0:	bfa8      	it	ge
 800cac2:	4617      	movge	r7, r2
 800cac4:	2f00      	cmp	r7, #0
 800cac6:	f340 8166 	ble.w	800cd96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800caca:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cacc:	6829      	ldr	r1, [r5, #0]
 800cace:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cad2:	f9bb 3000 	ldrsh.w	r3, [fp]
 800cad6:	4411      	add	r1, r2
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	4299      	cmp	r1, r3
 800cadc:	dd1a      	ble.n	800cb14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800cade:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800cae2:	4402      	add	r2, r0
 800cae4:	440b      	add	r3, r1
 800cae6:	b21b      	sxth	r3, r3
 800cae8:	429a      	cmp	r2, r3
 800caea:	dc13      	bgt.n	800cb14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800caec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800caee:	a912      	add	r1, sp, #72	; 0x48
 800caf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	9206      	str	r2, [sp, #24]
 800caf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cafa:	9500      	str	r5, [sp, #0]
 800cafc:	9205      	str	r2, [sp, #20]
 800cafe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb00:	e9cd b203 	strd	fp, r2, [sp, #12]
 800cb04:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800cb06:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800cb0a:	aa49      	add	r2, sp, #292	; 0x124
 800cb0c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800cb10:	4623      	mov	r3, r4
 800cb12:	47c8      	blx	r9
 800cb14:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800cb18:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800cb1c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800cb20:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cb24:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800cb28:	68a1      	ldr	r1, [r4, #8]
 800cb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb2e:	ed94 6a08 	vldr	s12, [r4, #32]
 800cb32:	edd4 6a07 	vldr	s13, [r4, #28]
 800cb36:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800cb3a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cb3e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cb42:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb46:	edc4 6a07 	vstr	s13, [r4, #28]
 800cb4a:	441a      	add	r2, r3
 800cb4c:	6963      	ldr	r3, [r4, #20]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	6022      	str	r2, [r4, #0]
 800cb52:	6163      	str	r3, [r4, #20]
 800cb54:	69a3      	ldr	r3, [r4, #24]
 800cb56:	3b01      	subs	r3, #1
 800cb58:	61a3      	str	r3, [r4, #24]
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	440b      	add	r3, r1
 800cb5e:	68e1      	ldr	r1, [r4, #12]
 800cb60:	428b      	cmp	r3, r1
 800cb62:	6123      	str	r3, [r4, #16]
 800cb64:	db15      	blt.n	800cb92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800cb66:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800cb6a:	3201      	adds	r2, #1
 800cb6c:	1a5b      	subs	r3, r3, r1
 800cb6e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cb72:	6022      	str	r2, [r4, #0]
 800cb74:	6123      	str	r3, [r4, #16]
 800cb76:	edc4 6a07 	vstr	s13, [r4, #28]
 800cb7a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800cb7e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cb82:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800cb86:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800cb8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb8e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cb92:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800cb96:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800cb9a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800cb9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cba2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800cba6:	68a9      	ldr	r1, [r5, #8]
 800cba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbac:	ed95 6a08 	vldr	s12, [r5, #32]
 800cbb0:	edd5 6a07 	vldr	s13, [r5, #28]
 800cbb4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cbb8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cbbc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cbc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cbc4:	edc5 6a07 	vstr	s13, [r5, #28]
 800cbc8:	441a      	add	r2, r3
 800cbca:	696b      	ldr	r3, [r5, #20]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	602a      	str	r2, [r5, #0]
 800cbd0:	616b      	str	r3, [r5, #20]
 800cbd2:	69ab      	ldr	r3, [r5, #24]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	61ab      	str	r3, [r5, #24]
 800cbd8:	692b      	ldr	r3, [r5, #16]
 800cbda:	440b      	add	r3, r1
 800cbdc:	68e9      	ldr	r1, [r5, #12]
 800cbde:	428b      	cmp	r3, r1
 800cbe0:	612b      	str	r3, [r5, #16]
 800cbe2:	db15      	blt.n	800cc10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800cbe4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800cbe8:	3201      	adds	r2, #1
 800cbea:	1a5b      	subs	r3, r3, r1
 800cbec:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cbf0:	602a      	str	r2, [r5, #0]
 800cbf2:	612b      	str	r3, [r5, #16]
 800cbf4:	edc5 6a07 	vstr	s13, [r5, #28]
 800cbf8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800cbfc:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cc00:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cc04:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800cc08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc0c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cc10:	3f01      	subs	r7, #1
 800cc12:	e757      	b.n	800cac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800cc14:	4299      	cmp	r1, r3
 800cc16:	dc13      	bgt.n	800cc40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	da14      	bge.n	800cc46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800cc1c:	2502      	movs	r5, #2
 800cc1e:	2703      	movs	r7, #3
 800cc20:	f04f 0800 	mov.w	r8, #0
 800cc24:	46a9      	mov	r9, r5
 800cc26:	f04f 0a01 	mov.w	sl, #1
 800cc2a:	e6ef      	b.n	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800cc2c:	2501      	movs	r5, #1
 800cc2e:	2700      	movs	r7, #0
 800cc30:	46a9      	mov	r9, r5
 800cc32:	46b8      	mov	r8, r7
 800cc34:	f04f 0a02 	mov.w	sl, #2
 800cc38:	e6e8      	b.n	800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800cc3a:	2501      	movs	r5, #1
 800cc3c:	2702      	movs	r7, #2
 800cc3e:	e6e1      	b.n	800ca04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800cc40:	2500      	movs	r5, #0
 800cc42:	2701      	movs	r7, #1
 800cc44:	e7f4      	b.n	800cc30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800cc46:	2702      	movs	r7, #2
 800cc48:	2503      	movs	r5, #3
 800cc4a:	f04f 0900 	mov.w	r9, #0
 800cc4e:	46b8      	mov	r8, r7
 800cc50:	e7e9      	b.n	800cc26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800cc52:	4613      	mov	r3, r2
 800cc54:	e728      	b.n	800caa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800cc56:	bf00      	nop
 800cc58:	2400aeec 	.word	0x2400aeec
 800cc5c:	fffd8f01 	.word	0xfffd8f01
 800cc60:	00027100 	.word	0x00027100
 800cc64:	0004e1ff 	.word	0x0004e1ff
 800cc68:	0004e1fe 	.word	0x0004e1fe
 800cc6c:	2400aef4 	.word	0x2400aef4
 800cc70:	4613      	mov	r3, r2
 800cc72:	992b      	ldr	r1, [sp, #172]	; 0xac
 800cc74:	469e      	mov	lr, r3
 800cc76:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800cc78:	469c      	mov	ip, r3
 800cc7a:	9111      	str	r1, [sp, #68]	; 0x44
 800cc7c:	f04f 0900 	mov.w	r9, #0
 800cc80:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800cc84:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800cc88:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800cc8c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800cc90:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800cc94:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cc98:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800cc9c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800cca0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800cca4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800cca8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800ccac:	f1bc 0f00 	cmp.w	ip, #0
 800ccb0:	d147      	bne.n	800cd42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800ccb2:	eb03 0c07 	add.w	ip, r3, r7
 800ccb6:	1ad7      	subs	r7, r2, r3
 800ccb8:	f1b9 0f00 	cmp.w	r9, #0
 800ccbc:	d009      	beq.n	800ccd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800ccbe:	9029      	str	r0, [sp, #164]	; 0xa4
 800ccc0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800ccc4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800ccc8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800cccc:	912d      	str	r1, [sp, #180]	; 0xb4
 800ccce:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800ccd2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ccd4:	f04f 0800 	mov.w	r8, #0
 800ccd8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800ccdc:	9111      	str	r1, [sp, #68]	; 0x44
 800ccde:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800cce2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800cce6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800ccea:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800ccee:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800ccf2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800ccf6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800ccfa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800ccfe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800cd02:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800cd06:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800cd0a:	f1be 0f00 	cmp.w	lr, #0
 800cd0e:	d031      	beq.n	800cd74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800cd10:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800cd12:	4450      	add	r0, sl
 800cd14:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cd18:	4431      	add	r1, r6
 800cd1a:	ee37 7a04 	vadd.f32	s14, s14, s8
 800cd1e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cd22:	4549      	cmp	r1, r9
 800cd24:	db08      	blt.n	800cd38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800cd26:	ee77 7a85 	vadd.f32	s15, s15, s10
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cd30:	eba1 0109 	sub.w	r1, r1, r9
 800cd34:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cd38:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cd3c:	f04f 0801 	mov.w	r8, #1
 800cd40:	e7e3      	b.n	800cd0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800cd42:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800cd44:	4450      	add	r0, sl
 800cd46:	ee37 7a24 	vadd.f32	s14, s14, s9
 800cd4a:	4431      	add	r1, r6
 800cd4c:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cd50:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800cd54:	4541      	cmp	r1, r8
 800cd56:	db08      	blt.n	800cd6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800cd58:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800cd62:	eba1 0108 	sub.w	r1, r1, r8
 800cd66:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cd6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd6e:	f04f 0901 	mov.w	r9, #1
 800cd72:	e79b      	b.n	800ccac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800cd74:	449c      	add	ip, r3
 800cd76:	1aff      	subs	r7, r7, r3
 800cd78:	f1b8 0f00 	cmp.w	r8, #0
 800cd7c:	d009      	beq.n	800cd92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800cd7e:	9019      	str	r0, [sp, #100]	; 0x64
 800cd80:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800cd84:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800cd88:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800cd8c:	911d      	str	r1, [sp, #116]	; 0x74
 800cd8e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800cd92:	1ad2      	subs	r2, r2, r3
 800cd94:	e68b      	b.n	800caae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800cd96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd98:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 80d1 	beq.w	800cf42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800cda0:	ad19      	add	r5, sp, #100	; 0x64
 800cda2:	ac39      	add	r4, sp, #228	; 0xe4
 800cda4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cda6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800cdaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cdae:	930c      	str	r3, [sp, #48]	; 0x30
 800cdb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cdb2:	6963      	ldr	r3, [r4, #20]
 800cdb4:	440b      	add	r3, r1
 800cdb6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800cdba:	4408      	add	r0, r1
 800cdbc:	b200      	sxth	r0, r0
 800cdbe:	4283      	cmp	r3, r0
 800cdc0:	900d      	str	r0, [sp, #52]	; 0x34
 800cdc2:	f280 80c1 	bge.w	800cf48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800cdc6:	428b      	cmp	r3, r1
 800cdc8:	da08      	bge.n	800cddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	dd06      	ble.n	800cddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cdce:	1acb      	subs	r3, r1, r3
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	f2c0 80bb 	blt.w	800cf4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f300 80b9 	bgt.w	800cf4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800cddc:	6967      	ldr	r7, [r4, #20]
 800cdde:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800cde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cde4:	443b      	add	r3, r7
 800cde6:	461f      	mov	r7, r3
 800cde8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdea:	1bdf      	subs	r7, r3, r7
 800cdec:	4297      	cmp	r7, r2
 800cdee:	bfa8      	it	ge
 800cdf0:	4617      	movge	r7, r2
 800cdf2:	2f00      	cmp	r7, #0
 800cdf4:	f340 813c 	ble.w	800d070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800cdf8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cdfa:	6829      	ldr	r1, [r5, #0]
 800cdfc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ce00:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ce04:	4411      	add	r1, r2
 800ce06:	6820      	ldr	r0, [r4, #0]
 800ce08:	4299      	cmp	r1, r3
 800ce0a:	dd1a      	ble.n	800ce42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ce0c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ce10:	4402      	add	r2, r0
 800ce12:	440b      	add	r3, r1
 800ce14:	b21b      	sxth	r3, r3
 800ce16:	429a      	cmp	r2, r3
 800ce18:	dc13      	bgt.n	800ce42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800ce1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce1c:	a912      	add	r1, sp, #72	; 0x48
 800ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	9206      	str	r2, [sp, #24]
 800ce26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce28:	9500      	str	r5, [sp, #0]
 800ce2a:	9205      	str	r2, [sp, #20]
 800ce2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce2e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ce32:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ce34:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ce38:	aa49      	add	r2, sp, #292	; 0x124
 800ce3a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800ce3e:	4623      	mov	r3, r4
 800ce40:	47c8      	blx	r9
 800ce42:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800ce46:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800ce4a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800ce4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce52:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800ce56:	68a1      	ldr	r1, [r4, #8]
 800ce58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce5c:	ed94 6a08 	vldr	s12, [r4, #32]
 800ce60:	edd4 6a07 	vldr	s13, [r4, #28]
 800ce64:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ce68:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ce6c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ce70:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce74:	edc4 6a07 	vstr	s13, [r4, #28]
 800ce78:	441a      	add	r2, r3
 800ce7a:	6963      	ldr	r3, [r4, #20]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	6022      	str	r2, [r4, #0]
 800ce80:	6163      	str	r3, [r4, #20]
 800ce82:	69a3      	ldr	r3, [r4, #24]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	61a3      	str	r3, [r4, #24]
 800ce88:	6923      	ldr	r3, [r4, #16]
 800ce8a:	440b      	add	r3, r1
 800ce8c:	68e1      	ldr	r1, [r4, #12]
 800ce8e:	428b      	cmp	r3, r1
 800ce90:	6123      	str	r3, [r4, #16]
 800ce92:	db15      	blt.n	800cec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800ce94:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800ce98:	3201      	adds	r2, #1
 800ce9a:	1a5b      	subs	r3, r3, r1
 800ce9c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cea0:	6022      	str	r2, [r4, #0]
 800cea2:	6123      	str	r3, [r4, #16]
 800cea4:	edc4 6a07 	vstr	s13, [r4, #28]
 800cea8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800ceac:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ceb0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ceb4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800ceb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cebc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cec0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800cec4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800cec8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800cecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ced0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800ced4:	68a9      	ldr	r1, [r5, #8]
 800ced6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceda:	ed95 6a08 	vldr	s12, [r5, #32]
 800cede:	edd5 6a07 	vldr	s13, [r5, #28]
 800cee2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cee6:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ceea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ceee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cef2:	edc5 6a07 	vstr	s13, [r5, #28]
 800cef6:	441a      	add	r2, r3
 800cef8:	696b      	ldr	r3, [r5, #20]
 800cefa:	3301      	adds	r3, #1
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	616b      	str	r3, [r5, #20]
 800cf00:	69ab      	ldr	r3, [r5, #24]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	61ab      	str	r3, [r5, #24]
 800cf06:	692b      	ldr	r3, [r5, #16]
 800cf08:	440b      	add	r3, r1
 800cf0a:	68e9      	ldr	r1, [r5, #12]
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	612b      	str	r3, [r5, #16]
 800cf10:	db15      	blt.n	800cf3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800cf12:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800cf16:	3201      	adds	r2, #1
 800cf18:	1a5b      	subs	r3, r3, r1
 800cf1a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cf1e:	602a      	str	r2, [r5, #0]
 800cf20:	612b      	str	r3, [r5, #16]
 800cf22:	edc5 6a07 	vstr	s13, [r5, #28]
 800cf26:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800cf2a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cf2e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cf32:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800cf36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf3a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cf3e:	3f01      	subs	r7, #1
 800cf40:	e757      	b.n	800cdf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800cf42:	ad39      	add	r5, sp, #228	; 0xe4
 800cf44:	ac19      	add	r4, sp, #100	; 0x64
 800cf46:	e72d      	b.n	800cda4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800cf48:	4613      	mov	r3, r2
 800cf4a:	e744      	b.n	800cdd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800cf50:	469e      	mov	lr, r3
 800cf52:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800cf56:	461f      	mov	r7, r3
 800cf58:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800cf5c:	f04f 0900 	mov.w	r9, #0
 800cf60:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800cf64:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800cf68:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800cf6c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800cf70:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800cf74:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800cf76:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800cf7a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800cf7e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800cf82:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800cf86:	960e      	str	r6, [sp, #56]	; 0x38
 800cf88:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800cf8c:	2f00      	cmp	r7, #0
 800cf8e:	d146      	bne.n	800d01e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800cf90:	449c      	add	ip, r3
 800cf92:	1ad7      	subs	r7, r2, r3
 800cf94:	f1b9 0f00 	cmp.w	r9, #0
 800cf98:	d009      	beq.n	800cfae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800cf9a:	9039      	str	r0, [sp, #228]	; 0xe4
 800cf9c:	913d      	str	r1, [sp, #244]	; 0xf4
 800cf9e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800cfa2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800cfa6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800cfaa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800cfae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800cfb0:	f04f 0800 	mov.w	r8, #0
 800cfb4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800cfb8:	910e      	str	r1, [sp, #56]	; 0x38
 800cfba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800cfbe:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800cfc2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800cfc6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800cfca:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800cfce:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800cfd2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800cfd6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800cfda:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800cfde:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800cfe2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800cfe6:	f1be 0f00 	cmp.w	lr, #0
 800cfea:	d030      	beq.n	800d04e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800cfec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cfee:	4450      	add	r0, sl
 800cff0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cff4:	4431      	add	r1, r6
 800cff6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800cffa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cffe:	4549      	cmp	r1, r9
 800d000:	db08      	blt.n	800d014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800d002:	ee77 7a85 	vadd.f32	s15, s15, s10
 800d006:	3001      	adds	r0, #1
 800d008:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d00c:	eba1 0109 	sub.w	r1, r1, r9
 800d010:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d014:	f10e 3eff 	add.w	lr, lr, #4294967295
 800d018:	f04f 0801 	mov.w	r8, #1
 800d01c:	e7e3      	b.n	800cfe6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800d01e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d020:	4450      	add	r0, sl
 800d022:	ee37 7a24 	vadd.f32	s14, s14, s9
 800d026:	4431      	add	r1, r6
 800d028:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d02c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800d030:	4541      	cmp	r1, r8
 800d032:	db08      	blt.n	800d046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800d034:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d038:	3001      	adds	r0, #1
 800d03a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d03e:	eba1 0108 	sub.w	r1, r1, r8
 800d042:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d046:	3f01      	subs	r7, #1
 800d048:	f04f 0901 	mov.w	r9, #1
 800d04c:	e79e      	b.n	800cf8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800d04e:	449c      	add	ip, r3
 800d050:	1aff      	subs	r7, r7, r3
 800d052:	f1b8 0f00 	cmp.w	r8, #0
 800d056:	d009      	beq.n	800d06c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800d058:	9019      	str	r0, [sp, #100]	; 0x64
 800d05a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800d05e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800d062:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800d066:	911d      	str	r1, [sp, #116]	; 0x74
 800d068:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800d06c:	1ad2      	subs	r2, r2, r3
 800d06e:	e6b5      	b.n	800cddc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800d070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	b923      	cbnz	r3, 800d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800d076:	4b04      	ldr	r3, [pc, #16]	; (800d088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800d078:	6818      	ldr	r0, [r3, #0]
 800d07a:	6803      	ldr	r3, [r0, #0]
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	4798      	blx	r3
 800d080:	b05b      	add	sp, #364	; 0x16c
 800d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d086:	bf00      	nop
 800d088:	2400aef4 	.word	0x2400aef4

0800d08c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4604      	mov	r4, r0
 800d090:	2500      	movs	r5, #0
 800d092:	9804      	ldr	r0, [sp, #16]
 800d094:	f89d 6014 	ldrb.w	r6, [sp, #20]
 800d098:	8025      	strh	r5, [r4, #0]
 800d09a:	6061      	str	r1, [r4, #4]
 800d09c:	7223      	strb	r3, [r4, #8]
 800d09e:	7266      	strb	r6, [r4, #9]
 800d0a0:	60e0      	str	r0, [r4, #12]
 800d0a2:	8222      	strh	r2, [r4, #16]
 800d0a4:	8265      	strh	r5, [r4, #18]
 800d0a6:	82a5      	strh	r5, [r4, #20]
 800d0a8:	82e5      	strh	r5, [r4, #22]
 800d0aa:	8325      	strh	r5, [r4, #24]
 800d0ac:	8365      	strh	r5, [r4, #26]
 800d0ae:	83a5      	strh	r5, [r4, #28]
 800d0b0:	77a5      	strb	r5, [r4, #30]
 800d0b2:	b32e      	cbz	r6, 800d100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800d0b4:	6803      	ldr	r3, [r0, #0]
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	4798      	blx	r3
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	b300      	cbz	r0, 800d100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800d0be:	68e0      	ldr	r0, [r4, #12]
 800d0c0:	4631      	mov	r1, r6
 800d0c2:	6803      	ldr	r3, [r0, #0]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	4798      	blx	r3
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	b1c8      	cbz	r0, 800d100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800d0cc:	7b43      	ldrb	r3, [r0, #13]
 800d0ce:	7a82      	ldrb	r2, [r0, #10]
 800d0d0:	005b      	lsls	r3, r3, #1
 800d0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	83a3      	strh	r3, [r4, #28]
 800d0da:	7a63      	ldrb	r3, [r4, #9]
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d10f      	bne.n	800d100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 800d0e0:	68e0      	ldr	r0, [r4, #12]
 800d0e2:	462a      	mov	r2, r5
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	6803      	ldr	r3, [r0, #0]
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	4798      	blx	r3
 800d0ec:	7b6b      	ldrb	r3, [r5, #13]
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d0f4:	7aab      	ldrb	r3, [r5, #10]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	4418      	add	r0, r3
 800d0fa:	8ba3      	ldrh	r3, [r4, #28]
 800d0fc:	4418      	add	r0, r3
 800d0fe:	83a0      	strh	r0, [r4, #28]
 800d100:	4620      	mov	r0, r4
 800d102:	bd70      	pop	{r4, r5, r6, pc}

0800d104 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800d104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d108:	2400      	movs	r4, #0
 800d10a:	b085      	sub	sp, #20
 800d10c:	4681      	mov	r9, r0
 800d10e:	4688      	mov	r8, r1
 800d110:	4692      	mov	sl, r2
 800d112:	469b      	mov	fp, r3
 800d114:	4627      	mov	r7, r4
 800d116:	4625      	mov	r5, r4
 800d118:	4626      	mov	r6, r4
 800d11a:	4554      	cmp	r4, sl
 800d11c:	da2a      	bge.n	800d174 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800d11e:	2300      	movs	r3, #0
 800d120:	9303      	str	r3, [sp, #12]
 800d122:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d126:	429d      	cmp	r5, r3
 800d128:	d004      	beq.n	800d134 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800d12a:	f242 030b 	movw	r3, #8203	; 0x200b
 800d12e:	429d      	cmp	r5, r3
 800d130:	bf18      	it	ne
 800d132:	462f      	movne	r7, r5
 800d134:	ab03      	add	r3, sp, #12
 800d136:	4642      	mov	r2, r8
 800d138:	4659      	mov	r1, fp
 800d13a:	4648      	mov	r0, r9
 800d13c:	f002 fef2 	bl	800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d140:	4605      	mov	r5, r0
 800d142:	b1b8      	cbz	r0, 800d174 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800d144:	280a      	cmp	r0, #10
 800d146:	d015      	beq.n	800d174 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800d148:	9a03      	ldr	r2, [sp, #12]
 800d14a:	b18a      	cbz	r2, 800d170 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800d14c:	7b50      	ldrb	r0, [r2, #13]
 800d14e:	4639      	mov	r1, r7
 800d150:	7a93      	ldrb	r3, [r2, #10]
 800d152:	0040      	lsls	r0, r0, #1
 800d154:	8895      	ldrh	r5, [r2, #4]
 800d156:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800d15a:	4303      	orrs	r3, r0
 800d15c:	4640      	mov	r0, r8
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	f8d8 3000 	ldr.w	r3, [r8]
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d166:	4798      	blx	r3
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	4418      	add	r0, r3
 800d16c:	4406      	add	r6, r0
 800d16e:	b2b6      	uxth	r6, r6
 800d170:	3401      	adds	r4, #1
 800d172:	e7d2      	b.n	800d11a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800d174:	4630      	mov	r0, r6
 800d176:	b005      	add	sp, #20
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d17c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800d17c:	2a02      	cmp	r2, #2
 800d17e:	b530      	push	{r4, r5, lr}
 800d180:	d011      	beq.n	800d1a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800d182:	2a03      	cmp	r2, #3
 800d184:	d01c      	beq.n	800d1c0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800d186:	2a01      	cmp	r2, #1
 800d188:	d10c      	bne.n	800d1a4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800d18a:	888b      	ldrh	r3, [r1, #4]
 800d18c:	8801      	ldrh	r1, [r0, #0]
 800d18e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d192:	1a5b      	subs	r3, r3, r1
 800d194:	8844      	ldrh	r4, [r0, #2]
 800d196:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d19a:	1a9b      	subs	r3, r3, r2
 800d19c:	8004      	strh	r4, [r0, #0]
 800d19e:	8081      	strh	r1, [r0, #4]
 800d1a0:	8043      	strh	r3, [r0, #2]
 800d1a2:	80c2      	strh	r2, [r0, #6]
 800d1a4:	bd30      	pop	{r4, r5, pc}
 800d1a6:	88cb      	ldrh	r3, [r1, #6]
 800d1a8:	8842      	ldrh	r2, [r0, #2]
 800d1aa:	1a9b      	subs	r3, r3, r2
 800d1ac:	88c2      	ldrh	r2, [r0, #6]
 800d1ae:	1a9b      	subs	r3, r3, r2
 800d1b0:	888a      	ldrh	r2, [r1, #4]
 800d1b2:	8801      	ldrh	r1, [r0, #0]
 800d1b4:	8043      	strh	r3, [r0, #2]
 800d1b6:	1a52      	subs	r2, r2, r1
 800d1b8:	8881      	ldrh	r1, [r0, #4]
 800d1ba:	1a52      	subs	r2, r2, r1
 800d1bc:	8002      	strh	r2, [r0, #0]
 800d1be:	e7f1      	b.n	800d1a4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800d1c0:	88cb      	ldrh	r3, [r1, #6]
 800d1c2:	8841      	ldrh	r1, [r0, #2]
 800d1c4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800d1c8:	1a5b      	subs	r3, r3, r1
 800d1ca:	f9b0 5000 	ldrsh.w	r5, [r0]
 800d1ce:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d1d2:	1a9b      	subs	r3, r3, r2
 800d1d4:	8045      	strh	r5, [r0, #2]
 800d1d6:	8082      	strh	r2, [r0, #4]
 800d1d8:	8003      	strh	r3, [r0, #0]
 800d1da:	80c4      	strh	r4, [r0, #6]
 800d1dc:	e7e2      	b.n	800d1a4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800d1de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800d1de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e2:	b09f      	sub	sp, #124	; 0x7c
 800d1e4:	9116      	str	r1, [sp, #88]	; 0x58
 800d1e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d1ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d1ec:	8809      	ldrh	r1, [r1, #0]
 800d1ee:	889b      	ldrh	r3, [r3, #4]
 800d1f0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800d1f4:	440b      	add	r3, r1
 800d1f6:	9212      	str	r2, [sp, #72]	; 0x48
 800d1f8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800d1fc:	b21b      	sxth	r3, r3
 800d1fe:	9011      	str	r0, [sp, #68]	; 0x44
 800d200:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800d204:	9310      	str	r3, [sp, #64]	; 0x40
 800d206:	f8d8 3000 	ldr.w	r3, [r8]
 800d20a:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 800d20e:	7a59      	ldrb	r1, [r3, #9]
 800d210:	7a1b      	ldrb	r3, [r3, #8]
 800d212:	9114      	str	r1, [sp, #80]	; 0x50
 800d214:	9315      	str	r3, [sp, #84]	; 0x54
 800d216:	2a00      	cmp	r2, #0
 800d218:	d067      	beq.n	800d2ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10c>
 800d21a:	f898 3010 	ldrb.w	r3, [r8, #16]
 800d21e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800d220:	2b04      	cmp	r3, #4
 800d222:	bf14      	ite	ne
 800d224:	2301      	movne	r3, #1
 800d226:	2302      	moveq	r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	f04f 0900 	mov.w	r9, #0
 800d22e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d230:	464c      	mov	r4, r9
 800d232:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d236:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800d23a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800d23e:	4293      	cmp	r3, r2
 800d240:	f280 808c 	bge.w	800d35c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 800d244:	2300      	movs	r3, #0
 800d246:	931c      	str	r3, [sp, #112]	; 0x70
 800d248:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d24c:	429c      	cmp	r4, r3
 800d24e:	d006      	beq.n	800d25e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x80>
 800d250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d252:	f242 020b 	movw	r2, #8203	; 0x200b
 800d256:	4294      	cmp	r4, r2
 800d258:	bf18      	it	ne
 800d25a:	4623      	movne	r3, r4
 800d25c:	930d      	str	r3, [sp, #52]	; 0x34
 800d25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d260:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800d262:	f8d8 2000 	ldr.w	r2, [r8]
 800d266:	428b      	cmp	r3, r1
 800d268:	db41      	blt.n	800d2ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x110>
 800d26a:	6813      	ldr	r3, [r2, #0]
 800d26c:	4610      	mov	r0, r2
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	4798      	blx	r3
 800d272:	4604      	mov	r4, r0
 800d274:	f8d8 0000 	ldr.w	r0, [r8]
 800d278:	aa1d      	add	r2, sp, #116	; 0x74
 800d27a:	4621      	mov	r1, r4
 800d27c:	6803      	ldr	r3, [r0, #0]
 800d27e:	689e      	ldr	r6, [r3, #8]
 800d280:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800d284:	47b0      	blx	r6
 800d286:	901c      	str	r0, [sp, #112]	; 0x70
 800d288:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d28c:	429c      	cmp	r4, r3
 800d28e:	f000 80ea 	beq.w	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d292:	f242 030b 	movw	r3, #8203	; 0x200b
 800d296:	429c      	cmp	r4, r3
 800d298:	f000 80e5 	beq.w	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d29c:	2c00      	cmp	r4, #0
 800d29e:	f000 80f7 	beq.w	800d490 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 800d2a2:	2c0a      	cmp	r4, #10
 800d2a4:	d060      	beq.n	800d368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 800d2a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d2a8:	b36a      	cbz	r2, 800d306 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x128>
 800d2aa:	8894      	ldrh	r4, [r2, #4]
 800d2ac:	f1bb 0f00 	cmp.w	fp, #0
 800d2b0:	d03b      	beq.n	800d32a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14c>
 800d2b2:	f892 900d 	ldrb.w	r9, [r2, #13]
 800d2b6:	f1bb 0f01 	cmp.w	fp, #1
 800d2ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800d2be:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800d2c2:	f892 900a 	ldrb.w	r9, [r2, #10]
 800d2c6:	ea49 0903 	orr.w	r9, r9, r3
 800d2ca:	d134      	bne.n	800d336 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x158>
 800d2cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2ce:	eba5 0509 	sub.w	r5, r5, r9
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d14f      	bne.n	800d376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 800d2d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2d8:	eb09 0305 	add.w	r3, r9, r5
 800d2dc:	4413      	add	r3, r2
 800d2de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d2e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	da51      	bge.n	800d38c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800d2e8:	e038      	b.n	800d35c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 800d2ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d2ec:	e79d      	b.n	800d22a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 800d2ee:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800d2f2:	4659      	mov	r1, fp
 800d2f4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	ab1d      	add	r3, sp, #116	; 0x74
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	ab1c      	add	r3, sp, #112	; 0x70
 800d2fe:	f002 fe69 	bl	800ffd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800d302:	4604      	mov	r4, r0
 800d304:	e7c0      	b.n	800d288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xaa>
 800d306:	f8d8 0000 	ldr.w	r0, [r8]
 800d30a:	6803      	ldr	r3, [r0, #0]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	4798      	blx	r3
 800d310:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d314:	4298      	cmp	r0, r3
 800d316:	f000 80a6 	beq.w	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d31a:	f242 030b 	movw	r3, #8203	; 0x200b
 800d31e:	4298      	cmp	r0, r3
 800d320:	f000 80a1 	beq.w	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d324:	f1bb 0f00 	cmp.w	fp, #0
 800d328:	d100      	bne.n	800d32c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800d32a:	444d      	add	r5, r9
 800d32c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d32e:	2a00      	cmp	r2, #0
 800d330:	d1bf      	bne.n	800d2b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd4>
 800d332:	4691      	mov	r9, r2
 800d334:	e097      	b.n	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 80ab 	beq.w	800d494 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 800d33e:	f1bb 0f00 	cmp.w	fp, #0
 800d342:	d118      	bne.n	800d376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 800d344:	f8d8 0000 	ldr.w	r0, [r8]
 800d348:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d34a:	6803      	ldr	r3, [r0, #0]
 800d34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34e:	4798      	blx	r3
 800d350:	4405      	add	r5, r0
 800d352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d356:	1aeb      	subs	r3, r5, r3
 800d358:	4293      	cmp	r3, r2
 800d35a:	dd17      	ble.n	800d38c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800d35c:	2c00      	cmp	r4, #0
 800d35e:	f000 8097 	beq.w	800d490 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 800d362:	2c0a      	cmp	r4, #10
 800d364:	f040 8085 	bne.w	800d472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 800d368:	240a      	movs	r4, #10
 800d36a:	fab4 f084 	clz	r0, r4
 800d36e:	0940      	lsrs	r0, r0, #5
 800d370:	b01f      	add	sp, #124	; 0x7c
 800d372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d376:	f8d8 0000 	ldr.w	r0, [r8]
 800d37a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d37c:	6803      	ldr	r3, [r0, #0]
 800d37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d380:	4798      	blx	r3
 800d382:	f1bb 0f01 	cmp.w	fp, #1
 800d386:	eba5 0500 	sub.w	r5, r5, r0
 800d38a:	d0a4      	beq.n	800d2d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf8>
 800d38c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d38e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d390:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800d394:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d398:	7b43      	ldrb	r3, [r0, #13]
 800d39a:	4429      	add	r1, r5
 800d39c:	015b      	lsls	r3, r3, #5
 800d39e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d3a2:	7983      	ldrb	r3, [r0, #6]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	440b      	add	r3, r1
 800d3a8:	42b3      	cmp	r3, r6
 800d3aa:	db5c      	blt.n	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3ae:	4299      	cmp	r1, r3
 800d3b0:	da59      	bge.n	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d3b2:	f8d8 0000 	ldr.w	r0, [r8]
 800d3b6:	42ae      	cmp	r6, r5
 800d3b8:	6803      	ldr	r3, [r0, #0]
 800d3ba:	bfcc      	ite	gt
 800d3bc:	1b76      	subgt	r6, r6, r5
 800d3be:	2600      	movle	r6, #0
 800d3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c2:	bfc8      	it	gt
 800d3c4:	b2b6      	uxthgt	r6, r6
 800d3c6:	4798      	blx	r3
 800d3c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d3ca:	7b5a      	ldrb	r2, [r3, #13]
 800d3cc:	00d1      	lsls	r1, r2, #3
 800d3ce:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800d3d2:	7a19      	ldrb	r1, [r3, #8]
 800d3d4:	4339      	orrs	r1, r7
 800d3d6:	0657      	lsls	r7, r2, #25
 800d3d8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800d3da:	bf48      	it	mi
 800d3dc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800d3e0:	4407      	add	r7, r0
 800d3e2:	bf48      	it	mi
 800d3e4:	b209      	sxthmi	r1, r1
 800d3e6:	1a7f      	subs	r7, r7, r1
 800d3e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d3ea:	b2bf      	uxth	r7, r7
 800d3ec:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800d3f0:	fa0f fa87 	sxth.w	sl, r7
 800d3f4:	4551      	cmp	r1, sl
 800d3f6:	dd3a      	ble.n	800d46e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 800d3f8:	0112      	lsls	r2, r2, #4
 800d3fa:	79d8      	ldrb	r0, [r3, #7]
 800d3fc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d400:	4302      	orrs	r2, r0
 800d402:	4492      	add	sl, r2
 800d404:	4551      	cmp	r1, sl
 800d406:	dc2e      	bgt.n	800d466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 800d408:	1bcf      	subs	r7, r1, r7
 800d40a:	468a      	mov	sl, r1
 800d40c:	b2bf      	uxth	r7, r7
 800d40e:	9319      	str	r3, [sp, #100]	; 0x64
 800d410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d412:	f8d8 0000 	ldr.w	r0, [r8]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	6801      	ldr	r1, [r0, #0]
 800d41a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d41c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d41e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d420:	9218      	str	r2, [sp, #96]	; 0x60
 800d422:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800d424:	4788      	blx	r1
 800d426:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d42a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d42c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d42e:	f898 100e 	ldrb.w	r1, [r8, #14]
 800d432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d434:	910a      	str	r1, [sp, #40]	; 0x28
 800d436:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800d43a:	9109      	str	r1, [sp, #36]	; 0x24
 800d43c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d444:	9206      	str	r2, [sp, #24]
 800d446:	e9cd a601 	strd	sl, r6, [sp, #4]
 800d44a:	442e      	add	r6, r5
 800d44c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800d450:	b236      	sxth	r6, r6
 800d452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d454:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800d458:	9600      	str	r6, [sp, #0]
 800d45a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d464:	47b0      	blx	r6
 800d466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d468:	3301      	adds	r3, #1
 800d46a:	930e      	str	r3, [sp, #56]	; 0x38
 800d46c:	e6e5      	b.n	800d23a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 800d46e:	2700      	movs	r7, #0
 800d470:	e7cd      	b.n	800d40e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 800d472:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d474:	3501      	adds	r5, #1
 800d476:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d478:	429d      	cmp	r5, r3
 800d47a:	f6bf af76 	bge.w	800d36a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800d47e:	4659      	mov	r1, fp
 800d480:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d482:	f7f5 f983 	bl	800278c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d486:	4604      	mov	r4, r0
 800d488:	b110      	cbz	r0, 800d490 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 800d48a:	280a      	cmp	r0, #10
 800d48c:	d1f2      	bne.n	800d474 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800d48e:	e76b      	b.n	800d368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 800d490:	2400      	movs	r4, #0
 800d492:	e76a      	b.n	800d36a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800d494:	f1bb 0f00 	cmp.w	fp, #0
 800d498:	f43f af5b 	beq.w	800d352 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 800d49c:	e776      	b.n	800d38c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800d49e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800d49e:	b530      	push	{r4, r5, lr}
 800d4a0:	8a44      	ldrh	r4, [r0, #18]
 800d4a2:	8ac5      	ldrh	r5, [r0, #22]
 800d4a4:	82c3      	strh	r3, [r0, #22]
 800d4a6:	442c      	add	r4, r5
 800d4a8:	1ae4      	subs	r4, r4, r3
 800d4aa:	8b03      	ldrh	r3, [r0, #24]
 800d4ac:	8244      	strh	r4, [r0, #18]
 800d4ae:	8a84      	ldrh	r4, [r0, #20]
 800d4b0:	4422      	add	r2, r4
 800d4b2:	440c      	add	r4, r1
 800d4b4:	1a59      	subs	r1, r3, r1
 800d4b6:	8342      	strh	r2, [r0, #26]
 800d4b8:	8284      	strh	r4, [r0, #20]
 800d4ba:	8301      	strh	r1, [r0, #24]
 800d4bc:	bd30      	pop	{r4, r5, pc}

0800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800d4be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c2:	7a43      	ldrb	r3, [r0, #9]
 800d4c4:	b087      	sub	sp, #28
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	460f      	mov	r7, r1
 800d4ca:	1eda      	subs	r2, r3, #3
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	2900      	cmp	r1, #0
 800d4d0:	d036      	beq.n	800d540 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800d4d2:	2a01      	cmp	r2, #1
 800d4d4:	d932      	bls.n	800d53c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800d4d6:	1e58      	subs	r0, r3, #1
 800d4d8:	f1d0 0b00 	rsbs	fp, r0, #0
 800d4dc:	eb4b 0b00 	adc.w	fp, fp, r0
 800d4e0:	1e99      	subs	r1, r3, #2
 800d4e2:	424b      	negs	r3, r1
 800d4e4:	414b      	adcs	r3, r1
 800d4e6:	9303      	str	r3, [sp, #12]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d4ee:	2500      	movs	r5, #0
 800d4f0:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800d4f4:	46a9      	mov	r9, r5
 800d4f6:	8265      	strh	r5, [r4, #18]
 800d4f8:	82a5      	strh	r5, [r4, #20]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9305      	str	r3, [sp, #20]
 800d4fe:	8823      	ldrh	r3, [r4, #0]
 800d500:	2b20      	cmp	r3, #32
 800d502:	d02b      	beq.n	800d55c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800d504:	eba3 020a 	sub.w	r2, r3, sl
 800d508:	4256      	negs	r6, r2
 800d50a:	4156      	adcs	r6, r2
 800d50c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800d510:	4293      	cmp	r3, r2
 800d512:	d004      	beq.n	800d51e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800d514:	4553      	cmp	r3, sl
 800d516:	bf16      	itet	ne
 800d518:	4699      	movne	r9, r3
 800d51a:	2601      	moveq	r6, #1
 800d51c:	2600      	movne	r6, #0
 800d51e:	ab05      	add	r3, sp, #20
 800d520:	68e2      	ldr	r2, [r4, #12]
 800d522:	7a21      	ldrb	r1, [r4, #8]
 800d524:	6860      	ldr	r0, [r4, #4]
 800d526:	f002 fcfd 	bl	800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d52a:	8020      	strh	r0, [r4, #0]
 800d52c:	b9c8      	cbnz	r0, 800d562 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800d52e:	8b22      	ldrh	r2, [r4, #24]
 800d530:	2300      	movs	r3, #0
 800d532:	4611      	mov	r1, r2
 800d534:	4620      	mov	r0, r4
 800d536:	f7ff ffb2 	bl	800d49e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800d53a:	e066      	b.n	800d60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800d53c:	468b      	mov	fp, r1
 800d53e:	e7cf      	b.n	800d4e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800d540:	3b01      	subs	r3, #1
 800d542:	2a01      	cmp	r2, #1
 800d544:	9103      	str	r1, [sp, #12]
 800d546:	468b      	mov	fp, r1
 800d548:	bf8c      	ite	hi
 800d54a:	2200      	movhi	r2, #0
 800d54c:	2201      	movls	r2, #1
 800d54e:	2b01      	cmp	r3, #1
 800d550:	9202      	str	r2, [sp, #8]
 800d552:	bf8c      	ite	hi
 800d554:	2300      	movhi	r3, #0
 800d556:	2301      	movls	r3, #1
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	e7c8      	b.n	800d4ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800d55c:	4699      	mov	r9, r3
 800d55e:	2601      	movs	r6, #1
 800d560:	e7dd      	b.n	800d51e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800d562:	8ae3      	ldrh	r3, [r4, #22]
 800d564:	280a      	cmp	r0, #10
 800d566:	f103 0301 	add.w	r3, r3, #1
 800d56a:	82e3      	strh	r3, [r4, #22]
 800d56c:	d0df      	beq.n	800d52e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800d56e:	9a05      	ldr	r2, [sp, #20]
 800d570:	bb42      	cbnz	r2, 800d5c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800d572:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d576:	4298      	cmp	r0, r3
 800d578:	d001      	beq.n	800d57e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800d57a:	4550      	cmp	r0, sl
 800d57c:	d1bd      	bne.n	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d57e:	8823      	ldrh	r3, [r4, #0]
 800d580:	8b21      	ldrh	r1, [r4, #24]
 800d582:	2b20      	cmp	r3, #32
 800d584:	d001      	beq.n	800d58a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800d586:	4553      	cmp	r3, sl
 800d588:	d131      	bne.n	800d5ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	bf0a      	itet	eq
 800d58e:	460d      	moveq	r5, r1
 800d590:	4630      	movne	r0, r6
 800d592:	2001      	moveq	r0, #1
 800d594:	440a      	add	r2, r1
 800d596:	8aa3      	ldrh	r3, [r4, #20]
 800d598:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800d59c:	b292      	uxth	r2, r2
 800d59e:	8322      	strh	r2, [r4, #24]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	2f00      	cmp	r7, #0
 800d5a4:	d03a      	beq.n	800d61c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800d5a6:	f1bb 0f00 	cmp.w	fp, #0
 800d5aa:	d102      	bne.n	800d5b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800d5ac:	9903      	ldr	r1, [sp, #12]
 800d5ae:	b301      	cbz	r1, 800d5f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800d5b0:	b1f8      	cbz	r0, 800d5f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800d5b2:	8ba1      	ldrh	r1, [r4, #28]
 800d5b4:	4419      	add	r1, r3
 800d5b6:	458c      	cmp	ip, r1
 800d5b8:	da2a      	bge.n	800d610 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800d5ba:	8a61      	ldrh	r1, [r4, #18]
 800d5bc:	b341      	cbz	r1, 800d610 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800d5be:	4563      	cmp	r3, ip
 800d5c0:	dd9b      	ble.n	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d5c2:	e01c      	b.n	800d5fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800d5c4:	8893      	ldrh	r3, [r2, #4]
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	8023      	strh	r3, [r4, #0]
 800d5ca:	f892 800d 	ldrb.w	r8, [r2, #13]
 800d5ce:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d5d2:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800d5d6:	f892 800a 	ldrb.w	r8, [r2, #10]
 800d5da:	ea48 0800 	orr.w	r8, r8, r0
 800d5de:	68e0      	ldr	r0, [r4, #12]
 800d5e0:	6803      	ldr	r3, [r0, #0]
 800d5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e4:	4798      	blx	r3
 800d5e6:	eb08 0200 	add.w	r2, r8, r0
 800d5ea:	b292      	uxth	r2, r2
 800d5ec:	e7c7      	b.n	800d57e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e7d0      	b.n	800d594 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800d5f2:	4563      	cmp	r3, ip
 800d5f4:	dd81      	ble.n	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d5f6:	8a63      	ldrh	r3, [r4, #18]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f43f af7e 	beq.w	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d5fe:	2301      	movs	r3, #1
 800d600:	8ba2      	ldrh	r2, [r4, #28]
 800d602:	77a3      	strb	r3, [r4, #30]
 800d604:	8b63      	ldrh	r3, [r4, #26]
 800d606:	4413      	add	r3, r2
 800d608:	8363      	strh	r3, [r4, #26]
 800d60a:	b007      	add	sp, #28
 800d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	2300      	movs	r3, #0
 800d612:	4611      	mov	r1, r2
 800d614:	4620      	mov	r0, r4
 800d616:	f7ff ff42 	bl	800d49e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800d61a:	e76e      	b.n	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d61c:	4563      	cmp	r3, ip
 800d61e:	dd14      	ble.n	800d64a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800d620:	9b02      	ldr	r3, [sp, #8]
 800d622:	b113      	cbz	r3, 800d62a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800d624:	2301      	movs	r3, #1
 800d626:	460a      	mov	r2, r1
 800d628:	e783      	b.n	800d532 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800d62a:	9b01      	ldr	r3, [sp, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f43f af64 	beq.w	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d632:	2800      	cmp	r0, #0
 800d634:	f47f af61 	bne.w	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d638:	b116      	cbz	r6, 800d640 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800d63a:	2301      	movs	r3, #1
 800d63c:	462a      	mov	r2, r5
 800d63e:	e779      	b.n	800d534 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800d640:	8a63      	ldrh	r3, [r4, #18]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f43f af59 	beq.w	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d648:	e7df      	b.n	800d60a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800d64a:	2800      	cmp	r0, #0
 800d64c:	f47f af55 	bne.w	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d650:	2e00      	cmp	r6, #0
 800d652:	f43f af52 	beq.w	800d4fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d656:	2301      	movs	r3, #1
 800d658:	462a      	mov	r2, r5
 800d65a:	e7db      	b.n	800d614 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800d65c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800d65c:	b530      	push	{r4, r5, lr}
 800d65e:	4605      	mov	r5, r0
 800d660:	b08b      	sub	sp, #44	; 0x2c
 800d662:	b191      	cbz	r1, 800d68a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800d664:	2401      	movs	r4, #1
 800d666:	e9cd 3100 	strd	r3, r1, [sp]
 800d66a:	4613      	mov	r3, r2
 800d66c:	4601      	mov	r1, r0
 800d66e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800d672:	a802      	add	r0, sp, #8
 800d674:	f7ff fd0a 	bl	800d08c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800d678:	2100      	movs	r1, #0
 800d67a:	a802      	add	r0, sp, #8
 800d67c:	f7ff ff1f 	bl	800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d680:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d684:	b163      	cbz	r3, 800d6a0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800d686:	3401      	adds	r4, #1
 800d688:	e7f6      	b.n	800d678 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800d68a:	2401      	movs	r4, #1
 800d68c:	f002 fd44 	bl	8010118 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d690:	280a      	cmp	r0, #10
 800d692:	4628      	mov	r0, r5
 800d694:	bf08      	it	eq
 800d696:	3401      	addeq	r4, #1
 800d698:	f002 fd3e 	bl	8010118 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d1f7      	bne.n	800d690 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800d6a0:	b2a0      	uxth	r0, r4
 800d6a2:	b00b      	add	sp, #44	; 0x2c
 800d6a4:	bd30      	pop	{r4, r5, pc}

0800d6a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800d6a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6aa:	b0e5      	sub	sp, #404	; 0x194
 800d6ac:	4689      	mov	r9, r1
 800d6ae:	461c      	mov	r4, r3
 800d6b0:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800d6b4:	900a      	str	r0, [sp, #40]	; 0x28
 800d6b6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ba:	f000 80b4 	beq.w	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 80b0 	beq.w	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d6c6:	7ba3      	ldrb	r3, [r4, #14]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 80ac 	beq.w	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d6ce:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800d6d2:	6810      	ldr	r0, [r2, #0]
 800d6d4:	6851      	ldr	r1, [r2, #4]
 800d6d6:	2500      	movs	r5, #0
 800d6d8:	4643      	mov	r3, r8
 800d6da:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800d6de:	950f      	str	r5, [sp, #60]	; 0x3c
 800d6e0:	af19      	add	r7, sp, #100	; 0x64
 800d6e2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d6e6:	79a2      	ldrb	r2, [r4, #6]
 800d6e8:	c303      	stmia	r3!, {r0, r1}
 800d6ea:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800d6ee:	a90f      	add	r1, sp, #60	; 0x3c
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d6f6:	f7ff fd41 	bl	800d17c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800d6fa:	a90f      	add	r1, sp, #60	; 0x3c
 800d6fc:	79a2      	ldrb	r2, [r4, #6]
 800d6fe:	4608      	mov	r0, r1
 800d700:	f7ff fd3c 	bl	800d17c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800d704:	4638      	mov	r0, r7
 800d706:	f002 f88f 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800d70a:	6820      	ldr	r0, [r4, #0]
 800d70c:	6803      	ldr	r3, [r0, #0]
 800d70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d710:	4798      	blx	r3
 800d712:	4606      	mov	r6, r0
 800d714:	6820      	ldr	r0, [r4, #0]
 800d716:	6803      	ldr	r3, [r0, #0]
 800d718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d71a:	4798      	blx	r3
 800d71c:	4633      	mov	r3, r6
 800d71e:	9000      	str	r0, [sp, #0]
 800d720:	4651      	mov	r1, sl
 800d722:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800d724:	4638      	mov	r0, r7
 800d726:	f002 f8eb 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d72a:	7923      	ldrb	r3, [r4, #4]
 800d72c:	6820      	ldr	r0, [r4, #0]
 800d72e:	9308      	str	r3, [sp, #32]
 800d730:	6803      	ldr	r3, [r0, #0]
 800d732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d734:	4798      	blx	r3
 800d736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d73a:	181e      	adds	r6, r3, r0
 800d73c:	42ae      	cmp	r6, r5
 800d73e:	dd06      	ble.n	800d74e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800d740:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800d744:	4282      	cmp	r2, r0
 800d746:	bfa4      	itt	ge
 800d748:	189d      	addge	r5, r3, r2
 800d74a:	fb95 f5f6 	sdivge	r5, r5, r6
 800d74e:	a832      	add	r0, sp, #200	; 0xc8
 800d750:	f002 f86a 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800d754:	7c23      	ldrb	r3, [r4, #16]
 800d756:	b17b      	cbz	r3, 800d778 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800d758:	6820      	ldr	r0, [r4, #0]
 800d75a:	6803      	ldr	r3, [r0, #0]
 800d75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d75e:	4798      	blx	r3
 800d760:	4683      	mov	fp, r0
 800d762:	6820      	ldr	r0, [r4, #0]
 800d764:	6803      	ldr	r3, [r0, #0]
 800d766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d768:	4798      	blx	r3
 800d76a:	465b      	mov	r3, fp
 800d76c:	9000      	str	r0, [sp, #0]
 800d76e:	4651      	mov	r1, sl
 800d770:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800d772:	a832      	add	r0, sp, #200	; 0xc8
 800d774:	f002 f8c4 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d778:	7be1      	ldrb	r1, [r4, #15]
 800d77a:	a811      	add	r0, sp, #68	; 0x44
 800d77c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d780:	7963      	ldrb	r3, [r4, #5]
 800d782:	1a52      	subs	r2, r2, r1
 800d784:	7c21      	ldrb	r1, [r4, #16]
 800d786:	9101      	str	r1, [sp, #4]
 800d788:	b292      	uxth	r2, r2
 800d78a:	6821      	ldr	r1, [r4, #0]
 800d78c:	9100      	str	r1, [sp, #0]
 800d78e:	a932      	add	r1, sp, #200	; 0xc8
 800d790:	f7ff fc7c 	bl	800d08c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800d794:	7c23      	ldrb	r3, [r4, #16]
 800d796:	b9bb      	cbnz	r3, 800d7c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800d798:	fa1f fa86 	uxth.w	sl, r6
 800d79c:	2d00      	cmp	r5, #0
 800d79e:	dd45      	ble.n	800d82c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	f002 fcb9 	bl	8010118 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d03d      	beq.n	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d7aa:	280a      	cmp	r0, #10
 800d7ac:	d1f6      	bne.n	800d79c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800d7ae:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d7b2:	3d01      	subs	r5, #1
 800d7b4:	4453      	add	r3, sl
 800d7b6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d7ba:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800d7be:	eba3 030a 	sub.w	r3, r3, sl
 800d7c2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d7c6:	e7e9      	b.n	800d79c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800d7c8:	0073      	lsls	r3, r6, #1
 800d7ca:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800d7ce:	fa1f fa86 	uxth.w	sl, r6
 800d7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d4:	2d00      	cmp	r5, #0
 800d7d6:	dd29      	ble.n	800d82c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800d7d8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d7dc:	a811      	add	r0, sp, #68	; 0x44
 800d7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e0:	428b      	cmp	r3, r1
 800d7e2:	bfd4      	ite	le
 800d7e4:	2100      	movle	r1, #0
 800d7e6:	2101      	movgt	r1, #1
 800d7e8:	f7ff fe69 	bl	800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d7ec:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	455b      	cmp	r3, fp
 800d7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7f8:	d005      	beq.n	800d806 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800d7fa:	7961      	ldrb	r1, [r4, #5]
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f7f4 ffc5 	bl	800278c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d804:	e7f4      	b.n	800d7f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800d806:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d80a:	3d01      	subs	r5, #1
 800d80c:	4453      	add	r3, sl
 800d80e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d812:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800d816:	eba3 030a 	sub.w	r3, r3, sl
 800d81a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d81e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1d6      	bne.n	800d7d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800d826:	b065      	add	sp, #404	; 0x194
 800d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82c:	0075      	lsls	r5, r6, #1
 800d82e:	f04f 0a00 	mov.w	sl, #0
 800d832:	7c23      	ldrb	r3, [r4, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d066      	beq.n	800d906 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800d838:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d83c:	a811      	add	r0, sp, #68	; 0x44
 800d83e:	428d      	cmp	r5, r1
 800d840:	bfd4      	ite	le
 800d842:	2100      	movle	r1, #0
 800d844:	2101      	movgt	r1, #1
 800d846:	f7ff fe3a 	bl	800d4be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d84a:	9b08      	ldr	r3, [sp, #32]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d055      	beq.n	800d8fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800d850:	f894 b010 	ldrb.w	fp, [r4, #16]
 800d854:	2264      	movs	r2, #100	; 0x64
 800d856:	4639      	mov	r1, r7
 800d858:	a84b      	add	r0, sp, #300	; 0x12c
 800d85a:	f00b fced 	bl	8019238 <memcpy>
 800d85e:	f1bb 0f00 	cmp.w	fp, #0
 800d862:	d058      	beq.n	800d916 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 800d864:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800d868:	7922      	ldrb	r2, [r4, #4]
 800d86a:	2a01      	cmp	r2, #1
 800d86c:	d13c      	bne.n	800d8e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 800d86e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800d872:	1ac0      	subs	r0, r0, r3
 800d874:	2302      	movs	r3, #2
 800d876:	fb90 f0f3 	sdiv	r0, r0, r3
 800d87a:	b200      	sxth	r0, r0
 800d87c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d880:	4418      	add	r0, r3
 800d882:	7c23      	ldrb	r3, [r4, #16]
 800d884:	b200      	sxth	r0, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d03a      	beq.n	800d900 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 800d88a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800d88e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800d892:	9000      	str	r0, [sp, #0]
 800d894:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800d898:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d89a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800d89e:	e9cd a703 	strd	sl, r7, [sp, #12]
 800d8a2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800d8a6:	464a      	mov	r2, r9
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	f7ff fc98 	bl	800d1de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d1b9      	bne.n	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d8b2:	b2b2      	uxth	r2, r6
 800d8b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d8b8:	4611      	mov	r1, r2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d8c0:	b21b      	sxth	r3, r3
 800d8c2:	1a52      	subs	r2, r2, r1
 800d8c4:	7c21      	ldrb	r1, [r4, #16]
 800d8c6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d8ca:	b212      	sxth	r2, r2
 800d8cc:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800d8d0:	b109      	cbz	r1, 800d8d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 800d8d2:	42b2      	cmp	r2, r6
 800d8d4:	dba7      	blt.n	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d8d6:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800d8da:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800d8de:	440a      	add	r2, r1
 800d8e0:	b212      	sxth	r2, r2
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	dda5      	ble.n	800d832 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 800d8e6:	e79e      	b.n	800d826 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d8e8:	2a02      	cmp	r2, #2
 800d8ea:	d105      	bne.n	800d8f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 800d8ec:	7be2      	ldrb	r2, [r4, #15]
 800d8ee:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800d8f2:	1a80      	subs	r0, r0, r2
 800d8f4:	1ac0      	subs	r0, r0, r3
 800d8f6:	e7c0      	b.n	800d87a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	e7bf      	b.n	800d87c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 800d8fc:	7be0      	ldrb	r0, [r4, #15]
 800d8fe:	e7bd      	b.n	800d87c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 800d900:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d904:	e7c3      	b.n	800d88e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 800d906:	9b08      	ldr	r3, [sp, #32]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0f7      	beq.n	800d8fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 800d90c:	2264      	movs	r2, #100	; 0x64
 800d90e:	4639      	mov	r1, r7
 800d910:	a84b      	add	r0, sp, #300	; 0x12c
 800d912:	f00b fc91 	bl	8019238 <memcpy>
 800d916:	2300      	movs	r3, #0
 800d918:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d91c:	6821      	ldr	r1, [r4, #0]
 800d91e:	a84b      	add	r0, sp, #300	; 0x12c
 800d920:	f7ff fbf0 	bl	800d104 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800d924:	b203      	sxth	r3, r0
 800d926:	e79f      	b.n	800d868 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0800d928 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800d928:	2b02      	cmp	r3, #2
 800d92a:	b510      	push	{r4, lr}
 800d92c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d930:	d00b      	beq.n	800d94a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800d932:	2b03      	cmp	r3, #3
 800d934:	d00e      	beq.n	800d954 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800d936:	2b01      	cmp	r3, #1
 800d938:	d001      	beq.n	800d93e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800d93a:	1860      	adds	r0, r4, r1
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	8880      	ldrh	r0, [r0, #4]
 800d940:	4420      	add	r0, r4
 800d942:	b200      	sxth	r0, r0
 800d944:	1a80      	subs	r0, r0, r2
 800d946:	3801      	subs	r0, #1
 800d948:	e7f8      	b.n	800d93c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800d94a:	8880      	ldrh	r0, [r0, #4]
 800d94c:	4420      	add	r0, r4
 800d94e:	b200      	sxth	r0, r0
 800d950:	1a40      	subs	r0, r0, r1
 800d952:	e7f8      	b.n	800d946 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800d954:	18a0      	adds	r0, r4, r2
 800d956:	e7f1      	b.n	800d93c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800d958 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800d958:	2b02      	cmp	r3, #2
 800d95a:	b510      	push	{r4, lr}
 800d95c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800d960:	d006      	beq.n	800d970 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800d962:	2b03      	cmp	r3, #3
 800d964:	d00a      	beq.n	800d97c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800d966:	2b01      	cmp	r3, #1
 800d968:	bf14      	ite	ne
 800d96a:	18a0      	addne	r0, r4, r2
 800d96c:	1860      	addeq	r0, r4, r1
 800d96e:	bd10      	pop	{r4, pc}
 800d970:	88c0      	ldrh	r0, [r0, #6]
 800d972:	4420      	add	r0, r4
 800d974:	b200      	sxth	r0, r0
 800d976:	1a80      	subs	r0, r0, r2
 800d978:	3801      	subs	r0, #1
 800d97a:	e7f8      	b.n	800d96e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800d97c:	88c0      	ldrh	r0, [r0, #6]
 800d97e:	4420      	add	r0, r4
 800d980:	b200      	sxth	r0, r0
 800d982:	1a40      	subs	r0, r0, r1
 800d984:	e7f8      	b.n	800d978 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800d988 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800d988:	4b01      	ldr	r3, [pc, #4]	; (800d990 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	4770      	bx	lr
 800d990:	2400aefc 	.word	0x2400aefc

0800d994 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800d994:	4603      	mov	r3, r0
 800d996:	b1c8      	cbz	r0, 800d9cc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800d998:	0c02      	lsrs	r2, r0, #16
 800d99a:	0412      	lsls	r2, r2, #16
 800d99c:	b9a2      	cbnz	r2, 800d9c8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800d99e:	0403      	lsls	r3, r0, #16
 800d9a0:	2010      	movs	r0, #16
 800d9a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d9a6:	bf04      	itt	eq
 800d9a8:	021b      	lsleq	r3, r3, #8
 800d9aa:	3008      	addeq	r0, #8
 800d9ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d9b0:	bf04      	itt	eq
 800d9b2:	011b      	lsleq	r3, r3, #4
 800d9b4:	3004      	addeq	r0, #4
 800d9b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d9ba:	bf04      	itt	eq
 800d9bc:	009b      	lsleq	r3, r3, #2
 800d9be:	3002      	addeq	r0, #2
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	db04      	blt.n	800d9ce <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800d9c4:	3001      	adds	r0, #1
 800d9c6:	4770      	bx	lr
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	e7ea      	b.n	800d9a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800d9cc:	2020      	movs	r0, #32
 800d9ce:	4770      	bx	lr

0800d9d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	b087      	sub	sp, #28
 800d9d6:	4681      	mov	r9, r0
 800d9d8:	4698      	mov	r8, r3
 800d9da:	4610      	mov	r0, r2
 800d9dc:	460d      	mov	r5, r1
 800d9de:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800d9e2:	b981      	cbnz	r1, 800da06 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800d9e4:	b14b      	cbz	r3, 800d9fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	464a      	mov	r2, r9
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	e9cd 4700 	strd	r4, r7, [sp]
 800d9f0:	f7ff ffee 	bl	800d9d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d9f4:	b007      	add	sp, #28
 800d9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d9fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800da02:	603b      	str	r3, [r7, #0]
 800da04:	e7f6      	b.n	800d9f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800da06:	fa32 fa01 	lsrs.w	sl, r2, r1
 800da0a:	d107      	bne.n	800da1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800da0c:	fb09 f602 	mul.w	r6, r9, r2
 800da10:	fbb6 f0f4 	udiv	r0, r6, r4
 800da14:	fb04 6610 	mls	r6, r4, r0, r6
 800da18:	603e      	str	r6, [r7, #0]
 800da1a:	e7eb      	b.n	800d9f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800da1c:	2601      	movs	r6, #1
 800da1e:	fa09 fb01 	lsl.w	fp, r9, r1
 800da22:	408e      	lsls	r6, r1
 800da24:	fbbb f3f4 	udiv	r3, fp, r4
 800da28:	3e01      	subs	r6, #1
 800da2a:	9302      	str	r3, [sp, #8]
 800da2c:	fb0a f303 	mul.w	r3, sl, r3
 800da30:	4016      	ands	r6, r2
 800da32:	9303      	str	r3, [sp, #12]
 800da34:	4630      	mov	r0, r6
 800da36:	f7ff ffad 	bl	800d994 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800da3a:	464a      	mov	r2, r9
 800da3c:	460b      	mov	r3, r1
 800da3e:	4601      	mov	r1, r0
 800da40:	4630      	mov	r0, r6
 800da42:	e9cd 4700 	strd	r4, r7, [sp]
 800da46:	f7ff ffc3 	bl	800d9d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800da4a:	9b02      	ldr	r3, [sp, #8]
 800da4c:	4606      	mov	r6, r0
 800da4e:	eb05 0108 	add.w	r1, r5, r8
 800da52:	fb04 bb13 	mls	fp, r4, r3, fp
 800da56:	4658      	mov	r0, fp
 800da58:	f7ff ff9c 	bl	800d994 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800da5c:	ab05      	add	r3, sp, #20
 800da5e:	465a      	mov	r2, fp
 800da60:	e9cd 4300 	strd	r4, r3, [sp]
 800da64:	4603      	mov	r3, r0
 800da66:	4650      	mov	r0, sl
 800da68:	f7ff ffb2 	bl	800d9d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	9a05      	ldr	r2, [sp, #20]
 800da70:	9b03      	ldr	r3, [sp, #12]
 800da72:	4411      	add	r1, r2
 800da74:	fbb1 f2f4 	udiv	r2, r1, r4
 800da78:	18d3      	adds	r3, r2, r3
 800da7a:	fb04 1412 	mls	r4, r4, r2, r1
 800da7e:	441e      	add	r6, r3
 800da80:	603c      	str	r4, [r7, #0]
 800da82:	4430      	add	r0, r6
 800da84:	e7b6      	b.n	800d9f4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800da86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800da86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da8a:	b085      	sub	sp, #20
 800da8c:	f1b0 0900 	subs.w	r9, r0, #0
 800da90:	461d      	mov	r5, r3
 800da92:	4617      	mov	r7, r2
 800da94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800da96:	bfbb      	ittet	lt
 800da98:	f1c9 0900 	rsblt	r9, r9, #0
 800da9c:	f04f 36ff 	movlt.w	r6, #4294967295
 800daa0:	2601      	movge	r6, #1
 800daa2:	6823      	ldrlt	r3, [r4, #0]
 800daa4:	bfbc      	itt	lt
 800daa6:	425b      	neglt	r3, r3
 800daa8:	6023      	strlt	r3, [r4, #0]
 800daaa:	2a00      	cmp	r2, #0
 800daac:	da04      	bge.n	800dab8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	4257      	negs	r7, r2
 800dab2:	4276      	negs	r6, r6
 800dab4:	425b      	negs	r3, r3
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	2d00      	cmp	r5, #0
 800daba:	4638      	mov	r0, r7
 800dabc:	bfba      	itte	lt
 800dabe:	426d      	neglt	r5, r5
 800dac0:	f04f 38ff 	movlt.w	r8, #4294967295
 800dac4:	f04f 0801 	movge.w	r8, #1
 800dac8:	f7ff ff64 	bl	800d994 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800dacc:	ab03      	add	r3, sp, #12
 800dace:	463a      	mov	r2, r7
 800dad0:	e9cd 5300 	strd	r5, r3, [sp]
 800dad4:	4603      	mov	r3, r0
 800dad6:	4648      	mov	r0, r9
 800dad8:	f7ff ff7a 	bl	800d9d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	9a03      	ldr	r2, [sp, #12]
 800dae0:	4546      	cmp	r6, r8
 800dae2:	441a      	add	r2, r3
 800dae4:	fb92 f3f5 	sdiv	r3, r2, r5
 800dae8:	4418      	add	r0, r3
 800daea:	fb05 2313 	mls	r3, r5, r3, r2
 800daee:	bf18      	it	ne
 800daf0:	4240      	negne	r0, r0
 800daf2:	1c72      	adds	r2, r6, #1
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	d105      	bne.n	800db04 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f1c3 0200 	rsb	r2, r3, #0
 800dafe:	db0b      	blt.n	800db18 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800db00:	6022      	str	r2, [r4, #0]
 800db02:	e006      	b.n	800db12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800db04:	2e01      	cmp	r6, #1
 800db06:	d104      	bne.n	800db12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	da02      	bge.n	800db12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800db0c:	442b      	add	r3, r5
 800db0e:	3801      	subs	r0, #1
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	b005      	add	sp, #20
 800db14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db18:	3801      	subs	r0, #1
 800db1a:	1b52      	subs	r2, r2, r5
 800db1c:	e7f0      	b.n	800db00 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800db20 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800db20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800db24:	4c1c      	ldr	r4, [pc, #112]	; (800db98 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800db26:	4605      	mov	r5, r0
 800db28:	6807      	ldr	r7, [r0, #0]
 800db2a:	69a3      	ldr	r3, [r4, #24]
 800db2c:	b92b      	cbnz	r3, 800db3a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800db2e:	6840      	ldr	r0, [r0, #4]
 800db30:	e9c5 7000 	strd	r7, r0, [r5]
 800db34:	b004      	add	sp, #16
 800db36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db3a:	f04f 0802 	mov.w	r8, #2
 800db3e:	68a2      	ldr	r2, [r4, #8]
 800db40:	ae04      	add	r6, sp, #16
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	fb93 f1f8 	sdiv	r1, r3, r8
 800db48:	440a      	add	r2, r1
 800db4a:	69e1      	ldr	r1, [r4, #28]
 800db4c:	f846 2d04 	str.w	r2, [r6, #-4]!
 800db50:	463a      	mov	r2, r7
 800db52:	9600      	str	r6, [sp, #0]
 800db54:	f7ff ff97 	bl	800da86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800db58:	69a3      	ldr	r3, [r4, #24]
 800db5a:	4607      	mov	r7, r0
 800db5c:	686a      	ldr	r2, [r5, #4]
 800db5e:	6a21      	ldr	r1, [r4, #32]
 800db60:	9600      	str	r6, [sp, #0]
 800db62:	6860      	ldr	r0, [r4, #4]
 800db64:	f7ff ff8f 	bl	800da86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800db68:	69a3      	ldr	r3, [r4, #24]
 800db6a:	6962      	ldr	r2, [r4, #20]
 800db6c:	4407      	add	r7, r0
 800db6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800db70:	9600      	str	r6, [sp, #0]
 800db72:	68e0      	ldr	r0, [r4, #12]
 800db74:	fb93 f8f8 	sdiv	r8, r3, r8
 800db78:	4442      	add	r2, r8
 800db7a:	9203      	str	r2, [sp, #12]
 800db7c:	682a      	ldr	r2, [r5, #0]
 800db7e:	f7ff ff82 	bl	800da86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800db82:	4680      	mov	r8, r0
 800db84:	9600      	str	r6, [sp, #0]
 800db86:	69a3      	ldr	r3, [r4, #24]
 800db88:	686a      	ldr	r2, [r5, #4]
 800db8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800db8c:	6920      	ldr	r0, [r4, #16]
 800db8e:	f7ff ff7a 	bl	800da86 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800db92:	4440      	add	r0, r8
 800db94:	e7cc      	b.n	800db30 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800db96:	bf00      	nop
 800db98:	2400af00 	.word	0x2400af00

0800db9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800db9c:	4b07      	ldr	r3, [pc, #28]	; (800dbbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d109      	bne.n	800dbb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800dba4:	f9b1 3000 	ldrsh.w	r3, [r1]
 800dba8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dbac:	8003      	strh	r3, [r0, #0]
 800dbae:	4b04      	ldr	r3, [pc, #16]	; (800dbc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	1a9b      	subs	r3, r3, r2
 800dbb6:	800b      	strh	r3, [r1, #0]
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	2400aeec 	.word	0x2400aeec
 800dbc0:	2400aee8 	.word	0x2400aee8

0800dbc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800dbc4:	4b07      	ldr	r3, [pc, #28]	; (800dbe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d108      	bne.n	800dbe0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800dbce:	4b06      	ldr	r3, [pc, #24]	; (800dbe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800dbd0:	880c      	ldrh	r4, [r1, #0]
 800dbd2:	881b      	ldrh	r3, [r3, #0]
 800dbd4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	1b1b      	subs	r3, r3, r4
 800dbdc:	8003      	strh	r3, [r0, #0]
 800dbde:	800a      	strh	r2, [r1, #0]
 800dbe0:	bd10      	pop	{r4, pc}
 800dbe2:	bf00      	nop
 800dbe4:	2400aeec 	.word	0x2400aeec
 800dbe8:	2400aee8 	.word	0x2400aee8

0800dbec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800dbec:	4b0a      	ldr	r3, [pc, #40]	; (800dc18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800dbee:	b510      	push	{r4, lr}
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d10e      	bne.n	800dc14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800dbf6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800dbfa:	8843      	ldrh	r3, [r0, #2]
 800dbfc:	f9b0 4000 	ldrsh.w	r4, [r0]
 800dc00:	18ca      	adds	r2, r1, r3
 800dc02:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800dc04:	8044      	strh	r4, [r0, #2]
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	1a9b      	subs	r3, r3, r2
 800dc0a:	8003      	strh	r3, [r0, #0]
 800dc0c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dc10:	8081      	strh	r1, [r0, #4]
 800dc12:	80c3      	strh	r3, [r0, #6]
 800dc14:	bd10      	pop	{r4, pc}
 800dc16:	bf00      	nop
 800dc18:	2400aeec 	.word	0x2400aeec
 800dc1c:	2400aee8 	.word	0x2400aee8

0800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800dc20:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d10c      	bne.n	800dc42 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800dc28:	8803      	ldrh	r3, [r0, #0]
 800dc2a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800dc2e:	8842      	ldrh	r2, [r0, #2]
 800dc30:	8002      	strh	r2, [r0, #0]
 800dc32:	185a      	adds	r2, r3, r1
 800dc34:	4b04      	ldr	r3, [pc, #16]	; (800dc48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800dc36:	881b      	ldrh	r3, [r3, #0]
 800dc38:	1a9b      	subs	r3, r3, r2
 800dc3a:	8043      	strh	r3, [r0, #2]
 800dc3c:	88c3      	ldrh	r3, [r0, #6]
 800dc3e:	80c1      	strh	r1, [r0, #6]
 800dc40:	8083      	strh	r3, [r0, #4]
 800dc42:	4770      	bx	lr
 800dc44:	2400aeec 	.word	0x2400aeec
 800dc48:	2400aee8 	.word	0x2400aee8

0800dc4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800dc4c:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800dc4e:	b510      	push	{r4, lr}
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d108      	bne.n	800dc68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800dc56:	f9b1 3000 	ldrsh.w	r3, [r1]
 800dc5a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800dc5e:	8003      	strh	r3, [r0, #0]
 800dc60:	8893      	ldrh	r3, [r2, #4]
 800dc62:	3b01      	subs	r3, #1
 800dc64:	1b1b      	subs	r3, r3, r4
 800dc66:	800b      	strh	r3, [r1, #0]
 800dc68:	bd10      	pop	{r4, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2400aeec 	.word	0x2400aeec

0800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800dc70:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800dc72:	460a      	mov	r2, r1
 800dc74:	b510      	push	{r4, lr}
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d10d      	bne.n	800dc98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800dc7c:	8881      	ldrh	r1, [r0, #4]
 800dc7e:	8803      	ldrh	r3, [r0, #0]
 800dc80:	440b      	add	r3, r1
 800dc82:	4601      	mov	r1, r0
 800dc84:	3b01      	subs	r3, #1
 800dc86:	f821 3b02 	strh.w	r3, [r1], #2
 800dc8a:	f7ff ffdf 	bl	800dc4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800dc8e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dc92:	88c2      	ldrh	r2, [r0, #6]
 800dc94:	80c3      	strh	r3, [r0, #6]
 800dc96:	8082      	strh	r2, [r0, #4]
 800dc98:	bd10      	pop	{r4, pc}
 800dc9a:	bf00      	nop
 800dc9c:	2400aeec 	.word	0x2400aeec

0800dca0 <_ZN8touchgfx11Application13requestRedrawEv>:
 800dca0:	4b06      	ldr	r3, [pc, #24]	; (800dcbc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800dca2:	2100      	movs	r1, #0
 800dca4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dca8:	4b05      	ldr	r3, [pc, #20]	; (800dcc0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800dcaa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800dcae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcb2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800dcb6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800dcba:	4770      	bx	lr
 800dcbc:	2400aee8 	.word	0x2400aee8
 800dcc0:	2400aeea 	.word	0x2400aeea

0800dcc4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800dcc4:	4b03      	ldr	r3, [pc, #12]	; (800dcd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800dcc6:	6818      	ldr	r0, [r3, #0]
 800dcc8:	b110      	cbz	r0, 800dcd0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800dcca:	6803      	ldr	r3, [r0, #0]
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	4718      	bx	r3
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop
 800dcd4:	2400af30 	.word	0x2400af30

0800dcd8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800dcd8:	4770      	bx	lr
	...

0800dcdc <_ZN8touchgfx11Application4drawEv>:
 800dcdc:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <_ZN8touchgfx11Application4drawEv+0x28>)
 800dcde:	b507      	push	{r0, r1, r2, lr}
 800dce0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dce4:	2100      	movs	r1, #0
 800dce6:	4b08      	ldr	r3, [pc, #32]	; (800dd08 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800dce8:	9100      	str	r1, [sp, #0]
 800dcea:	4669      	mov	r1, sp
 800dcec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dcf0:	f8ad 2004 	strh.w	r2, [sp, #4]
 800dcf4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dcf8:	6803      	ldr	r3, [r0, #0]
 800dcfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfc:	4798      	blx	r3
 800dcfe:	b003      	add	sp, #12
 800dd00:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd04:	2400aee8 	.word	0x2400aee8
 800dd08:	2400aeea 	.word	0x2400aeea

0800dd0c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800dd0c:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	b110      	cbz	r0, 800dd18 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800dd12:	6803      	ldr	r3, [r0, #0]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	4718      	bx	r3
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	2400af30 	.word	0x2400af30

0800dd20 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800dd20:	4b03      	ldr	r3, [pc, #12]	; (800dd30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	b110      	cbz	r0, 800dd2c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800dd26:	6803      	ldr	r3, [r0, #0]
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	4718      	bx	r3
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	2400af30 	.word	0x2400af30

0800dd34 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800dd34:	2300      	movs	r3, #0
 800dd36:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800dd3a:	4770      	bx	lr

0800dd3c <_ZN8touchgfx11Application14handleKeyEventEh>:
 800dd3c:	4b03      	ldr	r3, [pc, #12]	; (800dd4c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	b110      	cbz	r0, 800dd48 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800dd42:	6803      	ldr	r3, [r0, #0]
 800dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd46:	4718      	bx	r3
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	2400af30 	.word	0x2400af30

0800dd50 <_ZN8touchgfx11ApplicationD1Ev>:
 800dd50:	4770      	bx	lr

0800dd52 <_ZN8touchgfx11ApplicationD0Ev>:
 800dd52:	b510      	push	{r4, lr}
 800dd54:	4604      	mov	r4, r0
 800dd56:	f44f 719c 	mov.w	r1, #312	; 0x138
 800dd5a:	f00b f9c0 	bl	80190de <_ZdlPvj>
 800dd5e:	4620      	mov	r0, r4
 800dd60:	bd10      	pop	{r4, pc}
	...

0800dd64 <_ZN8touchgfx11Application15handleTickEventEv>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	4d38      	ldr	r5, [pc, #224]	; (800de48 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800dd68:	4604      	mov	r4, r0
 800dd6a:	6828      	ldr	r0, [r5, #0]
 800dd6c:	b140      	cbz	r0, 800dd80 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800dd6e:	7a03      	ldrb	r3, [r0, #8]
 800dd70:	b933      	cbnz	r3, 800dd80 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800dd72:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800dd76:	6803      	ldr	r3, [r0, #0]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd7e:	4718      	bx	r3
 800dd80:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800dd84:	b97b      	cbnz	r3, 800dda6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dd86:	b170      	cbz	r0, 800dda6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dd88:	7a03      	ldrb	r3, [r0, #8]
 800dd8a:	b163      	cbz	r3, 800dda6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800dd8c:	4b2f      	ldr	r3, [pc, #188]	; (800de4c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800dd8e:	6818      	ldr	r0, [r3, #0]
 800dd90:	b110      	cbz	r0, 800dd98 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800dd92:	6803      	ldr	r3, [r0, #0]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	4798      	blx	r3
 800dd98:	6828      	ldr	r0, [r5, #0]
 800dd9a:	6803      	ldr	r3, [r0, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	4798      	blx	r3
 800dda0:	2301      	movs	r3, #1
 800dda2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 800dda6:	2500      	movs	r5, #0
 800dda8:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800ddac:	42a8      	cmp	r0, r5
 800ddae:	dd0c      	ble.n	800ddca <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800ddb0:	1963      	adds	r3, r4, r5
 800ddb2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800ddb6:	b132      	cbz	r2, 800ddc6 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800ddb8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800ddbc:	4413      	add	r3, r2
 800ddbe:	6858      	ldr	r0, [r3, #4]
 800ddc0:	6803      	ldr	r3, [r0, #0]
 800ddc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc4:	4798      	blx	r3
 800ddc6:	3501      	adds	r5, #1
 800ddc8:	e7ee      	b.n	800dda8 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4298      	cmp	r0, r3
 800ddd0:	d10f      	bne.n	800ddf2 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800ddd2:	1d25      	adds	r5, r4, #4
 800ddd4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800ddd8:	4291      	cmp	r1, r2
 800ddda:	dd2d      	ble.n	800de38 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800dddc:	1e48      	subs	r0, r1, #1
 800ddde:	b280      	uxth	r0, r0
 800dde0:	4288      	cmp	r0, r1
 800dde2:	d31a      	bcc.n	800de1a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800dde4:	4b1a      	ldr	r3, [pc, #104]	; (800de50 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800dde6:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800ddea:	4a1a      	ldr	r2, [pc, #104]	; (800de54 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800ddec:	481a      	ldr	r0, [pc, #104]	; (800de58 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800ddee:	f00b f9a5 	bl	801913c <__assert_func>
 800ddf2:	18e1      	adds	r1, r4, r3
 800ddf4:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800ddf8:	b16d      	cbz	r5, 800de16 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d00a      	beq.n	800de14 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800ddfe:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800de02:	4431      	add	r1, r6
 800de04:	684e      	ldr	r6, [r1, #4]
 800de06:	b291      	uxth	r1, r2
 800de08:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800de0c:	604e      	str	r6, [r1, #4]
 800de0e:	18a1      	adds	r1, r4, r2
 800de10:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800de14:	3201      	adds	r2, #1
 800de16:	3301      	adds	r3, #1
 800de18:	e7d9      	b.n	800ddce <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800de1a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800de1e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800de22:	3304      	adds	r3, #4
 800de24:	428b      	cmp	r3, r1
 800de26:	d004      	beq.n	800de32 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800de28:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800de2c:	f843 6c04 	str.w	r6, [r3, #-4]
 800de30:	e7f8      	b.n	800de24 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800de32:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800de36:	e7cd      	b.n	800ddd4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800de38:	4b04      	ldr	r3, [pc, #16]	; (800de4c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800de3a:	6818      	ldr	r0, [r3, #0]
 800de3c:	b110      	cbz	r0, 800de44 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800de3e:	6803      	ldr	r3, [r0, #0]
 800de40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de42:	e79a      	b.n	800dd7a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800de44:	bd70      	pop	{r4, r5, r6, pc}
 800de46:	bf00      	nop
 800de48:	2400af34 	.word	0x2400af34
 800de4c:	2400af30 	.word	0x2400af30
 800de50:	0801bf80 	.word	0x0801bf80
 800de54:	0801c174 	.word	0x0801c174
 800de58:	0801bf8e 	.word	0x0801bf8e

0800de5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4606      	mov	r6, r0
 800de60:	460c      	mov	r4, r1
 800de62:	b929      	cbnz	r1, 800de70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800de64:	4b0c      	ldr	r3, [pc, #48]	; (800de98 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800de66:	215e      	movs	r1, #94	; 0x5e
 800de68:	4a0c      	ldr	r2, [pc, #48]	; (800de9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800de6a:	480d      	ldr	r0, [pc, #52]	; (800dea0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800de6c:	f00b f966 	bl	801913c <__assert_func>
 800de70:	2300      	movs	r3, #0
 800de72:	4d0c      	ldr	r5, [pc, #48]	; (800dea4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800de74:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800de78:	6828      	ldr	r0, [r5, #0]
 800de7a:	b110      	cbz	r0, 800de82 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800de7c:	6803      	ldr	r3, [r0, #0]
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	4798      	blx	r3
 800de82:	602c      	str	r4, [r5, #0]
 800de84:	4620      	mov	r0, r4
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	68db      	ldr	r3, [r3, #12]
 800de8a:	4798      	blx	r3
 800de8c:	6833      	ldr	r3, [r6, #0]
 800de8e:	4630      	mov	r0, r6
 800de90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de96:	4718      	bx	r3
 800de98:	0801bf4c 	.word	0x0801bf4c
 800de9c:	0801c034 	.word	0x0801c034
 800dea0:	0801bf56 	.word	0x0801bf56
 800dea4:	2400af30 	.word	0x2400af30

0800dea8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800dea8:	b510      	push	{r4, lr}
 800deaa:	f9b1 4000 	ldrsh.w	r4, [r1]
 800deae:	888a      	ldrh	r2, [r1, #4]
 800deb0:	f9b0 3000 	ldrsh.w	r3, [r0]
 800deb4:	4422      	add	r2, r4
 800deb6:	b212      	sxth	r2, r2
 800deb8:	4293      	cmp	r3, r2
 800deba:	da15      	bge.n	800dee8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800debc:	8882      	ldrh	r2, [r0, #4]
 800debe:	4413      	add	r3, r2
 800dec0:	b21b      	sxth	r3, r3
 800dec2:	429c      	cmp	r4, r3
 800dec4:	da10      	bge.n	800dee8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800dec6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800deca:	88c9      	ldrh	r1, [r1, #6]
 800decc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ded0:	4419      	add	r1, r3
 800ded2:	b209      	sxth	r1, r1
 800ded4:	428a      	cmp	r2, r1
 800ded6:	da07      	bge.n	800dee8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ded8:	88c0      	ldrh	r0, [r0, #6]
 800deda:	4410      	add	r0, r2
 800dedc:	b200      	sxth	r0, r0
 800dede:	4283      	cmp	r3, r0
 800dee0:	bfac      	ite	ge
 800dee2:	2000      	movge	r0, #0
 800dee4:	2001      	movlt	r0, #1
 800dee6:	bd10      	pop	{r4, pc}
 800dee8:	2000      	movs	r0, #0
 800deea:	e7fc      	b.n	800dee6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800deec <_ZN8touchgfx4Rect10restrictToEss>:
 800deec:	f9b0 3000 	ldrsh.w	r3, [r0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	b510      	push	{r4, lr}
 800def4:	da04      	bge.n	800df00 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800def6:	8884      	ldrh	r4, [r0, #4]
 800def8:	4423      	add	r3, r4
 800defa:	8083      	strh	r3, [r0, #4]
 800defc:	2300      	movs	r3, #0
 800defe:	8003      	strh	r3, [r0, #0]
 800df00:	f9b0 4000 	ldrsh.w	r4, [r0]
 800df04:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800df08:	1b09      	subs	r1, r1, r4
 800df0a:	428b      	cmp	r3, r1
 800df0c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800df10:	bfc8      	it	gt
 800df12:	8081      	strhgt	r1, [r0, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	da04      	bge.n	800df22 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800df18:	88c1      	ldrh	r1, [r0, #6]
 800df1a:	440b      	add	r3, r1
 800df1c:	80c3      	strh	r3, [r0, #6]
 800df1e:	2300      	movs	r3, #0
 800df20:	8043      	strh	r3, [r0, #2]
 800df22:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800df26:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800df2a:	1a52      	subs	r2, r2, r1
 800df2c:	4293      	cmp	r3, r2
 800df2e:	bfc8      	it	gt
 800df30:	80c2      	strhgt	r2, [r0, #6]
 800df32:	bd10      	pop	{r4, pc}

0800df34 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800df34:	4b10      	ldr	r3, [pc, #64]	; (800df78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800df36:	b510      	push	{r4, lr}
 800df38:	460c      	mov	r4, r1
 800df3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800df3e:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800df40:	4620      	mov	r0, r4
 800df42:	f9b3 1000 	ldrsh.w	r1, [r3]
 800df46:	f7ff ffd1 	bl	800deec <_ZN8touchgfx4Rect10restrictToEss>
 800df4a:	4b0d      	ldr	r3, [pc, #52]	; (800df80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800df4c:	6818      	ldr	r0, [r3, #0]
 800df4e:	b190      	cbz	r0, 800df76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800df50:	6803      	ldr	r3, [r0, #0]
 800df52:	4621      	mov	r1, r4
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	4798      	blx	r3
 800df58:	4b0a      	ldr	r3, [pc, #40]	; (800df84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800df5a:	6818      	ldr	r0, [r3, #0]
 800df5c:	b118      	cbz	r0, 800df66 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800df5e:	6803      	ldr	r3, [r0, #0]
 800df60:	4621      	mov	r1, r4
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	4798      	blx	r3
 800df66:	4b08      	ldr	r3, [pc, #32]	; (800df88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800df68:	4621      	mov	r1, r4
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	6803      	ldr	r3, [r0, #0]
 800df6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df72:	69db      	ldr	r3, [r3, #28]
 800df74:	4718      	bx	r3
 800df76:	bd10      	pop	{r4, pc}
 800df78:	2400aeea 	.word	0x2400aeea
 800df7c:	2400aee8 	.word	0x2400aee8
 800df80:	2400af30 	.word	0x2400af30
 800df84:	2400af2c 	.word	0x2400af2c
 800df88:	2400aef4 	.word	0x2400aef4

0800df8c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8e:	4606      	mov	r6, r0
 800df90:	4608      	mov	r0, r1
 800df92:	460f      	mov	r7, r1
 800df94:	f7fc fdab 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800df98:	b9e8      	cbnz	r0, 800dfd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800df9a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800df9e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800dfa2:	42a5      	cmp	r5, r4
 800dfa4:	db17      	blt.n	800dfd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800dfa6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dfaa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	db11      	blt.n	800dfd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800dfb2:	88b9      	ldrh	r1, [r7, #4]
 800dfb4:	440d      	add	r5, r1
 800dfb6:	88b1      	ldrh	r1, [r6, #4]
 800dfb8:	440c      	add	r4, r1
 800dfba:	b22d      	sxth	r5, r5
 800dfbc:	b224      	sxth	r4, r4
 800dfbe:	42a5      	cmp	r5, r4
 800dfc0:	dc09      	bgt.n	800dfd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800dfc2:	88f8      	ldrh	r0, [r7, #6]
 800dfc4:	4410      	add	r0, r2
 800dfc6:	88f2      	ldrh	r2, [r6, #6]
 800dfc8:	4413      	add	r3, r2
 800dfca:	b200      	sxth	r0, r0
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	4298      	cmp	r0, r3
 800dfd0:	bfcc      	ite	gt
 800dfd2:	2000      	movgt	r0, #0
 800dfd4:	2001      	movle	r0, #1
 800dfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfda:	4604      	mov	r4, r0
 800dfdc:	4608      	mov	r0, r1
 800dfde:	460d      	mov	r5, r1
 800dfe0:	f7fc fd85 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800dfe4:	b978      	cbnz	r0, 800e006 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f7fc fd81 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800dfec:	f9b5 6000 	ldrsh.w	r6, [r5]
 800dff0:	b150      	cbz	r0, 800e008 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800dff2:	8026      	strh	r6, [r4, #0]
 800dff4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800dff8:	8063      	strh	r3, [r4, #2]
 800dffa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800dffe:	80a3      	strh	r3, [r4, #4]
 800e000:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e004:	80e3      	strh	r3, [r4, #6]
 800e006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e008:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e00c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800e010:	42b1      	cmp	r1, r6
 800e012:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e016:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800e01a:	460f      	mov	r7, r1
 800e01c:	88ed      	ldrh	r5, [r5, #6]
 800e01e:	bfa8      	it	ge
 800e020:	4637      	movge	r7, r6
 800e022:	4293      	cmp	r3, r2
 800e024:	4618      	mov	r0, r3
 800e026:	4466      	add	r6, ip
 800e028:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800e02c:	bfa8      	it	ge
 800e02e:	4610      	movge	r0, r2
 800e030:	442a      	add	r2, r5
 800e032:	88e5      	ldrh	r5, [r4, #6]
 800e034:	4461      	add	r1, ip
 800e036:	b236      	sxth	r6, r6
 800e038:	8027      	strh	r7, [r4, #0]
 800e03a:	442b      	add	r3, r5
 800e03c:	b209      	sxth	r1, r1
 800e03e:	b212      	sxth	r2, r2
 800e040:	8060      	strh	r0, [r4, #2]
 800e042:	b21b      	sxth	r3, r3
 800e044:	428e      	cmp	r6, r1
 800e046:	bfac      	ite	ge
 800e048:	ebc7 0106 	rsbge	r1, r7, r6
 800e04c:	ebc7 0101 	rsblt	r1, r7, r1
 800e050:	429a      	cmp	r2, r3
 800e052:	bfac      	ite	ge
 800e054:	ebc0 0202 	rsbge	r2, r0, r2
 800e058:	ebc0 0203 	rsblt	r2, r0, r3
 800e05c:	80a1      	strh	r1, [r4, #4]
 800e05e:	80e2      	strh	r2, [r4, #6]
 800e060:	e7d1      	b.n	800e006 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800e064 <_ZN8touchgfx11Application11getInstanceEv>:
 800e064:	4b01      	ldr	r3, [pc, #4]	; (800e06c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800e066:	6818      	ldr	r0, [r3, #0]
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	2400af40 	.word	0x2400af40

0800e070 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800e070:	2300      	movs	r3, #0
 800e072:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800e076:	30a8      	adds	r0, #168	; 0xa8
 800e078:	f820 3c24 	strh.w	r3, [r0, #-36]
 800e07c:	f802 3b01 	strb.w	r3, [r2], #1
 800e080:	4282      	cmp	r2, r0
 800e082:	d1fb      	bne.n	800e07c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800e084:	4770      	bx	lr

0800e086 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800e086:	4603      	mov	r3, r0
 800e088:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800e08c:	2200      	movs	r2, #0
 800e08e:	801a      	strh	r2, [r3, #0]
 800e090:	3308      	adds	r3, #8
 800e092:	f823 2c06 	strh.w	r2, [r3, #-6]
 800e096:	f823 2c04 	strh.w	r2, [r3, #-4]
 800e09a:	f823 2c02 	strh.w	r2, [r3, #-2]
 800e09e:	428b      	cmp	r3, r1
 800e0a0:	d1f5      	bne.n	800e08e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800e0a2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800e0a6:	4770      	bx	lr

0800e0a8 <_ZN8touchgfx11ApplicationC1Ev>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	4b19      	ldr	r3, [pc, #100]	; (800e110 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 800e0ac:	2500      	movs	r5, #0
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	30a8      	adds	r0, #168	; 0xa8
 800e0b2:	f840 3ca8 	str.w	r3, [r0, #-168]
 800e0b6:	f820 5c24 	strh.w	r5, [r0, #-36]
 800e0ba:	f7ff ffe4 	bl	800e086 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e0be:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800e0c2:	f7ff ffe0 	bl	800e086 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e0c6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800e0ca:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800e0ce:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800e0d2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800e0d6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800e0da:	490e      	ldr	r1, [pc, #56]	; (800e114 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800e0dc:	480e      	ldr	r0, [pc, #56]	; (800e118 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800e0de:	f00a fef5 	bl	8018ecc <CRC_Lock>
 800e0e2:	4e0e      	ldr	r6, [pc, #56]	; (800e11c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800e0e4:	4b0e      	ldr	r3, [pc, #56]	; (800e120 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800e0e6:	b158      	cbz	r0, 800e100 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 800e0e8:	801d      	strh	r5, [r3, #0]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	4a0d      	ldr	r2, [pc, #52]	; (800e124 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	6013      	str	r3, [r2, #0]
 800e0f2:	4a0d      	ldr	r2, [pc, #52]	; (800e128 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800e0f4:	6033      	str	r3, [r6, #0]
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	f7ff ffba 	bl	800e070 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}
 800e100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e104:	2002      	movs	r0, #2
 800e106:	801a      	strh	r2, [r3, #0]
 800e108:	6030      	str	r0, [r6, #0]
 800e10a:	f001 fa13 	bl	800f534 <_ZN8touchgfx6Screen4drawEv>
 800e10e:	e7ec      	b.n	800e0ea <_ZN8touchgfx11ApplicationC1Ev+0x42>
 800e110:	0801bff0 	.word	0x0801bff0
 800e114:	b5e8b5cd 	.word	0xb5e8b5cd
 800e118:	f407a5c2 	.word	0xf407a5c2
 800e11c:	2400af30 	.word	0x2400af30
 800e120:	2400005c 	.word	0x2400005c
 800e124:	2400af40 	.word	0x2400af40
 800e128:	2400af34 	.word	0x2400af34

0800e12c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800e12c:	b510      	push	{r4, lr}
 800e12e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800e132:	428b      	cmp	r3, r1
 800e134:	d806      	bhi.n	800e144 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 800e136:	4b0b      	ldr	r3, [pc, #44]	; (800e164 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 800e138:	f240 11dd 	movw	r1, #477	; 0x1dd
 800e13c:	4a0a      	ldr	r2, [pc, #40]	; (800e168 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 800e13e:	480b      	ldr	r0, [pc, #44]	; (800e16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 800e140:	f00a fffc 	bl	801913c <__assert_func>
 800e144:	3b01      	subs	r3, #1
 800e146:	b29b      	uxth	r3, r3
 800e148:	428b      	cmp	r3, r1
 800e14a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800e14e:	d908      	bls.n	800e162 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 800e150:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e154:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	6062      	str	r2, [r4, #4]
 800e162:	bd10      	pop	{r4, pc}
 800e164:	0801bf80 	.word	0x0801bf80
 800e168:	0801c078 	.word	0x0801c078
 800e16c:	0801bf8e 	.word	0x0801bf8e

0800e170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800e170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e172:	466b      	mov	r3, sp
 800e174:	4604      	mov	r4, r0
 800e176:	e883 0006 	stmia.w	r3, {r1, r2}
 800e17a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800e17e:	2a07      	cmp	r2, #7
 800e180:	d906      	bls.n	800e190 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800e182:	4b09      	ldr	r3, [pc, #36]	; (800e1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800e184:	f240 11a3 	movw	r1, #419	; 0x1a3
 800e188:	4a08      	ldr	r2, [pc, #32]	; (800e1ac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800e18a:	4809      	ldr	r0, [pc, #36]	; (800e1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800e18c:	f00a ffd6 	bl	801913c <__assert_func>
 800e190:	1c51      	adds	r1, r2, #1
 800e192:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800e196:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800e19a:	cb03      	ldmia	r3!, {r0, r1}
 800e19c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800e1a0:	6069      	str	r1, [r5, #4]
 800e1a2:	b003      	add	sp, #12
 800e1a4:	bd30      	pop	{r4, r5, pc}
 800e1a6:	bf00      	nop
 800e1a8:	0801bfb7 	.word	0x0801bfb7
 800e1ac:	0801c10e 	.word	0x0801c10e
 800e1b0:	0801bf8e 	.word	0x0801bf8e

0800e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b8:	b08d      	sub	sp, #52	; 0x34
 800e1ba:	4b94      	ldr	r3, [pc, #592]	; (800e40c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 800e1bc:	4683      	mov	fp, r0
 800e1be:	ac08      	add	r4, sp, #32
 800e1c0:	e884 0006 	stmia.w	r4, {r1, r2}
 800e1c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	4b91      	ldr	r3, [pc, #580]	; (800e410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 800e1cc:	f9b3 1000 	ldrsh.w	r1, [r3]
 800e1d0:	f7ff fe8c 	bl	800deec <_ZN8touchgfx4Rect10restrictToEss>
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7fc fc8a 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	d16a      	bne.n	800e2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e1de:	9402      	str	r4, [sp, #8]
 800e1e0:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800e1e4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800e1e8:	2400      	movs	r4, #0
 800e1ea:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800e1ee:	9301      	str	r3, [sp, #4]
 800e1f0:	36a0      	adds	r6, #160	; 0xa0
 800e1f2:	42a5      	cmp	r5, r4
 800e1f4:	d00d      	beq.n	800e212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 800e1f6:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800e1fa:	9802      	ldr	r0, [sp, #8]
 800e1fc:	f7ff fec6 	bl	800df8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800e200:	b128      	cbz	r0, 800e20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800e202:	1e69      	subs	r1, r5, #1
 800e204:	9801      	ldr	r0, [sp, #4]
 800e206:	1b09      	subs	r1, r1, r4
 800e208:	b289      	uxth	r1, r1
 800e20a:	f7ff ff8f 	bl	800e12c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e20e:	3401      	adds	r4, #1
 800e210:	e7ef      	b.n	800e1f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 800e212:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800e216:	1e7b      	subs	r3, r7, #1
 800e218:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800e21c:	9703      	str	r7, [sp, #12]
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	2400      	movs	r4, #0
 800e222:	4655      	mov	r5, sl
 800e224:	9704      	str	r7, [sp, #16]
 800e226:	4626      	mov	r6, r4
 800e228:	9b04      	ldr	r3, [sp, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d078      	beq.n	800e320 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 800e22e:	9902      	ldr	r1, [sp, #8]
 800e230:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800e234:	f7ff fe38 	bl	800dea8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e238:	b360      	cbz	r0, 800e294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800e23a:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800e23e:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800e242:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800e246:	45e6      	cmp	lr, ip
 800e248:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800e24c:	db35      	blt.n	800e2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800e24e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e252:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800e256:	4472      	add	r2, lr
 800e258:	4463      	add	r3, ip
 800e25a:	b212      	sxth	r2, r2
 800e25c:	b21b      	sxth	r3, r3
 800e25e:	429a      	cmp	r2, r3
 800e260:	dc2b      	bgt.n	800e2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800e262:	fa1f f288 	uxth.w	r2, r8
 800e266:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800e26a:	45c1      	cmp	r9, r8
 800e26c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e270:	4413      	add	r3, r2
 800e272:	fa1f fc89 	uxth.w	ip, r9
 800e276:	b29b      	uxth	r3, r3
 800e278:	fa0f fe83 	sxth.w	lr, r3
 800e27c:	db0f      	blt.n	800e29e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800e27e:	eba3 030c 	sub.w	r3, r3, ip
 800e282:	1ac9      	subs	r1, r1, r3
 800e284:	b209      	sxth	r1, r1
 800e286:	2900      	cmp	r1, #0
 800e288:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e28c:	dd12      	ble.n	800e2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e28e:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800e292:	4604      	mov	r4, r0
 800e294:	9b04      	ldr	r3, [sp, #16]
 800e296:	3d08      	subs	r5, #8
 800e298:	3b01      	subs	r3, #1
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	e7c4      	b.n	800e228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 800e29e:	4461      	add	r1, ip
 800e2a0:	b209      	sxth	r1, r1
 800e2a2:	4571      	cmp	r1, lr
 800e2a4:	dc3a      	bgt.n	800e31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e2a6:	eba2 020c 	sub.w	r2, r2, ip
 800e2aa:	b212      	sxth	r2, r2
 800e2ac:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e2b0:	2a00      	cmp	r2, #0
 800e2b2:	dcee      	bgt.n	800e292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800e2b4:	b00d      	add	sp, #52	; 0x34
 800e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ba:	45c1      	cmp	r9, r8
 800e2bc:	db2e      	blt.n	800e31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e2be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e2c2:	4499      	add	r9, r3
 800e2c4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800e2c8:	4498      	add	r8, r3
 800e2ca:	fa0f f989 	sxth.w	r9, r9
 800e2ce:	fa0f f888 	sxth.w	r8, r8
 800e2d2:	45c1      	cmp	r9, r8
 800e2d4:	dc22      	bgt.n	800e31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e2d6:	fa1f f28c 	uxth.w	r2, ip
 800e2da:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800e2de:	45e6      	cmp	lr, ip
 800e2e0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800e2e4:	4413      	add	r3, r2
 800e2e6:	fa1f f88e 	uxth.w	r8, lr
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	fa0f f983 	sxth.w	r9, r3
 800e2f0:	db0a      	blt.n	800e308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 800e2f2:	eba3 0308 	sub.w	r3, r3, r8
 800e2f6:	1ac9      	subs	r1, r1, r3
 800e2f8:	b209      	sxth	r1, r1
 800e2fa:	2900      	cmp	r1, #0
 800e2fc:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800e300:	ddd8      	ble.n	800e2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e302:	f8ad 9020 	strh.w	r9, [sp, #32]
 800e306:	e7c4      	b.n	800e292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800e308:	4441      	add	r1, r8
 800e30a:	b209      	sxth	r1, r1
 800e30c:	4549      	cmp	r1, r9
 800e30e:	dc05      	bgt.n	800e31c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800e310:	eba2 0208 	sub.w	r2, r2, r8
 800e314:	b212      	sxth	r2, r2
 800e316:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800e31a:	e7c9      	b.n	800e2b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800e31c:	4606      	mov	r6, r0
 800e31e:	e7b9      	b.n	800e294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800e320:	2c00      	cmp	r4, #0
 800e322:	f47f af7d 	bne.w	800e220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 800e326:	2e00      	cmp	r6, #0
 800e328:	f000 81e0 	beq.w	800e6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 800e32c:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800e330:	4655      	mov	r5, sl
 800e332:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800e336:	b2b9      	uxth	r1, r7
 800e338:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e33c:	b2b3      	uxth	r3, r6
 800e33e:	9104      	str	r1, [sp, #16]
 800e340:	9804      	ldr	r0, [sp, #16]
 800e342:	441a      	add	r2, r3
 800e344:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e348:	b292      	uxth	r2, r2
 800e34a:	4401      	add	r1, r0
 800e34c:	fa0f f882 	sxth.w	r8, r2
 800e350:	b289      	uxth	r1, r1
 800e352:	9105      	str	r1, [sp, #20]
 800e354:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800e358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d058      	beq.n	800e414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 800e362:	9902      	ldr	r1, [sp, #8]
 800e364:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800e368:	f7ff fd9e 	bl	800dea8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e36c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e370:	b1d8      	cbz	r0, 800e3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e372:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800e376:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800e37a:	4576      	cmp	r6, lr
 800e37c:	dc26      	bgt.n	800e3cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800e37e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800e382:	44f4      	add	ip, lr
 800e384:	fa0f fc8c 	sxth.w	ip, ip
 800e388:	45e0      	cmp	r8, ip
 800e38a:	db1f      	blt.n	800e3cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 800e38c:	428f      	cmp	r7, r1
 800e38e:	fa1f fc81 	uxth.w	ip, r1
 800e392:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800e396:	dc0f      	bgt.n	800e3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 800e398:	9805      	ldr	r0, [sp, #20]
 800e39a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800e39e:	eba0 0c0c 	sub.w	ip, r0, ip
 800e3a2:	eba1 010c 	sub.w	r1, r1, ip
 800e3a6:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	9903      	ldr	r1, [sp, #12]
 800e3ae:	3d08      	subs	r5, #8
 800e3b0:	4604      	mov	r4, r0
 800e3b2:	3901      	subs	r1, #1
 800e3b4:	9103      	str	r1, [sp, #12]
 800e3b6:	e7cf      	b.n	800e358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 800e3b8:	4461      	add	r1, ip
 800e3ba:	b209      	sxth	r1, r1
 800e3bc:	4549      	cmp	r1, r9
 800e3be:	dcf5      	bgt.n	800e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e3c0:	9904      	ldr	r1, [sp, #16]
 800e3c2:	eba1 0c0c 	sub.w	ip, r1, ip
 800e3c6:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800e3ca:	e7ee      	b.n	800e3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e3cc:	428f      	cmp	r7, r1
 800e3ce:	dced      	bgt.n	800e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e3d0:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800e3d4:	4461      	add	r1, ip
 800e3d6:	b209      	sxth	r1, r1
 800e3d8:	4589      	cmp	r9, r1
 800e3da:	dbe7      	blt.n	800e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e3dc:	4576      	cmp	r6, lr
 800e3de:	fa1f fc8e 	uxth.w	ip, lr
 800e3e2:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800e3e6:	dc08      	bgt.n	800e3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800e3e8:	eba2 0c0c 	sub.w	ip, r2, ip
 800e3ec:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800e3f0:	eba1 010c 	sub.w	r1, r1, ip
 800e3f4:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800e3f8:	e7d7      	b.n	800e3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e3fa:	4461      	add	r1, ip
 800e3fc:	b209      	sxth	r1, r1
 800e3fe:	4588      	cmp	r8, r1
 800e400:	dbd4      	blt.n	800e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 800e402:	eba3 0c0c 	sub.w	ip, r3, ip
 800e406:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800e40a:	e7ce      	b.n	800e3aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 800e40c:	2400aeea 	.word	0x2400aeea
 800e410:	2400aee8 	.word	0x2400aee8
 800e414:	2c00      	cmp	r4, #0
 800e416:	f000 8169 	beq.w	800e6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 800e41a:	9b00      	ldr	r3, [sp, #0]
 800e41c:	3301      	adds	r3, #1
 800e41e:	f000 8165 	beq.w	800e6ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 800e422:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800e426:	9802      	ldr	r0, [sp, #8]
 800e428:	4621      	mov	r1, r4
 800e42a:	f7ff fdaf 	bl	800df8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800e42e:	b120      	cbz	r0, 800e43a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 800e430:	f8bd 1000 	ldrh.w	r1, [sp]
 800e434:	9801      	ldr	r0, [sp, #4]
 800e436:	f7ff fe79 	bl	800e12c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e43a:	9902      	ldr	r1, [sp, #8]
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7ff fd33 	bl	800dea8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e442:	2800      	cmp	r0, #0
 800e444:	f000 809b 	beq.w	800e57e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 800e448:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800e44c:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800e450:	fa1f f288 	uxth.w	r2, r8
 800e454:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800e458:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800e45c:	19d5      	adds	r5, r2, r7
 800e45e:	b2a1      	uxth	r1, r4
 800e460:	45a0      	cmp	r8, r4
 800e462:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800e466:	fa1f f985 	uxth.w	r9, r5
 800e46a:	440b      	add	r3, r1
 800e46c:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800e470:	fa0f f589 	sxth.w	r5, r9
 800e474:	b29b      	uxth	r3, r3
 800e476:	9503      	str	r5, [sp, #12]
 800e478:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800e47c:	9507      	str	r5, [sp, #28]
 800e47e:	f340 809d 	ble.w	800e5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 800e482:	1a52      	subs	r2, r2, r1
 800e484:	4584      	cmp	ip, r0
 800e486:	fa0f fe83 	sxth.w	lr, r3
 800e48a:	b292      	uxth	r2, r2
 800e48c:	b215      	sxth	r5, r2
 800e48e:	dd2f      	ble.n	800e4f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33c>
 800e490:	9e00      	ldr	r6, [sp, #0]
 800e492:	fa1f fc8c 	uxth.w	ip, ip
 800e496:	b280      	uxth	r0, r0
 800e498:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e49c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800e4a0:	9e03      	ldr	r6, [sp, #12]
 800e4a2:	ebac 0300 	sub.w	r3, ip, r0
 800e4a6:	448c      	add	ip, r1
 800e4a8:	eba6 060e 	sub.w	r6, r6, lr
 800e4ac:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	4470      	add	r0, lr
 800e4b4:	fa0f fc8c 	sxth.w	ip, ip
 800e4b8:	b21c      	sxth	r4, r3
 800e4ba:	b200      	sxth	r0, r0
 800e4bc:	4366      	muls	r6, r4
 800e4be:	ebac 0000 	sub.w	r0, ip, r0
 800e4c2:	4368      	muls	r0, r5
 800e4c4:	4286      	cmp	r6, r0
 800e4c6:	db09      	blt.n	800e4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 800e4c8:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800e4cc:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800e4d0:	4417      	add	r7, r2
 800e4d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e4d6:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800e4da:	e681      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e4dc:	440b      	add	r3, r1
 800e4de:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800e4e2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e4e6:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800e4ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e4ee:	e677      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e4f0:	9e03      	ldr	r6, [sp, #12]
 800e4f2:	45b6      	cmp	lr, r6
 800e4f4:	da28      	bge.n	800e548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 800e4f6:	9b00      	ldr	r3, [sp, #0]
 800e4f8:	eba6 060e 	sub.w	r6, r6, lr
 800e4fc:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800e500:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800e504:	eb04 030c 	add.w	r3, r4, ip
 800e508:	fa1f f883 	uxth.w	r8, r3
 800e50c:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800e510:	4403      	add	r3, r0
 800e512:	fa0f f988 	sxth.w	r9, r8
 800e516:	eba0 000c 	sub.w	r0, r0, ip
 800e51a:	eba3 0308 	sub.w	r3, r3, r8
 800e51e:	4368      	muls	r0, r5
 800e520:	b29b      	uxth	r3, r3
 800e522:	fa0f f883 	sxth.w	r8, r3
 800e526:	fb08 f606 	mul.w	r6, r8, r6
 800e52a:	42b0      	cmp	r0, r6
 800e52c:	dc06      	bgt.n	800e53c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800e52e:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800e532:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800e536:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800e53a:	e7c9      	b.n	800e4d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31c>
 800e53c:	4423      	add	r3, r4
 800e53e:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800e542:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e546:	e64b      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e548:	eba3 0309 	sub.w	r3, r3, r9
 800e54c:	9807      	ldr	r0, [sp, #28]
 800e54e:	b29b      	uxth	r3, r3
 800e550:	2806      	cmp	r0, #6
 800e552:	fa0f fc83 	sxth.w	ip, r3
 800e556:	d818      	bhi.n	800e58a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 800e558:	4652      	mov	r2, sl
 800e55a:	ab0a      	add	r3, sp, #40	; 0x28
 800e55c:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800e560:	6851      	ldr	r1, [r2, #4]
 800e562:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800e566:	c303      	stmia	r3!, {r0, r1}
 800e568:	9b03      	ldr	r3, [sp, #12]
 800e56a:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800e56e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800e572:	ab0a      	add	r3, sp, #40	; 0x28
 800e574:	9801      	ldr	r0, [sp, #4]
 800e576:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e57a:	f7ff fdf9 	bl	800e170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e57e:	9b00      	ldr	r3, [sp, #0]
 800e580:	f1aa 0a08 	sub.w	sl, sl, #8
 800e584:	3b01      	subs	r3, #1
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	e747      	b.n	800e41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 800e58a:	9800      	ldr	r0, [sp, #0]
 800e58c:	45ac      	cmp	ip, r5
 800e58e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e592:	db0c      	blt.n	800e5ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fa>
 800e594:	4417      	add	r7, r2
 800e596:	4458      	add	r0, fp
 800e598:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e59c:	b2bf      	uxth	r7, r7
 800e59e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800e5a2:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800e5a6:	440f      	add	r7, r1
 800e5a8:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800e5ac:	e618      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e5ae:	4458      	add	r0, fp
 800e5b0:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800e5b4:	443b      	add	r3, r7
 800e5b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e5ba:	e611      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e5bc:	fa1f f18c 	uxth.w	r1, ip
 800e5c0:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800e5c4:	b282      	uxth	r2, r0
 800e5c6:	4584      	cmp	ip, r0
 800e5c8:	eb01 0e05 	add.w	lr, r1, r5
 800e5cc:	9204      	str	r2, [sp, #16]
 800e5ce:	fa1f fe8e 	uxth.w	lr, lr
 800e5d2:	9e04      	ldr	r6, [sp, #16]
 800e5d4:	fa0f f28e 	sxth.w	r2, lr
 800e5d8:	9205      	str	r2, [sp, #20]
 800e5da:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800e5de:	4432      	add	r2, r6
 800e5e0:	b292      	uxth	r2, r2
 800e5e2:	9206      	str	r2, [sp, #24]
 800e5e4:	da26      	bge.n	800e634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x480>
 800e5e6:	eba3 0309 	sub.w	r3, r3, r9
 800e5ea:	eba2 020e 	sub.w	r2, r2, lr
 800e5ee:	eba0 000c 	sub.w	r0, r0, ip
 800e5f2:	eba4 0408 	sub.w	r4, r4, r8
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	b292      	uxth	r2, r2
 800e5fa:	fa0f fa83 	sxth.w	sl, r3
 800e5fe:	b211      	sxth	r1, r2
 800e600:	fb0a f000 	mul.w	r0, sl, r0
 800e604:	434c      	muls	r4, r1
 800e606:	42a0      	cmp	r0, r4
 800e608:	9800      	ldr	r0, [sp, #0]
 800e60a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e60e:	dc06      	bgt.n	800e61e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 800e610:	4458      	add	r0, fp
 800e612:	9a05      	ldr	r2, [sp, #20]
 800e614:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800e618:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800e61c:	e7ca      	b.n	800e5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 800e61e:	eb0b 0300 	add.w	r3, fp, r0
 800e622:	9903      	ldr	r1, [sp, #12]
 800e624:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800e628:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800e62c:	442a      	add	r2, r5
 800e62e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e632:	e5d5      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e634:	9e04      	ldr	r6, [sp, #16]
 800e636:	9a03      	ldr	r2, [sp, #12]
 800e638:	1b89      	subs	r1, r1, r6
 800e63a:	b21e      	sxth	r6, r3
 800e63c:	b289      	uxth	r1, r1
 800e63e:	4296      	cmp	r6, r2
 800e640:	fa0f fc81 	sxth.w	ip, r1
 800e644:	dd25      	ble.n	800e692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 800e646:	eba3 0309 	sub.w	r3, r3, r9
 800e64a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800e64e:	9e05      	ldr	r6, [sp, #20]
 800e650:	eba4 0408 	sub.w	r4, r4, r8
 800e654:	b29b      	uxth	r3, r3
 800e656:	eba6 0902 	sub.w	r9, r6, r2
 800e65a:	fb0c f404 	mul.w	r4, ip, r4
 800e65e:	b218      	sxth	r0, r3
 800e660:	9a00      	ldr	r2, [sp, #0]
 800e662:	fb00 f909 	mul.w	r9, r0, r9
 800e666:	00d2      	lsls	r2, r2, #3
 800e668:	454c      	cmp	r4, r9
 800e66a:	db03      	blt.n	800e674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 800e66c:	445a      	add	r2, fp
 800e66e:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800e672:	e79f      	b.n	800e5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 800e674:	eb0b 0302 	add.w	r3, fp, r2
 800e678:	9a03      	ldr	r2, [sp, #12]
 800e67a:	4429      	add	r1, r5
 800e67c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800e680:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800e684:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e688:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e68c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e690:	e5a6      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e692:	9b06      	ldr	r3, [sp, #24]
 800e694:	9c07      	ldr	r4, [sp, #28]
 800e696:	eba3 020e 	sub.w	r2, r3, lr
 800e69a:	2c06      	cmp	r4, #6
 800e69c:	b292      	uxth	r2, r2
 800e69e:	b213      	sxth	r3, r2
 800e6a0:	d80d      	bhi.n	800e6be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50a>
 800e6a2:	4651      	mov	r1, sl
 800e6a4:	aa0a      	add	r2, sp, #40	; 0x28
 800e6a6:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800e6aa:	6849      	ldr	r1, [r1, #4]
 800e6ac:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800e6b0:	9b05      	ldr	r3, [sp, #20]
 800e6b2:	c203      	stmia	r2!, {r0, r1}
 800e6b4:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800e6b8:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800e6bc:	e759      	b.n	800e572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800e6be:	9c00      	ldr	r4, [sp, #0]
 800e6c0:	4563      	cmp	r3, ip
 800e6c2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800e6c6:	db0d      	blt.n	800e6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x530>
 800e6c8:	4429      	add	r1, r5
 800e6ca:	9a04      	ldr	r2, [sp, #16]
 800e6cc:	445c      	add	r4, fp
 800e6ce:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e6d2:	b289      	uxth	r1, r1
 800e6d4:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800e6d8:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e6dc:	4411      	add	r1, r2
 800e6de:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800e6e2:	e57d      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e6e4:	445c      	add	r4, fp
 800e6e6:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800e6ea:	e79f      	b.n	800e62c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x478>
 800e6ec:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800e6f0:	2f07      	cmp	r7, #7
 800e6f2:	d806      	bhi.n	800e702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 800e6f4:	ab08      	add	r3, sp, #32
 800e6f6:	9801      	ldr	r0, [sp, #4]
 800e6f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e6fc:	f7ff fd38 	bl	800e170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e700:	e5d8      	b.n	800e2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800e702:	f107 39ff 	add.w	r9, r7, #4294967295
 800e706:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800e70a:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800e70e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800e712:	f04f 35ff 	mov.w	r5, #4294967295
 800e716:	2400      	movs	r4, #0
 800e718:	9304      	str	r3, [sp, #16]
 800e71a:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800e71e:	f109 32ff 	add.w	r2, r9, #4294967295
 800e722:	9300      	str	r3, [sp, #0]
 800e724:	4690      	mov	r8, r2
 800e726:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800e72a:	9303      	str	r3, [sp, #12]
 800e72c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e730:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e734:	6818      	ldr	r0, [r3, #0]
 800e736:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800e73a:	9206      	str	r2, [sp, #24]
 800e73c:	bf16      	itet	ne
 800e73e:	9904      	ldrne	r1, [sp, #16]
 800e740:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800e744:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800e748:	9305      	str	r3, [sp, #20]
 800e74a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800e74e:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800e752:	fb16 f601 	smulbb	r6, r6, r1
 800e756:	6859      	ldr	r1, [r3, #4]
 800e758:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e75c:	4671      	mov	r1, lr
 800e75e:	a80a      	add	r0, sp, #40	; 0x28
 800e760:	f7ff fc3a 	bl	800dfd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e764:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800e768:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800e76c:	9b03      	ldr	r3, [sp, #12]
 800e76e:	9a00      	ldr	r2, [sp, #0]
 800e770:	fb11 f100 	smulbb	r1, r1, r0
 800e774:	2008      	movs	r0, #8
 800e776:	fb02 6603 	mla	r6, r2, r3, r6
 800e77a:	1b8e      	subs	r6, r1, r6
 800e77c:	fb91 f1f0 	sdiv	r1, r1, r0
 800e780:	42b1      	cmp	r1, r6
 800e782:	dc21      	bgt.n	800e7c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 800e784:	4556      	cmp	r6, sl
 800e786:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800e78a:	da03      	bge.n	800e794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 800e78c:	b1e6      	cbz	r6, 800e7c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 800e78e:	46b2      	mov	sl, r6
 800e790:	4645      	mov	r5, r8
 800e792:	464c      	mov	r4, r9
 800e794:	f108 38ff 	add.w	r8, r8, #4294967295
 800e798:	f118 0f02 	cmn.w	r8, #2
 800e79c:	d1c8      	bne.n	800e730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 800e79e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e7a2:	f1a7 0708 	sub.w	r7, r7, #8
 800e7a6:	4691      	mov	r9, r2
 800e7a8:	d1b7      	bne.n	800e71a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x566>
 800e7aa:	9b01      	ldr	r3, [sp, #4]
 800e7ac:	b2a6      	uxth	r6, r4
 800e7ae:	00e4      	lsls	r4, r4, #3
 800e7b0:	1918      	adds	r0, r3, r4
 800e7b2:	1c6b      	adds	r3, r5, #1
 800e7b4:	d10b      	bne.n	800e7ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x61a>
 800e7b6:	4601      	mov	r1, r0
 800e7b8:	9802      	ldr	r0, [sp, #8]
 800e7ba:	f7ff fc0d 	bl	800dfd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e7be:	4631      	mov	r1, r6
 800e7c0:	9801      	ldr	r0, [sp, #4]
 800e7c2:	f7ff fcb3 	bl	800e12c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e7c6:	e50b      	b.n	800e1e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e7c8:	4645      	mov	r5, r8
 800e7ca:	464c      	mov	r4, r9
 800e7cc:	e7ed      	b.n	800e7aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f6>
 800e7ce:	9b01      	ldr	r3, [sp, #4]
 800e7d0:	00ed      	lsls	r5, r5, #3
 800e7d2:	445c      	add	r4, fp
 800e7d4:	1959      	adds	r1, r3, r5
 800e7d6:	445d      	add	r5, fp
 800e7d8:	f7ff fbfe 	bl	800dfd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e7dc:	9b02      	ldr	r3, [sp, #8]
 800e7de:	cb03      	ldmia	r3!, {r0, r1}
 800e7e0:	9b02      	ldr	r3, [sp, #8]
 800e7e2:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800e7e6:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800e7ea:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800e7ee:	6861      	ldr	r1, [r4, #4]
 800e7f0:	c303      	stmia	r3!, {r0, r1}
 800e7f2:	e7e4      	b.n	800e7be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>

0800e7f4 <_ZN8touchgfx11Application10invalidateEv>:
 800e7f4:	4b09      	ldr	r3, [pc, #36]	; (800e81c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e7fe:	4b08      	ldr	r3, [pc, #32]	; (800e820 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800e800:	9100      	str	r1, [sp, #0]
 800e802:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e806:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e80a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e80e:	ab02      	add	r3, sp, #8
 800e810:	e913 0006 	ldmdb	r3, {r1, r2}
 800e814:	b002      	add	sp, #8
 800e816:	f7ff bccd 	b.w	800e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e81a:	bf00      	nop
 800e81c:	2400aee8 	.word	0x2400aee8
 800e820:	2400aeea 	.word	0x2400aeea

0800e824 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800e82c:	b09b      	sub	sp, #108	; 0x6c
 800e82e:	4604      	mov	r4, r0
 800e830:	4630      	mov	r0, r6
 800e832:	f7fc f95c 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800e836:	4605      	mov	r5, r0
 800e838:	b940      	cbnz	r0, 800e84c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 800e83a:	4620      	mov	r0, r4
 800e83c:	e896 0006 	ldmia.w	r6, {r1, r2}
 800e840:	f7ff fcb8 	bl	800e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e844:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800e848:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800e84c:	4bc6      	ldr	r3, [pc, #792]	; (800eb68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	b33b      	cbz	r3, 800e8a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 800e852:	4dc6      	ldr	r5, [pc, #792]	; (800eb6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800e854:	4628      	mov	r0, r5
 800e856:	f7fc f94a 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800e85a:	4606      	mov	r6, r0
 800e85c:	bb08      	cbnz	r0, 800e8a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 800e85e:	4628      	mov	r0, r5
 800e860:	f7ff f9c4 	bl	800dbec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e864:	6829      	ldr	r1, [r5, #0]
 800e866:	686a      	ldr	r2, [r5, #4]
 800e868:	4620      	mov	r0, r4
 800e86a:	f7ff fca3 	bl	800e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e86e:	802e      	strh	r6, [r5, #0]
 800e870:	806e      	strh	r6, [r5, #2]
 800e872:	80ae      	strh	r6, [r5, #4]
 800e874:	80ee      	strh	r6, [r5, #6]
 800e876:	4dbe      	ldr	r5, [pc, #760]	; (800eb70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800e878:	a809      	add	r0, sp, #36	; 0x24
 800e87a:	f7ff fc04 	bl	800e086 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e87e:	882f      	ldrh	r7, [r5, #0]
 800e880:	463e      	mov	r6, r7
 800e882:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e886:	42b3      	cmp	r3, r6
 800e888:	d912      	bls.n	800e8b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 800e88a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e88e:	3601      	adds	r6, #1
 800e890:	a809      	add	r0, sp, #36	; 0x24
 800e892:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800e896:	b2b6      	uxth	r6, r6
 800e898:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800e89c:	f7ff fc68 	bl	800e170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e8a0:	e7ef      	b.n	800e882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5e>
 800e8a2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e5      	bne.n	800e876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52>
 800e8aa:	b01b      	add	sp, #108	; 0x6c
 800e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b0:	463e      	mov	r6, r7
 800e8b2:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800e8b6:	42b3      	cmp	r3, r6
 800e8b8:	d90b      	bls.n	800e8d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 800e8ba:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e8be:	3601      	adds	r6, #1
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800e8c6:	b2b6      	uxth	r6, r6
 800e8c8:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800e8cc:	f7ff fc72 	bl	800e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e8d0:	e7ef      	b.n	800e8b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8e>
 800e8d2:	4ea8      	ldr	r6, [pc, #672]	; (800eb74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800e8d4:	6833      	ldr	r3, [r6, #0]
 800e8d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	f040 80d2 	bne.w	800ea84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 800e8e0:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	f8b4 c0e8 	ldrh.w	ip, [r4, #232]	; 0xe8
 800e8ea:	2700      	movs	r7, #0
 800e8ec:	33aa      	adds	r3, #170	; 0xaa
 800e8ee:	458c      	cmp	ip, r1
 800e8f0:	f103 0308 	add.w	r3, r3, #8
 800e8f4:	dd0a      	ble.n	800e90c <_ZN8touchgfx11Application15drawCachedAreasEv+0xe8>
 800e8f6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800e8fa:	3101      	adds	r1, #1
 800e8fc:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800e900:	4402      	add	r2, r0
 800e902:	b212      	sxth	r2, r2
 800e904:	4297      	cmp	r7, r2
 800e906:	bfb8      	it	lt
 800e908:	4617      	movlt	r7, r2
 800e90a:	e7f0      	b.n	800e8ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 800e90c:	4b9a      	ldr	r3, [pc, #616]	; (800eb78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800e90e:	f8b3 9000 	ldrh.w	r9, [r3]
 800e912:	2300      	movs	r3, #0
 800e914:	f1b9 0f0f 	cmp.w	r9, #15
 800e918:	bf8c      	ite	hi
 800e91a:	ea4f 09d9 	movhi.w	r9, r9, lsr #3
 800e91e:	f04f 0901 	movls.w	r9, #1
 800e922:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e926:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 800e92a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 800e92e:	4440      	add	r0, r8
 800e930:	fa0f f880 	sxth.w	r8, r0
 800e934:	6830      	ldr	r0, [r6, #0]
 800e936:	4547      	cmp	r7, r8
 800e938:	6803      	ldr	r3, [r0, #0]
 800e93a:	f340 8086 	ble.w	800ea4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x226>
 800e93e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e942:	4798      	blx	r3
 800e944:	eb08 0309 	add.w	r3, r8, r9
 800e948:	4298      	cmp	r0, r3
 800e94a:	da08      	bge.n	800e95e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800e94c:	4287      	cmp	r7, r0
 800e94e:	dd06      	ble.n	800e95e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 800e950:	4580      	cmp	r8, r0
 800e952:	dd70      	ble.n	800ea36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 800e954:	f1b8 0f00 	cmp.w	r8, #0
 800e958:	dd6d      	ble.n	800ea36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 800e95a:	4638      	mov	r0, r7
 800e95c:	e004      	b.n	800e968 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 800e95e:	4580      	cmp	r8, r0
 800e960:	dcfb      	bgt.n	800e95a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 800e962:	42b8      	cmp	r0, r7
 800e964:	bfa8      	it	ge
 800e966:	4638      	movge	r0, r7
 800e968:	4b84      	ldr	r3, [pc, #528]	; (800eb7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800e96a:	eba0 0008 	sub.w	r0, r0, r8
 800e96e:	2200      	movs	r2, #0
 800e970:	f8ad 8016 	strh.w	r8, [sp, #22]
 800e974:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e978:	f8b5 8000 	ldrh.w	r8, [r5]
 800e97c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e980:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e984:	f8ad 001a 	strh.w	r0, [sp, #26]
 800e988:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e98c:	4543      	cmp	r3, r8
 800e98e:	d9ca      	bls.n	800e926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 800e990:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 800e994:	ab07      	add	r3, sp, #28
 800e996:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800e99a:	6851      	ldr	r1, [r2, #4]
 800e99c:	c303      	stmia	r3!, {r0, r1}
 800e99e:	a905      	add	r1, sp, #20
 800e9a0:	a807      	add	r0, sp, #28
 800e9a2:	f7ff fa81 	bl	800dea8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d04c      	beq.n	800ea44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x220>
 800e9aa:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800e9ae:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800e9b2:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800e9b6:	4686      	mov	lr, r0
 800e9b8:	4290      	cmp	r0, r2
 800e9ba:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800e9be:	4450      	add	r0, sl
 800e9c0:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800e9c4:	bfb8      	it	lt
 800e9c6:	4696      	movlt	lr, r2
 800e9c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e9cc:	4452      	add	r2, sl
 800e9ce:	b280      	uxth	r0, r0
 800e9d0:	4299      	cmp	r1, r3
 800e9d2:	468c      	mov	ip, r1
 800e9d4:	b292      	uxth	r2, r2
 800e9d6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800e9da:	fa0f fb80 	sxth.w	fp, r0
 800e9de:	bfb8      	it	lt
 800e9e0:	469c      	movlt	ip, r3
 800e9e2:	fa0f fa82 	sxth.w	sl, r2
 800e9e6:	f8ad c01e 	strh.w	ip, [sp, #30]
 800e9ea:	45d3      	cmp	fp, sl
 800e9ec:	bfb8      	it	lt
 800e9ee:	4602      	movlt	r2, r0
 800e9f0:	eba2 020e 	sub.w	r2, r2, lr
 800e9f4:	f8ad 2020 	strh.w	r2, [sp, #32]
 800e9f8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800e9fc:	4411      	add	r1, r2
 800e9fe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ea02:	4413      	add	r3, r2
 800ea04:	b289      	uxth	r1, r1
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	b208      	sxth	r0, r1
 800ea0a:	b21a      	sxth	r2, r3
 800ea0c:	4290      	cmp	r0, r2
 800ea0e:	bfb8      	it	lt
 800ea10:	460b      	movlt	r3, r1
 800ea12:	eba3 030c 	sub.w	r3, r3, ip
 800ea16:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ea1a:	a807      	add	r0, sp, #28
 800ea1c:	f7fc f867 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ea20:	b920      	cbnz	r0, 800ea2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x208>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	a907      	add	r1, sp, #28
 800ea26:	4620      	mov	r0, r4
 800ea28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2a:	4798      	blx	r3
 800ea2c:	f108 0801 	add.w	r8, r8, #1
 800ea30:	fa1f f888 	uxth.w	r8, r8
 800ea34:	e7a8      	b.n	800e988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x164>
 800ea36:	6830      	ldr	r0, [r6, #0]
 800ea38:	2101      	movs	r1, #1
 800ea3a:	6803      	ldr	r3, [r0, #0]
 800ea3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ea40:	4798      	blx	r3
 800ea42:	e770      	b.n	800e926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 800ea44:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800ea48:	e7e7      	b.n	800ea1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1f6>
 800ea4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea4c:	4798      	blx	r3
 800ea4e:	4b4c      	ldr	r3, [pc, #304]	; (800eb80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f43f af29 	beq.w	800e8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	882d      	ldrh	r5, [r5, #0]
 800ea5c:	34ea      	adds	r4, #234	; 0xea
 800ea5e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800ea62:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800ea66:	42ab      	cmp	r3, r5
 800ea68:	f67f af1f 	bls.w	800e8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 800ea6c:	ab1a      	add	r3, sp, #104	; 0x68
 800ea6e:	4620      	mov	r0, r4
 800ea70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ea74:	3501      	adds	r5, #1
 800ea76:	3b44      	subs	r3, #68	; 0x44
 800ea78:	b2ad      	uxth	r5, r5
 800ea7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ea7e:	f7ff fb77 	bl	800e170 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800ea82:	e7ee      	b.n	800ea62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	f040 8137 	bne.w	800ecf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>
 800ea8a:	4b3e      	ldr	r3, [pc, #248]	; (800eb84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d02c      	beq.n	800eaec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c8>
 800ea92:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
 800ea96:	882a      	ldrh	r2, [r5, #0]
 800ea98:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800ea9c:	3201      	adds	r2, #1
 800ea9e:	b292      	uxth	r2, r2
 800eaa0:	2900      	cmp	r1, #0
 800eaa2:	d0d4      	beq.n	800ea4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800eaa4:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800eaae:	f04f 0900 	mov.w	r9, #0
 800eab2:	441f      	add	r7, r3
 800eab4:	b23f      	sxth	r7, r7
 800eab6:	b283      	uxth	r3, r0
 800eab8:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 800eabc:	4299      	cmp	r1, r3
 800eabe:	f240 80c5 	bls.w	800ec4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x428>
 800eac2:	44a0      	add	r8, r4
 800eac4:	eb04 0bc0 	add.w	fp, r4, r0, lsl #3
 800eac8:	4684      	mov	ip, r0
 800eaca:	f9b8 30aa 	ldrsh.w	r3, [r8, #170]	; 0xaa
 800eace:	f9bb e0aa 	ldrsh.w	lr, [fp, #170]	; 0xaa
 800ead2:	4573      	cmp	r3, lr
 800ead4:	f340 80a7 	ble.w	800ec26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 800ead8:	f8bb 70ae 	ldrh.w	r7, [fp, #174]	; 0xae
 800eadc:	4477      	add	r7, lr
 800eade:	b23f      	sxth	r7, r7
 800eae0:	429f      	cmp	r7, r3
 800eae2:	bfa8      	it	ge
 800eae4:	461f      	movge	r7, r3
 800eae6:	3001      	adds	r0, #1
 800eae8:	46e1      	mov	r9, ip
 800eaea:	e7e4      	b.n	800eab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x292>
 800eaec:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800eaf0:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800eaf4:	f1bb 0f00 	cmp.w	fp, #0
 800eaf8:	d0a9      	beq.n	800ea4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800eafa:	882b      	ldrh	r3, [r5, #0]
 800eafc:	f04f 0800 	mov.w	r8, #0
 800eb00:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800eb04:	3301      	adds	r3, #1
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	b299      	uxth	r1, r3
 800eb0a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 800eb0e:	458b      	cmp	fp, r1
 800eb10:	d93a      	bls.n	800eb88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800eb12:	4427      	add	r7, r4
 800eb14:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800eb18:	469c      	mov	ip, r3
 800eb1a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800eb1e:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 800eb22:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800eb26:	4408      	add	r0, r1
 800eb28:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800eb2c:	4471      	add	r1, lr
 800eb2e:	b200      	sxth	r0, r0
 800eb30:	b209      	sxth	r1, r1
 800eb32:	4288      	cmp	r0, r1
 800eb34:	da06      	bge.n	800eb44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 800eb36:	4586      	cmp	lr, r0
 800eb38:	4672      	mov	r2, lr
 800eb3a:	bfb8      	it	lt
 800eb3c:	4602      	movlt	r2, r0
 800eb3e:	3301      	adds	r3, #1
 800eb40:	46e0      	mov	r8, ip
 800eb42:	e7e1      	b.n	800eb08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>
 800eb44:	d10b      	bne.n	800eb5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800eb46:	f9b7 c0ae 	ldrsh.w	ip, [r7, #174]	; 0xae
 800eb4a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800eb4e:	458c      	cmp	ip, r1
 800eb50:	bfb4      	ite	lt
 800eb52:	469c      	movlt	ip, r3
 800eb54:	46c4      	movge	ip, r8
 800eb56:	4572      	cmp	r2, lr
 800eb58:	bfb8      	it	lt
 800eb5a:	4672      	movlt	r2, lr
 800eb5c:	e7ef      	b.n	800eb3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 800eb5e:	428a      	cmp	r2, r1
 800eb60:	46c4      	mov	ip, r8
 800eb62:	bfb8      	it	lt
 800eb64:	460a      	movlt	r2, r1
 800eb66:	e7ea      	b.n	800eb3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 800eb68:	2400af2c 	.word	0x2400af2c
 800eb6c:	2400af38 	.word	0x2400af38
 800eb70:	2400005c 	.word	0x2400005c
 800eb74:	2400aef4 	.word	0x2400aef4
 800eb78:	2400aeea 	.word	0x2400aeea
 800eb7c:	2400aee8 	.word	0x2400aee8
 800eb80:	2400aef2 	.word	0x2400aef2
 800eb84:	2400aeec 	.word	0x2400aeec
 800eb88:	19e1      	adds	r1, r4, r7
 800eb8a:	ab07      	add	r3, sp, #28
 800eb8c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800eb90:	6849      	ldr	r1, [r1, #4]
 800eb92:	c303      	stmia	r3!, {r0, r1}
 800eb94:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800eb98:	a807      	add	r0, sp, #28
 800eb9a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800eb9e:	2b13      	cmp	r3, #19
 800eba0:	440b      	add	r3, r1
 800eba2:	bfd8      	it	le
 800eba4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800eba8:	1a9b      	subs	r3, r3, r2
 800ebaa:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ebae:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ebb2:	f7ff f835 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ebb6:	a807      	add	r0, sp, #28
 800ebb8:	f7fb ff99 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d197      	bne.n	800eaf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 800ebc0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800ebc4:	4427      	add	r7, r4
 800ebc6:	6830      	ldr	r0, [r6, #0]
 800ebc8:	f1bc 0f14 	cmp.w	ip, #20
 800ebcc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ebd0:	f8d0 e000 	ldr.w	lr, [r0]
 800ebd4:	bfa8      	it	ge
 800ebd6:	f04f 0c14 	movge.w	ip, #20
 800ebda:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ebde:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800ebe2:	fa1f fc8c 	uxth.w	ip, ip
 800ebe6:	f8cd c000 	str.w	ip, [sp]
 800ebea:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 800ebee:	47d0      	blx	sl
 800ebf0:	4682      	mov	sl, r0
 800ebf2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ebf6:	a807      	add	r0, sp, #28
 800ebf8:	f7fe fff8 	bl	800dbec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	4620      	mov	r0, r4
 800ec00:	a907      	add	r1, sp, #28
 800ec02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec04:	4798      	blx	r3
 800ec06:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 800ec0a:	eba0 000a 	sub.w	r0, r0, sl
 800ec0e:	b200      	sxth	r0, r0
 800ec10:	f8a7 00ac 	strh.w	r0, [r7, #172]	; 0xac
 800ec14:	2800      	cmp	r0, #0
 800ec16:	f47f af6b 	bne.w	800eaf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 800ec1a:	fa1f f188 	uxth.w	r1, r8
 800ec1e:	4648      	mov	r0, r9
 800ec20:	f7ff fa84 	bl	800e12c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ec24:	e764      	b.n	800eaf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 800ec26:	d10c      	bne.n	800ec42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41e>
 800ec28:	f9b8 e0ac 	ldrsh.w	lr, [r8, #172]	; 0xac
 800ec2c:	f9bb c0ac 	ldrsh.w	ip, [fp, #172]	; 0xac
 800ec30:	45e6      	cmp	lr, ip
 800ec32:	bfb4      	ite	lt
 800ec34:	4684      	movlt	ip, r0
 800ec36:	46cc      	movge	ip, r9
 800ec38:	f8bb e0ae 	ldrh.w	lr, [fp, #174]	; 0xae
 800ec3c:	4473      	add	r3, lr
 800ec3e:	b21b      	sxth	r3, r3
 800ec40:	e74e      	b.n	800eae0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2bc>
 800ec42:	4577      	cmp	r7, lr
 800ec44:	46cc      	mov	ip, r9
 800ec46:	bfa8      	it	ge
 800ec48:	4677      	movge	r7, lr
 800ec4a:	e74c      	b.n	800eae6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 800ec4c:	eb0a 0008 	add.w	r0, sl, r8
 800ec50:	44a0      	add	r8, r4
 800ec52:	f9b8 b0ae 	ldrsh.w	fp, [r8, #174]	; 0xae
 800ec56:	f1bb 0f13 	cmp.w	fp, #19
 800ec5a:	bfdc      	itt	le
 800ec5c:	f8b8 70aa 	ldrhle.w	r7, [r8, #170]	; 0xaa
 800ec60:	445f      	addle	r7, fp
 800ec62:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ec66:	bfd8      	it	le
 800ec68:	b23f      	sxthle	r7, r7
 800ec6a:	f7fb ff40 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec6e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ec72:	2800      	cmp	r0, #0
 800ec74:	f47f af14 	bne.w	800eaa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27c>
 800ec78:	f9b8 20aa 	ldrsh.w	r2, [r8, #170]	; 0xaa
 800ec7c:	fa1f fb8b 	uxth.w	fp, fp
 800ec80:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ec84:	1abf      	subs	r7, r7, r2
 800ec86:	f9b8 10a8 	ldrsh.w	r1, [r8, #168]	; 0xa8
 800ec8a:	f9b8 30ac 	ldrsh.w	r3, [r8, #172]	; 0xac
 800ec8e:	2f14      	cmp	r7, #20
 800ec90:	6830      	ldr	r0, [r6, #0]
 800ec92:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ec96:	b289      	uxth	r1, r1
 800ec98:	bfa8      	it	ge
 800ec9a:	2714      	movge	r7, #20
 800ec9c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800eca0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eca4:	b292      	uxth	r2, r2
 800eca6:	f8d0 c000 	ldr.w	ip, [r0]
 800ecaa:	b2bf      	uxth	r7, r7
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	455f      	cmp	r7, fp
 800ecb0:	bf94      	ite	ls
 800ecb2:	9700      	strls	r7, [sp, #0]
 800ecb4:	f8cd b000 	strhi.w	fp, [sp]
 800ecb8:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
 800ecbc:	47b8      	blx	r7
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800ecc4:	a907      	add	r1, sp, #28
 800ecc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc8:	4620      	mov	r0, r4
 800ecca:	4798      	blx	r3
 800eccc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ecd0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 800ecd4:	f8b8 20aa 	ldrh.w	r2, [r8, #170]	; 0xaa
 800ecd8:	1a5b      	subs	r3, r3, r1
 800ecda:	440a      	add	r2, r1
 800ecdc:	b21b      	sxth	r3, r3
 800ecde:	f8a8 20aa 	strh.w	r2, [r8, #170]	; 0xaa
 800ece2:	f8a8 30ae 	strh.w	r3, [r8, #174]	; 0xae
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f47f aed5 	bne.w	800ea96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 800ecec:	fa1f f189 	uxth.w	r1, r9
 800ecf0:	4650      	mov	r0, sl
 800ecf2:	f7ff fa1b 	bl	800e12c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ecf6:	e6ce      	b.n	800ea96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 800ecf8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800ecfc:	42bb      	cmp	r3, r7
 800ecfe:	f67f aea6 	bls.w	800ea4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 800ed02:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800ed06:	ab07      	add	r3, sp, #28
 800ed08:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800ed0c:	6851      	ldr	r1, [r2, #4]
 800ed0e:	c303      	stmia	r3!, {r0, r1}
 800ed10:	a807      	add	r0, sp, #28
 800ed12:	f7fb feec 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed16:	b920      	cbnz	r0, 800ed22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fe>
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	a907      	add	r1, sp, #28
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed20:	4798      	blx	r3
 800ed22:	3701      	adds	r7, #1
 800ed24:	b2bf      	uxth	r7, r7
 800ed26:	e7e7      	b.n	800ecf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>

0800ed28 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800ed28:	4b03      	ldr	r3, [pc, #12]	; (800ed38 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	801a      	strh	r2, [r3, #0]
 800ed2e:	805a      	strh	r2, [r3, #2]
 800ed30:	809a      	strh	r2, [r3, #4]
 800ed32:	80da      	strh	r2, [r3, #6]
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop
 800ed38:	2400af38 	.word	0x2400af38

0800ed3c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800ed3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	b09d      	sub	sp, #116	; 0x74
 800ed42:	4606      	mov	r6, r0
 800ed44:	4614      	mov	r4, r2
 800ed46:	468a      	mov	sl, r1
 800ed48:	a803      	add	r0, sp, #12
 800ed4a:	461d      	mov	r5, r3
 800ed4c:	f000 fd6c 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800ed50:	6833      	ldr	r3, [r6, #0]
 800ed52:	4630      	mov	r0, r6
 800ed54:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800ed58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed5a:	4798      	blx	r3
 800ed5c:	6833      	ldr	r3, [r6, #0]
 800ed5e:	4607      	mov	r7, r0
 800ed60:	4630      	mov	r0, r6
 800ed62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed64:	4798      	blx	r3
 800ed66:	462a      	mov	r2, r5
 800ed68:	2500      	movs	r5, #0
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	9000      	str	r0, [sp, #0]
 800ed6e:	463b      	mov	r3, r7
 800ed70:	462c      	mov	r4, r5
 800ed72:	46a9      	mov	r9, r5
 800ed74:	46a8      	mov	r8, r5
 800ed76:	a803      	add	r0, sp, #12
 800ed78:	f000 fdc2 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	9302      	str	r3, [sp, #8]
 800ed80:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ed84:	429c      	cmp	r4, r3
 800ed86:	d002      	beq.n	800ed8e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800ed88:	455c      	cmp	r4, fp
 800ed8a:	bf18      	it	ne
 800ed8c:	4625      	movne	r5, r4
 800ed8e:	ab02      	add	r3, sp, #8
 800ed90:	4632      	mov	r2, r6
 800ed92:	4651      	mov	r1, sl
 800ed94:	a803      	add	r0, sp, #12
 800ed96:	f001 f8c5 	bl	800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	b108      	cbz	r0, 800eda2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800ed9e:	280a      	cmp	r0, #10
 800eda0:	d10a      	bne.n	800edb8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800eda2:	45c1      	cmp	r9, r8
 800eda4:	bf38      	it	cc
 800eda6:	46c1      	movcc	r9, r8
 800eda8:	f04f 0800 	mov.w	r8, #0
 800edac:	2c00      	cmp	r4, #0
 800edae:	d1e5      	bne.n	800ed7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800edb0:	4648      	mov	r0, r9
 800edb2:	b01d      	add	sp, #116	; 0x74
 800edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb8:	9a02      	ldr	r2, [sp, #8]
 800edba:	2a00      	cmp	r2, #0
 800edbc:	d0de      	beq.n	800ed7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800edbe:	7b57      	ldrb	r7, [r2, #13]
 800edc0:	4629      	mov	r1, r5
 800edc2:	6833      	ldr	r3, [r6, #0]
 800edc4:	007f      	lsls	r7, r7, #1
 800edc6:	8894      	ldrh	r4, [r2, #4]
 800edc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edca:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800edce:	7a97      	ldrb	r7, [r2, #10]
 800edd0:	4307      	orrs	r7, r0
 800edd2:	4630      	mov	r0, r6
 800edd4:	4798      	blx	r3
 800edd6:	4438      	add	r0, r7
 800edd8:	4480      	add	r8, r0
 800edda:	fa1f f888 	uxth.w	r8, r8
 800edde:	e7e5      	b.n	800edac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800ede0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800ede0:	b508      	push	{r3, lr}
 800ede2:	6803      	ldr	r3, [r0, #0]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	4798      	blx	r3
 800ede8:	b128      	cbz	r0, 800edf6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800edea:	7b43      	ldrb	r3, [r0, #13]
 800edec:	7a80      	ldrb	r0, [r0, #10]
 800edee:	005b      	lsls	r3, r3, #1
 800edf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edf4:	4318      	orrs	r0, r3
 800edf6:	bd08      	pop	{r3, pc}

0800edf8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800edf8:	b40e      	push	{r1, r2, r3}
 800edfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edfc:	b09e      	sub	sp, #120	; 0x78
 800edfe:	4605      	mov	r5, r0
 800ee00:	ab23      	add	r3, sp, #140	; 0x8c
 800ee02:	a805      	add	r0, sp, #20
 800ee04:	f853 4b04 	ldr.w	r4, [r3], #4
 800ee08:	9303      	str	r3, [sp, #12]
 800ee0a:	f000 fd0d 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800ee0e:	682b      	ldr	r3, [r5, #0]
 800ee10:	4628      	mov	r0, r5
 800ee12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee14:	4798      	blx	r3
 800ee16:	682b      	ldr	r3, [r5, #0]
 800ee18:	4606      	mov	r6, r0
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee1e:	4798      	blx	r3
 800ee20:	4633      	mov	r3, r6
 800ee22:	4621      	mov	r1, r4
 800ee24:	ae1e      	add	r6, sp, #120	; 0x78
 800ee26:	2400      	movs	r4, #0
 800ee28:	9000      	str	r0, [sp, #0]
 800ee2a:	9a03      	ldr	r2, [sp, #12]
 800ee2c:	a805      	add	r0, sp, #20
 800ee2e:	f000 fd67 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ee32:	f846 4d68 	str.w	r4, [r6, #-104]!
 800ee36:	462a      	mov	r2, r5
 800ee38:	4633      	mov	r3, r6
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	a805      	add	r0, sp, #20
 800ee3e:	f001 f871 	bl	800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ee42:	b300      	cbz	r0, 800ee86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800ee44:	280a      	cmp	r0, #10
 800ee46:	d01a      	beq.n	800ee7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ee48:	9f04      	ldr	r7, [sp, #16]
 800ee4a:	b1c7      	cbz	r7, 800ee7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ee4c:	7b78      	ldrb	r0, [r7, #13]
 800ee4e:	7a3b      	ldrb	r3, [r7, #8]
 800ee50:	00c1      	lsls	r1, r0, #3
 800ee52:	88aa      	ldrh	r2, [r5, #4]
 800ee54:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800ee58:	4319      	orrs	r1, r3
 800ee5a:	0643      	lsls	r3, r0, #25
 800ee5c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800ee60:	bf48      	it	mi
 800ee62:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800ee66:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800ee6a:	bf48      	it	mi
 800ee6c:	b219      	sxthmi	r1, r3
 800ee6e:	79fb      	ldrb	r3, [r7, #7]
 800ee70:	4303      	orrs	r3, r0
 800ee72:	4413      	add	r3, r2
 800ee74:	1a5b      	subs	r3, r3, r1
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	42a3      	cmp	r3, r4
 800ee7a:	bfc8      	it	gt
 800ee7c:	b21c      	sxthgt	r4, r3
 800ee7e:	4633      	mov	r3, r6
 800ee80:	462a      	mov	r2, r5
 800ee82:	2100      	movs	r1, #0
 800ee84:	e7da      	b.n	800ee3c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800ee86:	b2a0      	uxth	r0, r4
 800ee88:	b01e      	add	sp, #120	; 0x78
 800ee8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ee8e:	b003      	add	sp, #12
 800ee90:	4770      	bx	lr

0800ee92 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800ee92:	b40e      	push	{r1, r2, r3}
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	b09d      	sub	sp, #116	; 0x74
 800ee98:	4604      	mov	r4, r0
 800ee9a:	ab21      	add	r3, sp, #132	; 0x84
 800ee9c:	a803      	add	r0, sp, #12
 800ee9e:	f853 5b04 	ldr.w	r5, [r3], #4
 800eea2:	9302      	str	r3, [sp, #8]
 800eea4:	f000 fcc0 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeae:	4798      	blx	r3
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeb8:	2401      	movs	r4, #1
 800eeba:	4798      	blx	r3
 800eebc:	4633      	mov	r3, r6
 800eebe:	9000      	str	r0, [sp, #0]
 800eec0:	4629      	mov	r1, r5
 800eec2:	9a02      	ldr	r2, [sp, #8]
 800eec4:	a803      	add	r0, sp, #12
 800eec6:	f000 fd1b 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800eeca:	a803      	add	r0, sp, #12
 800eecc:	f001 f924 	bl	8010118 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800eed0:	b2a3      	uxth	r3, r4
 800eed2:	b138      	cbz	r0, 800eee4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800eed4:	280a      	cmp	r0, #10
 800eed6:	a803      	add	r0, sp, #12
 800eed8:	bf04      	itt	eq
 800eeda:	3301      	addeq	r3, #1
 800eedc:	b21c      	sxtheq	r4, r3
 800eede:	f001 f91b 	bl	8010118 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800eee2:	e7f5      	b.n	800eed0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800eee4:	4618      	mov	r0, r3
 800eee6:	b01d      	add	sp, #116	; 0x74
 800eee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeec:	b003      	add	sp, #12
 800eeee:	4770      	bx	lr

0800eef0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800eef0:	b40e      	push	{r1, r2, r3}
 800eef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef4:	b09e      	sub	sp, #120	; 0x78
 800eef6:	4604      	mov	r4, r0
 800eef8:	ab23      	add	r3, sp, #140	; 0x8c
 800eefa:	a805      	add	r0, sp, #20
 800eefc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef00:	9303      	str	r3, [sp, #12]
 800ef02:	f000 fc91 	bl	800f828 <_ZN8touchgfx12TextProviderC1Ev>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	4620      	mov	r0, r4
 800ef0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef0c:	4798      	blx	r3
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	4606      	mov	r6, r0
 800ef12:	4620      	mov	r0, r4
 800ef14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef16:	4798      	blx	r3
 800ef18:	4633      	mov	r3, r6
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	9000      	str	r0, [sp, #0]
 800ef1e:	9a03      	ldr	r2, [sp, #12]
 800ef20:	a805      	add	r0, sp, #20
 800ef22:	f000 fced 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ef26:	ad1e      	add	r5, sp, #120	; 0x78
 800ef28:	2100      	movs	r1, #0
 800ef2a:	26ff      	movs	r6, #255	; 0xff
 800ef2c:	4622      	mov	r2, r4
 800ef2e:	a805      	add	r0, sp, #20
 800ef30:	f845 1d68 	str.w	r1, [r5, #-104]!
 800ef34:	462b      	mov	r3, r5
 800ef36:	f000 fff5 	bl	800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ef3a:	b1d8      	cbz	r0, 800ef74 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800ef3c:	280a      	cmp	r0, #10
 800ef3e:	d012      	beq.n	800ef66 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800ef40:	9804      	ldr	r0, [sp, #16]
 800ef42:	b180      	cbz	r0, 800ef66 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800ef44:	7b47      	ldrb	r7, [r0, #13]
 800ef46:	7922      	ldrb	r2, [r4, #4]
 800ef48:	00fb      	lsls	r3, r7, #3
 800ef4a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ef4e:	7a03      	ldrb	r3, [r0, #8]
 800ef50:	430b      	orrs	r3, r1
 800ef52:	0679      	lsls	r1, r7, #25
 800ef54:	bf44      	itt	mi
 800ef56:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ef5a:	b21b      	sxthmi	r3, r3
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	429e      	cmp	r6, r3
 800ef62:	bf28      	it	cs
 800ef64:	461e      	movcs	r6, r3
 800ef66:	462b      	mov	r3, r5
 800ef68:	4622      	mov	r2, r4
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	a805      	add	r0, sp, #20
 800ef6e:	f000 ffd9 	bl	800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ef72:	e7e2      	b.n	800ef3a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800ef74:	4630      	mov	r0, r6
 800ef76:	b01e      	add	sp, #120	; 0x78
 800ef78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ef7c:	b003      	add	sp, #12
 800ef7e:	4770      	bx	lr

0800ef80 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800ef80:	b513      	push	{r0, r1, r4, lr}
 800ef82:	6803      	ldr	r3, [r0, #0]
 800ef84:	2400      	movs	r4, #0
 800ef86:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ef8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ef8e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ef92:	4669      	mov	r1, sp
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	9400      	str	r4, [sp, #0]
 800ef98:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ef9c:	4798      	blx	r3
 800ef9e:	b002      	add	sp, #8
 800efa0:	bd10      	pop	{r4, pc}

0800efa2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800efa2:	b538      	push	{r3, r4, r5, lr}
 800efa4:	680b      	ldr	r3, [r1, #0]
 800efa6:	460c      	mov	r4, r1
 800efa8:	4605      	mov	r5, r0
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	4798      	blx	r3
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	4620      	mov	r0, r4
 800efb2:	4629      	mov	r1, r5
 800efb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb6:	4798      	blx	r3
 800efb8:	4628      	mov	r0, r5
 800efba:	bd38      	pop	{r3, r4, r5, pc}

0800efbc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800efbc:	b410      	push	{r4}
 800efbe:	880a      	ldrh	r2, [r1, #0]
 800efc0:	8884      	ldrh	r4, [r0, #4]
 800efc2:	4422      	add	r2, r4
 800efc4:	800a      	strh	r2, [r1, #0]
 800efc6:	884a      	ldrh	r2, [r1, #2]
 800efc8:	88c4      	ldrh	r4, [r0, #6]
 800efca:	4422      	add	r2, r4
 800efcc:	804a      	strh	r2, [r1, #2]
 800efce:	6940      	ldr	r0, [r0, #20]
 800efd0:	b120      	cbz	r0, 800efdc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800efd2:	6803      	ldr	r3, [r0, #0]
 800efd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efda:	4718      	bx	r3
 800efdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800efe2:	b570      	push	{r4, r5, r6, lr}
 800efe4:	8882      	ldrh	r2, [r0, #4]
 800efe6:	460c      	mov	r4, r1
 800efe8:	880b      	ldrh	r3, [r1, #0]
 800efea:	4605      	mov	r5, r0
 800efec:	4413      	add	r3, r2
 800efee:	800b      	strh	r3, [r1, #0]
 800eff0:	884b      	ldrh	r3, [r1, #2]
 800eff2:	88c2      	ldrh	r2, [r0, #6]
 800eff4:	4413      	add	r3, r2
 800eff6:	804b      	strh	r3, [r1, #2]
 800eff8:	1d01      	adds	r1, r0, #4
 800effa:	4620      	mov	r0, r4
 800effc:	f7fb fd34 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800f000:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	dd0b      	ble.n	800f020 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800f008:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	dd07      	ble.n	800f020 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800f010:	6968      	ldr	r0, [r5, #20]
 800f012:	b128      	cbz	r0, 800f020 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800f014:	6803      	ldr	r3, [r0, #0]
 800f016:	4621      	mov	r1, r4
 800f018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f01e:	4718      	bx	r3
 800f020:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f024 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	8882      	ldrh	r2, [r0, #4]
 800f028:	460c      	mov	r4, r1
 800f02a:	880b      	ldrh	r3, [r1, #0]
 800f02c:	4605      	mov	r5, r0
 800f02e:	4413      	add	r3, r2
 800f030:	800b      	strh	r3, [r1, #0]
 800f032:	884b      	ldrh	r3, [r1, #2]
 800f034:	88c2      	ldrh	r2, [r0, #6]
 800f036:	4413      	add	r3, r2
 800f038:	804b      	strh	r3, [r1, #2]
 800f03a:	1d01      	adds	r1, r0, #4
 800f03c:	4620      	mov	r0, r4
 800f03e:	f7fb fd13 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800f042:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	dd18      	ble.n	800f07c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800f04a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	dd14      	ble.n	800f07c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800f052:	6968      	ldr	r0, [r5, #20]
 800f054:	b128      	cbz	r0, 800f062 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	4621      	mov	r1, r4
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f060:	4718      	bx	r3
 800f062:	4b07      	ldr	r3, [pc, #28]	; (800f080 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	3304      	adds	r3, #4
 800f068:	429d      	cmp	r5, r3
 800f06a:	d107      	bne.n	800f07c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 800f06c:	f7fe fffa 	bl	800e064 <_ZN8touchgfx11Application11getInstanceEv>
 800f070:	6821      	ldr	r1, [r4, #0]
 800f072:	6862      	ldr	r2, [r4, #4]
 800f074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f078:	f7ff b89c 	b.w	800e1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800f07c:	bd70      	pop	{r4, r5, r6, pc}
 800f07e:	bf00      	nop
 800f080:	2400af30 	.word	0x2400af30

0800f084 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	4604      	mov	r4, r0
 800f088:	4616      	mov	r6, r2
 800f08a:	460d      	mov	r5, r1
 800f08c:	b901      	cbnz	r1, 800f090 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800f08e:	b192      	cbz	r2, 800f0b6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	4620      	mov	r0, r4
 800f094:	699b      	ldr	r3, [r3, #24]
 800f096:	4798      	blx	r3
 800f098:	88e2      	ldrh	r2, [r4, #6]
 800f09a:	88a1      	ldrh	r1, [r4, #4]
 800f09c:	4620      	mov	r0, r4
 800f09e:	4432      	add	r2, r6
 800f0a0:	4429      	add	r1, r5
 800f0a2:	b212      	sxth	r2, r2
 800f0a4:	b209      	sxth	r1, r1
 800f0a6:	f7f3 fa0e 	bl	80024c6 <_ZN8touchgfx8Drawable5setXYEss>
 800f0aa:	6823      	ldr	r3, [r4, #0]
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0b4:	4718      	bx	r3
 800f0b6:	bd70      	pop	{r4, r5, r6, pc}

0800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800f0b8:	b510      	push	{r4, lr}
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	4604      	mov	r4, r0
 800f0be:	4608      	mov	r0, r1
 800f0c0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800f0c4:	8023      	strh	r3, [r4, #0]
 800f0c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f0ca:	8063      	strh	r3, [r4, #2]
 800f0cc:	6803      	ldr	r3, [r0, #0]
 800f0ce:	80a1      	strh	r1, [r4, #4]
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	80e2      	strh	r2, [r4, #6]
 800f0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d6:	4798      	blx	r3
 800f0d8:	4620      	mov	r0, r4
 800f0da:	bd10      	pop	{r4, pc}

0800f0dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800f0dc:	b530      	push	{r4, r5, lr}
 800f0de:	8083      	strh	r3, [r0, #4]
 800f0e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f0e4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800f0e8:	7183      	strb	r3, [r0, #6]
 800f0ea:	79c3      	ldrb	r3, [r0, #7]
 800f0ec:	6101      	str	r1, [r0, #16]
 800f0ee:	f365 0306 	bfi	r3, r5, #0, #7
 800f0f2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800f0f6:	8282      	strh	r2, [r0, #20]
 800f0f8:	f365 13c7 	bfi	r3, r5, #7, #1
 800f0fc:	71c3      	strb	r3, [r0, #7]
 800f0fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f102:	7203      	strb	r3, [r0, #8]
 800f104:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f108:	7243      	strb	r3, [r0, #9]
 800f10a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f10e:	8143      	strh	r3, [r0, #10]
 800f110:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800f114:	8183      	strh	r3, [r0, #12]
 800f116:	4b01      	ldr	r3, [pc, #4]	; (800f11c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800f118:	6003      	str	r3, [r0, #0]
 800f11a:	bd30      	pop	{r4, r5, pc}
 800f11c:	0801c210 	.word	0x0801c210

0800f120 <_ZNK8touchgfx9ConstFont4findEt>:
 800f120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f122:	6904      	ldr	r4, [r0, #16]
 800f124:	b3bc      	cbz	r4, 800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f126:	88a3      	ldrh	r3, [r4, #4]
 800f128:	8a82      	ldrh	r2, [r0, #20]
 800f12a:	1acb      	subs	r3, r1, r3
 800f12c:	f102 32ff 	add.w	r2, r2, #4294967295
 800f130:	d431      	bmi.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f132:	4293      	cmp	r3, r2
 800f134:	dd0c      	ble.n	800f150 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800f136:	230e      	movs	r3, #14
 800f138:	fb03 4302 	mla	r3, r3, r2, r4
 800f13c:	889b      	ldrh	r3, [r3, #4]
 800f13e:	1a5b      	subs	r3, r3, r1
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	429a      	cmp	r2, r3
 800f144:	db27      	blt.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f146:	2b00      	cmp	r3, #0
 800f148:	bfbc      	itt	lt
 800f14a:	2302      	movlt	r3, #2
 800f14c:	fb92 f3f3 	sdivlt	r3, r2, r3
 800f150:	2500      	movs	r5, #0
 800f152:	260e      	movs	r6, #14
 800f154:	4295      	cmp	r5, r2
 800f156:	dc1e      	bgt.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f158:	fb06 4003 	mla	r0, r6, r3, r4
 800f15c:	8887      	ldrh	r7, [r0, #4]
 800f15e:	42b9      	cmp	r1, r7
 800f160:	d01a      	beq.n	800f198 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800f162:	d20d      	bcs.n	800f180 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800f164:	1e5a      	subs	r2, r3, #1
 800f166:	4295      	cmp	r5, r2
 800f168:	dc15      	bgt.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f16a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800f16e:	1a5b      	subs	r3, r3, r1
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	429a      	cmp	r2, r3
 800f174:	db0f      	blt.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f176:	429d      	cmp	r5, r3
 800f178:	ddec      	ble.n	800f154 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f17a:	1953      	adds	r3, r2, r5
 800f17c:	105b      	asrs	r3, r3, #1
 800f17e:	e7e9      	b.n	800f154 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f180:	1c5d      	adds	r5, r3, #1
 800f182:	42aa      	cmp	r2, r5
 800f184:	db07      	blt.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f186:	8a43      	ldrh	r3, [r0, #18]
 800f188:	1acb      	subs	r3, r1, r3
 800f18a:	442b      	add	r3, r5
 800f18c:	429d      	cmp	r5, r3
 800f18e:	dc02      	bgt.n	800f196 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800f190:	429a      	cmp	r2, r3
 800f192:	dadf      	bge.n	800f154 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800f194:	e7f1      	b.n	800f17a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800f196:	2000      	movs	r0, #0
 800f198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f19a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800f19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19c:	4604      	mov	r4, r0
 800f19e:	4617      	mov	r7, r2
 800f1a0:	461e      	mov	r6, r3
 800f1a2:	b911      	cbnz	r1, 800f1aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800f1a4:	2500      	movs	r5, #0
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1aa:	290a      	cmp	r1, #10
 800f1ac:	d0fa      	beq.n	800f1a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f1ae:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800f1b2:	4291      	cmp	r1, r2
 800f1b4:	d0f6      	beq.n	800f1a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f1b6:	f242 020b 	movw	r2, #8203	; 0x200b
 800f1ba:	4291      	cmp	r1, r2
 800f1bc:	d0f2      	beq.n	800f1a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f1be:	f7ff ffaf 	bl	800f120 <_ZNK8touchgfx9ConstFont4findEt>
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	b950      	cbnz	r0, 800f1dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	691b      	ldr	r3, [r3, #16]
 800f1cc:	4798      	blx	r3
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f7ff ffa5 	bl	800f120 <_ZNK8touchgfx9ConstFont4findEt>
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d0e3      	beq.n	800f1a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	4629      	mov	r1, r5
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1e4:	4798      	blx	r3
 800f1e6:	6038      	str	r0, [r7, #0]
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ee:	4798      	blx	r3
 800f1f0:	7030      	strb	r0, [r6, #0]
 800f1f2:	e7d8      	b.n	800f1a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800f1f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	4770      	bx	lr

0800f1f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800f1f8:	2001      	movs	r0, #1
 800f1fa:	4770      	bx	lr

0800f1fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800f1fc:	2002      	movs	r0, #2
 800f1fe:	4770      	bx	lr

0800f200 <_ZN8touchgfx6ScreenD1Ev>:
 800f200:	4770      	bx	lr

0800f202 <_ZN8touchgfx12GestureEventD1Ev>:
 800f202:	4770      	bx	lr

0800f204 <_ZN8touchgfx9DragEventD1Ev>:
 800f204:	4770      	bx	lr

0800f206 <_ZN8touchgfx10ClickEventD1Ev>:
 800f206:	4770      	bx	lr

0800f208 <_ZN8touchgfx10ClickEventD0Ev>:
 800f208:	b510      	push	{r4, lr}
 800f20a:	4604      	mov	r4, r0
 800f20c:	210c      	movs	r1, #12
 800f20e:	f009 ff66 	bl	80190de <_ZdlPvj>
 800f212:	4620      	mov	r0, r4
 800f214:	bd10      	pop	{r4, pc}

0800f216 <_ZN8touchgfx9DragEventD0Ev>:
 800f216:	b510      	push	{r4, lr}
 800f218:	4604      	mov	r4, r0
 800f21a:	2110      	movs	r1, #16
 800f21c:	f009 ff5f 	bl	80190de <_ZdlPvj>
 800f220:	4620      	mov	r0, r4
 800f222:	bd10      	pop	{r4, pc}

0800f224 <_ZN8touchgfx12GestureEventD0Ev>:
 800f224:	b510      	push	{r4, lr}
 800f226:	4604      	mov	r4, r0
 800f228:	210c      	movs	r1, #12
 800f22a:	f009 ff58 	bl	80190de <_ZdlPvj>
 800f22e:	4620      	mov	r0, r4
 800f230:	bd10      	pop	{r4, pc}

0800f232 <_ZN8touchgfx6ScreenD0Ev>:
 800f232:	b510      	push	{r4, lr}
 800f234:	4604      	mov	r4, r0
 800f236:	213c      	movs	r1, #60	; 0x3c
 800f238:	f009 ff51 	bl	80190de <_ZdlPvj>
 800f23c:	4620      	mov	r0, r4
 800f23e:	bd10      	pop	{r4, pc}

0800f240 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800f240:	b530      	push	{r4, r5, lr}
 800f242:	460d      	mov	r5, r1
 800f244:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f246:	b087      	sub	sp, #28
 800f248:	4604      	mov	r4, r0
 800f24a:	b301      	cbz	r1, 800f28e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800f24c:	a801      	add	r0, sp, #4
 800f24e:	f7ff ff33 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f252:	892a      	ldrh	r2, [r5, #8]
 800f254:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f258:	7928      	ldrb	r0, [r5, #4]
 800f25a:	1ad2      	subs	r2, r2, r3
 800f25c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f25e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800f262:	441a      	add	r2, r3
 800f264:	896b      	ldrh	r3, [r5, #10]
 800f266:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800f26a:	f88d 0010 	strb.w	r0, [sp, #16]
 800f26e:	1b5b      	subs	r3, r3, r5
 800f270:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800f272:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f274:	442b      	add	r3, r5
 800f276:	4d07      	ldr	r5, [pc, #28]	; (800f294 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800f278:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f27c:	a903      	add	r1, sp, #12
 800f27e:	9503      	str	r5, [sp, #12]
 800f280:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f284:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f288:	6803      	ldr	r3, [r0, #0]
 800f28a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f28c:	4798      	blx	r3
 800f28e:	b007      	add	sp, #28
 800f290:	bd30      	pop	{r4, r5, pc}
 800f292:	bf00      	nop
 800f294:	0801c290 	.word	0x0801c290

0800f298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800f298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f29e:	b08a      	sub	sp, #40	; 0x28
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	460d      	mov	r5, r1
 800f2a4:	b113      	cbz	r3, 800f2ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800f2a6:	790b      	ldrb	r3, [r1, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d044      	beq.n	800f336 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f2ac:	f104 0804 	add.w	r8, r4, #4
 800f2b0:	a803      	add	r0, sp, #12
 800f2b2:	4641      	mov	r1, r8
 800f2b4:	f7ff ff00 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f2b8:	792b      	ldrb	r3, [r5, #4]
 800f2ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800f2be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800f2c2:	b983      	cbnz	r3, 800f2e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800f2c4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800f2c8:	892a      	ldrh	r2, [r5, #8]
 800f2ca:	88e9      	ldrh	r1, [r5, #6]
 800f2cc:	4640      	mov	r0, r8
 800f2ce:	1b92      	subs	r2, r2, r6
 800f2d0:	9301      	str	r3, [sp, #4]
 800f2d2:	1bc9      	subs	r1, r1, r7
 800f2d4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f2d8:	b212      	sxth	r2, r2
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	b209      	sxth	r1, r1
 800f2de:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800f2e2:	f7fb fadf 	bl	800a8a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800f2e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f2e8:	b329      	cbz	r1, 800f336 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f2ea:	a805      	add	r0, sp, #20
 800f2ec:	f7ff fee4 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f2f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f2f4:	792b      	ldrb	r3, [r5, #4]
 800f2f6:	a907      	add	r1, sp, #28
 800f2f8:	1abf      	subs	r7, r7, r2
 800f2fa:	88ea      	ldrh	r2, [r5, #6]
 800f2fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f2fe:	4417      	add	r7, r2
 800f300:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800f302:	f88d 3020 	strb.w	r3, [sp, #32]
 800f306:	4417      	add	r7, r2
 800f308:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800f30c:	1ab6      	subs	r6, r6, r2
 800f30e:	892a      	ldrh	r2, [r5, #8]
 800f310:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800f314:	4416      	add	r6, r2
 800f316:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f318:	4416      	add	r6, r2
 800f31a:	4a08      	ldr	r2, [pc, #32]	; (800f33c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800f31c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800f320:	2600      	movs	r6, #0
 800f322:	9207      	str	r2, [sp, #28]
 800f324:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800f328:	6803      	ldr	r3, [r0, #0]
 800f32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32c:	4798      	blx	r3
 800f32e:	792b      	ldrb	r3, [r5, #4]
 800f330:	b10b      	cbz	r3, 800f336 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f332:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f336:	b00a      	add	sp, #40	; 0x28
 800f338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f33c:	0801c268 	.word	0x0801c268

0800f340 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f344:	460c      	mov	r4, r1
 800f346:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f348:	b088      	sub	sp, #32
 800f34a:	4605      	mov	r5, r0
 800f34c:	2900      	cmp	r1, #0
 800f34e:	d06d      	beq.n	800f42c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800f350:	4668      	mov	r0, sp
 800f352:	f7ff feb1 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f356:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800f358:	88e3      	ldrh	r3, [r4, #6]
 800f35a:	f9bd 8000 	ldrsh.w	r8, [sp]
 800f35e:	440b      	add	r3, r1
 800f360:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800f364:	b21b      	sxth	r3, r3
 800f366:	4543      	cmp	r3, r8
 800f368:	db31      	blt.n	800f3ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f36a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800f36e:	44c4      	add	ip, r8
 800f370:	fa0f fc8c 	sxth.w	ip, ip
 800f374:	4563      	cmp	r3, ip
 800f376:	da2a      	bge.n	800f3ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f378:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800f37a:	8926      	ldrh	r6, [r4, #8]
 800f37c:	4416      	add	r6, r2
 800f37e:	b236      	sxth	r6, r6
 800f380:	42be      	cmp	r6, r7
 800f382:	db24      	blt.n	800f3ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f384:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f388:	4438      	add	r0, r7
 800f38a:	b200      	sxth	r0, r0
 800f38c:	4286      	cmp	r6, r0
 800f38e:	da1e      	bge.n	800f3ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f390:	8963      	ldrh	r3, [r4, #10]
 800f392:	4419      	add	r1, r3
 800f394:	b209      	sxth	r1, r1
 800f396:	4541      	cmp	r1, r8
 800f398:	db08      	blt.n	800f3ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f39a:	4561      	cmp	r1, ip
 800f39c:	da06      	bge.n	800f3ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	441a      	add	r2, r3
 800f3a2:	b212      	sxth	r2, r2
 800f3a4:	42ba      	cmp	r2, r7
 800f3a6:	db01      	blt.n	800f3ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f3a8:	4282      	cmp	r2, r0
 800f3aa:	db10      	blt.n	800f3ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f3ac:	4b21      	ldr	r3, [pc, #132]	; (800f434 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800f3ae:	a904      	add	r1, sp, #16
 800f3b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f3b2:	9304      	str	r3, [sp, #16]
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	f88d 3014 	strb.w	r3, [sp, #20]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f3c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f3c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f3c8:	6803      	ldr	r3, [r0, #0]
 800f3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3cc:	4798      	blx	r3
 800f3ce:	1d29      	adds	r1, r5, #4
 800f3d0:	a802      	add	r0, sp, #8
 800f3d2:	f7ff fe71 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f3d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f3da:	88e0      	ldrh	r0, [r4, #6]
 800f3dc:	eba3 0808 	sub.w	r8, r3, r8
 800f3e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f3e4:	7921      	ldrb	r1, [r4, #4]
 800f3e6:	fa1f f888 	uxth.w	r8, r8
 800f3ea:	1bdf      	subs	r7, r3, r7
 800f3ec:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800f3f0:	b2bb      	uxth	r3, r7
 800f3f2:	4440      	add	r0, r8
 800f3f4:	8922      	ldrh	r2, [r4, #8]
 800f3f6:	8967      	ldrh	r7, [r4, #10]
 800f3f8:	4460      	add	r0, ip
 800f3fa:	89a4      	ldrh	r4, [r4, #12]
 800f3fc:	441a      	add	r2, r3
 800f3fe:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800f400:	44b8      	add	r8, r7
 800f402:	4423      	add	r3, r4
 800f404:	f8ad 0016 	strh.w	r0, [sp, #22]
 800f408:	4432      	add	r2, r6
 800f40a:	44e0      	add	r8, ip
 800f40c:	4433      	add	r3, r6
 800f40e:	4c0a      	ldr	r4, [pc, #40]	; (800f438 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800f410:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f412:	f88d 1014 	strb.w	r1, [sp, #20]
 800f416:	a904      	add	r1, sp, #16
 800f418:	9404      	str	r4, [sp, #16]
 800f41a:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f41e:	f8ad 801a 	strh.w	r8, [sp, #26]
 800f422:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f426:	6803      	ldr	r3, [r0, #0]
 800f428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f42a:	4798      	blx	r3
 800f42c:	b008      	add	sp, #32
 800f42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f432:	bf00      	nop
 800f434:	0801c268 	.word	0x0801c268
 800f438:	0801c27c 	.word	0x0801c27c

0800f43c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800f43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f43e:	4604      	mov	r4, r0
 800f440:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800f444:	3201      	adds	r2, #1
 800f446:	d112      	bne.n	800f46e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800f448:	2500      	movs	r5, #0
 800f44a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f44e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f452:	6803      	ldr	r3, [r0, #0]
 800f454:	9500      	str	r5, [sp, #0]
 800f456:	466d      	mov	r5, sp
 800f458:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f45c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f460:	4629      	mov	r1, r5
 800f462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f464:	4798      	blx	r3
 800f466:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f46a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f46e:	4620      	mov	r0, r4
 800f470:	b003      	add	sp, #12
 800f472:	bd30      	pop	{r4, r5, pc}

0800f474 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800f474:	b513      	push	{r0, r1, r4, lr}
 800f476:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800f47a:	4604      	mov	r4, r0
 800f47c:	3301      	adds	r3, #1
 800f47e:	d109      	bne.n	800f494 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800f480:	4601      	mov	r1, r0
 800f482:	4668      	mov	r0, sp
 800f484:	f7ff fe18 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f488:	f8bd 3000 	ldrh.w	r3, [sp]
 800f48c:	8423      	strh	r3, [r4, #32]
 800f48e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f492:	8463      	strh	r3, [r4, #34]	; 0x22
 800f494:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800f498:	b002      	add	sp, #8
 800f49a:	bd10      	pop	{r4, pc}

0800f49c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800f49c:	b513      	push	{r0, r1, r4, lr}
 800f49e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	d109      	bne.n	800f4bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	4668      	mov	r0, sp
 800f4ac:	f7ff fe04 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f4b0:	f8bd 3000 	ldrh.w	r3, [sp]
 800f4b4:	8423      	strh	r3, [r4, #32]
 800f4b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f4ba:	8463      	strh	r3, [r4, #34]	; 0x22
 800f4bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800f4c0:	b002      	add	sp, #8
 800f4c2:	bd10      	pop	{r4, pc}

0800f4c4 <_ZN8touchgfx6ScreenC1Ev>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	4b17      	ldr	r3, [pc, #92]	; (800f524 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	4a17      	ldr	r2, [pc, #92]	; (800f528 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800f4cc:	2101      	movs	r1, #1
 800f4ce:	f845 3b04 	str.w	r3, [r5], #4
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	6042      	str	r2, [r0, #4]
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	8103      	strh	r3, [r0, #8]
 800f4da:	8143      	strh	r3, [r0, #10]
 800f4dc:	8183      	strh	r3, [r0, #12]
 800f4de:	81c3      	strh	r3, [r0, #14]
 800f4e0:	8203      	strh	r3, [r0, #16]
 800f4e2:	8243      	strh	r3, [r0, #18]
 800f4e4:	8283      	strh	r3, [r0, #20]
 800f4e6:	82c3      	strh	r3, [r0, #22]
 800f4e8:	6203      	str	r3, [r0, #32]
 800f4ea:	8483      	strh	r3, [r0, #36]	; 0x24
 800f4ec:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f4ee:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800f4f2:	6343      	str	r3, [r0, #52]	; 0x34
 800f4f4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800f4f8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f4fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f500:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800f504:	4b09      	ldr	r3, [pc, #36]	; (800f52c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800f506:	4628      	mov	r0, r5
 800f508:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f50c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800f50e:	4a08      	ldr	r2, [pc, #32]	; (800f530 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800f510:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f514:	4798      	blx	r3
 800f516:	6863      	ldr	r3, [r4, #4]
 800f518:	4628      	mov	r0, r5
 800f51a:	4631      	mov	r1, r6
 800f51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f51e:	4798      	blx	r3
 800f520:	4620      	mov	r0, r4
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	0801c2a4 	.word	0x0801c2a4
 800f528:	0801b504 	.word	0x0801b504
 800f52c:	2400aeea 	.word	0x2400aeea
 800f530:	2400aee8 	.word	0x2400aee8

0800f534 <_ZN8touchgfx6Screen4drawEv>:
 800f534:	4b09      	ldr	r3, [pc, #36]	; (800f55c <_ZN8touchgfx6Screen4drawEv+0x28>)
 800f536:	b507      	push	{r0, r1, r2, lr}
 800f538:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f53c:	2100      	movs	r1, #0
 800f53e:	4b08      	ldr	r3, [pc, #32]	; (800f560 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800f540:	9100      	str	r1, [sp, #0]
 800f542:	4669      	mov	r1, sp
 800f544:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f548:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f54c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f550:	6803      	ldr	r3, [r0, #0]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	4798      	blx	r3
 800f556:	b003      	add	sp, #12
 800f558:	f85d fb04 	ldr.w	pc, [sp], #4
 800f55c:	2400aee8 	.word	0x2400aee8
 800f560:	2400aeea 	.word	0x2400aeea

0800f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f56c:	b089      	sub	sp, #36	; 0x24
 800f56e:	4680      	mov	r8, r0
 800f570:	460c      	mov	r4, r1
 800f572:	2b00      	cmp	r3, #0
 800f574:	4615      	mov	r5, r2
 800f576:	dd0e      	ble.n	800f596 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f578:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dd0a      	ble.n	800f596 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f580:	4628      	mov	r0, r5
 800f582:	f7ff ff5b 	bl	800f43c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f586:	4621      	mov	r1, r4
 800f588:	f7fe fc8e 	bl	800dea8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f58c:	69eb      	ldr	r3, [r5, #28]
 800f58e:	b928      	cbnz	r0, 800f59c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800f590:	461d      	mov	r5, r3
 800f592:	2b00      	cmp	r3, #0
 800f594:	d1f4      	bne.n	800f580 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800f596:	b009      	add	sp, #36	; 0x24
 800f598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59c:	ae04      	add	r6, sp, #16
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f000 80b5 	beq.w	800f70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	4629      	mov	r1, r5
 800f5a8:	a802      	add	r0, sp, #8
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	4798      	blx	r3
 800f5ae:	4628      	mov	r0, r5
 800f5b0:	f7ff ff60 	bl	800f474 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f5b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800f5b8:	4407      	add	r7, r0
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f7ff ff6e 	bl	800f49c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f5c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f5c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f5c8:	b23f      	sxth	r7, r7
 800f5ca:	4418      	add	r0, r3
 800f5cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f5d0:	4621      	mov	r1, r4
 800f5d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f5d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f5e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 800f5e4:	f7fb fa40 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	f7ff ff27 	bl	800f43c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f5ee:	ab06      	add	r3, sp, #24
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f5f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fb fa33 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800f602:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f606:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f60a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800f60e:	4299      	cmp	r1, r3
 800f610:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800f614:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800f618:	d10b      	bne.n	800f632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f61a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f61e:	4552      	cmp	r2, sl
 800f620:	d107      	bne.n	800f632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f622:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f626:	455a      	cmp	r2, fp
 800f628:	d103      	bne.n	800f632 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f62a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f62e:	454a      	cmp	r2, r9
 800f630:	d06d      	beq.n	800f70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f632:	f1bb 0f00 	cmp.w	fp, #0
 800f636:	dd65      	ble.n	800f704 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f638:	f1b9 0f00 	cmp.w	r9, #0
 800f63c:	dd62      	ble.n	800f704 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f63e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f642:	fa1f f08a 	uxth.w	r0, sl
 800f646:	4552      	cmp	r2, sl
 800f648:	9000      	str	r0, [sp, #0]
 800f64a:	da12      	bge.n	800f672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	9b00      	ldr	r3, [sp, #0]
 800f650:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f654:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f658:	1a9a      	subs	r2, r3, r2
 800f65a:	f8ad 1010 	strh.w	r1, [sp, #16]
 800f65e:	4631      	mov	r1, r6
 800f660:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f664:	4640      	mov	r0, r8
 800f666:	f8ad 2016 	strh.w	r2, [sp, #22]
 800f66a:	69ea      	ldr	r2, [r5, #28]
 800f66c:	f7ff ff7a 	bl	800f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f670:	9b01      	ldr	r3, [sp, #4]
 800f672:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f676:	b29f      	uxth	r7, r3
 800f678:	429a      	cmp	r2, r3
 800f67a:	da0d      	bge.n	800f698 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800f67c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f680:	1aba      	subs	r2, r7, r2
 800f682:	f8ad a012 	strh.w	sl, [sp, #18]
 800f686:	4631      	mov	r1, r6
 800f688:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f68c:	4640      	mov	r0, r8
 800f68e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f692:	69ea      	ldr	r2, [r5, #28]
 800f694:	f7ff ff66 	bl	800f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f698:	8822      	ldrh	r2, [r4, #0]
 800f69a:	445f      	add	r7, fp
 800f69c:	88a3      	ldrh	r3, [r4, #4]
 800f69e:	b2bf      	uxth	r7, r7
 800f6a0:	4413      	add	r3, r2
 800f6a2:	b23a      	sxth	r2, r7
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	b219      	sxth	r1, r3
 800f6a8:	4291      	cmp	r1, r2
 800f6aa:	dd0d      	ble.n	800f6c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800f6ac:	1bdb      	subs	r3, r3, r7
 800f6ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f6b2:	f8ad a012 	strh.w	sl, [sp, #18]
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f6bc:	4640      	mov	r0, r8
 800f6be:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f6c2:	69ea      	ldr	r2, [r5, #28]
 800f6c4:	f7ff ff4e 	bl	800f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f6c8:	88e2      	ldrh	r2, [r4, #6]
 800f6ca:	8863      	ldrh	r3, [r4, #2]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	9a00      	ldr	r2, [sp, #0]
 800f6d0:	444a      	add	r2, r9
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	fa1f f982 	uxth.w	r9, r2
 800f6d8:	b219      	sxth	r1, r3
 800f6da:	fa0f f289 	sxth.w	r2, r9
 800f6de:	428a      	cmp	r2, r1
 800f6e0:	da15      	bge.n	800f70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f6e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f6e6:	eba3 0309 	sub.w	r3, r3, r9
 800f6ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f6ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f6f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f6fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f700:	69ea      	ldr	r2, [r5, #28]
 800f702:	e001      	b.n	800f708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800f704:	69ea      	ldr	r2, [r5, #28]
 800f706:	4621      	mov	r1, r4
 800f708:	4640      	mov	r0, r8
 800f70a:	f7ff ff2b 	bl	800f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f70e:	4628      	mov	r0, r5
 800f710:	f7ff fe94 	bl	800f43c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f714:	6861      	ldr	r1, [r4, #4]
 800f716:	4602      	mov	r2, r0
 800f718:	4633      	mov	r3, r6
 800f71a:	6820      	ldr	r0, [r4, #0]
 800f71c:	c303      	stmia	r3!, {r0, r1}
 800f71e:	4611      	mov	r1, r2
 800f720:	4630      	mov	r0, r6
 800f722:	f7fb f9a1 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800f726:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f77f af33 	ble.w	800f596 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f730:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f734:	2b00      	cmp	r3, #0
 800f736:	f77f af2e 	ble.w	800f596 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f73a:	4628      	mov	r0, r5
 800f73c:	f7ff fe9a 	bl	800f474 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f740:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f744:	1a18      	subs	r0, r3, r0
 800f746:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f74a:	4628      	mov	r0, r5
 800f74c:	f7ff fea6 	bl	800f49c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f750:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f754:	4631      	mov	r1, r6
 800f756:	1a18      	subs	r0, r3, r0
 800f758:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f75c:	4628      	mov	r0, r5
 800f75e:	682b      	ldr	r3, [r5, #0]
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	4798      	blx	r3
 800f764:	e717      	b.n	800f596 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800f766 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800f766:	b570      	push	{r4, r5, r6, lr}
 800f768:	1d06      	adds	r6, r0, #4
 800f76a:	b086      	sub	sp, #24
 800f76c:	460c      	mov	r4, r1
 800f76e:	2300      	movs	r3, #0
 800f770:	4631      	mov	r1, r6
 800f772:	4605      	mov	r5, r0
 800f774:	a802      	add	r0, sp, #8
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	f7ff fc9e 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f77c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f780:	8822      	ldrh	r2, [r4, #0]
 800f782:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800f786:	1ad2      	subs	r2, r2, r3
 800f788:	8863      	ldrh	r3, [r4, #2]
 800f78a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f78e:	1a5b      	subs	r3, r3, r1
 800f790:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f794:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f798:	aa01      	add	r2, sp, #4
 800f79a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f7a4:	a904      	add	r1, sp, #16
 800f7a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f7aa:	f7fb fa35 	bl	800ac18 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800f7ae:	9a01      	ldr	r2, [sp, #4]
 800f7b0:	b11a      	cbz	r2, 800f7ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800f7b2:	4621      	mov	r1, r4
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f7ff fed5 	bl	800f564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f7ba:	b006      	add	sp, #24
 800f7bc:	bd70      	pop	{r4, r5, r6, pc}

0800f7be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800f7be:	4602      	mov	r2, r0
 800f7c0:	b530      	push	{r4, r5, lr}
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	b085      	sub	sp, #20
 800f7c6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	466b      	mov	r3, sp
 800f7ce:	6851      	ldr	r1, [r2, #4]
 800f7d0:	c303      	stmia	r3!, {r0, r1}
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	4668      	mov	r0, sp
 800f7d6:	f7fb f947 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 800f7da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f7de:	b12b      	cbz	r3, 800f7ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800f7e0:	4669      	mov	r1, sp
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f7ff ffbf 	bl	800f766 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800f7e8:	b005      	add	sp, #20
 800f7ea:	bd30      	pop	{r4, r5, pc}
 800f7ec:	3404      	adds	r4, #4
 800f7ee:	a802      	add	r0, sp, #8
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	f7ff fc61 	bl	800f0b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f7f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800f7fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f7fe:	4669      	mov	r1, sp
 800f800:	4620      	mov	r0, r4
 800f802:	1a9b      	subs	r3, r3, r2
 800f804:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f808:	f8ad 3000 	strh.w	r3, [sp]
 800f80c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f810:	1a9b      	subs	r3, r3, r2
 800f812:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f816:	f7fb f9c6 	bl	800aba6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800f81a:	e7e5      	b.n	800f7e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800f81c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800f81c:	460b      	mov	r3, r1
 800f81e:	680a      	ldr	r2, [r1, #0]
 800f820:	1d01      	adds	r1, r0, #4
 800f822:	6992      	ldr	r2, [r2, #24]
 800f824:	4618      	mov	r0, r3
 800f826:	4710      	bx	r2

0800f828 <_ZN8touchgfx12TextProviderC1Ev>:
 800f828:	b538      	push	{r3, r4, r5, lr}
 800f82a:	2500      	movs	r5, #0
 800f82c:	2302      	movs	r3, #2
 800f82e:	4604      	mov	r4, r0
 800f830:	220e      	movs	r2, #14
 800f832:	7403      	strb	r3, [r0, #16]
 800f834:	4629      	mov	r1, r5
 800f836:	6145      	str	r5, [r0, #20]
 800f838:	7605      	strb	r5, [r0, #24]
 800f83a:	83c5      	strh	r5, [r0, #30]
 800f83c:	8405      	strh	r5, [r0, #32]
 800f83e:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f840:	8705      	strh	r5, [r0, #56]	; 0x38
 800f842:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800f844:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800f848:	e9c0 5500 	strd	r5, r5, [r0]
 800f84c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800f850:	304c      	adds	r0, #76	; 0x4c
 800f852:	f009 fcff 	bl	8019254 <memset>
 800f856:	2301      	movs	r3, #1
 800f858:	4620      	mov	r0, r4
 800f85a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800f85e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800f862:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800f866:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800f86a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800f86e:	f7f2 ffcf 	bl	8002810 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800f872:	4620      	mov	r0, r4
 800f874:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f878 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800f878:	b508      	push	{r3, lr}
 800f87a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800f87c:	b92b      	cbnz	r3, 800f88a <_ZN8touchgfx12TextProvider11endOfStringEv+0x12>
 800f87e:	4b07      	ldr	r3, [pc, #28]	; (800f89c <_ZN8touchgfx12TextProvider11endOfStringEv+0x24>)
 800f880:	21c0      	movs	r1, #192	; 0xc0
 800f882:	4a07      	ldr	r2, [pc, #28]	; (800f8a0 <_ZN8touchgfx12TextProvider11endOfStringEv+0x28>)
 800f884:	4807      	ldr	r0, [pc, #28]	; (800f8a4 <_ZN8touchgfx12TextProvider11endOfStringEv+0x2c>)
 800f886:	f009 fc59 	bl	801913c <__assert_func>
 800f88a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800f88c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f890:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 800f892:	fab0 f080 	clz	r0, r0
 800f896:	0940      	lsrs	r0, r0, #5
 800f898:	bd08      	pop	{r3, pc}
 800f89a:	bf00      	nop
 800f89c:	0801ae40 	.word	0x0801ae40
 800f8a0:	0801c4ff 	.word	0x0801c4ff
 800f8a4:	0801af20 	.word	0x0801af20

0800f8a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800f8a8:	b530      	push	{r4, r5, lr}
 800f8aa:	2500      	movs	r5, #0
 800f8ac:	2401      	movs	r4, #1
 800f8ae:	6843      	ldr	r3, [r0, #4]
 800f8b0:	b913      	cbnz	r3, 800f8b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800f8b2:	6803      	ldr	r3, [r0, #0]
 800f8b4:	b313      	cbz	r3, 800f8fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f8b6:	6043      	str	r3, [r0, #4]
 800f8b8:	7e03      	ldrb	r3, [r0, #24]
 800f8ba:	b143      	cbz	r3, 800f8ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800f8bc:	6943      	ldr	r3, [r0, #20]
 800f8be:	b12b      	cbz	r3, 800f8cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f8c0:	881a      	ldrh	r2, [r3, #0]
 800f8c2:	b11a      	cbz	r2, 800f8cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f8c4:	1c9a      	adds	r2, r3, #2
 800f8c6:	6142      	str	r2, [r0, #20]
 800f8c8:	8818      	ldrh	r0, [r3, #0]
 800f8ca:	bd30      	pop	{r4, r5, pc}
 800f8cc:	7605      	strb	r5, [r0, #24]
 800f8ce:	6843      	ldr	r3, [r0, #4]
 800f8d0:	8819      	ldrh	r1, [r3, #0]
 800f8d2:	b199      	cbz	r1, 800f8fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f8d4:	1c9a      	adds	r2, r3, #2
 800f8d6:	2902      	cmp	r1, #2
 800f8d8:	6042      	str	r2, [r0, #4]
 800f8da:	d1f5      	bne.n	800f8c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800f8dc:	7c03      	ldrb	r3, [r0, #16]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d8e5      	bhi.n	800f8ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f8e2:	1c5a      	adds	r2, r3, #1
 800f8e4:	3302      	adds	r3, #2
 800f8e6:	7402      	strb	r2, [r0, #16]
 800f8e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f8ec:	6143      	str	r3, [r0, #20]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d0dd      	beq.n	800f8ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d0da      	beq.n	800f8ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f8f8:	7604      	strb	r4, [r0, #24]
 800f8fa:	e7d8      	b.n	800f8ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	e7e4      	b.n	800f8ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800f900:	6001      	str	r1, [r0, #0]
 800f902:	2100      	movs	r1, #0
 800f904:	b430      	push	{r4, r5}
 800f906:	6041      	str	r1, [r0, #4]
 800f908:	6815      	ldr	r5, [r2, #0]
 800f90a:	6085      	str	r5, [r0, #8]
 800f90c:	6852      	ldr	r2, [r2, #4]
 800f90e:	6443      	str	r3, [r0, #68]	; 0x44
 800f910:	9b02      	ldr	r3, [sp, #8]
 800f912:	60c2      	str	r2, [r0, #12]
 800f914:	7401      	strb	r1, [r0, #16]
 800f916:	6141      	str	r1, [r0, #20]
 800f918:	7601      	strb	r1, [r0, #24]
 800f91a:	8701      	strh	r1, [r0, #56]	; 0x38
 800f91c:	8401      	strh	r1, [r0, #32]
 800f91e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800f922:	6483      	str	r3, [r0, #72]	; 0x48
 800f924:	bc30      	pop	{r4, r5}
 800f926:	f7f2 bf73 	b.w	8002810 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800f92a <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800f92a:	b408      	push	{r3}
 800f92c:	b510      	push	{r4, lr}
 800f92e:	b085      	sub	sp, #20
 800f930:	ac07      	add	r4, sp, #28
 800f932:	f854 3b04 	ldr.w	r3, [r4], #4
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	4613      	mov	r3, r2
 800f93a:	4622      	mov	r2, r4
 800f93c:	9403      	str	r4, [sp, #12]
 800f93e:	f7ff ffdf 	bl	800f900 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f942:	b005      	add	sp, #20
 800f944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f948:	b001      	add	sp, #4
 800f94a:	4770      	bx	lr

0800f94c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94e:	4605      	mov	r5, r0
 800f950:	4608      	mov	r0, r1
 800f952:	b1f1      	cbz	r1, 800f992 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800f954:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800f958:	460b      	mov	r3, r1
 800f95a:	f101 0708 	add.w	r7, r1, #8
 800f95e:	4622      	mov	r2, r4
 800f960:	6818      	ldr	r0, [r3, #0]
 800f962:	3308      	adds	r3, #8
 800f964:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f968:	4626      	mov	r6, r4
 800f96a:	42bb      	cmp	r3, r7
 800f96c:	c603      	stmia	r6!, {r0, r1}
 800f96e:	4634      	mov	r4, r6
 800f970:	d1f6      	bne.n	800f960 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f972:	6818      	ldr	r0, [r3, #0]
 800f974:	6030      	str	r0, [r6, #0]
 800f976:	4610      	mov	r0, r2
 800f978:	889b      	ldrh	r3, [r3, #4]
 800f97a:	80b3      	strh	r3, [r6, #4]
 800f97c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800f980:	015b      	lsls	r3, r3, #5
 800f982:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f986:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800f98a:	430b      	orrs	r3, r1
 800f98c:	425b      	negs	r3, r3
 800f98e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800f992:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f994 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	460c      	mov	r4, r1
 800f998:	6811      	ldr	r1, [r2, #0]
 800f99a:	4610      	mov	r0, r2
 800f99c:	68cd      	ldr	r5, [r1, #12]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	47a8      	blx	r5
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	bf08      	it	eq
 800f9a6:	4620      	moveq	r0, r4
 800f9a8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f9ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	4615      	mov	r5, r2
 800f9b2:	4608      	mov	r0, r1
 800f9b4:	b93a      	cbnz	r2, 800f9c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800f9b6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f9ba:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800f9be:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f9ca:	8893      	ldrh	r3, [r2, #4]
 800f9cc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800f9d0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f9d4:	79ee      	ldrb	r6, [r5, #7]
 800f9d6:	4316      	orrs	r6, r2
 800f9d8:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 800f9dc:	189a      	adds	r2, r3, r2
 800f9de:	b2b7      	uxth	r7, r6
 800f9e0:	b291      	uxth	r1, r2
 800f9e2:	291d      	cmp	r1, #29
 800f9e4:	f200 8084 	bhi.w	800faf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	10f6      	asrs	r6, r6, #3
 800f9ec:	408a      	lsls	r2, r1
 800f9ee:	4978      	ldr	r1, [pc, #480]	; (800fbd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 800f9f0:	420a      	tst	r2, r1
 800f9f2:	d12e      	bne.n	800fa52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 800f9f4:	f412 7f60 	tst.w	r2, #896	; 0x380
 800f9f8:	d07a      	beq.n	800faf0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800f9fa:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800f9fe:	462b      	mov	r3, r5
 800fa00:	f105 0e08 	add.w	lr, r5, #8
 800fa04:	4615      	mov	r5, r2
 800fa06:	6818      	ldr	r0, [r3, #0]
 800fa08:	3308      	adds	r3, #8
 800fa0a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800fa0e:	4694      	mov	ip, r2
 800fa10:	4573      	cmp	r3, lr
 800fa12:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800fa16:	4662      	mov	r2, ip
 800fa18:	d1f5      	bne.n	800fa06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800fa1a:	6818      	ldr	r0, [r3, #0]
 800fa1c:	f8cc 0000 	str.w	r0, [ip]
 800fa20:	889b      	ldrh	r3, [r3, #4]
 800fa22:	f8ac 3004 	strh.w	r3, [ip, #4]
 800fa26:	b2b3      	uxth	r3, r6
 800fa28:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800fa2c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800fa30:	1aca      	subs	r2, r1, r3
 800fa32:	1bcf      	subs	r7, r1, r7
 800fa34:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800fa38:	b292      	uxth	r2, r2
 800fa3a:	1afb      	subs	r3, r7, r3
 800fa3c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800fa40:	10d2      	asrs	r2, r2, #3
 800fa42:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800fa46:	4302      	orrs	r2, r0
 800fa48:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800fa4c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800fa50:	e7b7      	b.n	800f9c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800fa52:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fa54:	b92b      	cbnz	r3, 800fa62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 800fa56:	4b5f      	ldr	r3, [pc, #380]	; (800fbd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 800fa58:	21c0      	movs	r1, #192	; 0xc0
 800fa5a:	4a5f      	ldr	r2, [pc, #380]	; (800fbd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 800fa5c:	485f      	ldr	r0, [pc, #380]	; (800fbdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 800fa5e:	f009 fb6d 	bl	801913c <__assert_func>
 800fa62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800fa64:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fa68:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800fa6a:	f640 6333 	movw	r3, #3635	; 0xe33
 800fa6e:	4299      	cmp	r1, r3
 800fa70:	d110      	bne.n	800fa94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800fa72:	6803      	ldr	r3, [r0, #0]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	4798      	blx	r3
 800fa78:	7b41      	ldrb	r1, [r0, #13]
 800fa7a:	00cb      	lsls	r3, r1, #3
 800fa7c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fa80:	7a03      	ldrb	r3, [r0, #8]
 800fa82:	0648      	lsls	r0, r1, #25
 800fa84:	ea43 0302 	orr.w	r3, r3, r2
 800fa88:	bf44      	itt	mi
 800fa8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fa8e:	b21b      	sxthmi	r3, r3
 800fa90:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fa94:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800fa98:	462a      	mov	r2, r5
 800fa9a:	f105 0c08 	add.w	ip, r5, #8
 800fa9e:	443b      	add	r3, r7
 800faa0:	4433      	add	r3, r6
 800faa2:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4635      	mov	r5, r6
 800faaa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800faae:	6810      	ldr	r0, [r2, #0]
 800fab0:	3208      	adds	r2, #8
 800fab2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800fab6:	4637      	mov	r7, r6
 800fab8:	4562      	cmp	r2, ip
 800faba:	c703      	stmia	r7!, {r0, r1}
 800fabc:	463e      	mov	r6, r7
 800fabe:	d1f6      	bne.n	800faae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800fac0:	6810      	ldr	r0, [r2, #0]
 800fac2:	6038      	str	r0, [r7, #0]
 800fac4:	8892      	ldrh	r2, [r2, #4]
 800fac6:	80ba      	strh	r2, [r7, #4]
 800fac8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800facc:	10db      	asrs	r3, r3, #3
 800face:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fada:	4313      	orrs	r3, r2
 800fadc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800fae0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fae4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800fae8:	1a9b      	subs	r3, r3, r2
 800faea:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800faee:	e768      	b.n	800f9c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800faf0:	f023 0204 	bic.w	r2, r3, #4
 800faf4:	f640 611b 	movw	r1, #3611	; 0xe1b
 800faf8:	428a      	cmp	r2, r1
 800fafa:	d003      	beq.n	800fb04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800fafc:	f640 621d 	movw	r2, #3613	; 0xe1d
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d120      	bne.n	800fb46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 800fb04:	3b01      	subs	r3, #1
 800fb06:	4602      	mov	r2, r0
 800fb08:	4629      	mov	r1, r5
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	f7ff ff41 	bl	800f994 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800fb12:	7b41      	ldrb	r1, [r0, #13]
 800fb14:	00cb      	lsls	r3, r1, #3
 800fb16:	0649      	lsls	r1, r1, #25
 800fb18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fb1c:	7a03      	ldrb	r3, [r0, #8]
 800fb1e:	ea43 0302 	orr.w	r3, r3, r2
 800fb22:	bf44      	itt	mi
 800fb24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fb28:	b21b      	sxthmi	r3, r3
 800fb2a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fb2e:	7b6b      	ldrb	r3, [r5, #13]
 800fb30:	7aaa      	ldrb	r2, [r5, #10]
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	115a      	asrs	r2, r3, #5
 800fb3c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800fb40:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800fb44:	e035      	b.n	800fbb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 800fb46:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800fb4a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800fb4e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800fb52:	7a2a      	ldrb	r2, [r5, #8]
 800fb54:	ea42 0201 	orr.w	r2, r2, r1
 800fb58:	f640 6109 	movw	r1, #3593	; 0xe09
 800fb5c:	bf1c      	itt	ne
 800fb5e:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800fb62:	b212      	sxthne	r2, r2
 800fb64:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800fb68:	f023 0210 	bic.w	r2, r3, #16
 800fb6c:	428a      	cmp	r2, r1
 800fb6e:	d003      	beq.n	800fb78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 800fb70:	f640 6213 	movw	r2, #3603	; 0xe13
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d129      	bne.n	800fbcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 800fb78:	7b6e      	ldrb	r6, [r5, #13]
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	0076      	lsls	r6, r6, #1
 800fb7e:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800fb82:	7aae      	ldrb	r6, [r5, #10]
 800fb84:	4316      	orrs	r6, r2
 800fb86:	f640 6213 	movw	r2, #3603	; 0xe13
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	4620      	mov	r0, r4
 800fb90:	bf16      	itet	ne
 800fb92:	f103 33ff 	addne.w	r3, r3, #4294967295
 800fb96:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800fb9a:	b29b      	uxthne	r3, r3
 800fb9c:	f7ff fefa 	bl	800f994 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800fba0:	7b43      	ldrb	r3, [r0, #13]
 800fba2:	7a82      	ldrb	r2, [r0, #10]
 800fba4:	005b      	lsls	r3, r3, #1
 800fba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	1af6      	subs	r6, r6, r3
 800fbae:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800fbb2:	7b69      	ldrb	r1, [r5, #13]
 800fbb4:	00cb      	lsls	r3, r1, #3
 800fbb6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fbba:	7a2b      	ldrb	r3, [r5, #8]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	064a      	lsls	r2, r1, #25
 800fbc0:	bf44      	itt	mi
 800fbc2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fbc6:	b21b      	sxthmi	r3, r3
 800fbc8:	1bdb      	subs	r3, r3, r7
 800fbca:	e73f      	b.n	800fa4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	e7b7      	b.n	800fb40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 800fbd0:	3fc00079 	.word	0x3fc00079
 800fbd4:	0801ae40 	.word	0x0801ae40
 800fbd8:	0801c4ff 	.word	0x0801c4ff
 800fbdc:	0801af20 	.word	0x0801af20

0800fbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800fbe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	b942      	cbnz	r2, 800fbfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800fbe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbec:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800fbf0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800fbf4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800fbf8:	e046      	b.n	800fc88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800fbfa:	7b51      	ldrb	r1, [r2, #13]
 800fbfc:	8893      	ldrh	r3, [r2, #4]
 800fbfe:	010f      	lsls	r7, r1, #4
 800fc00:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800fc04:	79d7      	ldrb	r7, [r2, #7]
 800fc06:	4307      	orrs	r7, r0
 800fc08:	2f04      	cmp	r7, #4
 800fc0a:	b2bd      	uxth	r5, r7
 800fc0c:	bfcc      	ite	gt
 800fc0e:	08bf      	lsrgt	r7, r7, #2
 800fc10:	2701      	movle	r7, #1
 800fc12:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800fc16:	f200 80ab 	bhi.w	800fd70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 800fc1a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800fc1e:	4283      	cmp	r3, r0
 800fc20:	d216      	bcs.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fc22:	f240 605b 	movw	r0, #1627	; 0x65b
 800fc26:	4283      	cmp	r3, r0
 800fc28:	d859      	bhi.n	800fcde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 800fc2a:	f240 6057 	movw	r0, #1623	; 0x657
 800fc2e:	4283      	cmp	r3, r0
 800fc30:	d20e      	bcs.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fc32:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800fc36:	d24a      	bcs.n	800fcce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 800fc38:	f240 604e 	movw	r0, #1614	; 0x64e
 800fc3c:	4283      	cmp	r3, r0
 800fc3e:	d207      	bcs.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fc40:	f240 601a 	movw	r0, #1562	; 0x61a
 800fc44:	4283      	cmp	r3, r0
 800fc46:	d02a      	beq.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fc48:	d821      	bhi.n	800fc8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 800fc4a:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800fc4e:	d35b      	bcc.n	800fd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fc50:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800fc54:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fc58:	f040 80d0 	bne.w	800fdfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800fc5c:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800fc60:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fc64:	f040 80ca 	bne.w	800fdfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800fc68:	00cb      	lsls	r3, r1, #3
 800fc6a:	0649      	lsls	r1, r1, #25
 800fc6c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fc70:	7a13      	ldrb	r3, [r2, #8]
 800fc72:	ea43 0300 	orr.w	r3, r3, r0
 800fc76:	bf44      	itt	mi
 800fc78:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fc7c:	b21b      	sxthmi	r3, r3
 800fc7e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fc82:	1b5d      	subs	r5, r3, r5
 800fc84:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fc88:	4610      	mov	r0, r2
 800fc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc8e:	f240 604b 	movw	r0, #1611	; 0x64b
 800fc92:	4283      	cmp	r3, r0
 800fc94:	d338      	bcc.n	800fd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fc96:	f240 604c 	movw	r0, #1612	; 0x64c
 800fc9a:	4283      	cmp	r3, r0
 800fc9c:	d9d8      	bls.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fc9e:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800fca2:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800fca6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fcaa:	f040 80f2 	bne.w	800fe92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800fcae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fcb2:	f040 80ee 	bne.w	800fe92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800fcb6:	00cb      	lsls	r3, r1, #3
 800fcb8:	064e      	lsls	r6, r1, #25
 800fcba:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fcbe:	7a13      	ldrb	r3, [r2, #8]
 800fcc0:	ea43 0300 	orr.w	r3, r3, r0
 800fcc4:	bf44      	itt	mi
 800fcc6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fcca:	b21b      	sxthmi	r3, r3
 800fccc:	e7d9      	b.n	800fc82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 800fcce:	f240 6054 	movw	r0, #1620	; 0x654
 800fcd2:	4283      	cmp	r3, r0
 800fcd4:	d8e3      	bhi.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fcd6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800fcda:	d9e0      	bls.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fcdc:	e7b8      	b.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fcde:	f240 6074 	movw	r0, #1652	; 0x674
 800fce2:	4283      	cmp	r3, r0
 800fce4:	d0b4      	beq.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fce6:	d82d      	bhi.n	800fd44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 800fce8:	f240 605e 	movw	r0, #1630	; 0x65e
 800fcec:	4283      	cmp	r3, r0
 800fcee:	d804      	bhi.n	800fcfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 800fcf0:	f240 605d 	movw	r0, #1629	; 0x65d
 800fcf4:	4283      	cmp	r3, r0
 800fcf6:	d3d2      	bcc.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fcf8:	e7aa      	b.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fcfa:	f240 605f 	movw	r0, #1631	; 0x65f
 800fcfe:	4283      	cmp	r3, r0
 800fd00:	d0cd      	beq.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fd02:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800fd06:	d0a3      	beq.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fd08:	00cb      	lsls	r3, r1, #3
 800fd0a:	0649      	lsls	r1, r1, #25
 800fd0c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800fd10:	7a13      	ldrb	r3, [r2, #8]
 800fd12:	ea43 0300 	orr.w	r3, r3, r0
 800fd16:	bf44      	itt	mi
 800fd18:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fd1c:	b21b      	sxthmi	r3, r3
 800fd1e:	1b5d      	subs	r5, r3, r5
 800fd20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fd24:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fd28:	7b53      	ldrb	r3, [r2, #13]
 800fd2a:	015b      	lsls	r3, r3, #5
 800fd2c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800fd30:	7993      	ldrb	r3, [r2, #6]
 800fd32:	430b      	orrs	r3, r1
 800fd34:	2105      	movs	r1, #5
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	fb93 f3f1 	sdiv	r3, r3, r1
 800fd3c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800fd40:	440b      	add	r3, r1
 800fd42:	e757      	b.n	800fbf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800fd44:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800fd48:	4283      	cmp	r3, r0
 800fd4a:	d809      	bhi.n	800fd60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 800fd4c:	f240 60df 	movw	r0, #1759	; 0x6df
 800fd50:	4283      	cmp	r3, r0
 800fd52:	f4bf af7d 	bcs.w	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fd56:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800fd5a:	2b05      	cmp	r3, #5
 800fd5c:	d8d4      	bhi.n	800fd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fd5e:	e777      	b.n	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fd60:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800fd64:	4283      	cmp	r3, r0
 800fd66:	d09a      	beq.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fd68:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800fd6c:	4283      	cmp	r3, r0
 800fd6e:	e7ca      	b.n	800fd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 800fd70:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800fd74:	d22b      	bcs.n	800fdce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 800fd76:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800fd7a:	4283      	cmp	r3, r0
 800fd7c:	d28f      	bcs.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fd7e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fd82:	4283      	cmp	r3, r0
 800fd84:	d816      	bhi.n	800fdb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 800fd86:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800fd8a:	4283      	cmp	r3, r0
 800fd8c:	f4bf af60 	bcs.w	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fd90:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800fd94:	4283      	cmp	r3, r0
 800fd96:	d80a      	bhi.n	800fdae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 800fd98:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800fd9c:	4283      	cmp	r3, r0
 800fd9e:	f4bf af57 	bcs.w	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fda2:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800fda6:	4283      	cmp	r3, r0
 800fda8:	f43f af79 	beq.w	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fdac:	e7ac      	b.n	800fd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fdae:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800fdb2:	e7f8      	b.n	800fda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 800fdb4:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800fdb8:	4283      	cmp	r3, r0
 800fdba:	d802      	bhi.n	800fdc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 800fdbc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fdc0:	e798      	b.n	800fcf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 800fdc2:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800fdc6:	4283      	cmp	r3, r0
 800fdc8:	f47f af42 	bne.w	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fdcc:	e767      	b.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fdce:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800fdd2:	4283      	cmp	r3, r0
 800fdd4:	f43f af63 	beq.w	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fdd8:	d802      	bhi.n	800fde0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 800fdda:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800fdde:	e7f2      	b.n	800fdc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 800fde0:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800fde4:	4283      	cmp	r3, r0
 800fde6:	d805      	bhi.n	800fdf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 800fde8:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800fdec:	4283      	cmp	r3, r0
 800fdee:	f4ff af2f 	bcc.w	800fc50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fdf2:	e754      	b.n	800fc9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fdf4:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800fdf8:	4283      	cmp	r3, r0
 800fdfa:	e7af      	b.n	800fd5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 800fdfc:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800fe00:	4617      	mov	r7, r2
 800fe02:	f102 0808 	add.w	r8, r2, #8
 800fe06:	4666      	mov	r6, ip
 800fe08:	6838      	ldr	r0, [r7, #0]
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fe10:	46e6      	mov	lr, ip
 800fe12:	4547      	cmp	r7, r8
 800fe14:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800fe18:	46f4      	mov	ip, lr
 800fe1a:	d1f5      	bne.n	800fe08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 800fe1c:	6838      	ldr	r0, [r7, #0]
 800fe1e:	f8ce 0000 	str.w	r0, [lr]
 800fe22:	88b9      	ldrh	r1, [r7, #4]
 800fe24:	f8ae 1004 	strh.w	r1, [lr, #4]
 800fe28:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fe2c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fe30:	d009      	beq.n	800fe46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800fe32:	7b51      	ldrb	r1, [r2, #13]
 800fe34:	7992      	ldrb	r2, [r2, #6]
 800fe36:	0149      	lsls	r1, r1, #5
 800fe38:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800fe3c:	4311      	orrs	r1, r2
 800fe3e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fe42:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fe46:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fe4a:	d00d      	beq.n	800fe68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 800fe4c:	442b      	add	r3, r5
 800fe4e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fe58:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fe5c:	10db      	asrs	r3, r3, #3
 800fe5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe62:	4313      	orrs	r3, r2
 800fe64:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fe68:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fe6c:	00cb      	lsls	r3, r1, #3
 800fe6e:	064f      	lsls	r7, r1, #25
 800fe70:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fe74:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fe78:	ea43 0302 	orr.w	r3, r3, r2
 800fe7c:	bf44      	itt	mi
 800fe7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fe82:	b21b      	sxthmi	r3, r3
 800fe84:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fe88:	1b5d      	subs	r5, r3, r5
 800fe8a:	4632      	mov	r2, r6
 800fe8c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fe90:	e6fa      	b.n	800fc88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800fe92:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800fe96:	4694      	mov	ip, r2
 800fe98:	f102 0908 	add.w	r9, r2, #8
 800fe9c:	4676      	mov	r6, lr
 800fe9e:	f8dc 0000 	ldr.w	r0, [ip]
 800fea2:	f10c 0c08 	add.w	ip, ip, #8
 800fea6:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 800feaa:	46f0      	mov	r8, lr
 800feac:	45cc      	cmp	ip, r9
 800feae:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800feb2:	46c6      	mov	lr, r8
 800feb4:	d1f3      	bne.n	800fe9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 800feb6:	f8dc 0000 	ldr.w	r0, [ip]
 800feba:	f8c8 0000 	str.w	r0, [r8]
 800febe:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800fec2:	f8a8 1004 	strh.w	r1, [r8, #4]
 800fec6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800feca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fece:	d009      	beq.n	800fee4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 800fed0:	7b51      	ldrb	r1, [r2, #13]
 800fed2:	7992      	ldrb	r2, [r2, #6]
 800fed4:	0149      	lsls	r1, r1, #5
 800fed6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800feda:	4311      	orrs	r1, r2
 800fedc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fee0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fee4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fee8:	d00d      	beq.n	800ff06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 800feea:	1bdb      	subs	r3, r3, r7
 800feec:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fef6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fefa:	10db      	asrs	r3, r3, #3
 800fefc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff00:	4313      	orrs	r3, r2
 800ff02:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800ff06:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ff0a:	00cb      	lsls	r3, r1, #3
 800ff0c:	0648      	lsls	r0, r1, #25
 800ff0e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800ff12:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800ff16:	ea43 0302 	orr.w	r3, r3, r2
 800ff1a:	bf44      	itt	mi
 800ff1c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ff20:	b21b      	sxthmi	r3, r3
 800ff22:	e7b1      	b.n	800fe88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0800ff24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff28:	461e      	mov	r6, r3
 800ff2a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	4617      	mov	r7, r2
 800ff30:	b92b      	cbnz	r3, 800ff3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 800ff32:	4b25      	ldr	r3, [pc, #148]	; (800ffc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 800ff34:	21c0      	movs	r1, #192	; 0xc0
 800ff36:	4a25      	ldr	r2, [pc, #148]	; (800ffcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 800ff38:	4825      	ldr	r0, [pc, #148]	; (800ffd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 800ff3a:	f009 f8ff 	bl	801913c <__assert_func>
 800ff3e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800ff40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ff44:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800ff48:	f7f2 fc20 	bl	800278c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	b918      	cbnz	r0, 800ff58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 800ff50:	6030      	str	r0, [r6, #0]
 800ff52:	4628      	mov	r0, r5
 800ff54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	4601      	mov	r1, r0
 800ff5c:	4638      	mov	r0, r7
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	4798      	blx	r3
 800ff62:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800ff66:	4602      	mov	r2, r0
 800ff68:	6030      	str	r0, [r6, #0]
 800ff6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff6e:	d213      	bcs.n	800ff98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 800ff70:	4643      	mov	r3, r8
 800ff72:	4639      	mov	r1, r7
 800ff74:	4620      	mov	r0, r4
 800ff76:	f7ff fe33 	bl	800fbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ff7a:	6030      	str	r0, [r6, #0]
 800ff7c:	6833      	ldr	r3, [r6, #0]
 800ff7e:	b143      	cbz	r3, 800ff92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 800ff80:	7b5a      	ldrb	r2, [r3, #13]
 800ff82:	7a9b      	ldrb	r3, [r3, #10]
 800ff84:	0052      	lsls	r2, r2, #1
 800ff86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	bf0c      	ite	eq
 800ff8e:	2301      	moveq	r3, #1
 800ff90:	2300      	movne	r3, #0
 800ff92:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800ff96:	e7dc      	b.n	800ff52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 800ff98:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	2b7f      	cmp	r3, #127	; 0x7f
 800ffa0:	d804      	bhi.n	800ffac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 800ffa2:	4639      	mov	r1, r7
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f7ff fd01 	bl	800f9ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800ffaa:	e7e6      	b.n	800ff7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800ffac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d0e3      	beq.n	800ff7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800ffb4:	f640 1302 	movw	r3, #2306	; 0x902
 800ffb8:	429d      	cmp	r5, r3
 800ffba:	d1df      	bne.n	800ff7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800ffbc:	4601      	mov	r1, r0
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff fcc4 	bl	800f94c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800ffc4:	e7d9      	b.n	800ff7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800ffc6:	bf00      	nop
 800ffc8:	0801ae40 	.word	0x0801ae40
 800ffcc:	0801c4ff 	.word	0x0801c4ff
 800ffd0:	0801af20 	.word	0x0801af20

0800ffd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800ffd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffd8:	461e      	mov	r6, r3
 800ffda:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800ffdc:	4604      	mov	r4, r0
 800ffde:	4617      	mov	r7, r2
 800ffe0:	b92b      	cbnz	r3, 800ffee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 800ffe2:	4b26      	ldr	r3, [pc, #152]	; (801007c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 800ffe4:	21c0      	movs	r1, #192	; 0xc0
 800ffe6:	4a26      	ldr	r2, [pc, #152]	; (8010080 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 800ffe8:	4826      	ldr	r0, [pc, #152]	; (8010084 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 800ffea:	f009 f8a7 	bl	801913c <__assert_func>
 800ffee:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fff0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fff4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800fff8:	f7f2 fbc8 	bl	800278c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fffc:	4605      	mov	r5, r0
 800fffe:	b918      	cbnz	r0, 8010008 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8010000:	6030      	str	r0, [r6, #0]
 8010002:	4628      	mov	r0, r5
 8010004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	4601      	mov	r1, r0
 801000c:	4638      	mov	r0, r7
 801000e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8010012:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010016:	47c8      	blx	r9
 8010018:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801001c:	4602      	mov	r2, r0
 801001e:	6030      	str	r0, [r6, #0]
 8010020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010024:	d213      	bcs.n	801004e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8010026:	4643      	mov	r3, r8
 8010028:	4639      	mov	r1, r7
 801002a:	4620      	mov	r0, r4
 801002c:	f7ff fdd8 	bl	800fbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010030:	6030      	str	r0, [r6, #0]
 8010032:	6833      	ldr	r3, [r6, #0]
 8010034:	b143      	cbz	r3, 8010048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8010036:	7b5a      	ldrb	r2, [r3, #13]
 8010038:	7a9b      	ldrb	r3, [r3, #10]
 801003a:	0052      	lsls	r2, r2, #1
 801003c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010040:	4313      	orrs	r3, r2
 8010042:	bf0c      	ite	eq
 8010044:	2301      	moveq	r3, #1
 8010046:	2300      	movne	r3, #0
 8010048:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801004c:	e7d9      	b.n	8010002 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801004e:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8010052:	b29b      	uxth	r3, r3
 8010054:	2b7f      	cmp	r3, #127	; 0x7f
 8010056:	d804      	bhi.n	8010062 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8010058:	4639      	mov	r1, r7
 801005a:	4620      	mov	r0, r4
 801005c:	f7ff fca6 	bl	800f9ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8010060:	e7e6      	b.n	8010030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8010062:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010066:	2b00      	cmp	r3, #0
 8010068:	d0e3      	beq.n	8010032 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801006a:	f640 1302 	movw	r3, #2306	; 0x902
 801006e:	429d      	cmp	r5, r3
 8010070:	d1df      	bne.n	8010032 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8010072:	4601      	mov	r1, r0
 8010074:	4620      	mov	r0, r4
 8010076:	f7ff fc69 	bl	800f94c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801007a:	e7d9      	b.n	8010030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801007c:	0801ae40 	.word	0x0801ae40
 8010080:	0801c4ff 	.word	0x0801c4ff
 8010084:	0801af20 	.word	0x0801af20

08010088 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8010088:	b510      	push	{r4, lr}
 801008a:	4604      	mov	r4, r0
 801008c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8010090:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010092:	b9d9      	cbnz	r1, 80100cc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8010094:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010096:	2b0a      	cmp	r3, #10
 8010098:	d037      	beq.n	801010a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801009a:	4620      	mov	r0, r4
 801009c:	f7ff fc04 	bl	800f8a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80100a0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80100a2:	2b09      	cmp	r3, #9
 80100a4:	d906      	bls.n	80100b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 80100a6:	4b19      	ldr	r3, [pc, #100]	; (801010c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 80100a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80100ac:	4a18      	ldr	r2, [pc, #96]	; (8010110 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 80100ae:	4819      	ldr	r0, [pc, #100]	; (8010114 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 80100b0:	f009 f844 	bl	801913c <__assert_func>
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	8722      	strh	r2, [r4, #56]	; 0x38
 80100b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80100ba:	4413      	add	r3, r2
 80100bc:	b29b      	uxth	r3, r3
 80100be:	2b09      	cmp	r3, #9
 80100c0:	bf88      	it	hi
 80100c2:	3b0a      	subhi	r3, #10
 80100c4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80100c8:	8458      	strh	r0, [r3, #34]	; 0x22
 80100ca:	e7e3      	b.n	8010094 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 80100cc:	2b0a      	cmp	r3, #10
 80100ce:	d01c      	beq.n	801010a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 80100d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80100d2:	3901      	subs	r1, #1
 80100d4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80100d8:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80100da:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80100de:	1c51      	adds	r1, r2, #1
 80100e0:	b289      	uxth	r1, r1
 80100e2:	2901      	cmp	r1, #1
 80100e4:	bf8a      	itet	hi
 80100e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80100ea:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80100ec:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80100ee:	2b09      	cmp	r3, #9
 80100f0:	d8d9      	bhi.n	80100a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 80100f2:	1c5a      	adds	r2, r3, #1
 80100f4:	8722      	strh	r2, [r4, #56]	; 0x38
 80100f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80100f8:	4413      	add	r3, r2
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	2b09      	cmp	r3, #9
 80100fe:	bf88      	it	hi
 8010100:	3b0a      	subhi	r3, #10
 8010102:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010106:	8458      	strh	r0, [r3, #34]	; 0x22
 8010108:	e7c0      	b.n	801008c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801010a:	bd10      	pop	{r4, pc}
 801010c:	0801c2d0 	.word	0x0801c2d0
 8010110:	0801c655 	.word	0x0801c655
 8010114:	0801af20 	.word	0x0801af20

08010118 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801011c:	4604      	mov	r4, r0
 801011e:	b92a      	cbnz	r2, 801012c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8010120:	4b13      	ldr	r3, [pc, #76]	; (8010170 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8010122:	21d5      	movs	r1, #213	; 0xd5
 8010124:	4a13      	ldr	r2, [pc, #76]	; (8010174 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8010126:	4814      	ldr	r0, [pc, #80]	; (8010178 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8010128:	f009 f808 	bl	801913c <__assert_func>
 801012c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801012e:	3a01      	subs	r2, #1
 8010130:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8010134:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8010136:	8702      	strh	r2, [r0, #56]	; 0x38
 8010138:	1c5a      	adds	r2, r3, #1
 801013a:	b292      	uxth	r2, r2
 801013c:	2a09      	cmp	r2, #9
 801013e:	bf8a      	itet	hi
 8010140:	3b09      	subhi	r3, #9
 8010142:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8010144:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8010146:	f7ff ff9f 	bl	8010088 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801014a:	8c23      	ldrh	r3, [r4, #32]
 801014c:	2b01      	cmp	r3, #1
 801014e:	bf9c      	itt	ls
 8010150:	3301      	addls	r3, #1
 8010152:	8423      	strhls	r3, [r4, #32]
 8010154:	8be3      	ldrh	r3, [r4, #30]
 8010156:	b90b      	cbnz	r3, 801015c <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8010158:	2302      	movs	r3, #2
 801015a:	83e3      	strh	r3, [r4, #30]
 801015c:	8be3      	ldrh	r3, [r4, #30]
 801015e:	4628      	mov	r0, r5
 8010160:	3b01      	subs	r3, #1
 8010162:	b29b      	uxth	r3, r3
 8010164:	83e3      	strh	r3, [r4, #30]
 8010166:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801016a:	8365      	strh	r5, [r4, #26]
 801016c:	bd38      	pop	{r3, r4, r5, pc}
 801016e:	bf00      	nop
 8010170:	0801ae40 	.word	0x0801ae40
 8010174:	0801c5aa 	.word	0x0801c5aa
 8010178:	0801af20 	.word	0x0801af20

0801017c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801017c:	428a      	cmp	r2, r1
 801017e:	b538      	push	{r3, r4, r5, lr}
 8010180:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8010182:	d90c      	bls.n	801019e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8010184:	b92c      	cbnz	r4, 8010192 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8010186:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8010188:	21e1      	movs	r1, #225	; 0xe1
 801018a:	4a1c      	ldr	r2, [pc, #112]	; (80101fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801018c:	481c      	ldr	r0, [pc, #112]	; (8010200 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801018e:	f008 ffd5 	bl	801913c <__assert_func>
 8010192:	3c01      	subs	r4, #1
 8010194:	4b1b      	ldr	r3, [pc, #108]	; (8010204 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8010196:	4a1c      	ldr	r2, [pc, #112]	; (8010208 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8010198:	21c5      	movs	r1, #197	; 0xc5
 801019a:	8704      	strh	r4, [r0, #56]	; 0x38
 801019c:	e7f6      	b.n	801018c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801019e:	428c      	cmp	r4, r1
 80101a0:	d203      	bcs.n	80101aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 80101a2:	4b1a      	ldr	r3, [pc, #104]	; (801020c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 80101a4:	21cb      	movs	r1, #203	; 0xcb
 80101a6:	4a1a      	ldr	r2, [pc, #104]	; (8010210 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 80101a8:	e7f0      	b.n	801018c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80101aa:	1a64      	subs	r4, r4, r1
 80101ac:	250a      	movs	r5, #10
 80101ae:	8704      	strh	r4, [r0, #56]	; 0x38
 80101b0:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80101b2:	4421      	add	r1, r4
 80101b4:	b289      	uxth	r1, r1
 80101b6:	2909      	cmp	r1, #9
 80101b8:	bf88      	it	hi
 80101ba:	390a      	subhi	r1, #10
 80101bc:	86c1      	strh	r1, [r0, #54]	; 0x36
 80101be:	b1ba      	cbz	r2, 80101f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 80101c0:	3a01      	subs	r2, #1
 80101c2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80101c4:	b292      	uxth	r2, r2
 80101c6:	2909      	cmp	r1, #9
 80101c8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80101cc:	d903      	bls.n	80101d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 80101ce:	4b11      	ldr	r3, [pc, #68]	; (8010214 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 80101d0:	21e6      	movs	r1, #230	; 0xe6
 80101d2:	4a11      	ldr	r2, [pc, #68]	; (8010218 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 80101d4:	e7da      	b.n	801018c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 80101d6:	3101      	adds	r1, #1
 80101d8:	8701      	strh	r1, [r0, #56]	; 0x38
 80101da:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80101dc:	b901      	cbnz	r1, 80101e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 80101de:	86c5      	strh	r5, [r0, #54]	; 0x36
 80101e0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80101e2:	3901      	subs	r1, #1
 80101e4:	b289      	uxth	r1, r1
 80101e6:	86c1      	strh	r1, [r0, #54]	; 0x36
 80101e8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80101ec:	844c      	strh	r4, [r1, #34]	; 0x22
 80101ee:	e7e6      	b.n	80101be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 80101f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101f4:	f7ff bf48 	b.w	8010088 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80101f8:	0801ae40 	.word	0x0801ae40
 80101fc:	0801c383 	.word	0x0801c383
 8010200:	0801af20 	.word	0x0801af20
 8010204:	0801af4c 	.word	0x0801af4c
 8010208:	0801c42d 	.word	0x0801c42d
 801020c:	0801c2dc 	.word	0x0801c2dc
 8010210:	0801c704 	.word	0x0801c704
 8010214:	0801c2e8 	.word	0x0801c2e8
 8010218:	0801c2fb 	.word	0x0801c2fb

0801021c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801021c:	3a01      	subs	r2, #1
 801021e:	b570      	push	{r4, r5, r6, lr}
 8010220:	b292      	uxth	r2, r2
 8010222:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8010226:	42b2      	cmp	r2, r6
 8010228:	d019      	beq.n	801025e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801022a:	8c04      	ldrh	r4, [r0, #32]
 801022c:	f831 5b02 	ldrh.w	r5, [r1], #2
 8010230:	4294      	cmp	r4, r2
 8010232:	d805      	bhi.n	8010240 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8010234:	4b19      	ldr	r3, [pc, #100]	; (801029c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8010236:	4a1a      	ldr	r2, [pc, #104]	; (80102a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8010238:	21c5      	movs	r1, #197	; 0xc5
 801023a:	481a      	ldr	r0, [pc, #104]	; (80102a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801023c:	f008 ff7e 	bl	801913c <__assert_func>
 8010240:	8bc4      	ldrh	r4, [r0, #30]
 8010242:	4414      	add	r4, r2
 8010244:	3a01      	subs	r2, #1
 8010246:	b2a4      	uxth	r4, r4
 8010248:	b292      	uxth	r2, r2
 801024a:	2c01      	cmp	r4, #1
 801024c:	bf88      	it	hi
 801024e:	3c02      	subhi	r4, #2
 8010250:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010254:	8b64      	ldrh	r4, [r4, #26]
 8010256:	42ac      	cmp	r4, r5
 8010258:	d0e5      	beq.n	8010226 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801025a:	2000      	movs	r0, #0
 801025c:	bd70      	pop	{r4, r5, r6, pc}
 801025e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010262:	2400      	movs	r4, #0
 8010264:	4413      	add	r3, r2
 8010266:	b2a2      	uxth	r2, r4
 8010268:	429a      	cmp	r2, r3
 801026a:	da14      	bge.n	8010296 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801026c:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801026e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8010272:	4296      	cmp	r6, r2
 8010274:	d802      	bhi.n	801027c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8010276:	4b09      	ldr	r3, [pc, #36]	; (801029c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8010278:	4a0b      	ldr	r2, [pc, #44]	; (80102a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801027a:	e7dd      	b.n	8010238 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801027c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801027e:	3401      	adds	r4, #1
 8010280:	4432      	add	r2, r6
 8010282:	b292      	uxth	r2, r2
 8010284:	2a09      	cmp	r2, #9
 8010286:	bf88      	it	hi
 8010288:	3a0a      	subhi	r2, #10
 801028a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801028e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8010290:	42aa      	cmp	r2, r5
 8010292:	d0e8      	beq.n	8010266 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8010294:	e7e1      	b.n	801025a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8010296:	2001      	movs	r0, #1
 8010298:	e7e0      	b.n	801025c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801029a:	bf00      	nop
 801029c:	0801af4c 	.word	0x0801af4c
 80102a0:	0801c788 	.word	0x0801c788
 80102a4:	0801af20 	.word	0x0801af20
 80102a8:	0801c42d 	.word	0x0801c42d

080102ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80102ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b0:	4605      	mov	r5, r0
 80102b2:	4616      	mov	r6, r2
 80102b4:	1c8c      	adds	r4, r1, #2
 80102b6:	8809      	ldrh	r1, [r1, #0]
 80102b8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80102bc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80102c0:	42b3      	cmp	r3, r6
 80102c2:	d124      	bne.n	801030e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80102c4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80102c8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80102cc:	f001 070f 	and.w	r7, r1, #15
 80102d0:	4652      	mov	r2, sl
 80102d2:	f8cd 8000 	str.w	r8, [sp]
 80102d6:	464b      	mov	r3, r9
 80102d8:	4621      	mov	r1, r4
 80102da:	4628      	mov	r0, r5
 80102dc:	f7ff ff9e 	bl	801021c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80102e0:	4683      	mov	fp, r0
 80102e2:	b168      	cbz	r0, 8010300 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80102e4:	eb0a 0109 	add.w	r1, sl, r9
 80102e8:	463a      	mov	r2, r7
 80102ea:	4628      	mov	r0, r5
 80102ec:	4441      	add	r1, r8
 80102ee:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80102f2:	4649      	mov	r1, r9
 80102f4:	f7ff ff42 	bl	801017c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80102f8:	4658      	mov	r0, fp
 80102fa:	b003      	add	sp, #12
 80102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010300:	eb07 010a 	add.w	r1, r7, sl
 8010304:	4449      	add	r1, r9
 8010306:	4441      	add	r1, r8
 8010308:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801030c:	e7d2      	b.n	80102b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801030e:	f04f 0b00 	mov.w	fp, #0
 8010312:	e7f1      	b.n	80102f8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08010314 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	8810      	ldrh	r0, [r2, #0]
 8010318:	4298      	cmp	r0, r3
 801031a:	d817      	bhi.n	801034c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801031c:	1e48      	subs	r0, r1, #1
 801031e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8010322:	4298      	cmp	r0, r3
 8010324:	d312      	bcc.n	801034c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8010326:	2400      	movs	r4, #0
 8010328:	428c      	cmp	r4, r1
 801032a:	d20f      	bcs.n	801034c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801032c:	1860      	adds	r0, r4, r1
 801032e:	1040      	asrs	r0, r0, #1
 8010330:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8010334:	0085      	lsls	r5, r0, #2
 8010336:	42b3      	cmp	r3, r6
 8010338:	d902      	bls.n	8010340 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801033a:	3001      	adds	r0, #1
 801033c:	b284      	uxth	r4, r0
 801033e:	e7f3      	b.n	8010328 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010340:	d201      	bcs.n	8010346 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8010342:	b281      	uxth	r1, r0
 8010344:	e7f0      	b.n	8010328 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8010346:	442a      	add	r2, r5
 8010348:	8850      	ldrh	r0, [r2, #2]
 801034a:	bd70      	pop	{r4, r5, r6, pc}
 801034c:	2000      	movs	r0, #0
 801034e:	e7fc      	b.n	801034a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08010350 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8010350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010354:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8010356:	4604      	mov	r4, r0
 8010358:	260b      	movs	r6, #11
 801035a:	886f      	ldrh	r7, [r5, #2]
 801035c:	087f      	lsrs	r7, r7, #1
 801035e:	3e01      	subs	r6, #1
 8010360:	d01b      	beq.n	801039a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8010362:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010364:	b92b      	cbnz	r3, 8010372 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8010366:	4b0e      	ldr	r3, [pc, #56]	; (80103a0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8010368:	21c0      	movs	r1, #192	; 0xc0
 801036a:	4a0e      	ldr	r2, [pc, #56]	; (80103a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801036c:	480e      	ldr	r0, [pc, #56]	; (80103a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801036e:	f008 fee5 	bl	801913c <__assert_func>
 8010372:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010374:	462a      	mov	r2, r5
 8010376:	4639      	mov	r1, r7
 8010378:	4620      	mov	r0, r4
 801037a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801037e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8010382:	4643      	mov	r3, r8
 8010384:	f7ff ffc6 	bl	8010314 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8010388:	b138      	cbz	r0, 801039a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801038a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801038e:	4642      	mov	r2, r8
 8010390:	4620      	mov	r0, r4
 8010392:	f7ff ff8b 	bl	80102ac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8010396:	2800      	cmp	r0, #0
 8010398:	d1e1      	bne.n	801035e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801039a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801039e:	bf00      	nop
 80103a0:	0801ae40 	.word	0x0801ae40
 80103a4:	0801c4ff 	.word	0x0801c4ff
 80103a8:	0801af20 	.word	0x0801af20

080103ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80103ac:	b570      	push	{r4, r5, r6, lr}
 80103ae:	694a      	ldr	r2, [r1, #20]
 80103b0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80103b2:	684b      	ldr	r3, [r1, #4]
 80103b4:	1b54      	subs	r4, r2, r5
 80103b6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80103b8:	f000 8106 	beq.w	80105c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80103bc:	1b9b      	subs	r3, r3, r6
 80103be:	d003      	beq.n	80103c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80103c0:	4363      	muls	r3, r4
 80103c2:	2210      	movs	r2, #16
 80103c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80103c8:	680c      	ldr	r4, [r1, #0]
 80103ca:	698a      	ldr	r2, [r1, #24]
 80103cc:	1b65      	subs	r5, r4, r5
 80103ce:	f000 80fd 	beq.w	80105cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80103d2:	1b92      	subs	r2, r2, r6
 80103d4:	d003      	beq.n	80103de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80103d6:	436a      	muls	r2, r5
 80103d8:	2410      	movs	r4, #16
 80103da:	fb92 f2f4 	sdiv	r2, r2, r4
 80103de:	1a9b      	subs	r3, r3, r2
 80103e0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8010608 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80103e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103e8:	460a      	mov	r2, r1
 80103ea:	ee07 3a90 	vmov	s15, r3
 80103ee:	f100 040c 	add.w	r4, r0, #12
 80103f2:	4603      	mov	r3, r0
 80103f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103f8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80103fc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8010400:	eeb1 6a43 	vneg.f32	s12, s6
 8010404:	edd2 7a02 	vldr	s15, [r2, #8]
 8010408:	3214      	adds	r2, #20
 801040a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801040e:	ece3 6a01 	vstmia	r3!, {s13}
 8010412:	429c      	cmp	r4, r3
 8010414:	ed52 7a02 	vldr	s15, [r2, #-8]
 8010418:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801041c:	edc3 7a02 	vstr	s15, [r3, #8]
 8010420:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010428:	edc3 7a05 	vstr	s15, [r3, #20]
 801042c:	d1ea      	bne.n	8010404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801042e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010430:	698b      	ldr	r3, [r1, #24]
 8010432:	edd0 4a02 	vldr	s9, [r0, #8]
 8010436:	1a9b      	subs	r3, r3, r2
 8010438:	edd0 3a00 	vldr	s7, [r0]
 801043c:	edd0 6a01 	vldr	s13, [r0, #4]
 8010440:	ee07 3a90 	vmov	s15, r3
 8010444:	684b      	ldr	r3, [r1, #4]
 8010446:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801044a:	ed90 5a05 	vldr	s10, [r0, #20]
 801044e:	1a9b      	subs	r3, r3, r2
 8010450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010454:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8010458:	ed90 2a03 	vldr	s4, [r0, #12]
 801045c:	ee07 3a10 	vmov	s14, r3
 8010460:	edd0 5a04 	vldr	s11, [r0, #16]
 8010464:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010468:	ed90 1a07 	vldr	s2, [r0, #28]
 801046c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010470:	edd0 2a06 	vldr	s5, [r0, #24]
 8010474:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8010478:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801047c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010480:	ee32 5a45 	vsub.f32	s10, s4, s10
 8010484:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010488:	ee67 7a83 	vmul.f32	s15, s15, s6
 801048c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8010490:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8010492:	694a      	ldr	r2, [r1, #20]
 8010494:	1b13      	subs	r3, r2, r4
 8010496:	ee07 3a10 	vmov	s14, r3
 801049a:	680b      	ldr	r3, [r1, #0]
 801049c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104a0:	1b1b      	subs	r3, r3, r4
 80104a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104a6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80104aa:	ee07 3a10 	vmov	s14, r3
 80104ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104b6:	eee6 4a87 	vfma.f32	s9, s13, s14
 80104ba:	ee64 4a86 	vmul.f32	s9, s9, s12
 80104be:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80104c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80104c4:	698b      	ldr	r3, [r1, #24]
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	ee06 3a90 	vmov	s13, r3
 80104cc:	684b      	ldr	r3, [r1, #4]
 80104ce:	1a9b      	subs	r3, r3, r2
 80104d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80104d4:	ee07 3a10 	vmov	s14, r3
 80104d8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80104dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104e0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80104e4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104e8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80104ec:	ee66 6a83 	vmul.f32	s13, s13, s6
 80104f0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80104f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80104f6:	694a      	ldr	r2, [r1, #20]
 80104f8:	1b13      	subs	r3, r2, r4
 80104fa:	ee07 3a10 	vmov	s14, r3
 80104fe:	680b      	ldr	r3, [r1, #0]
 8010500:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010504:	1b1b      	subs	r3, r3, r4
 8010506:	ee27 7a04 	vmul.f32	s14, s14, s8
 801050a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801050e:	ee07 3a10 	vmov	s14, r3
 8010512:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010516:	ee27 7a04 	vmul.f32	s14, s14, s8
 801051a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801051e:	edd0 5a08 	vldr	s11, [r0, #32]
 8010522:	ee31 1a65 	vsub.f32	s2, s2, s11
 8010526:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801052a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801052e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8010532:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010534:	698b      	ldr	r3, [r1, #24]
 8010536:	1a9b      	subs	r3, r3, r2
 8010538:	ee07 3a10 	vmov	s14, r3
 801053c:	684b      	ldr	r3, [r1, #4]
 801053e:	1a9b      	subs	r3, r3, r2
 8010540:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010544:	ee01 3a90 	vmov	s3, r3
 8010548:	ee27 7a04 	vmul.f32	s14, s14, s8
 801054c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8010550:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8010554:	ee61 1a84 	vmul.f32	s3, s3, s8
 8010558:	eea1 7a21 	vfma.f32	s14, s2, s3
 801055c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010560:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010564:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8010566:	694a      	ldr	r2, [r1, #20]
 8010568:	1b13      	subs	r3, r2, r4
 801056a:	ee03 3a10 	vmov	s6, r3
 801056e:	680b      	ldr	r3, [r1, #0]
 8010570:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8010574:	1b1b      	subs	r3, r3, r4
 8010576:	ee23 3a04 	vmul.f32	s6, s6, s8
 801057a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801057e:	ee03 3a10 	vmov	s6, r3
 8010582:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8010586:	ee23 4a04 	vmul.f32	s8, s6, s8
 801058a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801058e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8010592:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8010596:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801059a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801059e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80105a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a6:	dd13      	ble.n	80105d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80105a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105ac:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80105b0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80105b2:	eee3 7a87 	vfma.f32	s15, s7, s14
 80105b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105be:	dd15      	ble.n	80105ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80105c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80105c4:	6403      	str	r3, [r0, #64]	; 0x40
 80105c6:	bd70      	pop	{r4, r5, r6, pc}
 80105c8:	4623      	mov	r3, r4
 80105ca:	e6fd      	b.n	80103c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80105cc:	462a      	mov	r2, r5
 80105ce:	e706      	b.n	80103de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80105d0:	d502      	bpl.n	80105d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80105d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80105d6:	e7e9      	b.n	80105ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80105d8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80105dc:	eea3 2a85 	vfma.f32	s4, s7, s10
 80105e0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80105e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e8:	dade      	bge.n	80105a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80105ea:	e7f2      	b.n	80105d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80105ec:	d502      	bpl.n	80105f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80105ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80105f2:	e7e7      	b.n	80105c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80105f4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80105f8:	eee3 4a86 	vfma.f32	s9, s7, s12
 80105fc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8010600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010604:	dadc      	bge.n	80105c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8010606:	e7f2      	b.n	80105ee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8010608:	3d800000 	.word	0x3d800000

0801060c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010610:	2714      	movs	r7, #20
 8010612:	435f      	muls	r7, r3
 8010614:	eb02 0c07 	add.w	ip, r2, r7
 8010618:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801061c:	f115 0e0f 	adds.w	lr, r5, #15
 8010620:	d433      	bmi.n	801068a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 8010622:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8010626:	9c08      	ldr	r4, [sp, #32]
 8010628:	2614      	movs	r6, #20
 801062a:	f8c0 e014 	str.w	lr, [r0, #20]
 801062e:	4366      	muls	r6, r4
 8010630:	eb02 0806 	add.w	r8, r2, r6
 8010634:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010638:	f115 040f 	adds.w	r4, r5, #15
 801063c:	d431      	bmi.n	80106a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 801063e:	1124      	asrs	r4, r4, #4
 8010640:	eba4 040e 	sub.w	r4, r4, lr
 8010644:	6184      	str	r4, [r0, #24]
 8010646:	2c00      	cmp	r4, #0
 8010648:	f000 80aa 	beq.w	80107a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 801064c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8010650:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010654:	5995      	ldr	r5, [r2, r6]
 8010656:	eba4 0809 	sub.w	r8, r4, r9
 801065a:	59d4      	ldr	r4, [r2, r7]
 801065c:	eba5 0a04 	sub.w	sl, r5, r4
 8010660:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8010664:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8010668:	2e00      	cmp	r6, #0
 801066a:	fb0e fe05 	mul.w	lr, lr, r5
 801066e:	fb0a ee19 	mls	lr, sl, r9, lr
 8010672:	fb08 e404 	mla	r4, r8, r4, lr
 8010676:	f104 34ff 	add.w	r4, r4, #4294967295
 801067a:	4434      	add	r4, r6
 801067c:	dc1d      	bgt.n	80106ba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 801067e:	4b5b      	ldr	r3, [pc, #364]	; (80107ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 8010680:	21f7      	movs	r1, #247	; 0xf7
 8010682:	4a5b      	ldr	r2, [pc, #364]	; (80107f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 8010684:	485b      	ldr	r0, [pc, #364]	; (80107f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 8010686:	f008 fd59 	bl	801913c <__assert_func>
 801068a:	2410      	movs	r4, #16
 801068c:	f1c5 0501 	rsb	r5, r5, #1
 8010690:	fb9e fef4 	sdiv	lr, lr, r4
 8010694:	f015 050f 	ands.w	r5, r5, #15
 8010698:	bf18      	it	ne
 801069a:	2501      	movne	r5, #1
 801069c:	ebae 0e05 	sub.w	lr, lr, r5
 80106a0:	e7c1      	b.n	8010626 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 80106a2:	f04f 0910 	mov.w	r9, #16
 80106a6:	f1c5 0501 	rsb	r5, r5, #1
 80106aa:	fb94 f4f9 	sdiv	r4, r4, r9
 80106ae:	f015 050f 	ands.w	r5, r5, #15
 80106b2:	bf18      	it	ne
 80106b4:	2501      	movne	r5, #1
 80106b6:	1b64      	subs	r4, r4, r5
 80106b8:	e7c2      	b.n	8010640 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 80106ba:	2c00      	cmp	r4, #0
 80106bc:	db72      	blt.n	80107a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 80106be:	fb94 fef6 	sdiv	lr, r4, r6
 80106c2:	fb06 441e 	mls	r4, r6, lr, r4
 80106c6:	f8c0 e000 	str.w	lr, [r0]
 80106ca:	6104      	str	r4, [r0, #16]
 80106cc:	2d00      	cmp	r5, #0
 80106ce:	db7b      	blt.n	80107c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 80106d0:	fb95 f4f6 	sdiv	r4, r5, r6
 80106d4:	fb06 5514 	mls	r5, r6, r4, r5
 80106d8:	6044      	str	r4, [r0, #4]
 80106da:	6085      	str	r5, [r0, #8]
 80106dc:	60c6      	str	r6, [r0, #12]
 80106de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80106e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80106e6:	6945      	ldr	r5, [r0, #20]
 80106e8:	59d2      	ldr	r2, [r2, r7]
 80106ea:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80106ee:	eddf 6a42 	vldr	s13, [pc, #264]	; 80107f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 80106f2:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80106f6:	ee07 4a10 	vmov	s14, r4
 80106fa:	6804      	ldr	r4, [r0, #0]
 80106fc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8010700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010704:	ee07 2a90 	vmov	s15, r2
 8010708:	ee27 7a26 	vmul.f32	s14, s14, s13
 801070c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010710:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010714:	edd3 6a00 	vldr	s13, [r3]
 8010718:	eee6 6a07 	vfma.f32	s13, s12, s14
 801071c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8010720:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010724:	edc0 6a07 	vstr	s13, [r0, #28]
 8010728:	edd0 6a01 	vldr	s13, [r0, #4]
 801072c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8010730:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010734:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8010738:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801073c:	ed80 6a08 	vstr	s12, [r0, #32]
 8010740:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8010742:	6242      	str	r2, [r0, #36]	; 0x24
 8010744:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8010748:	ed93 6a03 	vldr	s12, [r3, #12]
 801074c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010750:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8010754:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010758:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801075c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8010760:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8010764:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010768:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801076c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801076e:	6302      	str	r2, [r0, #48]	; 0x30
 8010770:	ed93 6a06 	vldr	s12, [r3, #24]
 8010774:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8010778:	eea5 6a87 	vfma.f32	s12, s11, s14
 801077c:	eeb0 7a46 	vmov.f32	s14, s12
 8010780:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8010784:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010788:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801078c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8010790:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8010794:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010798:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801079c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801079e:	63c3      	str	r3, [r0, #60]	; 0x3c
 80107a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a4:	4264      	negs	r4, r4
 80107a6:	fb94 fef6 	sdiv	lr, r4, r6
 80107aa:	f1ce 0800 	rsb	r8, lr, #0
 80107ae:	fb06 441e 	mls	r4, r6, lr, r4
 80107b2:	f8c0 8000 	str.w	r8, [r0]
 80107b6:	6104      	str	r4, [r0, #16]
 80107b8:	2c00      	cmp	r4, #0
 80107ba:	d087      	beq.n	80106cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 80107bc:	ea6f 0e0e 	mvn.w	lr, lr
 80107c0:	1b34      	subs	r4, r6, r4
 80107c2:	f8c0 e000 	str.w	lr, [r0]
 80107c6:	e780      	b.n	80106ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 80107c8:	426d      	negs	r5, r5
 80107ca:	fb95 f4f6 	sdiv	r4, r5, r6
 80107ce:	f1c4 0e00 	rsb	lr, r4, #0
 80107d2:	fb06 5514 	mls	r5, r6, r4, r5
 80107d6:	f8c0 e004 	str.w	lr, [r0, #4]
 80107da:	6085      	str	r5, [r0, #8]
 80107dc:	2d00      	cmp	r5, #0
 80107de:	f43f af7d 	beq.w	80106dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 80107e2:	43e4      	mvns	r4, r4
 80107e4:	1b75      	subs	r5, r6, r5
 80107e6:	6044      	str	r4, [r0, #4]
 80107e8:	e777      	b.n	80106da <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 80107ea:	bf00      	nop
 80107ec:	0801c859 	.word	0x0801c859
 80107f0:	0801c898 	.word	0x0801c898
 80107f4:	0801c869 	.word	0x0801c869
 80107f8:	3d800000 	.word	0x3d800000

080107fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80107fc:	4b01      	ldr	r3, [pc, #4]	; (8010804 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80107fe:	6018      	str	r0, [r3, #0]
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	2400af54 	.word	0x2400af54

08010808 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8010808:	4b06      	ldr	r3, [pc, #24]	; (8010824 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801080a:	881a      	ldrh	r2, [r3, #0]
 801080c:	4282      	cmp	r2, r0
 801080e:	d807      	bhi.n	8010820 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8010810:	4b05      	ldr	r3, [pc, #20]	; (8010828 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	4413      	add	r3, r2
 8010816:	4298      	cmp	r0, r3
 8010818:	bfac      	ite	ge
 801081a:	2000      	movge	r0, #0
 801081c:	2001      	movlt	r0, #1
 801081e:	4770      	bx	lr
 8010820:	2000      	movs	r0, #0
 8010822:	4770      	bx	lr
 8010824:	2400af74 	.word	0x2400af74
 8010828:	2400af78 	.word	0x2400af78

0801082c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801082c:	b508      	push	{r3, lr}
 801082e:	4601      	mov	r1, r0
 8010830:	f7ff ffea 	bl	8010808 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010834:	b118      	cbz	r0, 801083e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8010836:	4b02      	ldr	r3, [pc, #8]	; (8010840 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801083e:	bd08      	pop	{r3, pc}
 8010840:	2400af58 	.word	0x2400af58

08010844 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4604      	mov	r4, r0
 8010848:	f7ff ffde 	bl	8010808 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801084c:	b188      	cbz	r0, 8010872 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801084e:	4b09      	ldr	r3, [pc, #36]	; (8010874 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8010850:	881a      	ldrh	r2, [r3, #0]
 8010852:	4b09      	ldr	r3, [pc, #36]	; (8010878 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8010854:	1aa4      	subs	r4, r4, r2
 8010856:	220e      	movs	r2, #14
 8010858:	681d      	ldr	r5, [r3, #0]
 801085a:	4362      	muls	r2, r4
 801085c:	18ac      	adds	r4, r5, r2
 801085e:	7b23      	ldrb	r3, [r4, #12]
 8010860:	f013 0320 	ands.w	r3, r3, #32
 8010864:	bf17      	itett	ne
 8010866:	680b      	ldrne	r3, [r1, #0]
 8010868:	4618      	moveq	r0, r3
 801086a:	50ab      	strne	r3, [r5, r2]
 801086c:	684b      	ldrne	r3, [r1, #4]
 801086e:	bf18      	it	ne
 8010870:	6063      	strne	r3, [r4, #4]
 8010872:	bd38      	pop	{r3, r4, r5, pc}
 8010874:	2400af74 	.word	0x2400af74
 8010878:	2400af5c 	.word	0x2400af5c

0801087c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801087c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010880:	4606      	mov	r6, r0
 8010882:	460c      	mov	r4, r1
 8010884:	f7ff ffc0 	bl	8010808 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010888:	b918      	cbnz	r0, 8010892 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801088a:	2000      	movs	r0, #0
 801088c:	b002      	add	sp, #8
 801088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010892:	4608      	mov	r0, r1
 8010894:	f7fa f92b 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 8010898:	2800      	cmp	r0, #0
 801089a:	d1f6      	bne.n	801088a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801089c:	4b3f      	ldr	r3, [pc, #252]	; (801099c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801089e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80109a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80108a2:	881d      	ldrh	r5, [r3, #0]
 80108a4:	f8d9 a000 	ldr.w	sl, [r9]
 80108a8:	46c8      	mov	r8, r9
 80108aa:	1b73      	subs	r3, r6, r5
 80108ac:	250e      	movs	r5, #14
 80108ae:	435d      	muls	r5, r3
 80108b0:	eb0a 0705 	add.w	r7, sl, r5
 80108b4:	7b3b      	ldrb	r3, [r7, #12]
 80108b6:	f013 0f20 	tst.w	r3, #32
 80108ba:	d0e6      	beq.n	801088a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80108bc:	4621      	mov	r1, r4
 80108be:	4638      	mov	r0, r7
 80108c0:	f7fd fb64 	bl	800df8c <_ZNK8touchgfx4Rect8includesERKS0_>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d1e1      	bne.n	801088c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80108c8:	4639      	mov	r1, r7
 80108ca:	4620      	mov	r0, r4
 80108cc:	f7fd fb5e 	bl	800df8c <_ZNK8touchgfx4Rect8includesERKS0_>
 80108d0:	b108      	cbz	r0, 80108d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80108d2:	4621      	mov	r1, r4
 80108d4:	e020      	b.n	8010918 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80108d6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80108da:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d11e      	bne.n	8010920 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80108e2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80108e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d118      	bne.n	8010920 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80108ee:	6820      	ldr	r0, [r4, #0]
 80108f0:	466b      	mov	r3, sp
 80108f2:	6861      	ldr	r1, [r4, #4]
 80108f4:	c303      	stmia	r3!, {r0, r1}
 80108f6:	4639      	mov	r1, r7
 80108f8:	4668      	mov	r0, sp
 80108fa:	f7fd fb6d 	bl	800dfd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80108fe:	f8d9 3000 	ldr.w	r3, [r9]
 8010902:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010906:	442b      	add	r3, r5
 8010908:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801090c:	4413      	add	r3, r2
 801090e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8010912:	4293      	cmp	r3, r2
 8010914:	dc04      	bgt.n	8010920 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8010916:	4669      	mov	r1, sp
 8010918:	4630      	mov	r0, r6
 801091a:	f7ff ff93 	bl	8010844 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801091e:	e7b5      	b.n	801088c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8010920:	f8d8 3000 	ldr.w	r3, [r8]
 8010924:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010928:	442b      	add	r3, r5
 801092a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801092e:	4291      	cmp	r1, r2
 8010930:	d119      	bne.n	8010966 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8010932:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8010936:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801093a:	4291      	cmp	r1, r2
 801093c:	d113      	bne.n	8010966 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801093e:	6820      	ldr	r0, [r4, #0]
 8010940:	466a      	mov	r2, sp
 8010942:	6861      	ldr	r1, [r4, #4]
 8010944:	c203      	stmia	r2!, {r0, r1}
 8010946:	4619      	mov	r1, r3
 8010948:	4668      	mov	r0, sp
 801094a:	f7fd fb45 	bl	800dfd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801094e:	f8d8 3000 	ldr.w	r3, [r8]
 8010952:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010956:	442b      	add	r3, r5
 8010958:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801095c:	4413      	add	r3, r2
 801095e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8010962:	4293      	cmp	r3, r2
 8010964:	ddd7      	ble.n	8010916 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8010966:	4620      	mov	r0, r4
 8010968:	f7fa f8c1 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 801096c:	b990      	cbnz	r0, 8010994 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801096e:	88a7      	ldrh	r7, [r4, #4]
 8010970:	88e3      	ldrh	r3, [r4, #6]
 8010972:	fb17 f703 	smulbb	r7, r7, r3
 8010976:	f8d8 3000 	ldr.w	r3, [r8]
 801097a:	441d      	add	r5, r3
 801097c:	4628      	mov	r0, r5
 801097e:	f7fa f8b6 	bl	800aaee <_ZNK8touchgfx4Rect7isEmptyEv>
 8010982:	b948      	cbnz	r0, 8010998 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8010984:	88ab      	ldrh	r3, [r5, #4]
 8010986:	88ea      	ldrh	r2, [r5, #6]
 8010988:	fb13 f302 	smulbb	r3, r3, r2
 801098c:	42bb      	cmp	r3, r7
 801098e:	f4bf af7c 	bcs.w	801088a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8010992:	e79e      	b.n	80108d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8010994:	2700      	movs	r7, #0
 8010996:	e7ee      	b.n	8010976 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8010998:	2300      	movs	r3, #0
 801099a:	e7f7      	b.n	801098c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801099c:	2400af74 	.word	0x2400af74
 80109a0:	2400af5c 	.word	0x2400af5c

080109a4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80109a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109a6:	4c24      	ldr	r4, [pc, #144]	; (8010a38 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80109a8:	6823      	ldr	r3, [r4, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d042      	beq.n	8010a34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80109ae:	4a23      	ldr	r2, [pc, #140]	; (8010a3c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80109b0:	4d23      	ldr	r5, [pc, #140]	; (8010a40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80109b2:	8811      	ldrh	r1, [r2, #0]
 80109b4:	f8b5 c000 	ldrh.w	ip, [r5]
 80109b8:	4822      	ldr	r0, [pc, #136]	; (8010a44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80109ba:	4461      	add	r1, ip
 80109bc:	1c4a      	adds	r2, r1, #1
 80109be:	008f      	lsls	r7, r1, #2
 80109c0:	f022 0201 	bic.w	r2, r2, #1
 80109c4:	19de      	adds	r6, r3, r7
 80109c6:	0412      	lsls	r2, r2, #16
 80109c8:	6006      	str	r6, [r0, #0]
 80109ca:	4e1f      	ldr	r6, [pc, #124]	; (8010a48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80109cc:	0c12      	lsrs	r2, r2, #16
 80109ce:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80109d2:	19da      	adds	r2, r3, r7
 80109d4:	6032      	str	r2, [r6, #0]
 80109d6:	220e      	movs	r2, #14
 80109d8:	fb02 f20c 	mul.w	r2, r2, ip
 80109dc:	3203      	adds	r2, #3
 80109de:	f022 0203 	bic.w	r2, r2, #3
 80109e2:	443a      	add	r2, r7
 80109e4:	4f19      	ldr	r7, [pc, #100]	; (8010a4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80109e6:	4413      	add	r3, r2
 80109e8:	603b      	str	r3, [r7, #0]
 80109ea:	2300      	movs	r3, #0
 80109ec:	4f18      	ldr	r7, [pc, #96]	; (8010a50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80109ee:	469c      	mov	ip, r3
 80109f0:	803b      	strh	r3, [r7, #0]
 80109f2:	4f18      	ldr	r7, [pc, #96]	; (8010a54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80109f4:	683f      	ldr	r7, [r7, #0]
 80109f6:	1aba      	subs	r2, r7, r2
 80109f8:	4f17      	ldr	r7, [pc, #92]	; (8010a58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80109fa:	603a      	str	r2, [r7, #0]
 80109fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8010a00:	4a16      	ldr	r2, [pc, #88]	; (8010a5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010a02:	8013      	strh	r3, [r2, #0]
 8010a04:	428b      	cmp	r3, r1
 8010a06:	d10d      	bne.n	8010a24 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8010a08:	882d      	ldrh	r5, [r5, #0]
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	6830      	ldr	r0, [r6, #0]
 8010a0e:	240e      	movs	r4, #14
 8010a10:	429d      	cmp	r5, r3
 8010a12:	d90f      	bls.n	8010a34 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010a14:	fb04 0203 	mla	r2, r4, r3, r0
 8010a18:	3301      	adds	r3, #1
 8010a1a:	7b11      	ldrb	r1, [r2, #12]
 8010a1c:	f36f 1145 	bfc	r1, #5, #1
 8010a20:	7311      	strb	r1, [r2, #12]
 8010a22:	e7f5      	b.n	8010a10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8010a24:	6822      	ldr	r2, [r4, #0]
 8010a26:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8010a2a:	6802      	ldr	r2, [r0, #0]
 8010a2c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8010a30:	3301      	adds	r3, #1
 8010a32:	e7e7      	b.n	8010a04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8010a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a36:	bf00      	nop
 8010a38:	2400af58 	.word	0x2400af58
 8010a3c:	2400af74 	.word	0x2400af74
 8010a40:	2400af78 	.word	0x2400af78
 8010a44:	2400af6c 	.word	0x2400af6c
 8010a48:	2400af5c 	.word	0x2400af5c
 8010a4c:	2400af64 	.word	0x2400af64
 8010a50:	2400af76 	.word	0x2400af76
 8010a54:	2400af60 	.word	0x2400af60
 8010a58:	2400af70 	.word	0x2400af70
 8010a5c:	2400af68 	.word	0x2400af68

08010a60 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8010a60:	4b10      	ldr	r3, [pc, #64]	; (8010aa4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8010a62:	b510      	push	{r4, lr}
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	b9db      	cbnz	r3, 8010aa0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010a68:	b1d1      	cbz	r1, 8010aa0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8010a6a:	4b0f      	ldr	r3, [pc, #60]	; (8010aa8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8010a6c:	240e      	movs	r4, #14
 8010a6e:	801a      	strh	r2, [r3, #0]
 8010a70:	b292      	uxth	r2, r2
 8010a72:	4b0e      	ldr	r3, [pc, #56]	; (8010aac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8010a74:	881b      	ldrh	r3, [r3, #0]
 8010a76:	4413      	add	r3, r2
 8010a78:	4362      	muls	r2, r4
 8010a7a:	2406      	movs	r4, #6
 8010a7c:	fb04 2203 	mla	r2, r4, r3, r2
 8010a80:	428a      	cmp	r2, r1
 8010a82:	d305      	bcc.n	8010a90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8010a84:	4b0a      	ldr	r3, [pc, #40]	; (8010ab0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8010a86:	2134      	movs	r1, #52	; 0x34
 8010a88:	4a0a      	ldr	r2, [pc, #40]	; (8010ab4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8010a8a:	480b      	ldr	r0, [pc, #44]	; (8010ab8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8010a8c:	f008 fb56 	bl	801913c <__assert_func>
 8010a90:	4b0a      	ldr	r3, [pc, #40]	; (8010abc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8010a92:	6019      	str	r1, [r3, #0]
 8010a94:	4b0a      	ldr	r3, [pc, #40]	; (8010ac0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8010a96:	6018      	str	r0, [r3, #0]
 8010a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a9c:	f7ff bf82 	b.w	80109a4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010aa0:	bd10      	pop	{r4, pc}
 8010aa2:	bf00      	nop
 8010aa4:	2400af64 	.word	0x2400af64
 8010aa8:	2400af78 	.word	0x2400af78
 8010aac:	2400af74 	.word	0x2400af74
 8010ab0:	0801c936 	.word	0x0801c936
 8010ab4:	0801c9cb 	.word	0x0801c9cb
 8010ab8:	0801c911 	.word	0x0801c911
 8010abc:	2400af60 	.word	0x2400af60
 8010ac0:	2400af58 	.word	0x2400af58

08010ac4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010ac4:	b470      	push	{r4, r5, r6}
 8010ac6:	4c07      	ldr	r4, [pc, #28]	; (8010ae4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010ac8:	4605      	mov	r5, r0
 8010aca:	4610      	mov	r0, r2
 8010acc:	9a03      	ldr	r2, [sp, #12]
 8010ace:	6826      	ldr	r6, [r4, #0]
 8010ad0:	b936      	cbnz	r6, 8010ae0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010ad2:	6025      	str	r5, [r4, #0]
 8010ad4:	4c04      	ldr	r4, [pc, #16]	; (8010ae8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010ad6:	8021      	strh	r1, [r4, #0]
 8010ad8:	4619      	mov	r1, r3
 8010ada:	bc70      	pop	{r4, r5, r6}
 8010adc:	f7ff bfc0 	b.w	8010a60 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010ae0:	bc70      	pop	{r4, r5, r6}
 8010ae2:	4770      	bx	lr
 8010ae4:	2400af7c 	.word	0x2400af7c
 8010ae8:	2400af74 	.word	0x2400af74

08010aec <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8010aec:	b508      	push	{r3, lr}
 8010aee:	4b17      	ldr	r3, [pc, #92]	; (8010b4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8010af0:	6819      	ldr	r1, [r3, #0]
 8010af2:	b931      	cbnz	r1, 8010b02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8010af4:	4b16      	ldr	r3, [pc, #88]	; (8010b50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8010af6:	f240 4184 	movw	r1, #1156	; 0x484
 8010afa:	4a16      	ldr	r2, [pc, #88]	; (8010b54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8010afc:	4816      	ldr	r0, [pc, #88]	; (8010b58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8010afe:	f008 fb1d 	bl	801913c <__assert_func>
 8010b02:	4a16      	ldr	r2, [pc, #88]	; (8010b5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8010b04:	8803      	ldrh	r3, [r0, #0]
 8010b06:	8812      	ldrh	r2, [r2, #0]
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d204      	bcs.n	8010b16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8010b0c:	2214      	movs	r2, #20
 8010b0e:	fb02 1303 	mla	r3, r2, r3, r1
 8010b12:	8918      	ldrh	r0, [r3, #8]
 8010b14:	bd08      	pop	{r3, pc}
 8010b16:	4912      	ldr	r1, [pc, #72]	; (8010b60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 8010b18:	8809      	ldrh	r1, [r1, #0]
 8010b1a:	4411      	add	r1, r2
 8010b1c:	428b      	cmp	r3, r1
 8010b1e:	da06      	bge.n	8010b2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8010b20:	1a9b      	subs	r3, r3, r2
 8010b22:	4a10      	ldr	r2, [pc, #64]	; (8010b64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 8010b24:	210e      	movs	r1, #14
 8010b26:	6812      	ldr	r2, [r2, #0]
 8010b28:	fb01 2303 	mla	r3, r1, r3, r2
 8010b2c:	e7f1      	b.n	8010b12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8010b2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d107      	bne.n	8010b46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 8010b36:	4b0c      	ldr	r3, [pc, #48]	; (8010b68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	b913      	cbnz	r3, 8010b42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 8010b3c:	4b0b      	ldr	r3, [pc, #44]	; (8010b6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 8010b3e:	8818      	ldrh	r0, [r3, #0]
 8010b40:	e7e8      	b.n	8010b14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8010b42:	4b0b      	ldr	r3, [pc, #44]	; (8010b70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 8010b44:	e7fb      	b.n	8010b3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 8010b46:	2000      	movs	r0, #0
 8010b48:	e7e4      	b.n	8010b14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8010b4a:	bf00      	nop
 8010b4c:	2400af7c 	.word	0x2400af7c
 8010b50:	0801c98f 	.word	0x0801c98f
 8010b54:	0801ca42 	.word	0x0801ca42
 8010b58:	0801c911 	.word	0x0801c911
 8010b5c:	2400af74 	.word	0x2400af74
 8010b60:	2400af78 	.word	0x2400af78
 8010b64:	2400af5c 	.word	0x2400af5c
 8010b68:	2400aeec 	.word	0x2400aeec
 8010b6c:	2400aeee 	.word	0x2400aeee
 8010b70:	2400aef0 	.word	0x2400aef0

08010b74 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010b74:	b508      	push	{r3, lr}
 8010b76:	4b17      	ldr	r3, [pc, #92]	; (8010bd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8010b78:	6819      	ldr	r1, [r3, #0]
 8010b7a:	b931      	cbnz	r1, 8010b8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8010b7c:	4b16      	ldr	r3, [pc, #88]	; (8010bd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8010b7e:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8010b82:	4a16      	ldr	r2, [pc, #88]	; (8010bdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8010b84:	4816      	ldr	r0, [pc, #88]	; (8010be0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8010b86:	f008 fad9 	bl	801913c <__assert_func>
 8010b8a:	4a16      	ldr	r2, [pc, #88]	; (8010be4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8010b8c:	8803      	ldrh	r3, [r0, #0]
 8010b8e:	8812      	ldrh	r2, [r2, #0]
 8010b90:	4293      	cmp	r3, r2
 8010b92:	d204      	bcs.n	8010b9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8010b94:	2214      	movs	r2, #20
 8010b96:	fb02 1303 	mla	r3, r2, r3, r1
 8010b9a:	8958      	ldrh	r0, [r3, #10]
 8010b9c:	bd08      	pop	{r3, pc}
 8010b9e:	4912      	ldr	r1, [pc, #72]	; (8010be8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8010ba0:	8809      	ldrh	r1, [r1, #0]
 8010ba2:	4411      	add	r1, r2
 8010ba4:	428b      	cmp	r3, r1
 8010ba6:	da06      	bge.n	8010bb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8010ba8:	1a9b      	subs	r3, r3, r2
 8010baa:	4a10      	ldr	r2, [pc, #64]	; (8010bec <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 8010bac:	210e      	movs	r1, #14
 8010bae:	6812      	ldr	r2, [r2, #0]
 8010bb0:	fb01 2303 	mla	r3, r1, r3, r2
 8010bb4:	e7f1      	b.n	8010b9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8010bb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d107      	bne.n	8010bce <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 8010bbe:	4b0c      	ldr	r3, [pc, #48]	; (8010bf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	b913      	cbnz	r3, 8010bca <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 8010bc4:	4b0b      	ldr	r3, [pc, #44]	; (8010bf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 8010bc6:	8818      	ldrh	r0, [r3, #0]
 8010bc8:	e7e8      	b.n	8010b9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8010bca:	4b0b      	ldr	r3, [pc, #44]	; (8010bf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 8010bcc:	e7fb      	b.n	8010bc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 8010bce:	2000      	movs	r0, #0
 8010bd0:	e7e4      	b.n	8010b9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8010bd2:	bf00      	nop
 8010bd4:	2400af7c 	.word	0x2400af7c
 8010bd8:	0801c98f 	.word	0x0801c98f
 8010bdc:	0801ca6e 	.word	0x0801ca6e
 8010be0:	0801c911 	.word	0x0801c911
 8010be4:	2400af74 	.word	0x2400af74
 8010be8:	2400af78 	.word	0x2400af78
 8010bec:	2400af5c 	.word	0x2400af5c
 8010bf0:	2400aeec 	.word	0x2400aeec
 8010bf4:	2400aef0 	.word	0x2400aef0
 8010bf8:	2400aeee 	.word	0x2400aeee

08010bfc <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010bfc:	b508      	push	{r3, lr}
 8010bfe:	4b12      	ldr	r3, [pc, #72]	; (8010c48 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010c00:	6819      	ldr	r1, [r3, #0]
 8010c02:	b931      	cbnz	r1, 8010c12 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8010c04:	4b11      	ldr	r3, [pc, #68]	; (8010c4c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8010c06:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8010c0a:	4a11      	ldr	r2, [pc, #68]	; (8010c50 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010c0c:	4811      	ldr	r0, [pc, #68]	; (8010c54 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010c0e:	f008 fa95 	bl	801913c <__assert_func>
 8010c12:	8803      	ldrh	r3, [r0, #0]
 8010c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d012      	beq.n	8010c42 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8010c1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d103      	bne.n	8010c2c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8010c24:	4b0c      	ldr	r3, [pc, #48]	; (8010c58 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8010c2a:	bd08      	pop	{r3, pc}
 8010c2c:	4a0b      	ldr	r2, [pc, #44]	; (8010c5c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8010c2e:	6812      	ldr	r2, [r2, #0]
 8010c30:	b11a      	cbz	r2, 8010c3a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8010c32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d1f7      	bne.n	8010c2a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010c3a:	2214      	movs	r2, #20
 8010c3c:	4353      	muls	r3, r2
 8010c3e:	58c8      	ldr	r0, [r1, r3]
 8010c40:	e7f3      	b.n	8010c2a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010c42:	2000      	movs	r0, #0
 8010c44:	e7f1      	b.n	8010c2a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8010c46:	bf00      	nop
 8010c48:	2400af7c 	.word	0x2400af7c
 8010c4c:	0801c98f 	.word	0x0801c98f
 8010c50:	0801ca11 	.word	0x0801ca11
 8010c54:	0801c911 	.word	0x0801c911
 8010c58:	2400aef4 	.word	0x2400aef4
 8010c5c:	2400af58 	.word	0x2400af58

08010c60 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010c60:	8802      	ldrh	r2, [r0, #0]
 8010c62:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d845      	bhi.n	8010cf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8010c6a:	4b24      	ldr	r3, [pc, #144]	; (8010cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8010c6c:	8818      	ldrh	r0, [r3, #0]
 8010c6e:	4282      	cmp	r2, r0
 8010c70:	d221      	bcs.n	8010cb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8010c72:	4b23      	ldr	r3, [pc, #140]	; (8010d00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8010c74:	6819      	ldr	r1, [r3, #0]
 8010c76:	2314      	movs	r3, #20
 8010c78:	fb03 1302 	mla	r3, r3, r2, r1
 8010c7c:	6858      	ldr	r0, [r3, #4]
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d03a      	beq.n	8010cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8010c82:	4920      	ldr	r1, [pc, #128]	; (8010d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010c84:	6809      	ldr	r1, [r1, #0]
 8010c86:	2900      	cmp	r1, #0
 8010c88:	d036      	beq.n	8010cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8010c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010c8e:	2900      	cmp	r1, #0
 8010c90:	d032      	beq.n	8010cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8010c92:	891a      	ldrh	r2, [r3, #8]
 8010c94:	8958      	ldrh	r0, [r3, #10]
 8010c96:	4350      	muls	r0, r2
 8010c98:	7c5a      	ldrb	r2, [r3, #17]
 8010c9a:	7cdb      	ldrb	r3, [r3, #19]
 8010c9c:	0952      	lsrs	r2, r2, #5
 8010c9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010ca2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010ca6:	2b0b      	cmp	r3, #11
 8010ca8:	bf18      	it	ne
 8010caa:	0040      	lslne	r0, r0, #1
 8010cac:	3003      	adds	r0, #3
 8010cae:	f020 0003 	bic.w	r0, r0, #3
 8010cb2:	4408      	add	r0, r1
 8010cb4:	4770      	bx	lr
 8010cb6:	4b14      	ldr	r3, [pc, #80]	; (8010d08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	4403      	add	r3, r0
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	da1a      	bge.n	8010cf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8010cc0:	4b12      	ldr	r3, [pc, #72]	; (8010d0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 8010cc2:	1a10      	subs	r0, r2, r0
 8010cc4:	210e      	movs	r1, #14
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	fb01 3000 	mla	r0, r1, r0, r3
 8010ccc:	7b03      	ldrb	r3, [r0, #12]
 8010cce:	f003 031f 	and.w	r3, r3, #31
 8010cd2:	2b0b      	cmp	r3, #11
 8010cd4:	d10b      	bne.n	8010cee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8010cd6:	8903      	ldrh	r3, [r0, #8]
 8010cd8:	8940      	ldrh	r0, [r0, #10]
 8010cda:	4358      	muls	r0, r3
 8010cdc:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010cde:	3003      	adds	r0, #3
 8010ce0:	6819      	ldr	r1, [r3, #0]
 8010ce2:	f020 0303 	bic.w	r3, r0, #3
 8010ce6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8010cea:	4418      	add	r0, r3
 8010cec:	4770      	bx	lr
 8010cee:	2b0d      	cmp	r3, #13
 8010cf0:	d101      	bne.n	8010cf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8010cf2:	300d      	adds	r0, #13
 8010cf4:	4770      	bx	lr
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	2400af74 	.word	0x2400af74
 8010d00:	2400af7c 	.word	0x2400af7c
 8010d04:	2400af58 	.word	0x2400af58
 8010d08:	2400af78 	.word	0x2400af78
 8010d0c:	2400af5c 	.word	0x2400af5c

08010d10 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010d10:	4b17      	ldr	r3, [pc, #92]	; (8010d70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8010d12:	b510      	push	{r4, lr}
 8010d14:	6819      	ldr	r1, [r3, #0]
 8010d16:	8803      	ldrh	r3, [r0, #0]
 8010d18:	b1e9      	cbz	r1, 8010d56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8010d1a:	4a16      	ldr	r2, [pc, #88]	; (8010d74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8010d1c:	8812      	ldrh	r2, [r2, #0]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d90a      	bls.n	8010d38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8010d22:	2214      	movs	r2, #20
 8010d24:	fb02 1303 	mla	r3, r2, r3, r1
 8010d28:	7c58      	ldrb	r0, [r3, #17]
 8010d2a:	0942      	lsrs	r2, r0, #5
 8010d2c:	7cd8      	ldrb	r0, [r3, #19]
 8010d2e:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8010d32:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8010d36:	bd10      	pop	{r4, pc}
 8010d38:	490f      	ldr	r1, [pc, #60]	; (8010d78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8010d3a:	8809      	ldrh	r1, [r1, #0]
 8010d3c:	4411      	add	r1, r2
 8010d3e:	428b      	cmp	r3, r1
 8010d40:	da09      	bge.n	8010d56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8010d42:	1a9b      	subs	r3, r3, r2
 8010d44:	4a0d      	ldr	r2, [pc, #52]	; (8010d7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8010d46:	210e      	movs	r1, #14
 8010d48:	6812      	ldr	r2, [r2, #0]
 8010d4a:	fb01 2303 	mla	r3, r1, r3, r2
 8010d4e:	7b18      	ldrb	r0, [r3, #12]
 8010d50:	f000 001f 	and.w	r0, r0, #31
 8010d54:	e7ef      	b.n	8010d36 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8010d56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d106      	bne.n	8010d6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8010d5e:	f7fa f951 	bl	800b004 <_ZN8touchgfx3HAL3lcdEv>
 8010d62:	6803      	ldr	r3, [r0, #0]
 8010d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6a:	4718      	bx	r3
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	e7e2      	b.n	8010d36 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8010d70:	2400af7c 	.word	0x2400af7c
 8010d74:	2400af74 	.word	0x2400af74
 8010d78:	2400af78 	.word	0x2400af78
 8010d7c:	2400af5c 	.word	0x2400af5c

08010d80 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8010d80:	2018      	movs	r0, #24
 8010d82:	4770      	bx	lr

08010d84 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8010d84:	2001      	movs	r0, #1
 8010d86:	4770      	bx	lr

08010d88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	b085      	sub	sp, #20
 8010d8e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010d90:	9203      	str	r2, [sp, #12]
 8010d92:	6870      	ldr	r0, [r6, #4]
 8010d94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010d98:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010d9c:	9101      	str	r1, [sp, #4]
 8010d9e:	fa1f f885 	uxth.w	r8, r5
 8010da2:	43ed      	mvns	r5, r5
 8010da4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010da8:	b2ed      	uxtb	r5, r5
 8010daa:	fb00 2404 	mla	r4, r0, r4, r2
 8010dae:	6832      	ldr	r2, [r6, #0]
 8010db0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010db4:	4414      	add	r4, r2
 8010db6:	f8dc 2000 	ldr.w	r2, [ip]
 8010dba:	9202      	str	r2, [sp, #8]
 8010dbc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010dc0:	f102 0e04 	add.w	lr, r2, #4
 8010dc4:	9a01      	ldr	r2, [sp, #4]
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	dc03      	bgt.n	8010dd2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8010dca:	9a03      	ldr	r2, [sp, #12]
 8010dcc:	2a00      	cmp	r2, #0
 8010dce:	f340 8116 	ble.w	8010ffe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8010dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010dd4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8010dd8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010dde:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8010de2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	dd0e      	ble.n	8010e08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8010dea:	1406      	asrs	r6, r0, #16
 8010dec:	d405      	bmi.n	8010dfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010dee:	4556      	cmp	r6, sl
 8010df0:	da03      	bge.n	8010dfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010df2:	1416      	asrs	r6, r2, #16
 8010df4:	d401      	bmi.n	8010dfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010df6:	454e      	cmp	r6, r9
 8010df8:	db07      	blt.n	8010e0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8010dfa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	3403      	adds	r4, #3
 8010e00:	4430      	add	r0, r6
 8010e02:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010e04:	4432      	add	r2, r6
 8010e06:	e7ee      	b.n	8010de6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8010e08:	d063      	beq.n	8010ed2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010e0a:	1e5e      	subs	r6, r3, #1
 8010e0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010e0e:	fb07 0706 	mla	r7, r7, r6, r0
 8010e12:	143f      	asrs	r7, r7, #16
 8010e14:	d454      	bmi.n	8010ec0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010e16:	4557      	cmp	r7, sl
 8010e18:	da52      	bge.n	8010ec0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010e1a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8010e1c:	fb07 2606 	mla	r6, r7, r6, r2
 8010e20:	1436      	asrs	r6, r6, #16
 8010e22:	d44d      	bmi.n	8010ec0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010e24:	454e      	cmp	r6, r9
 8010e26:	da4b      	bge.n	8010ec0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010e28:	1ce6      	adds	r6, r4, #3
 8010e2a:	4699      	mov	r9, r3
 8010e2c:	f1b9 0f00 	cmp.w	r9, #0
 8010e30:	f106 0603 	add.w	r6, r6, #3
 8010e34:	dd48      	ble.n	8010ec8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8010e36:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8010e3a:	1417      	asrs	r7, r2, #16
 8010e3c:	9902      	ldr	r1, [sp, #8]
 8010e3e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010e42:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e46:	fb0b 1707 	mla	r7, fp, r7, r1
 8010e4a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8010e4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010e50:	f817 700a 	ldrb.w	r7, [r7, sl]
 8010e54:	fb1b fb05 	smulbb	fp, fp, r5
 8010e58:	4408      	add	r0, r1
 8010e5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010e5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010e60:	440a      	add	r2, r1
 8010e62:	eb0e 0a07 	add.w	sl, lr, r7
 8010e66:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8010e6a:	fb07 b708 	mla	r7, r7, r8, fp
 8010e6e:	b2bf      	uxth	r7, r7
 8010e70:	f107 0b01 	add.w	fp, r7, #1
 8010e74:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010e78:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8010e7c:	fb1b fb05 	smulbb	fp, fp, r5
 8010e80:	123f      	asrs	r7, r7, #8
 8010e82:	f806 7c06 	strb.w	r7, [r6, #-6]
 8010e86:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8010e8a:	fb07 b708 	mla	r7, r7, r8, fp
 8010e8e:	b2bf      	uxth	r7, r7
 8010e90:	f107 0b01 	add.w	fp, r7, #1
 8010e94:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010e98:	123f      	asrs	r7, r7, #8
 8010e9a:	f806 7c05 	strb.w	r7, [r6, #-5]
 8010e9e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8010ea2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010ea6:	fb1a fa05 	smulbb	sl, sl, r5
 8010eaa:	fb07 a708 	mla	r7, r7, r8, sl
 8010eae:	b2bf      	uxth	r7, r7
 8010eb0:	f107 0a01 	add.w	sl, r7, #1
 8010eb4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8010eb8:	123f      	asrs	r7, r7, #8
 8010eba:	f806 7c04 	strb.w	r7, [r6, #-4]
 8010ebe:	e7b5      	b.n	8010e2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8010ec0:	2700      	movs	r7, #0
 8010ec2:	1bde      	subs	r6, r3, r7
 8010ec4:	2e00      	cmp	r6, #0
 8010ec6:	dc42      	bgt.n	8010f4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8010ec8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010ed0:	441c      	add	r4, r3
 8010ed2:	9b01      	ldr	r3, [sp, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f340 8092 	ble.w	8010ffe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8010eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ee0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010ee4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010ee8:	eef0 6a62 	vmov.f32	s13, s5
 8010eec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010ef0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010ef4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010ef8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8010efc:	eef0 6a43 	vmov.f32	s13, s6
 8010f00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010f04:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8010f08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010f0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010f10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010f14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010f18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010f1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010f20:	ee12 2a90 	vmov	r2, s5
 8010f24:	eef0 2a47 	vmov.f32	s5, s14
 8010f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f2c:	ee13 2a10 	vmov	r2, s6
 8010f30:	9311      	str	r3, [sp, #68]	; 0x44
 8010f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f34:	eeb0 3a67 	vmov.f32	s6, s15
 8010f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f3c:	9312      	str	r3, [sp, #72]	; 0x48
 8010f3e:	9b01      	ldr	r3, [sp, #4]
 8010f40:	9a03      	ldr	r2, [sp, #12]
 8010f42:	3b01      	subs	r3, #1
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f48:	bf08      	it	eq
 8010f4a:	4613      	moveq	r3, r2
 8010f4c:	e73a      	b.n	8010dc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8010f4e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8010f52:	d44e      	bmi.n	8010ff2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010f54:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010f58:	4556      	cmp	r6, sl
 8010f5a:	dd4a      	ble.n	8010ff2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010f5c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8010f60:	d447      	bmi.n	8010ff2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010f62:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010f66:	4559      	cmp	r1, fp
 8010f68:	dd43      	ble.n	8010ff2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010f6a:	fa0f f986 	sxth.w	r9, r6
 8010f6e:	9902      	ldr	r1, [sp, #8]
 8010f70:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010f74:	fb0b 1909 	mla	r9, fp, r9, r1
 8010f78:	f814 b006 	ldrb.w	fp, [r4, r6]
 8010f7c:	f819 900a 	ldrb.w	r9, [r9, sl]
 8010f80:	fb1b fb05 	smulbb	fp, fp, r5
 8010f84:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010f88:	eb0e 0a09 	add.w	sl, lr, r9
 8010f8c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8010f90:	fb09 b908 	mla	r9, r9, r8, fp
 8010f94:	fa1f f989 	uxth.w	r9, r9
 8010f98:	f109 0b01 	add.w	fp, r9, #1
 8010f9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010fa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010fa4:	f804 9006 	strb.w	r9, [r4, r6]
 8010fa8:	4426      	add	r6, r4
 8010faa:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010fae:	f896 b001 	ldrb.w	fp, [r6, #1]
 8010fb2:	fb1b fb05 	smulbb	fp, fp, r5
 8010fb6:	fb09 b908 	mla	r9, r9, r8, fp
 8010fba:	fa1f f989 	uxth.w	r9, r9
 8010fbe:	f109 0b01 	add.w	fp, r9, #1
 8010fc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010fc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010fca:	f886 9001 	strb.w	r9, [r6, #1]
 8010fce:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010fd2:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010fd6:	fb1a fa05 	smulbb	sl, sl, r5
 8010fda:	fb09 a908 	mla	r9, r9, r8, sl
 8010fde:	fa1f f989 	uxth.w	r9, r9
 8010fe2:	f109 0a01 	add.w	sl, r9, #1
 8010fe6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8010fea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010fee:	f886 9002 	strb.w	r9, [r6, #2]
 8010ff2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010ff4:	3701      	adds	r7, #1
 8010ff6:	4408      	add	r0, r1
 8010ff8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010ffa:	440a      	add	r2, r1
 8010ffc:	e761      	b.n	8010ec2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010ffe:	b005      	add	sp, #20
 8011000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011004 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011008:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801100a:	4693      	mov	fp, r2
 801100c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801100e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011012:	6868      	ldr	r0, [r5, #4]
 8011014:	6877      	ldr	r7, [r6, #4]
 8011016:	9100      	str	r1, [sp, #0]
 8011018:	3704      	adds	r7, #4
 801101a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801101e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8011022:	fb00 2404 	mla	r4, r0, r4, r2
 8011026:	682a      	ldr	r2, [r5, #0]
 8011028:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801102c:	4414      	add	r4, r2
 801102e:	6832      	ldr	r2, [r6, #0]
 8011030:	9201      	str	r2, [sp, #4]
 8011032:	9a00      	ldr	r2, [sp, #0]
 8011034:	2a00      	cmp	r2, #0
 8011036:	dc03      	bgt.n	8011040 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011038:	f1bb 0f00 	cmp.w	fp, #0
 801103c:	f340 80bc 	ble.w	80111b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8011040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011042:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8011046:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801104a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801104c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8011050:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011054:	2b00      	cmp	r3, #0
 8011056:	dd0c      	ble.n	8011072 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011058:	1405      	asrs	r5, r0, #16
 801105a:	d405      	bmi.n	8011068 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801105c:	4555      	cmp	r5, sl
 801105e:	da03      	bge.n	8011068 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011060:	1415      	asrs	r5, r2, #16
 8011062:	d401      	bmi.n	8011068 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011064:	454d      	cmp	r5, r9
 8011066:	db05      	blt.n	8011074 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011068:	4440      	add	r0, r8
 801106a:	4472      	add	r2, lr
 801106c:	3b01      	subs	r3, #1
 801106e:	3403      	adds	r4, #3
 8011070:	e7f0      	b.n	8011054 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8011072:	d03f      	beq.n	80110f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8011074:	1e5d      	subs	r5, r3, #1
 8011076:	fb08 0c05 	mla	ip, r8, r5, r0
 801107a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801107e:	d42e      	bmi.n	80110de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011080:	45d4      	cmp	ip, sl
 8011082:	da2c      	bge.n	80110de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011084:	fb0e 2505 	mla	r5, lr, r5, r2
 8011088:	142d      	asrs	r5, r5, #16
 801108a:	d428      	bmi.n	80110de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801108c:	454d      	cmp	r5, r9
 801108e:	da26      	bge.n	80110de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8011090:	1ce5      	adds	r5, r4, #3
 8011092:	469c      	mov	ip, r3
 8011094:	f1bc 0f00 	cmp.w	ip, #0
 8011098:	f105 0503 	add.w	r5, r5, #3
 801109c:	dd25      	ble.n	80110ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801109e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80110a2:	ea4f 4922 	mov.w	r9, r2, asr #16
 80110a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80110aa:	4472      	add	r2, lr
 80110ac:	468a      	mov	sl, r1
 80110ae:	9901      	ldr	r1, [sp, #4]
 80110b0:	fb0a 1909 	mla	r9, sl, r9, r1
 80110b4:	1401      	asrs	r1, r0, #16
 80110b6:	4440      	add	r0, r8
 80110b8:	f819 9001 	ldrb.w	r9, [r9, r1]
 80110bc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80110c0:	eb07 0a09 	add.w	sl, r7, r9
 80110c4:	f817 9009 	ldrb.w	r9, [r7, r9]
 80110c8:	f805 9c06 	strb.w	r9, [r5, #-6]
 80110cc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80110d0:	f805 9c05 	strb.w	r9, [r5, #-5]
 80110d4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80110d8:	f805 9c04 	strb.w	r9, [r5, #-4]
 80110dc:	e7da      	b.n	8011094 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80110de:	2500      	movs	r5, #0
 80110e0:	eba3 0c05 	sub.w	ip, r3, r5
 80110e4:	f1bc 0f00 	cmp.w	ip, #0
 80110e8:	dc3b      	bgt.n	8011162 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80110ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80110ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80110f2:	441c      	add	r4, r3
 80110f4:	9b00      	ldr	r3, [sp, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	dd5e      	ble.n	80111b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80110fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80110fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011100:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011104:	eeb0 6a62 	vmov.f32	s12, s5
 8011108:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801110c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011110:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011114:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011118:	eeb0 6a43 	vmov.f32	s12, s6
 801111c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011120:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011124:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011128:	ee61 7a27 	vmul.f32	s15, s2, s15
 801112c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011130:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011134:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011138:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801113c:	ee12 2a90 	vmov	r2, s5
 8011140:	eef0 2a47 	vmov.f32	s5, s14
 8011144:	fb92 f8f3 	sdiv	r8, r2, r3
 8011148:	ee13 2a10 	vmov	r2, s6
 801114c:	eeb0 3a67 	vmov.f32	s6, s15
 8011150:	fb92 fef3 	sdiv	lr, r2, r3
 8011154:	9b00      	ldr	r3, [sp, #0]
 8011156:	3b01      	subs	r3, #1
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801115c:	bf08      	it	eq
 801115e:	465b      	moveq	r3, fp
 8011160:	e767      	b.n	8011032 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8011162:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011166:	d423      	bmi.n	80111b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011168:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801116c:	45cc      	cmp	ip, r9
 801116e:	dd1f      	ble.n	80111b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011170:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011174:	d41c      	bmi.n	80111b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8011176:	68f1      	ldr	r1, [r6, #12]
 8011178:	4551      	cmp	r1, sl
 801117a:	dd19      	ble.n	80111b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801117c:	fa0f fc8c 	sxth.w	ip, ip
 8011180:	9901      	ldr	r1, [sp, #4]
 8011182:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8011186:	f81c c009 	ldrb.w	ip, [ip, r9]
 801118a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801118e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8011192:	eb07 090c 	add.w	r9, r7, ip
 8011196:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801119a:	f804 a00c 	strb.w	sl, [r4, ip]
 801119e:	44a4      	add	ip, r4
 80111a0:	f899 a001 	ldrb.w	sl, [r9, #1]
 80111a4:	f88c a001 	strb.w	sl, [ip, #1]
 80111a8:	f899 9002 	ldrb.w	r9, [r9, #2]
 80111ac:	f88c 9002 	strb.w	r9, [ip, #2]
 80111b0:	4440      	add	r0, r8
 80111b2:	4472      	add	r2, lr
 80111b4:	3501      	adds	r5, #1
 80111b6:	e793      	b.n	80110e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80111b8:	b003      	add	sp, #12
 80111ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80111be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c2:	b085      	sub	sp, #20
 80111c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80111ca:	9202      	str	r2, [sp, #8]
 80111cc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80111d0:	6860      	ldr	r0, [r4, #4]
 80111d2:	9203      	str	r2, [sp, #12]
 80111d4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80111d8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80111dc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80111e0:	fb00 2505 	mla	r5, r0, r5, r2
 80111e4:	6822      	ldr	r2, [r4, #0]
 80111e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111ea:	4415      	add	r5, r2
 80111ec:	f8dc 2000 	ldr.w	r2, [ip]
 80111f0:	9200      	str	r2, [sp, #0]
 80111f2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80111f6:	3204      	adds	r2, #4
 80111f8:	9201      	str	r2, [sp, #4]
 80111fa:	2900      	cmp	r1, #0
 80111fc:	dc03      	bgt.n	8011206 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80111fe:	9a02      	ldr	r2, [sp, #8]
 8011200:	2a00      	cmp	r2, #0
 8011202:	f340 8127 	ble.w	8011454 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8011206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011208:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801120c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011210:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011212:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011216:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801121a:	2b00      	cmp	r3, #0
 801121c:	dd0d      	ble.n	801123a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801121e:	1422      	asrs	r2, r4, #16
 8011220:	d405      	bmi.n	801122e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011222:	4542      	cmp	r2, r8
 8011224:	da03      	bge.n	801122e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011226:	1402      	asrs	r2, r0, #16
 8011228:	d401      	bmi.n	801122e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801122a:	42ba      	cmp	r2, r7
 801122c:	db06      	blt.n	801123c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801122e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011230:	4474      	add	r4, lr
 8011232:	3b01      	subs	r3, #1
 8011234:	3503      	adds	r5, #3
 8011236:	4410      	add	r0, r2
 8011238:	e7ef      	b.n	801121a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801123a:	d075      	beq.n	8011328 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801123c:	1e5a      	subs	r2, r3, #1
 801123e:	fb0e 4602 	mla	r6, lr, r2, r4
 8011242:	1436      	asrs	r6, r6, #16
 8011244:	d465      	bmi.n	8011312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011246:	4546      	cmp	r6, r8
 8011248:	da63      	bge.n	8011312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801124a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801124c:	fb06 0202 	mla	r2, r6, r2, r0
 8011250:	1412      	asrs	r2, r2, #16
 8011252:	d45e      	bmi.n	8011312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011254:	42ba      	cmp	r2, r7
 8011256:	da5c      	bge.n	8011312 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8011258:	1cef      	adds	r7, r5, #3
 801125a:	4699      	mov	r9, r3
 801125c:	f1b9 0f00 	cmp.w	r9, #0
 8011260:	dd5d      	ble.n	801131e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8011262:	1402      	asrs	r2, r0, #16
 8011264:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011268:	1426      	asrs	r6, r4, #16
 801126a:	4692      	mov	sl, r2
 801126c:	9a00      	ldr	r2, [sp, #0]
 801126e:	fb08 220a 	mla	r2, r8, sl, r2
 8011272:	5d92      	ldrb	r2, [r2, r6]
 8011274:	9e01      	ldr	r6, [sp, #4]
 8011276:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801127a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801127e:	d041      	beq.n	8011304 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011280:	9a03      	ldr	r2, [sp, #12]
 8011282:	fa5f fb86 	uxtb.w	fp, r6
 8011286:	fb02 f808 	mul.w	r8, r2, r8
 801128a:	f108 0201 	add.w	r2, r8, #1
 801128e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8011292:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8011296:	1212      	asrs	r2, r2, #8
 8011298:	fa1f fa82 	uxth.w	sl, r2
 801129c:	43d2      	mvns	r2, r2
 801129e:	fb1b fb0a 	smulbb	fp, fp, sl
 80112a2:	b2d2      	uxtb	r2, r2
 80112a4:	fb08 b802 	mla	r8, r8, r2, fp
 80112a8:	fa1f f888 	uxth.w	r8, r8
 80112ac:	f108 0b01 	add.w	fp, r8, #1
 80112b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80112b4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80112b8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80112bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80112c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80112c4:	fb16 fa0a 	smulbb	sl, r6, sl
 80112c8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80112cc:	f807 8c03 	strb.w	r8, [r7, #-3]
 80112d0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80112d4:	fb06 aa02 	mla	sl, r6, r2, sl
 80112d8:	fb08 b802 	mla	r8, r8, r2, fp
 80112dc:	fa1f fa8a 	uxth.w	sl, sl
 80112e0:	fa1f f888 	uxth.w	r8, r8
 80112e4:	f10a 0601 	add.w	r6, sl, #1
 80112e8:	f108 0b01 	add.w	fp, r8, #1
 80112ec:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80112f0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80112f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80112f8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80112fc:	f807 ac01 	strb.w	sl, [r7, #-1]
 8011300:	f807 8c02 	strb.w	r8, [r7, #-2]
 8011304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011306:	4474      	add	r4, lr
 8011308:	3703      	adds	r7, #3
 801130a:	f109 39ff 	add.w	r9, r9, #4294967295
 801130e:	4410      	add	r0, r2
 8011310:	e7a4      	b.n	801125c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8011312:	f04f 0800 	mov.w	r8, #0
 8011316:	eba3 0208 	sub.w	r2, r3, r8
 801131a:	2a00      	cmp	r2, #0
 801131c:	dc3b      	bgt.n	8011396 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801131e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011326:	441d      	add	r5, r3
 8011328:	2900      	cmp	r1, #0
 801132a:	f340 8093 	ble.w	8011454 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801132e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011334:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011338:	3901      	subs	r1, #1
 801133a:	eeb0 6a62 	vmov.f32	s12, s5
 801133e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011342:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011346:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801134a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801134e:	eeb0 6a43 	vmov.f32	s12, s6
 8011352:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011356:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801135a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801135e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011362:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011366:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801136a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801136e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011372:	ee12 2a90 	vmov	r2, s5
 8011376:	eef0 2a47 	vmov.f32	s5, s14
 801137a:	fb92 fef3 	sdiv	lr, r2, r3
 801137e:	ee13 2a10 	vmov	r2, s6
 8011382:	eeb0 3a67 	vmov.f32	s6, s15
 8011386:	fb92 f3f3 	sdiv	r3, r2, r3
 801138a:	9a02      	ldr	r2, [sp, #8]
 801138c:	9312      	str	r3, [sp, #72]	; 0x48
 801138e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011390:	bf08      	it	eq
 8011392:	4613      	moveq	r3, r2
 8011394:	e731      	b.n	80111fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8011396:	1427      	asrs	r7, r4, #16
 8011398:	d456      	bmi.n	8011448 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801139a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801139e:	42be      	cmp	r6, r7
 80113a0:	dd52      	ble.n	8011448 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80113a2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80113a6:	d44f      	bmi.n	8011448 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80113a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80113ac:	454a      	cmp	r2, r9
 80113ae:	dd4b      	ble.n	8011448 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80113b0:	9a00      	ldr	r2, [sp, #0]
 80113b2:	b236      	sxth	r6, r6
 80113b4:	fb09 2606 	mla	r6, r9, r6, r2
 80113b8:	5df2      	ldrb	r2, [r6, r7]
 80113ba:	9e01      	ldr	r6, [sp, #4]
 80113bc:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80113c0:	0e3a      	lsrs	r2, r7, #24
 80113c2:	d041      	beq.n	8011448 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80113c4:	9e03      	ldr	r6, [sp, #12]
 80113c6:	fa5f fb87 	uxtb.w	fp, r7
 80113ca:	4372      	muls	r2, r6
 80113cc:	1c56      	adds	r6, r2, #1
 80113ce:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80113d2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80113d6:	1212      	asrs	r2, r2, #8
 80113d8:	f815 9006 	ldrb.w	r9, [r5, r6]
 80113dc:	fa1f fa82 	uxth.w	sl, r2
 80113e0:	43d2      	mvns	r2, r2
 80113e2:	fb1b fb0a 	smulbb	fp, fp, sl
 80113e6:	b2d2      	uxtb	r2, r2
 80113e8:	fb09 b902 	mla	r9, r9, r2, fp
 80113ec:	fa1f f989 	uxth.w	r9, r9
 80113f0:	f109 0b01 	add.w	fp, r9, #1
 80113f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80113f8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80113fc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011400:	fb1b fb0a 	smulbb	fp, fp, sl
 8011404:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011408:	fb17 fa0a 	smulbb	sl, r7, sl
 801140c:	f805 9006 	strb.w	r9, [r5, r6]
 8011410:	442e      	add	r6, r5
 8011412:	78b7      	ldrb	r7, [r6, #2]
 8011414:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011418:	fb07 aa02 	mla	sl, r7, r2, sl
 801141c:	fb09 b902 	mla	r9, r9, r2, fp
 8011420:	fa1f fa8a 	uxth.w	sl, sl
 8011424:	fa1f f989 	uxth.w	r9, r9
 8011428:	f10a 0701 	add.w	r7, sl, #1
 801142c:	f109 0b01 	add.w	fp, r9, #1
 8011430:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011434:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011438:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801143c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011440:	f886 a002 	strb.w	sl, [r6, #2]
 8011444:	f886 9001 	strb.w	r9, [r6, #1]
 8011448:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801144a:	4474      	add	r4, lr
 801144c:	f108 0801 	add.w	r8, r8, #1
 8011450:	4410      	add	r0, r2
 8011452:	e760      	b.n	8011316 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8011454:	b005      	add	sp, #20
 8011456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801145a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801145a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145e:	b085      	sub	sp, #20
 8011460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011464:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011466:	9203      	str	r2, [sp, #12]
 8011468:	6868      	ldr	r0, [r5, #4]
 801146a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801146e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011472:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8011476:	fb00 2404 	mla	r4, r0, r4, r2
 801147a:	682a      	ldr	r2, [r5, #0]
 801147c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011480:	4414      	add	r4, r2
 8011482:	f8dc 2000 	ldr.w	r2, [ip]
 8011486:	9201      	str	r2, [sp, #4]
 8011488:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801148c:	3204      	adds	r2, #4
 801148e:	9202      	str	r2, [sp, #8]
 8011490:	2900      	cmp	r1, #0
 8011492:	dc03      	bgt.n	801149c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8011494:	9a03      	ldr	r2, [sp, #12]
 8011496:	2a00      	cmp	r2, #0
 8011498:	f340 8137 	ble.w	801170a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801149c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801149e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80114a2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80114a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80114a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80114ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	dd0d      	ble.n	80114d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80114b4:	1405      	asrs	r5, r0, #16
 80114b6:	d405      	bmi.n	80114c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80114b8:	4545      	cmp	r5, r8
 80114ba:	da03      	bge.n	80114c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80114bc:	1415      	asrs	r5, r2, #16
 80114be:	d401      	bmi.n	80114c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80114c0:	42bd      	cmp	r5, r7
 80114c2:	db06      	blt.n	80114d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80114c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80114c6:	4470      	add	r0, lr
 80114c8:	3b01      	subs	r3, #1
 80114ca:	3403      	adds	r4, #3
 80114cc:	442a      	add	r2, r5
 80114ce:	e7ef      	b.n	80114b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80114d0:	d070      	beq.n	80115b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80114d2:	1e5d      	subs	r5, r3, #1
 80114d4:	fb0e 0605 	mla	r6, lr, r5, r0
 80114d8:	1436      	asrs	r6, r6, #16
 80114da:	d462      	bmi.n	80115a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80114dc:	4546      	cmp	r6, r8
 80114de:	da60      	bge.n	80115a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80114e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80114e2:	fb06 2505 	mla	r5, r6, r5, r2
 80114e6:	142d      	asrs	r5, r5, #16
 80114e8:	d45b      	bmi.n	80115a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80114ea:	42bd      	cmp	r5, r7
 80114ec:	da59      	bge.n	80115a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80114ee:	1ce5      	adds	r5, r4, #3
 80114f0:	469a      	mov	sl, r3
 80114f2:	f1ba 0f00 	cmp.w	sl, #0
 80114f6:	dd58      	ble.n	80115aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80114f8:	1416      	asrs	r6, r2, #16
 80114fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80114fe:	1407      	asrs	r7, r0, #16
 8011500:	46b1      	mov	r9, r6
 8011502:	9e01      	ldr	r6, [sp, #4]
 8011504:	fb08 6609 	mla	r6, r8, r9, r6
 8011508:	5df6      	ldrb	r6, [r6, r7]
 801150a:	9f02      	ldr	r7, [sp, #8]
 801150c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8011510:	0e37      	lsrs	r7, r6, #24
 8011512:	2fff      	cmp	r7, #255	; 0xff
 8011514:	f000 80f0 	beq.w	80116f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8011518:	fa5f f887 	uxtb.w	r8, r7
 801151c:	b3d7      	cbz	r7, 8011594 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801151e:	fa1f f788 	uxth.w	r7, r8
 8011522:	ea6f 0808 	mvn.w	r8, r8
 8011526:	fa5f fb86 	uxtb.w	fp, r6
 801152a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801152e:	fa5f f888 	uxtb.w	r8, r8
 8011532:	fb1b fb07 	smulbb	fp, fp, r7
 8011536:	fb09 b908 	mla	r9, r9, r8, fp
 801153a:	fa1f f989 	uxth.w	r9, r9
 801153e:	f109 0b01 	add.w	fp, r9, #1
 8011542:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011546:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801154a:	fb1b fb08 	smulbb	fp, fp, r8
 801154e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011552:	f805 9c03 	strb.w	r9, [r5, #-3]
 8011556:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801155a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801155e:	fb09 b907 	mla	r9, r9, r7, fp
 8011562:	fa1f f989 	uxth.w	r9, r9
 8011566:	f109 0b01 	add.w	fp, r9, #1
 801156a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801156e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011572:	f805 9c02 	strb.w	r9, [r5, #-2]
 8011576:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801157a:	fb19 f808 	smulbb	r8, r9, r8
 801157e:	fb06 8607 	mla	r6, r6, r7, r8
 8011582:	b2b6      	uxth	r6, r6
 8011584:	f106 0801 	add.w	r8, r6, #1
 8011588:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801158c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011590:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011594:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011596:	4470      	add	r0, lr
 8011598:	3503      	adds	r5, #3
 801159a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801159e:	4432      	add	r2, r6
 80115a0:	e7a7      	b.n	80114f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80115a2:	2600      	movs	r6, #0
 80115a4:	1b9d      	subs	r5, r3, r6
 80115a6:	2d00      	cmp	r5, #0
 80115a8:	dc3b      	bgt.n	8011622 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80115aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80115ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80115b2:	441c      	add	r4, r3
 80115b4:	2900      	cmp	r1, #0
 80115b6:	f340 80a8 	ble.w	801170a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80115ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 80115be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80115c4:	3901      	subs	r1, #1
 80115c6:	eeb0 6a62 	vmov.f32	s12, s5
 80115ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80115ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80115d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80115d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80115da:	eeb0 6a43 	vmov.f32	s12, s6
 80115de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80115e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80115e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80115ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80115ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80115f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80115f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80115fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80115fe:	ee12 2a90 	vmov	r2, s5
 8011602:	eef0 2a47 	vmov.f32	s5, s14
 8011606:	fb92 fef3 	sdiv	lr, r2, r3
 801160a:	ee13 2a10 	vmov	r2, s6
 801160e:	eeb0 3a67 	vmov.f32	s6, s15
 8011612:	fb92 f3f3 	sdiv	r3, r2, r3
 8011616:	9a03      	ldr	r2, [sp, #12]
 8011618:	9312      	str	r3, [sp, #72]	; 0x48
 801161a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801161c:	bf08      	it	eq
 801161e:	4613      	moveq	r3, r2
 8011620:	e736      	b.n	8011490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8011622:	ea5f 4820 	movs.w	r8, r0, asr #16
 8011626:	d457      	bmi.n	80116d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011628:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801162c:	4547      	cmp	r7, r8
 801162e:	dd53      	ble.n	80116d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011630:	ea5f 4922 	movs.w	r9, r2, asr #16
 8011634:	d450      	bmi.n	80116d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011636:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801163a:	454d      	cmp	r5, r9
 801163c:	dd4c      	ble.n	80116d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801163e:	9d01      	ldr	r5, [sp, #4]
 8011640:	b23f      	sxth	r7, r7
 8011642:	fb09 5707 	mla	r7, r9, r7, r5
 8011646:	f817 5008 	ldrb.w	r5, [r7, r8]
 801164a:	9f02      	ldr	r7, [sp, #8]
 801164c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8011650:	0e2f      	lsrs	r7, r5, #24
 8011652:	2fff      	cmp	r7, #255	; 0xff
 8011654:	d045      	beq.n	80116e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8011656:	fa5f f987 	uxtb.w	r9, r7
 801165a:	b3ef      	cbz	r7, 80116d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801165c:	fa1f f889 	uxth.w	r8, r9
 8011660:	ea6f 0909 	mvn.w	r9, r9
 8011664:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8011668:	fa5f fb85 	uxtb.w	fp, r5
 801166c:	f814 a007 	ldrb.w	sl, [r4, r7]
 8011670:	fa5f f989 	uxtb.w	r9, r9
 8011674:	fb1b fb08 	smulbb	fp, fp, r8
 8011678:	fb0a ba09 	mla	sl, sl, r9, fp
 801167c:	fa1f fa8a 	uxth.w	sl, sl
 8011680:	f10a 0b01 	add.w	fp, sl, #1
 8011684:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8011688:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801168c:	f804 a007 	strb.w	sl, [r4, r7]
 8011690:	4427      	add	r7, r4
 8011692:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8011696:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801169a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801169e:	fb1b fb09 	smulbb	fp, fp, r9
 80116a2:	fb0a ba08 	mla	sl, sl, r8, fp
 80116a6:	fa1f fa8a 	uxth.w	sl, sl
 80116aa:	f10a 0b01 	add.w	fp, sl, #1
 80116ae:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80116b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80116b6:	f887 a001 	strb.w	sl, [r7, #1]
 80116ba:	f897 a002 	ldrb.w	sl, [r7, #2]
 80116be:	fb1a f909 	smulbb	r9, sl, r9
 80116c2:	fb05 9508 	mla	r5, r5, r8, r9
 80116c6:	b2ad      	uxth	r5, r5
 80116c8:	f105 0901 	add.w	r9, r5, #1
 80116cc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80116d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80116d4:	f887 9002 	strb.w	r9, [r7, #2]
 80116d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80116da:	4470      	add	r0, lr
 80116dc:	3601      	adds	r6, #1
 80116de:	442a      	add	r2, r5
 80116e0:	e760      	b.n	80115a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80116e2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80116e6:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80116ea:	55e5      	strb	r5, [r4, r7]
 80116ec:	4427      	add	r7, r4
 80116ee:	0c2d      	lsrs	r5, r5, #16
 80116f0:	f887 8001 	strb.w	r8, [r7, #1]
 80116f4:	70bd      	strb	r5, [r7, #2]
 80116f6:	e7ef      	b.n	80116d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80116f8:	0a37      	lsrs	r7, r6, #8
 80116fa:	f805 6c03 	strb.w	r6, [r5, #-3]
 80116fe:	0c36      	lsrs	r6, r6, #16
 8011700:	f805 7c02 	strb.w	r7, [r5, #-2]
 8011704:	f805 6c01 	strb.w	r6, [r5, #-1]
 8011708:	e744      	b.n	8011594 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801170a:	b005      	add	sp, #20
 801170c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011710 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011716:	9201      	str	r2, [sp, #4]
 8011718:	6870      	ldr	r0, [r6, #4]
 801171a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801171e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8011722:	fa1f fe85 	uxth.w	lr, r5
 8011726:	43ed      	mvns	r5, r5
 8011728:	f8dc 8000 	ldr.w	r8, [ip]
 801172c:	b2ed      	uxtb	r5, r5
 801172e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8011732:	fb00 2404 	mla	r4, r0, r4, r2
 8011736:	6832      	ldr	r2, [r6, #0]
 8011738:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801173c:	4414      	add	r4, r2
 801173e:	2900      	cmp	r1, #0
 8011740:	dc03      	bgt.n	801174a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8011742:	9a01      	ldr	r2, [sp, #4]
 8011744:	2a00      	cmp	r2, #0
 8011746:	f340 810d 	ble.w	8011964 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801174a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801174c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8011750:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011756:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801175a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801175e:	2b00      	cmp	r3, #0
 8011760:	dd0e      	ble.n	8011780 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8011762:	1406      	asrs	r6, r0, #16
 8011764:	d405      	bmi.n	8011772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8011766:	4556      	cmp	r6, sl
 8011768:	da03      	bge.n	8011772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801176a:	1416      	asrs	r6, r2, #16
 801176c:	d401      	bmi.n	8011772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801176e:	454e      	cmp	r6, r9
 8011770:	db07      	blt.n	8011782 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8011772:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011774:	3b01      	subs	r3, #1
 8011776:	3403      	adds	r4, #3
 8011778:	4430      	add	r0, r6
 801177a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801177c:	4432      	add	r2, r6
 801177e:	e7ee      	b.n	801175e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8011780:	d060      	beq.n	8011844 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8011782:	1e5e      	subs	r6, r3, #1
 8011784:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011786:	fb07 0706 	mla	r7, r7, r6, r0
 801178a:	143f      	asrs	r7, r7, #16
 801178c:	d451      	bmi.n	8011832 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801178e:	4557      	cmp	r7, sl
 8011790:	da4f      	bge.n	8011832 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011792:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011794:	fb07 2606 	mla	r6, r7, r6, r2
 8011798:	1436      	asrs	r6, r6, #16
 801179a:	d44a      	bmi.n	8011832 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801179c:	454e      	cmp	r6, r9
 801179e:	da48      	bge.n	8011832 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80117a0:	1ce6      	adds	r6, r4, #3
 80117a2:	4699      	mov	r9, r3
 80117a4:	f1b9 0f00 	cmp.w	r9, #0
 80117a8:	f106 0603 	add.w	r6, r6, #3
 80117ac:	dd45      	ble.n	801183a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80117ae:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80117b2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80117b6:	1417      	asrs	r7, r2, #16
 80117b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80117bc:	fb0b a707 	mla	r7, fp, r7, sl
 80117c0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80117c4:	fb1b fb05 	smulbb	fp, fp, r5
 80117c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80117cc:	eb08 0a07 	add.w	sl, r8, r7
 80117d0:	f818 7007 	ldrb.w	r7, [r8, r7]
 80117d4:	fb07 b70e 	mla	r7, r7, lr, fp
 80117d8:	b2bf      	uxth	r7, r7
 80117da:	f107 0b01 	add.w	fp, r7, #1
 80117de:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80117e2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80117e6:	fb1b fb05 	smulbb	fp, fp, r5
 80117ea:	123f      	asrs	r7, r7, #8
 80117ec:	f806 7c06 	strb.w	r7, [r6, #-6]
 80117f0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80117f4:	fb07 b70e 	mla	r7, r7, lr, fp
 80117f8:	b2bf      	uxth	r7, r7
 80117fa:	f107 0b01 	add.w	fp, r7, #1
 80117fe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8011802:	123f      	asrs	r7, r7, #8
 8011804:	f806 7c05 	strb.w	r7, [r6, #-5]
 8011808:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801180c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8011810:	fb1a fa05 	smulbb	sl, sl, r5
 8011814:	fb07 a70e 	mla	r7, r7, lr, sl
 8011818:	b2bf      	uxth	r7, r7
 801181a:	f107 0a01 	add.w	sl, r7, #1
 801181e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8011822:	123f      	asrs	r7, r7, #8
 8011824:	f806 7c04 	strb.w	r7, [r6, #-4]
 8011828:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801182a:	4438      	add	r0, r7
 801182c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801182e:	443a      	add	r2, r7
 8011830:	e7b8      	b.n	80117a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8011832:	2700      	movs	r7, #0
 8011834:	1bde      	subs	r6, r3, r7
 8011836:	2e00      	cmp	r6, #0
 8011838:	dc3f      	bgt.n	80118ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801183a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801183e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011842:	441c      	add	r4, r3
 8011844:	2900      	cmp	r1, #0
 8011846:	f340 808d 	ble.w	8011964 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801184a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801184e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011850:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011854:	3901      	subs	r1, #1
 8011856:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801185a:	eef0 6a62 	vmov.f32	s13, s5
 801185e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011862:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011866:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801186a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801186e:	eef0 6a43 	vmov.f32	s13, s6
 8011872:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011876:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801187a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801187e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011882:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011886:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801188a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801188e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011892:	ee12 2a90 	vmov	r2, s5
 8011896:	eef0 2a47 	vmov.f32	s5, s14
 801189a:	fb92 f3f3 	sdiv	r3, r2, r3
 801189e:	ee13 2a10 	vmov	r2, s6
 80118a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80118a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118a6:	eeb0 3a67 	vmov.f32	s6, s15
 80118aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80118ae:	9a01      	ldr	r2, [sp, #4]
 80118b0:	9310      	str	r3, [sp, #64]	; 0x40
 80118b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118b4:	bf08      	it	eq
 80118b6:	4613      	moveq	r3, r2
 80118b8:	e741      	b.n	801173e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80118ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 80118be:	d44b      	bmi.n	8011958 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80118c0:	f8dc b008 	ldr.w	fp, [ip, #8]
 80118c4:	45cb      	cmp	fp, r9
 80118c6:	dd47      	ble.n	8011958 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80118c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80118cc:	d444      	bmi.n	8011958 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80118ce:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80118d2:	4556      	cmp	r6, sl
 80118d4:	dd40      	ble.n	8011958 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80118d6:	fa0f f68b 	sxth.w	r6, fp
 80118da:	fb0a 9906 	mla	r9, sl, r6, r9
 80118de:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80118e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80118e6:	f814 b006 	ldrb.w	fp, [r4, r6]
 80118ea:	fb1b fb05 	smulbb	fp, fp, r5
 80118ee:	eb08 0a09 	add.w	sl, r8, r9
 80118f2:	f818 9009 	ldrb.w	r9, [r8, r9]
 80118f6:	fb09 b90e 	mla	r9, r9, lr, fp
 80118fa:	fa1f f989 	uxth.w	r9, r9
 80118fe:	f109 0b01 	add.w	fp, r9, #1
 8011902:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011906:	ea4f 2929 	mov.w	r9, r9, asr #8
 801190a:	f804 9006 	strb.w	r9, [r4, r6]
 801190e:	4426      	add	r6, r4
 8011910:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8011914:	f896 b001 	ldrb.w	fp, [r6, #1]
 8011918:	fb1b fb05 	smulbb	fp, fp, r5
 801191c:	fb09 b90e 	mla	r9, r9, lr, fp
 8011920:	fa1f f989 	uxth.w	r9, r9
 8011924:	f109 0b01 	add.w	fp, r9, #1
 8011928:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801192c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011930:	f886 9001 	strb.w	r9, [r6, #1]
 8011934:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8011938:	f896 a002 	ldrb.w	sl, [r6, #2]
 801193c:	fb1a fa05 	smulbb	sl, sl, r5
 8011940:	fb09 a90e 	mla	r9, r9, lr, sl
 8011944:	fa1f f989 	uxth.w	r9, r9
 8011948:	f109 0a01 	add.w	sl, r9, #1
 801194c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8011950:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011954:	f886 9002 	strb.w	r9, [r6, #2]
 8011958:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801195a:	3701      	adds	r7, #1
 801195c:	4430      	add	r0, r6
 801195e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011960:	4432      	add	r2, r6
 8011962:	e767      	b.n	8011834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8011964:	b003      	add	sp, #12
 8011966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801196a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801196a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801196e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011974:	9201      	str	r2, [sp, #4]
 8011976:	6868      	ldr	r0, [r5, #4]
 8011978:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801197a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801197e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8011982:	fb00 2404 	mla	r4, r0, r4, r2
 8011986:	682a      	ldr	r2, [r5, #0]
 8011988:	f8d7 8000 	ldr.w	r8, [r7]
 801198c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011990:	4414      	add	r4, r2
 8011992:	2900      	cmp	r1, #0
 8011994:	dc03      	bgt.n	801199e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011996:	9a01      	ldr	r2, [sp, #4]
 8011998:	2a00      	cmp	r2, #0
 801199a:	f340 80af 	ble.w	8011afc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801199e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80119a0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80119a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80119a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119aa:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80119ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	dd0c      	ble.n	80119d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80119b6:	1405      	asrs	r5, r0, #16
 80119b8:	d405      	bmi.n	80119c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80119ba:	4555      	cmp	r5, sl
 80119bc:	da03      	bge.n	80119c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80119be:	1415      	asrs	r5, r2, #16
 80119c0:	d401      	bmi.n	80119c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80119c2:	454d      	cmp	r5, r9
 80119c4:	db05      	blt.n	80119d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80119c6:	4470      	add	r0, lr
 80119c8:	4462      	add	r2, ip
 80119ca:	3b01      	subs	r3, #1
 80119cc:	3403      	adds	r4, #3
 80119ce:	e7f0      	b.n	80119b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80119d0:	d038      	beq.n	8011a44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80119d2:	1e5d      	subs	r5, r3, #1
 80119d4:	fb0e 0605 	mla	r6, lr, r5, r0
 80119d8:	1436      	asrs	r6, r6, #16
 80119da:	d42a      	bmi.n	8011a32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80119dc:	4556      	cmp	r6, sl
 80119de:	da28      	bge.n	8011a32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80119e0:	fb0c 2505 	mla	r5, ip, r5, r2
 80119e4:	142d      	asrs	r5, r5, #16
 80119e6:	d424      	bmi.n	8011a32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80119e8:	454d      	cmp	r5, r9
 80119ea:	da22      	bge.n	8011a32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80119ec:	1ce6      	adds	r6, r4, #3
 80119ee:	4699      	mov	r9, r3
 80119f0:	f1b9 0f00 	cmp.w	r9, #0
 80119f4:	f106 0603 	add.w	r6, r6, #3
 80119f8:	dd1f      	ble.n	8011a3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80119fa:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80119fe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8011a02:	1415      	asrs	r5, r2, #16
 8011a04:	4470      	add	r0, lr
 8011a06:	4462      	add	r2, ip
 8011a08:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a0c:	fb0b a505 	mla	r5, fp, r5, sl
 8011a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a14:	eb08 0a05 	add.w	sl, r8, r5
 8011a18:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011a1c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8011a20:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8011a24:	f806 5c05 	strb.w	r5, [r6, #-5]
 8011a28:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8011a2c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8011a30:	e7de      	b.n	80119f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8011a32:	2600      	movs	r6, #0
 8011a34:	1b9d      	subs	r5, r3, r6
 8011a36:	2d00      	cmp	r5, #0
 8011a38:	dc38      	bgt.n	8011aac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8011a3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011a3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011a42:	441c      	add	r4, r3
 8011a44:	2900      	cmp	r1, #0
 8011a46:	dd59      	ble.n	8011afc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8011a48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011a52:	3901      	subs	r1, #1
 8011a54:	eeb0 6a62 	vmov.f32	s12, s5
 8011a58:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011a5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011a60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011a64:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011a68:	eeb0 6a43 	vmov.f32	s12, s6
 8011a6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011a70:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011a74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011a78:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011a7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011a80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011a84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011a88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011a8c:	ee12 2a90 	vmov	r2, s5
 8011a90:	eef0 2a47 	vmov.f32	s5, s14
 8011a94:	fb92 fef3 	sdiv	lr, r2, r3
 8011a98:	ee13 2a10 	vmov	r2, s6
 8011a9c:	eeb0 3a67 	vmov.f32	s6, s15
 8011aa0:	fb92 fcf3 	sdiv	ip, r2, r3
 8011aa4:	9a01      	ldr	r2, [sp, #4]
 8011aa6:	bf08      	it	eq
 8011aa8:	4613      	moveq	r3, r2
 8011aaa:	e772      	b.n	8011992 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8011aac:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011ab0:	d420      	bmi.n	8011af4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011ab2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8011ab6:	45cb      	cmp	fp, r9
 8011ab8:	dd1c      	ble.n	8011af4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011aba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011abe:	d419      	bmi.n	8011af4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011ac0:	68fd      	ldr	r5, [r7, #12]
 8011ac2:	4555      	cmp	r5, sl
 8011ac4:	dd16      	ble.n	8011af4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011ac6:	fa0f f58b 	sxth.w	r5, fp
 8011aca:	fb0a 9505 	mla	r5, sl, r5, r9
 8011ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ad2:	f818 9005 	ldrb.w	r9, [r8, r5]
 8011ad6:	eb08 0b05 	add.w	fp, r8, r5
 8011ada:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8011ade:	f804 9005 	strb.w	r9, [r4, r5]
 8011ae2:	4425      	add	r5, r4
 8011ae4:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8011ae8:	f885 9001 	strb.w	r9, [r5, #1]
 8011aec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8011af0:	f885 9002 	strb.w	r9, [r5, #2]
 8011af4:	4470      	add	r0, lr
 8011af6:	4462      	add	r2, ip
 8011af8:	3601      	adds	r6, #1
 8011afa:	e79b      	b.n	8011a34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8011afc:	b003      	add	sp, #12
 8011afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011b02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b06:	b085      	sub	sp, #20
 8011b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011b0e:	9202      	str	r2, [sp, #8]
 8011b10:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8011b14:	6860      	ldr	r0, [r4, #4]
 8011b16:	9203      	str	r2, [sp, #12]
 8011b18:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011b1c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011b20:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8011b24:	fb00 2505 	mla	r5, r0, r5, r2
 8011b28:	6822      	ldr	r2, [r4, #0]
 8011b2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b2e:	4415      	add	r5, r2
 8011b30:	f8dc 2000 	ldr.w	r2, [ip]
 8011b34:	9201      	str	r2, [sp, #4]
 8011b36:	2900      	cmp	r1, #0
 8011b38:	dc03      	bgt.n	8011b42 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8011b3a:	9a02      	ldr	r2, [sp, #8]
 8011b3c:	2a00      	cmp	r2, #0
 8011b3e:	f340 8122 	ble.w	8011d86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8011b42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b44:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011b48:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b4e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011b52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	dd0d      	ble.n	8011b76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8011b5a:	1422      	asrs	r2, r4, #16
 8011b5c:	d405      	bmi.n	8011b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011b5e:	4542      	cmp	r2, r8
 8011b60:	da03      	bge.n	8011b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011b62:	1402      	asrs	r2, r0, #16
 8011b64:	d401      	bmi.n	8011b6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8011b66:	42ba      	cmp	r2, r7
 8011b68:	db06      	blt.n	8011b78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8011b6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b6c:	4474      	add	r4, lr
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	3503      	adds	r5, #3
 8011b72:	4410      	add	r0, r2
 8011b74:	e7ef      	b.n	8011b56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8011b76:	d072      	beq.n	8011c5e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8011b78:	1e5a      	subs	r2, r3, #1
 8011b7a:	fb0e 4602 	mla	r6, lr, r2, r4
 8011b7e:	1436      	asrs	r6, r6, #16
 8011b80:	d462      	bmi.n	8011c48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011b82:	4546      	cmp	r6, r8
 8011b84:	da60      	bge.n	8011c48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011b86:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011b88:	fb06 0202 	mla	r2, r6, r2, r0
 8011b8c:	1412      	asrs	r2, r2, #16
 8011b8e:	d45b      	bmi.n	8011c48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011b90:	42ba      	cmp	r2, r7
 8011b92:	da59      	bge.n	8011c48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011b94:	1cef      	adds	r7, r5, #3
 8011b96:	4699      	mov	r9, r3
 8011b98:	f1b9 0f00 	cmp.w	r9, #0
 8011b9c:	dd5a      	ble.n	8011c54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011b9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011ba2:	1426      	asrs	r6, r4, #16
 8011ba4:	1402      	asrs	r2, r0, #16
 8011ba6:	fb08 6202 	mla	r2, r8, r2, r6
 8011baa:	9e01      	ldr	r6, [sp, #4]
 8011bac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8011bb0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8011bb4:	d041      	beq.n	8011c3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8011bb6:	9a03      	ldr	r2, [sp, #12]
 8011bb8:	fa5f fb86 	uxtb.w	fp, r6
 8011bbc:	fb02 f808 	mul.w	r8, r2, r8
 8011bc0:	f108 0201 	add.w	r2, r8, #1
 8011bc4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8011bc8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8011bcc:	1212      	asrs	r2, r2, #8
 8011bce:	fa1f fa82 	uxth.w	sl, r2
 8011bd2:	43d2      	mvns	r2, r2
 8011bd4:	fb1b fb0a 	smulbb	fp, fp, sl
 8011bd8:	b2d2      	uxtb	r2, r2
 8011bda:	fb08 b802 	mla	r8, r8, r2, fp
 8011bde:	fa1f f888 	uxth.w	r8, r8
 8011be2:	f108 0b01 	add.w	fp, r8, #1
 8011be6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011bea:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8011bee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8011bf2:	fb1b fb0a 	smulbb	fp, fp, sl
 8011bf6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011bfa:	fb16 fa0a 	smulbb	sl, r6, sl
 8011bfe:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8011c02:	f807 8c03 	strb.w	r8, [r7, #-3]
 8011c06:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8011c0a:	fb06 aa02 	mla	sl, r6, r2, sl
 8011c0e:	fb08 b802 	mla	r8, r8, r2, fp
 8011c12:	fa1f fa8a 	uxth.w	sl, sl
 8011c16:	fa1f f888 	uxth.w	r8, r8
 8011c1a:	f10a 0601 	add.w	r6, sl, #1
 8011c1e:	f108 0b01 	add.w	fp, r8, #1
 8011c22:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8011c26:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011c2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011c2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011c32:	f807 ac01 	strb.w	sl, [r7, #-1]
 8011c36:	f807 8c02 	strb.w	r8, [r7, #-2]
 8011c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c3c:	4474      	add	r4, lr
 8011c3e:	3703      	adds	r7, #3
 8011c40:	f109 39ff 	add.w	r9, r9, #4294967295
 8011c44:	4410      	add	r0, r2
 8011c46:	e7a7      	b.n	8011b98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8011c48:	f04f 0800 	mov.w	r8, #0
 8011c4c:	eba3 0208 	sub.w	r2, r3, r8
 8011c50:	2a00      	cmp	r2, #0
 8011c52:	dc3b      	bgt.n	8011ccc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8011c54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c5c:	441d      	add	r5, r3
 8011c5e:	2900      	cmp	r1, #0
 8011c60:	f340 8091 	ble.w	8011d86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8011c64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011c6e:	3901      	subs	r1, #1
 8011c70:	eeb0 6a62 	vmov.f32	s12, s5
 8011c74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011c78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011c7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011c80:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011c84:	eeb0 6a43 	vmov.f32	s12, s6
 8011c88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011c8c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011c90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011c94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011c98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011c9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011ca0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011ca4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011ca8:	ee12 2a90 	vmov	r2, s5
 8011cac:	eef0 2a47 	vmov.f32	s5, s14
 8011cb0:	fb92 fef3 	sdiv	lr, r2, r3
 8011cb4:	ee13 2a10 	vmov	r2, s6
 8011cb8:	eeb0 3a67 	vmov.f32	s6, s15
 8011cbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8011cc0:	9a02      	ldr	r2, [sp, #8]
 8011cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8011cc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cc6:	bf08      	it	eq
 8011cc8:	4613      	moveq	r3, r2
 8011cca:	e734      	b.n	8011b36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011ccc:	1427      	asrs	r7, r4, #16
 8011cce:	d454      	bmi.n	8011d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011cd0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011cd4:	42be      	cmp	r6, r7
 8011cd6:	dd50      	ble.n	8011d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011cd8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011cdc:	d44d      	bmi.n	8011d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011cde:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011ce2:	454a      	cmp	r2, r9
 8011ce4:	dd49      	ble.n	8011d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011ce6:	b236      	sxth	r6, r6
 8011ce8:	9a01      	ldr	r2, [sp, #4]
 8011cea:	fb09 7606 	mla	r6, r9, r6, r7
 8011cee:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8011cf2:	0e3a      	lsrs	r2, r7, #24
 8011cf4:	d041      	beq.n	8011d7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011cf6:	9e03      	ldr	r6, [sp, #12]
 8011cf8:	fa5f fb87 	uxtb.w	fp, r7
 8011cfc:	4372      	muls	r2, r6
 8011cfe:	1c56      	adds	r6, r2, #1
 8011d00:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8011d04:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8011d08:	1212      	asrs	r2, r2, #8
 8011d0a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011d0e:	fa1f fa82 	uxth.w	sl, r2
 8011d12:	43d2      	mvns	r2, r2
 8011d14:	fb1b fb0a 	smulbb	fp, fp, sl
 8011d18:	b2d2      	uxtb	r2, r2
 8011d1a:	fb09 b902 	mla	r9, r9, r2, fp
 8011d1e:	fa1f f989 	uxth.w	r9, r9
 8011d22:	f109 0b01 	add.w	fp, r9, #1
 8011d26:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011d2a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011d2e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011d32:	fb1b fb0a 	smulbb	fp, fp, sl
 8011d36:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011d3a:	fb17 fa0a 	smulbb	sl, r7, sl
 8011d3e:	f805 9006 	strb.w	r9, [r5, r6]
 8011d42:	442e      	add	r6, r5
 8011d44:	78b7      	ldrb	r7, [r6, #2]
 8011d46:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011d4a:	fb07 aa02 	mla	sl, r7, r2, sl
 8011d4e:	fb09 b902 	mla	r9, r9, r2, fp
 8011d52:	fa1f fa8a 	uxth.w	sl, sl
 8011d56:	fa1f f989 	uxth.w	r9, r9
 8011d5a:	f10a 0701 	add.w	r7, sl, #1
 8011d5e:	f109 0b01 	add.w	fp, r9, #1
 8011d62:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011d66:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011d6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011d6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011d72:	f886 a002 	strb.w	sl, [r6, #2]
 8011d76:	f886 9001 	strb.w	r9, [r6, #1]
 8011d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011d7c:	4474      	add	r4, lr
 8011d7e:	f108 0801 	add.w	r8, r8, #1
 8011d82:	4410      	add	r0, r2
 8011d84:	e762      	b.n	8011c4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8011d86:	b005      	add	sp, #20
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011d96:	9201      	str	r2, [sp, #4]
 8011d98:	6860      	ldr	r0, [r4, #4]
 8011d9a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8011d9e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8011da2:	fb00 2505 	mla	r5, r0, r5, r2
 8011da6:	6822      	ldr	r2, [r4, #0]
 8011da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011dac:	4415      	add	r5, r2
 8011dae:	f8dc 2000 	ldr.w	r2, [ip]
 8011db2:	9200      	str	r2, [sp, #0]
 8011db4:	2900      	cmp	r1, #0
 8011db6:	dc03      	bgt.n	8011dc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011db8:	9a01      	ldr	r2, [sp, #4]
 8011dba:	2a00      	cmp	r2, #0
 8011dbc:	f340 812b 	ble.w	8012016 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011dc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dc2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011dc6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dcc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011dd0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	dd0e      	ble.n	8011df6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8011dd8:	1422      	asrs	r2, r4, #16
 8011dda:	d405      	bmi.n	8011de8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011ddc:	4572      	cmp	r2, lr
 8011dde:	da03      	bge.n	8011de8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011de0:	1402      	asrs	r2, r0, #16
 8011de2:	d401      	bmi.n	8011de8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011de4:	42ba      	cmp	r2, r7
 8011de6:	db07      	blt.n	8011df8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8011de8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011dea:	3b01      	subs	r3, #1
 8011dec:	3503      	adds	r5, #3
 8011dee:	4414      	add	r4, r2
 8011df0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011df2:	4410      	add	r0, r2
 8011df4:	e7ee      	b.n	8011dd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8011df6:	d06f      	beq.n	8011ed8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8011df8:	1e5a      	subs	r2, r3, #1
 8011dfa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011dfc:	fb06 4602 	mla	r6, r6, r2, r4
 8011e00:	1436      	asrs	r6, r6, #16
 8011e02:	d45e      	bmi.n	8011ec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011e04:	4576      	cmp	r6, lr
 8011e06:	da5c      	bge.n	8011ec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011e08:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011e0a:	fb06 0202 	mla	r2, r6, r2, r0
 8011e0e:	1412      	asrs	r2, r2, #16
 8011e10:	d457      	bmi.n	8011ec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011e12:	42ba      	cmp	r2, r7
 8011e14:	da55      	bge.n	8011ec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011e16:	1cee      	adds	r6, r5, #3
 8011e18:	469a      	mov	sl, r3
 8011e1a:	f1ba 0f00 	cmp.w	sl, #0
 8011e1e:	dd56      	ble.n	8011ece <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8011e20:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011e24:	1427      	asrs	r7, r4, #16
 8011e26:	1402      	asrs	r2, r0, #16
 8011e28:	fb0e 7202 	mla	r2, lr, r2, r7
 8011e2c:	9f00      	ldr	r7, [sp, #0]
 8011e2e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8011e32:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8011e36:	d03c      	beq.n	8011eb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8011e38:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8011e3c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011e40:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8011e44:	fa5f f28e 	uxtb.w	r2, lr
 8011e48:	b2ff      	uxtb	r7, r7
 8011e4a:	f000 80dd 	beq.w	8012008 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8011e4e:	fa1f f882 	uxth.w	r8, r2
 8011e52:	43d2      	mvns	r2, r2
 8011e54:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8011e58:	fb17 f708 	smulbb	r7, r7, r8
 8011e5c:	b2d2      	uxtb	r2, r2
 8011e5e:	fb19 f908 	smulbb	r9, r9, r8
 8011e62:	fb0e 7702 	mla	r7, lr, r2, r7
 8011e66:	fb1b f808 	smulbb	r8, fp, r8
 8011e6a:	b2bf      	uxth	r7, r7
 8011e6c:	f107 0e01 	add.w	lr, r7, #1
 8011e70:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011e74:	123f      	asrs	r7, r7, #8
 8011e76:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011e7a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8011e7e:	fb07 9902 	mla	r9, r7, r2, r9
 8011e82:	fa1f f989 	uxth.w	r9, r9
 8011e86:	f109 0701 	add.w	r7, r9, #1
 8011e8a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011e8e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8011e92:	fb07 8802 	mla	r8, r7, r2, r8
 8011e96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011e9a:	fa1f f888 	uxth.w	r8, r8
 8011e9e:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011ea2:	f108 0201 	add.w	r2, r8, #1
 8011ea6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8011eaa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011eae:	f806 8c01 	strb.w	r8, [r6, #-1]
 8011eb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011eb4:	3603      	adds	r6, #3
 8011eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011eba:	4414      	add	r4, r2
 8011ebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ebe:	4410      	add	r0, r2
 8011ec0:	e7ab      	b.n	8011e1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8011ec2:	f04f 0e00 	mov.w	lr, #0
 8011ec6:	eba3 020e 	sub.w	r2, r3, lr
 8011eca:	2a00      	cmp	r2, #0
 8011ecc:	dc3d      	bgt.n	8011f4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011ece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ed2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ed6:	441d      	add	r5, r3
 8011ed8:	2900      	cmp	r1, #0
 8011eda:	f340 809c 	ble.w	8012016 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011ede:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ee4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011ee8:	3901      	subs	r1, #1
 8011eea:	eeb0 6a62 	vmov.f32	s12, s5
 8011eee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011ef2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011ef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011efa:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011efe:	eeb0 6a43 	vmov.f32	s12, s6
 8011f02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011f06:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011f0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011f0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011f12:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011f16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011f1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011f1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011f22:	ee12 2a90 	vmov	r2, s5
 8011f26:	eef0 2a47 	vmov.f32	s5, s14
 8011f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f2e:	ee13 2a10 	vmov	r2, s6
 8011f32:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f36:	eeb0 3a67 	vmov.f32	s6, s15
 8011f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8011f3e:	9a01      	ldr	r2, [sp, #4]
 8011f40:	9310      	str	r3, [sp, #64]	; 0x40
 8011f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f44:	bf08      	it	eq
 8011f46:	4613      	moveq	r3, r2
 8011f48:	e734      	b.n	8011db4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8011f4a:	1427      	asrs	r7, r4, #16
 8011f4c:	d44d      	bmi.n	8011fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011f4e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011f52:	42be      	cmp	r6, r7
 8011f54:	dd49      	ble.n	8011fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011f56:	ea5f 4820 	movs.w	r8, r0, asr #16
 8011f5a:	d446      	bmi.n	8011fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011f5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011f60:	4542      	cmp	r2, r8
 8011f62:	dd42      	ble.n	8011fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011f64:	b236      	sxth	r6, r6
 8011f66:	9a00      	ldr	r2, [sp, #0]
 8011f68:	fb08 7606 	mla	r6, r8, r6, r7
 8011f6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8011f70:	0e3a      	lsrs	r2, r7, #24
 8011f72:	d03a      	beq.n	8011fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011f74:	2aff      	cmp	r2, #255	; 0xff
 8011f76:	b2d6      	uxtb	r6, r2
 8011f78:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011f7c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8011f80:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8011f84:	b2ff      	uxtb	r7, r7
 8011f86:	d037      	beq.n	8011ff8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8011f88:	fa1f f986 	uxth.w	r9, r6
 8011f8c:	4472      	add	r2, lr
 8011f8e:	43f6      	mvns	r6, r6
 8011f90:	f815 8002 	ldrb.w	r8, [r5, r2]
 8011f94:	fb17 f709 	smulbb	r7, r7, r9
 8011f98:	fb1a fa09 	smulbb	sl, sl, r9
 8011f9c:	b2f6      	uxtb	r6, r6
 8011f9e:	fb1b f909 	smulbb	r9, fp, r9
 8011fa2:	fb08 7706 	mla	r7, r8, r6, r7
 8011fa6:	b2bf      	uxth	r7, r7
 8011fa8:	f107 0801 	add.w	r8, r7, #1
 8011fac:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8011fb0:	123f      	asrs	r7, r7, #8
 8011fb2:	54af      	strb	r7, [r5, r2]
 8011fb4:	442a      	add	r2, r5
 8011fb6:	7857      	ldrb	r7, [r2, #1]
 8011fb8:	fb07 aa06 	mla	sl, r7, r6, sl
 8011fbc:	fa1f fa8a 	uxth.w	sl, sl
 8011fc0:	f10a 0701 	add.w	r7, sl, #1
 8011fc4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011fc8:	7897      	ldrb	r7, [r2, #2]
 8011fca:	fb07 9906 	mla	r9, r7, r6, r9
 8011fce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011fd2:	fa1f f989 	uxth.w	r9, r9
 8011fd6:	f882 a001 	strb.w	sl, [r2, #1]
 8011fda:	f109 0601 	add.w	r6, r9, #1
 8011fde:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011fe2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011fe6:	f882 9002 	strb.w	r9, [r2, #2]
 8011fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fec:	f10e 0e01 	add.w	lr, lr, #1
 8011ff0:	4414      	add	r4, r2
 8011ff2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ff4:	4410      	add	r0, r2
 8011ff6:	e766      	b.n	8011ec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011ff8:	4472      	add	r2, lr
 8011ffa:	54af      	strb	r7, [r5, r2]
 8011ffc:	442a      	add	r2, r5
 8011ffe:	f882 a001 	strb.w	sl, [r2, #1]
 8012002:	f882 b002 	strb.w	fp, [r2, #2]
 8012006:	e7f0      	b.n	8011fea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8012008:	f806 7c03 	strb.w	r7, [r6, #-3]
 801200c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8012010:	f806 bc01 	strb.w	fp, [r6, #-1]
 8012014:	e74d      	b.n	8011eb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8012016:	b003      	add	sp, #12
 8012018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801201c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012020:	b087      	sub	sp, #28
 8012022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012026:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8012028:	9204      	str	r2, [sp, #16]
 801202a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801202e:	6860      	ldr	r0, [r4, #4]
 8012030:	9205      	str	r2, [sp, #20]
 8012032:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8012036:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801203a:	9101      	str	r1, [sp, #4]
 801203c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8012040:	fb00 2505 	mla	r5, r0, r5, r2
 8012044:	6822      	ldr	r2, [r4, #0]
 8012046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801204a:	4415      	add	r5, r2
 801204c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8012050:	3201      	adds	r2, #1
 8012052:	f022 0201 	bic.w	r2, r2, #1
 8012056:	9202      	str	r2, [sp, #8]
 8012058:	f8dc 2000 	ldr.w	r2, [ip]
 801205c:	9203      	str	r2, [sp, #12]
 801205e:	9a01      	ldr	r2, [sp, #4]
 8012060:	2a00      	cmp	r2, #0
 8012062:	dc03      	bgt.n	801206c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8012064:	9a04      	ldr	r2, [sp, #16]
 8012066:	2a00      	cmp	r2, #0
 8012068:	f340 8135 	ble.w	80122d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801206c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801206e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8012072:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8012076:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012078:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801207c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012080:	2b00      	cmp	r3, #0
 8012082:	dd0d      	ble.n	80120a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8012084:	1422      	asrs	r2, r4, #16
 8012086:	d405      	bmi.n	8012094 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012088:	4542      	cmp	r2, r8
 801208a:	da03      	bge.n	8012094 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801208c:	1402      	asrs	r2, r0, #16
 801208e:	d401      	bmi.n	8012094 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8012090:	42ba      	cmp	r2, r7
 8012092:	db06      	blt.n	80120a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8012094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012096:	4474      	add	r4, lr
 8012098:	3b01      	subs	r3, #1
 801209a:	3503      	adds	r5, #3
 801209c:	4410      	add	r0, r2
 801209e:	e7ef      	b.n	8012080 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80120a0:	d077      	beq.n	8012192 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80120a2:	1e5a      	subs	r2, r3, #1
 80120a4:	fb0e 4602 	mla	r6, lr, r2, r4
 80120a8:	1436      	asrs	r6, r6, #16
 80120aa:	d469      	bmi.n	8012180 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80120ac:	4546      	cmp	r6, r8
 80120ae:	da67      	bge.n	8012180 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80120b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80120b2:	fb06 0202 	mla	r2, r6, r2, r0
 80120b6:	1412      	asrs	r2, r2, #16
 80120b8:	d462      	bmi.n	8012180 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80120ba:	42ba      	cmp	r2, r7
 80120bc:	da60      	bge.n	8012180 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80120be:	1cee      	adds	r6, r5, #3
 80120c0:	4699      	mov	r9, r3
 80120c2:	f1b9 0f00 	cmp.w	r9, #0
 80120c6:	dd5f      	ble.n	8012188 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80120c8:	1422      	asrs	r2, r4, #16
 80120ca:	9902      	ldr	r1, [sp, #8]
 80120cc:	1407      	asrs	r7, r0, #16
 80120ce:	fb01 2707 	mla	r7, r1, r7, r2
 80120d2:	9903      	ldr	r1, [sp, #12]
 80120d4:	087a      	lsrs	r2, r7, #1
 80120d6:	5c8a      	ldrb	r2, [r1, r2]
 80120d8:	07f9      	lsls	r1, r7, #31
 80120da:	bf54      	ite	pl
 80120dc:	f002 020f 	andpl.w	r2, r2, #15
 80120e0:	1112      	asrmi	r2, r2, #4
 80120e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80120e6:	b2d2      	uxtb	r2, r2
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	d042      	beq.n	8012172 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80120ec:	497b      	ldr	r1, [pc, #492]	; (80122dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80120ee:	680f      	ldr	r7, [r1, #0]
 80120f0:	9905      	ldr	r1, [sp, #20]
 80120f2:	fa5f fb87 	uxtb.w	fp, r7
 80120f6:	434a      	muls	r2, r1
 80120f8:	f102 0801 	add.w	r8, r2, #1
 80120fc:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8012100:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8012104:	1212      	asrs	r2, r2, #8
 8012106:	fa1f fa82 	uxth.w	sl, r2
 801210a:	43d2      	mvns	r2, r2
 801210c:	fb1b fb0a 	smulbb	fp, fp, sl
 8012110:	b2d2      	uxtb	r2, r2
 8012112:	fb08 b802 	mla	r8, r8, r2, fp
 8012116:	fa1f f888 	uxth.w	r8, r8
 801211a:	f108 0b01 	add.w	fp, r8, #1
 801211e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8012122:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8012126:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801212a:	fb1b fb0a 	smulbb	fp, fp, sl
 801212e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012132:	fb17 fa0a 	smulbb	sl, r7, sl
 8012136:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801213a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801213e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8012142:	fb07 aa02 	mla	sl, r7, r2, sl
 8012146:	fb08 b802 	mla	r8, r8, r2, fp
 801214a:	fa1f fa8a 	uxth.w	sl, sl
 801214e:	fa1f f888 	uxth.w	r8, r8
 8012152:	f10a 0701 	add.w	r7, sl, #1
 8012156:	f108 0b01 	add.w	fp, r8, #1
 801215a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801215e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8012162:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012166:	ea4f 2828 	mov.w	r8, r8, asr #8
 801216a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801216e:	f806 8c02 	strb.w	r8, [r6, #-2]
 8012172:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012174:	4474      	add	r4, lr
 8012176:	3603      	adds	r6, #3
 8012178:	f109 39ff 	add.w	r9, r9, #4294967295
 801217c:	4410      	add	r0, r2
 801217e:	e7a0      	b.n	80120c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8012180:	2700      	movs	r7, #0
 8012182:	1bda      	subs	r2, r3, r7
 8012184:	2a00      	cmp	r2, #0
 8012186:	dc3e      	bgt.n	8012206 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8012188:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801218c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012190:	441d      	add	r5, r3
 8012192:	9b01      	ldr	r3, [sp, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	f340 809e 	ble.w	80122d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801219a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801219e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80121a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80121a4:	eeb0 6a62 	vmov.f32	s12, s5
 80121a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80121ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80121b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80121b4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80121b8:	eeb0 6a43 	vmov.f32	s12, s6
 80121bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80121c0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80121c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80121c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80121cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80121d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80121d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80121d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80121dc:	ee12 2a90 	vmov	r2, s5
 80121e0:	eef0 2a47 	vmov.f32	s5, s14
 80121e4:	fb92 fef3 	sdiv	lr, r2, r3
 80121e8:	ee13 2a10 	vmov	r2, s6
 80121ec:	eeb0 3a67 	vmov.f32	s6, s15
 80121f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80121f4:	9314      	str	r3, [sp, #80]	; 0x50
 80121f6:	9b01      	ldr	r3, [sp, #4]
 80121f8:	9a04      	ldr	r2, [sp, #16]
 80121fa:	3b01      	subs	r3, #1
 80121fc:	9301      	str	r3, [sp, #4]
 80121fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012200:	bf08      	it	eq
 8012202:	4613      	moveq	r3, r2
 8012204:	e72b      	b.n	801205e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8012206:	1426      	asrs	r6, r4, #16
 8012208:	d460      	bmi.n	80122cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801220a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801220e:	42b2      	cmp	r2, r6
 8012210:	dd5c      	ble.n	80122cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012212:	ea5f 4820 	movs.w	r8, r0, asr #16
 8012216:	d459      	bmi.n	80122cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012218:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801221c:	4542      	cmp	r2, r8
 801221e:	dd55      	ble.n	80122cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012220:	9a02      	ldr	r2, [sp, #8]
 8012222:	9903      	ldr	r1, [sp, #12]
 8012224:	fb08 6602 	mla	r6, r8, r2, r6
 8012228:	0872      	lsrs	r2, r6, #1
 801222a:	07f6      	lsls	r6, r6, #31
 801222c:	5c8a      	ldrb	r2, [r1, r2]
 801222e:	bf54      	ite	pl
 8012230:	f002 020f 	andpl.w	r2, r2, #15
 8012234:	1112      	asrmi	r2, r2, #4
 8012236:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801223a:	b2d2      	uxtb	r2, r2
 801223c:	2a00      	cmp	r2, #0
 801223e:	d045      	beq.n	80122cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8012240:	4926      	ldr	r1, [pc, #152]	; (80122dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8012242:	f8d1 8000 	ldr.w	r8, [r1]
 8012246:	9905      	ldr	r1, [sp, #20]
 8012248:	fa5f fb88 	uxtb.w	fp, r8
 801224c:	434a      	muls	r2, r1
 801224e:	1c56      	adds	r6, r2, #1
 8012250:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8012254:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8012258:	1212      	asrs	r2, r2, #8
 801225a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801225e:	fa1f fa82 	uxth.w	sl, r2
 8012262:	43d2      	mvns	r2, r2
 8012264:	fb1b fb0a 	smulbb	fp, fp, sl
 8012268:	b2d2      	uxtb	r2, r2
 801226a:	fb09 b902 	mla	r9, r9, r2, fp
 801226e:	fa1f f989 	uxth.w	r9, r9
 8012272:	f109 0b01 	add.w	fp, r9, #1
 8012276:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801227a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801227e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8012282:	fb1b fb0a 	smulbb	fp, fp, sl
 8012286:	ea4f 2929 	mov.w	r9, r9, asr #8
 801228a:	fb18 fa0a 	smulbb	sl, r8, sl
 801228e:	f805 9006 	strb.w	r9, [r5, r6]
 8012292:	442e      	add	r6, r5
 8012294:	f896 8002 	ldrb.w	r8, [r6, #2]
 8012298:	f896 9001 	ldrb.w	r9, [r6, #1]
 801229c:	fb08 aa02 	mla	sl, r8, r2, sl
 80122a0:	fb09 b902 	mla	r9, r9, r2, fp
 80122a4:	fa1f fa8a 	uxth.w	sl, sl
 80122a8:	fa1f f989 	uxth.w	r9, r9
 80122ac:	f10a 0801 	add.w	r8, sl, #1
 80122b0:	f109 0b01 	add.w	fp, r9, #1
 80122b4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80122b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80122bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80122c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80122c4:	f886 a002 	strb.w	sl, [r6, #2]
 80122c8:	f886 9001 	strb.w	r9, [r6, #1]
 80122cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80122ce:	4474      	add	r4, lr
 80122d0:	3701      	adds	r7, #1
 80122d2:	4410      	add	r0, r2
 80122d4:	e755      	b.n	8012182 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80122d6:	b007      	add	sp, #28
 80122d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122dc:	2400aefc 	.word	0x2400aefc

080122e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	b085      	sub	sp, #20
 80122e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80122ec:	9203      	str	r2, [sp, #12]
 80122ee:	6860      	ldr	r0, [r4, #4]
 80122f0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80122f4:	9100      	str	r1, [sp, #0]
 80122f6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80122fa:	fb00 2606 	mla	r6, r0, r6, r2
 80122fe:	6822      	ldr	r2, [r4, #0]
 8012300:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012304:	4416      	add	r6, r2
 8012306:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801230a:	3201      	adds	r2, #1
 801230c:	f022 0201 	bic.w	r2, r2, #1
 8012310:	9201      	str	r2, [sp, #4]
 8012312:	f8dc 2000 	ldr.w	r2, [ip]
 8012316:	9202      	str	r2, [sp, #8]
 8012318:	9a00      	ldr	r2, [sp, #0]
 801231a:	2a00      	cmp	r2, #0
 801231c:	dc03      	bgt.n	8012326 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801231e:	9a03      	ldr	r2, [sp, #12]
 8012320:	2a00      	cmp	r2, #0
 8012322:	f340 8140 	ble.w	80125a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8012326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012328:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801232c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8012330:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012332:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8012336:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801233a:	2b00      	cmp	r3, #0
 801233c:	dd0e      	ble.n	801235c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801233e:	142a      	asrs	r2, r5, #16
 8012340:	d405      	bmi.n	801234e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012342:	4572      	cmp	r2, lr
 8012344:	da03      	bge.n	801234e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012346:	1422      	asrs	r2, r4, #16
 8012348:	d401      	bmi.n	801234e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801234a:	42ba      	cmp	r2, r7
 801234c:	db07      	blt.n	801235e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801234e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012350:	3b01      	subs	r3, #1
 8012352:	3603      	adds	r6, #3
 8012354:	4415      	add	r5, r2
 8012356:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012358:	4414      	add	r4, r2
 801235a:	e7ee      	b.n	801233a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801235c:	d072      	beq.n	8012444 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801235e:	1e5a      	subs	r2, r3, #1
 8012360:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012362:	fb00 5002 	mla	r0, r0, r2, r5
 8012366:	1400      	asrs	r0, r0, #16
 8012368:	d463      	bmi.n	8012432 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801236a:	4570      	cmp	r0, lr
 801236c:	da61      	bge.n	8012432 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801236e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012370:	fb00 4202 	mla	r2, r0, r2, r4
 8012374:	1412      	asrs	r2, r2, #16
 8012376:	d45c      	bmi.n	8012432 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8012378:	42ba      	cmp	r2, r7
 801237a:	da5a      	bge.n	8012432 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801237c:	1cf0      	adds	r0, r6, #3
 801237e:	469a      	mov	sl, r3
 8012380:	f1ba 0f00 	cmp.w	sl, #0
 8012384:	dd59      	ble.n	801243a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8012386:	142a      	asrs	r2, r5, #16
 8012388:	9901      	ldr	r1, [sp, #4]
 801238a:	1427      	asrs	r7, r4, #16
 801238c:	fb01 2707 	mla	r7, r1, r7, r2
 8012390:	9902      	ldr	r1, [sp, #8]
 8012392:	087a      	lsrs	r2, r7, #1
 8012394:	5c8a      	ldrb	r2, [r1, r2]
 8012396:	07f9      	lsls	r1, r7, #31
 8012398:	bf54      	ite	pl
 801239a:	f002 020f 	andpl.w	r2, r2, #15
 801239e:	1112      	asrmi	r2, r2, #4
 80123a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80123a4:	b2d2      	uxtb	r2, r2
 80123a6:	2a00      	cmp	r2, #0
 80123a8:	d03b      	beq.n	8012422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80123aa:	4980      	ldr	r1, [pc, #512]	; (80125ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80123ac:	2aff      	cmp	r2, #255	; 0xff
 80123ae:	680f      	ldr	r7, [r1, #0]
 80123b0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80123b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80123b8:	b2ff      	uxtb	r7, r7
 80123ba:	f000 80ed 	beq.w	8012598 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80123be:	fa1f f882 	uxth.w	r8, r2
 80123c2:	43d2      	mvns	r2, r2
 80123c4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80123c8:	fb17 f708 	smulbb	r7, r7, r8
 80123cc:	b2d2      	uxtb	r2, r2
 80123ce:	fb19 f908 	smulbb	r9, r9, r8
 80123d2:	fb0e 7702 	mla	r7, lr, r2, r7
 80123d6:	fb1b f808 	smulbb	r8, fp, r8
 80123da:	b2bf      	uxth	r7, r7
 80123dc:	f107 0e01 	add.w	lr, r7, #1
 80123e0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80123e4:	123f      	asrs	r7, r7, #8
 80123e6:	f800 7c03 	strb.w	r7, [r0, #-3]
 80123ea:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80123ee:	fb07 9902 	mla	r9, r7, r2, r9
 80123f2:	fa1f f989 	uxth.w	r9, r9
 80123f6:	f109 0701 	add.w	r7, r9, #1
 80123fa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80123fe:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8012402:	fb07 8802 	mla	r8, r7, r2, r8
 8012406:	ea4f 2929 	mov.w	r9, r9, asr #8
 801240a:	fa1f f888 	uxth.w	r8, r8
 801240e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8012412:	f108 0201 	add.w	r2, r8, #1
 8012416:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801241a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801241e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8012422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012424:	3003      	adds	r0, #3
 8012426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801242a:	4415      	add	r5, r2
 801242c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801242e:	4414      	add	r4, r2
 8012430:	e7a6      	b.n	8012380 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8012432:	2700      	movs	r7, #0
 8012434:	1bda      	subs	r2, r3, r7
 8012436:	2a00      	cmp	r2, #0
 8012438:	dc40      	bgt.n	80124bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801243a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801243e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012442:	441e      	add	r6, r3
 8012444:	9b00      	ldr	r3, [sp, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	f340 80ad 	ble.w	80125a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801244c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012452:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012456:	eeb0 6a62 	vmov.f32	s12, s5
 801245a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801245e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012462:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012466:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801246a:	eeb0 6a43 	vmov.f32	s12, s6
 801246e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012472:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012476:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801247a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801247e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012482:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012486:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801248a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801248e:	ee12 2a90 	vmov	r2, s5
 8012492:	eef0 2a47 	vmov.f32	s5, s14
 8012496:	fb92 f3f3 	sdiv	r3, r2, r3
 801249a:	ee13 2a10 	vmov	r2, s6
 801249e:	9311      	str	r3, [sp, #68]	; 0x44
 80124a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124a2:	eeb0 3a67 	vmov.f32	s6, s15
 80124a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80124aa:	9312      	str	r3, [sp, #72]	; 0x48
 80124ac:	9b00      	ldr	r3, [sp, #0]
 80124ae:	9a03      	ldr	r2, [sp, #12]
 80124b0:	3b01      	subs	r3, #1
 80124b2:	9300      	str	r3, [sp, #0]
 80124b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124b6:	bf08      	it	eq
 80124b8:	4613      	moveq	r3, r2
 80124ba:	e72d      	b.n	8012318 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80124bc:	1428      	asrs	r0, r5, #16
 80124be:	d45c      	bmi.n	801257a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80124c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80124c4:	4282      	cmp	r2, r0
 80124c6:	dd58      	ble.n	801257a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80124c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80124cc:	d455      	bmi.n	801257a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80124ce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80124d2:	4572      	cmp	r2, lr
 80124d4:	dd51      	ble.n	801257a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80124d6:	9a01      	ldr	r2, [sp, #4]
 80124d8:	9902      	ldr	r1, [sp, #8]
 80124da:	fb0e 0002 	mla	r0, lr, r2, r0
 80124de:	0842      	lsrs	r2, r0, #1
 80124e0:	07c0      	lsls	r0, r0, #31
 80124e2:	5c8a      	ldrb	r2, [r1, r2]
 80124e4:	bf54      	ite	pl
 80124e6:	f002 020f 	andpl.w	r2, r2, #15
 80124ea:	1112      	asrmi	r2, r2, #4
 80124ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80124f0:	b2d2      	uxtb	r2, r2
 80124f2:	2a00      	cmp	r2, #0
 80124f4:	d041      	beq.n	801257a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80124f6:	492d      	ldr	r1, [pc, #180]	; (80125ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80124f8:	2aff      	cmp	r2, #255	; 0xff
 80124fa:	6808      	ldr	r0, [r1, #0]
 80124fc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8012500:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8012504:	fa5f fe80 	uxtb.w	lr, r0
 8012508:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801250c:	d03b      	beq.n	8012586 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801250e:	fa1f f982 	uxth.w	r9, r2
 8012512:	4438      	add	r0, r7
 8012514:	43d2      	mvns	r2, r2
 8012516:	f816 8000 	ldrb.w	r8, [r6, r0]
 801251a:	fb1e fe09 	smulbb	lr, lr, r9
 801251e:	fb1a fa09 	smulbb	sl, sl, r9
 8012522:	b2d2      	uxtb	r2, r2
 8012524:	fb1b f909 	smulbb	r9, fp, r9
 8012528:	fb08 ee02 	mla	lr, r8, r2, lr
 801252c:	fa1f fe8e 	uxth.w	lr, lr
 8012530:	f10e 0801 	add.w	r8, lr, #1
 8012534:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8012538:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801253c:	f806 e000 	strb.w	lr, [r6, r0]
 8012540:	4430      	add	r0, r6
 8012542:	f890 e001 	ldrb.w	lr, [r0, #1]
 8012546:	fb0e aa02 	mla	sl, lr, r2, sl
 801254a:	fa1f fa8a 	uxth.w	sl, sl
 801254e:	f10a 0e01 	add.w	lr, sl, #1
 8012552:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8012556:	f890 e002 	ldrb.w	lr, [r0, #2]
 801255a:	fb0e 9902 	mla	r9, lr, r2, r9
 801255e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8012562:	fa1f f989 	uxth.w	r9, r9
 8012566:	f880 a001 	strb.w	sl, [r0, #1]
 801256a:	f109 0201 	add.w	r2, r9, #1
 801256e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8012572:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012576:	f880 9002 	strb.w	r9, [r0, #2]
 801257a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801257c:	3701      	adds	r7, #1
 801257e:	4415      	add	r5, r2
 8012580:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012582:	4414      	add	r4, r2
 8012584:	e756      	b.n	8012434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8012586:	4438      	add	r0, r7
 8012588:	f806 e000 	strb.w	lr, [r6, r0]
 801258c:	4430      	add	r0, r6
 801258e:	f880 a001 	strb.w	sl, [r0, #1]
 8012592:	f880 b002 	strb.w	fp, [r0, #2]
 8012596:	e7f0      	b.n	801257a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8012598:	f800 7c03 	strb.w	r7, [r0, #-3]
 801259c:	f800 9c02 	strb.w	r9, [r0, #-2]
 80125a0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80125a4:	e73d      	b.n	8012422 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80125a6:	b005      	add	sp, #20
 80125a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ac:	2400aefc 	.word	0x2400aefc

080125b0 <_ZN8touchgfx8LCD24bppD1Ev>:
 80125b0:	4770      	bx	lr

080125b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80125b2:	4770      	bx	lr

080125b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80125b4:	4770      	bx	lr

080125b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80125b6:	4770      	bx	lr

080125b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80125b8:	4770      	bx	lr

080125ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80125ba:	4770      	bx	lr

080125bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80125bc:	4770      	bx	lr

080125be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80125be:	4770      	bx	lr

080125c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80125c0:	4770      	bx	lr

080125c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80125c2:	4770      	bx	lr

080125c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80125c4:	4770      	bx	lr

080125c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80125c6:	4770      	bx	lr

080125c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80125c8:	4770      	bx	lr

080125ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80125ca:	4770      	bx	lr

080125cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80125cc:	4770      	bx	lr

080125ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80125ce:	4770      	bx	lr

080125d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80125d0:	4770      	bx	lr

080125d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80125d2:	4770      	bx	lr

080125d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80125d4:	4770      	bx	lr

080125d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80125d6:	4770      	bx	lr

080125d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80125d8:	4770      	bx	lr
	...

080125dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80125dc:	2bff      	cmp	r3, #255	; 0xff
 80125de:	b508      	push	{r3, lr}
 80125e0:	d04f      	beq.n	8012682 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80125e2:	2a2c      	cmp	r2, #44	; 0x2c
 80125e4:	d032      	beq.n	801264c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80125e6:	d80f      	bhi.n	8012608 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80125e8:	2a08      	cmp	r2, #8
 80125ea:	d046      	beq.n	801267a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80125ec:	d805      	bhi.n	80125fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80125ee:	2a04      	cmp	r2, #4
 80125f0:	d041      	beq.n	8012676 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80125f2:	2a05      	cmp	r2, #5
 80125f4:	d03d      	beq.n	8012672 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80125f6:	2000      	movs	r0, #0
 80125f8:	e027      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80125fa:	2a0a      	cmp	r2, #10
 80125fc:	d03d      	beq.n	801267a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80125fe:	d301      	bcc.n	8012604 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8012600:	2a0b      	cmp	r2, #11
 8012602:	d1f8      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012604:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8012606:	e020      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012608:	2a30      	cmp	r2, #48	; 0x30
 801260a:	d038      	beq.n	801267e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801260c:	d808      	bhi.n	8012620 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801260e:	2a2e      	cmp	r2, #46	; 0x2e
 8012610:	684b      	ldr	r3, [r1, #4]
 8012612:	d029      	beq.n	8012668 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8012614:	d90b      	bls.n	801262e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1ec      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801261c:	6a00      	ldr	r0, [r0, #32]
 801261e:	e014      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012620:	2a32      	cmp	r2, #50	; 0x32
 8012622:	d02c      	beq.n	801267e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012624:	d301      	bcc.n	801262a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8012626:	2a33      	cmp	r2, #51	; 0x33
 8012628:	d1e5      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801262a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801262c:	e00d      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d009      	beq.n	8012648 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8012634:	d3f2      	bcc.n	801261c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8012636:	2b02      	cmp	r3, #2
 8012638:	d1dd      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801263a:	4b39      	ldr	r3, [pc, #228]	; (8012720 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801263c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8012640:	4a38      	ldr	r2, [pc, #224]	; (8012724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8012642:	4839      	ldr	r0, [pc, #228]	; (8012728 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8012644:	f006 fd7a 	bl	801913c <__assert_func>
 8012648:	6900      	ldr	r0, [r0, #16]
 801264a:	bd08      	pop	{r3, pc}
 801264c:	684b      	ldr	r3, [r1, #4]
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d007      	beq.n	8012664 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8012654:	d30b      	bcc.n	801266e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8012656:	2b02      	cmp	r3, #2
 8012658:	d1cd      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801265a:	4b31      	ldr	r3, [pc, #196]	; (8012720 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801265c:	f240 412c 	movw	r1, #1068	; 0x42c
 8012660:	4a30      	ldr	r2, [pc, #192]	; (8012724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8012662:	e7ee      	b.n	8012642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012664:	6880      	ldr	r0, [r0, #8]
 8012666:	e7f0      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d1c3      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801266e:	6980      	ldr	r0, [r0, #24]
 8012670:	e7eb      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012672:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012674:	e7e9      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012676:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012678:	e7e7      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801267a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801267c:	e7e5      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801267e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012680:	e7e3      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012682:	2a2c      	cmp	r2, #44	; 0x2c
 8012684:	d030      	beq.n	80126e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8012686:	d80f      	bhi.n	80126a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8012688:	2a08      	cmp	r2, #8
 801268a:	d044      	beq.n	8012716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801268c:	d805      	bhi.n	801269a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801268e:	2a04      	cmp	r2, #4
 8012690:	d03f      	beq.n	8012712 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8012692:	2a05      	cmp	r2, #5
 8012694:	d1af      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012696:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012698:	e7d7      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801269a:	2a0a      	cmp	r2, #10
 801269c:	d03b      	beq.n	8012716 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801269e:	d301      	bcc.n	80126a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80126a0:	2a0b      	cmp	r2, #11
 80126a2:	d1a8      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80126a4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80126a6:	e7d0      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80126a8:	2a30      	cmp	r2, #48	; 0x30
 80126aa:	d036      	beq.n	801271a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80126ac:	d808      	bhi.n	80126c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80126ae:	2a2e      	cmp	r2, #46	; 0x2e
 80126b0:	684b      	ldr	r3, [r1, #4]
 80126b2:	d028      	beq.n	8012706 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80126b4:	d90b      	bls.n	80126ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d19c      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80126bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80126be:	e7c4      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80126c0:	2a32      	cmp	r2, #50	; 0x32
 80126c2:	d02a      	beq.n	801271a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80126c4:	d301      	bcc.n	80126ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80126c6:	2a33      	cmp	r2, #51	; 0x33
 80126c8:	d195      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80126ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80126cc:	e7bd      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d007      	beq.n	80126e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80126d4:	d3f2      	bcc.n	80126bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80126d6:	2b02      	cmp	r3, #2
 80126d8:	d18d      	bne.n	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80126da:	4b11      	ldr	r3, [pc, #68]	; (8012720 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80126dc:	f240 415d 	movw	r1, #1117	; 0x45d
 80126e0:	4a10      	ldr	r2, [pc, #64]	; (8012724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80126e2:	e7ae      	b.n	8012642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80126e4:	6940      	ldr	r0, [r0, #20]
 80126e6:	e7b0      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80126e8:	684b      	ldr	r3, [r1, #4]
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d008      	beq.n	8012702 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80126f0:	d30d      	bcc.n	801270e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	f47f af7f 	bne.w	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80126f8:	4b09      	ldr	r3, [pc, #36]	; (8012720 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80126fa:	f240 4169 	movw	r1, #1129	; 0x469
 80126fe:	4a09      	ldr	r2, [pc, #36]	; (8012724 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8012700:	e79f      	b.n	8012642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8012702:	68c0      	ldr	r0, [r0, #12]
 8012704:	e7a1      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	f47f af74 	bne.w	80125f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801270e:	69c0      	ldr	r0, [r0, #28]
 8012710:	e79b      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012712:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8012714:	e799      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012716:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8012718:	e797      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801271a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801271c:	e795      	b.n	801264a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801271e:	bf00      	nop
 8012720:	0801cbb7 	.word	0x0801cbb7
 8012724:	0801d32f 	.word	0x0801d32f
 8012728:	0801cc03 	.word	0x0801cc03

0801272c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801272c:	b508      	push	{r3, lr}
 801272e:	4b06      	ldr	r3, [pc, #24]	; (8012748 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8012730:	8818      	ldrh	r0, [r3, #0]
 8012732:	b928      	cbnz	r0, 8012740 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8012734:	4b05      	ldr	r3, [pc, #20]	; (801274c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8012736:	2151      	movs	r1, #81	; 0x51
 8012738:	4a05      	ldr	r2, [pc, #20]	; (8012750 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801273a:	4806      	ldr	r0, [pc, #24]	; (8012754 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801273c:	f006 fcfe 	bl	801913c <__assert_func>
 8012740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012744:	b280      	uxth	r0, r0
 8012746:	bd08      	pop	{r3, pc}
 8012748:	2400aeee 	.word	0x2400aeee
 801274c:	0801cdfd 	.word	0x0801cdfd
 8012750:	0801d2f4 	.word	0x0801d2f4
 8012754:	0801ce3f 	.word	0x0801ce3f

08012758 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8012758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801275a:	4606      	mov	r6, r0
 801275c:	b087      	sub	sp, #28
 801275e:	4615      	mov	r5, r2
 8012760:	461f      	mov	r7, r3
 8012762:	b353      	cbz	r3, 80127ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012764:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	dd26      	ble.n	80127ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801276c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012770:	2b00      	cmp	r3, #0
 8012772:	dd22      	ble.n	80127ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012774:	6808      	ldr	r0, [r1, #0]
 8012776:	aa04      	add	r2, sp, #16
 8012778:	6849      	ldr	r1, [r1, #4]
 801277a:	4c1b      	ldr	r4, [pc, #108]	; (80127e8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801277c:	c203      	stmia	r2!, {r0, r1}
 801277e:	a804      	add	r0, sp, #16
 8012780:	f7fb fa4e 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012784:	6820      	ldr	r0, [r4, #0]
 8012786:	6803      	ldr	r3, [r0, #0]
 8012788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801278a:	4798      	blx	r3
 801278c:	2fff      	cmp	r7, #255	; 0xff
 801278e:	d016      	beq.n	80127be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8012790:	f010 0f08 	tst.w	r0, #8
 8012794:	6820      	ldr	r0, [r4, #0]
 8012796:	d015      	beq.n	80127c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8012798:	2400      	movs	r4, #0
 801279a:	6801      	ldr	r1, [r0, #0]
 801279c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80127a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80127a4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80127a8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80127ac:	9401      	str	r4, [sp, #4]
 80127ae:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80127b2:	9400      	str	r4, [sp, #0]
 80127b4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80127b6:	4629      	mov	r1, r5
 80127b8:	47a0      	blx	r4
 80127ba:	b007      	add	sp, #28
 80127bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127be:	f010 0f02 	tst.w	r0, #2
 80127c2:	e7e7      	b.n	8012794 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80127c4:	6803      	ldr	r3, [r0, #0]
 80127c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c8:	4798      	blx	r3
 80127ca:	4b08      	ldr	r3, [pc, #32]	; (80127ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80127cc:	4601      	mov	r1, r0
 80127ce:	4630      	mov	r0, r6
 80127d0:	881a      	ldrh	r2, [r3, #0]
 80127d2:	6833      	ldr	r3, [r6, #0]
 80127d4:	e9cd 5700 	strd	r5, r7, [sp]
 80127d8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80127da:	ab04      	add	r3, sp, #16
 80127dc:	47a8      	blx	r5
 80127de:	6820      	ldr	r0, [r4, #0]
 80127e0:	6803      	ldr	r3, [r0, #0]
 80127e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e4:	4798      	blx	r3
 80127e6:	e7e8      	b.n	80127ba <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80127e8:	2400aef4 	.word	0x2400aef4
 80127ec:	2400aeee 	.word	0x2400aeee

080127f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80127f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127f4:	b08b      	sub	sp, #44	; 0x2c
 80127f6:	460d      	mov	r5, r1
 80127f8:	4616      	mov	r6, r2
 80127fa:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80127fe:	f1b8 0f00 	cmp.w	r8, #0
 8012802:	d047      	beq.n	8012894 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8012804:	6810      	ldr	r0, [r2, #0]
 8012806:	ac06      	add	r4, sp, #24
 8012808:	6851      	ldr	r1, [r2, #4]
 801280a:	4f51      	ldr	r7, [pc, #324]	; (8012950 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801280c:	c403      	stmia	r4!, {r0, r1}
 801280e:	6818      	ldr	r0, [r3, #0]
 8012810:	ac08      	add	r4, sp, #32
 8012812:	6859      	ldr	r1, [r3, #4]
 8012814:	c403      	stmia	r4!, {r0, r1}
 8012816:	a806      	add	r0, sp, #24
 8012818:	f7fb fa02 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801281c:	4631      	mov	r1, r6
 801281e:	a808      	add	r0, sp, #32
 8012820:	f7fb fa26 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012824:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012828:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801282c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012830:	6838      	ldr	r0, [r7, #0]
 8012832:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012836:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801283a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801283e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012842:	440d      	add	r5, r1
 8012844:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8012848:	440a      	add	r2, r1
 801284a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801284e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012852:	4413      	add	r3, r2
 8012854:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012858:	6803      	ldr	r3, [r0, #0]
 801285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801285c:	4798      	blx	r3
 801285e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012862:	d01a      	beq.n	801289a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8012864:	f010 0f04 	tst.w	r0, #4
 8012868:	6838      	ldr	r0, [r7, #0]
 801286a:	d019      	beq.n	80128a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801286c:	2100      	movs	r1, #0
 801286e:	6807      	ldr	r7, [r0, #0]
 8012870:	b2a4      	uxth	r4, r4
 8012872:	f8cd 800c 	str.w	r8, [sp, #12]
 8012876:	b2b6      	uxth	r6, r6
 8012878:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801287c:	9401      	str	r4, [sp, #4]
 801287e:	9600      	str	r6, [sp, #0]
 8012880:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012884:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8012888:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801288c:	9102      	str	r1, [sp, #8]
 801288e:	4629      	mov	r1, r5
 8012890:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8012892:	47a0      	blx	r4
 8012894:	b00b      	add	sp, #44	; 0x2c
 8012896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801289a:	f010 0f01 	tst.w	r0, #1
 801289e:	e7e3      	b.n	8012868 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80128a0:	6803      	ldr	r3, [r0, #0]
 80128a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128a4:	4798      	blx	r3
 80128a6:	4a2b      	ldr	r2, [pc, #172]	; (8012954 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80128a8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80128ac:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80128b0:	8813      	ldrh	r3, [r2, #0]
 80128b2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80128b6:	fb03 f404 	mul.w	r4, r3, r4
 80128ba:	fb03 c101 	mla	r1, r3, r1, ip
 80128be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80128c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80128c6:	4408      	add	r0, r1
 80128c8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80128cc:	4404      	add	r4, r0
 80128ce:	d02e      	beq.n	801292e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80128d0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80128d4:	1b9b      	subs	r3, r3, r6
 80128d6:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80128da:	1b96      	subs	r6, r2, r6
 80128dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80128e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80128e4:	42a0      	cmp	r0, r4
 80128e6:	d22d      	bcs.n	8012944 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80128e8:	eb00 0e01 	add.w	lr, r0, r1
 80128ec:	4570      	cmp	r0, lr
 80128ee:	d210      	bcs.n	8012912 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80128f0:	f890 9000 	ldrb.w	r9, [r0]
 80128f4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80128f8:	fb19 f90c 	smulbb	r9, r9, ip
 80128fc:	fb02 9208 	mla	r2, r2, r8, r9
 8012900:	b292      	uxth	r2, r2
 8012902:	f102 0901 	add.w	r9, r2, #1
 8012906:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801290a:	1212      	asrs	r2, r2, #8
 801290c:	f800 2b01 	strb.w	r2, [r0], #1
 8012910:	e7ec      	b.n	80128ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8012912:	4418      	add	r0, r3
 8012914:	4435      	add	r5, r6
 8012916:	e7e5      	b.n	80128e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8012918:	8813      	ldrh	r3, [r2, #0]
 801291a:	1b9b      	subs	r3, r3, r6
 801291c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012920:	4418      	add	r0, r3
 8012922:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012926:	1b9b      	subs	r3, r3, r6
 8012928:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801292c:	441d      	add	r5, r3
 801292e:	42a0      	cmp	r0, r4
 8012930:	d208      	bcs.n	8012944 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8012932:	eb00 0c01 	add.w	ip, r0, r1
 8012936:	4560      	cmp	r0, ip
 8012938:	d2ee      	bcs.n	8012918 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801293a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801293e:	f800 3b01 	strb.w	r3, [r0], #1
 8012942:	e7f8      	b.n	8012936 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8012944:	6838      	ldr	r0, [r7, #0]
 8012946:	6803      	ldr	r3, [r0, #0]
 8012948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801294a:	4798      	blx	r3
 801294c:	e7a2      	b.n	8012894 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801294e:	bf00      	nop
 8012950:	2400aef4 	.word	0x2400aef4
 8012954:	2400aeee 	.word	0x2400aeee

08012958 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8012958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295a:	2300      	movs	r3, #0
 801295c:	b085      	sub	sp, #20
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	4b41      	ldr	r3, [pc, #260]	; (8012a68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d136      	bne.n	80129d6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8012968:	4a40      	ldr	r2, [pc, #256]	; (8012a6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801296a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801296e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d131      	bne.n	80129da <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8012976:	4b3e      	ldr	r3, [pc, #248]	; (8012a70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8012978:	f9b3 3000 	ldrsh.w	r3, [r3]
 801297c:	ac02      	add	r4, sp, #8
 801297e:	6808      	ldr	r0, [r1, #0]
 8012980:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012984:	ab02      	add	r3, sp, #8
 8012986:	6849      	ldr	r1, [r1, #4]
 8012988:	4d3a      	ldr	r5, [pc, #232]	; (8012a74 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801298a:	c303      	stmia	r3!, {r0, r1}
 801298c:	4669      	mov	r1, sp
 801298e:	4620      	mov	r0, r4
 8012990:	f7fb f96e 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012994:	4668      	mov	r0, sp
 8012996:	f7fb f943 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801299a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801299e:	f8bd 2000 	ldrh.w	r2, [sp]
 80129a2:	462e      	mov	r6, r5
 80129a4:	6828      	ldr	r0, [r5, #0]
 80129a6:	4413      	add	r3, r2
 80129a8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80129ac:	f8ad 3008 	strh.w	r3, [sp, #8]
 80129b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80129b4:	4413      	add	r3, r2
 80129b6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80129ba:	6803      	ldr	r3, [r0, #0]
 80129bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129be:	4798      	blx	r3
 80129c0:	f010 0f01 	tst.w	r0, #1
 80129c4:	d00b      	beq.n	80129de <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80129c6:	6828      	ldr	r0, [r5, #0]
 80129c8:	6803      	ldr	r3, [r0, #0]
 80129ca:	e894 0006 	ldmia.w	r4, {r1, r2}
 80129ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129d0:	4798      	blx	r3
 80129d2:	b005      	add	sp, #20
 80129d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129d6:	4a26      	ldr	r2, [pc, #152]	; (8012a70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80129d8:	e7c7      	b.n	801296a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80129da:	4b24      	ldr	r3, [pc, #144]	; (8012a6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80129dc:	e7cc      	b.n	8012978 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80129de:	6830      	ldr	r0, [r6, #0]
 80129e0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80129e4:	6803      	ldr	r3, [r0, #0]
 80129e6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80129ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129ec:	4798      	blx	r3
 80129ee:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80129f2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80129f6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80129fa:	fb14 3402 	smlabb	r4, r4, r2, r3
 80129fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012a02:	4404      	add	r4, r0
 8012a04:	6830      	ldr	r0, [r6, #0]
 8012a06:	6803      	ldr	r3, [r0, #0]
 8012a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a0a:	4798      	blx	r3
 8012a0c:	4917      	ldr	r1, [pc, #92]	; (8012a6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8012a0e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8012a12:	880b      	ldrh	r3, [r1, #0]
 8012a14:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8012a18:	fb03 c202 	mla	r2, r3, r2, ip
 8012a1c:	437b      	muls	r3, r7
 8012a1e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8012a22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a2a:	4410      	add	r0, r2
 8012a2c:	18c2      	adds	r2, r0, r3
 8012a2e:	4290      	cmp	r0, r2
 8012a30:	d214      	bcs.n	8012a5c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8012a32:	eb00 0c07 	add.w	ip, r0, r7
 8012a36:	4560      	cmp	r0, ip
 8012a38:	d204      	bcs.n	8012a44 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8012a3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012a3e:	f800 3b01 	strb.w	r3, [r0], #1
 8012a42:	e7f8      	b.n	8012a36 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8012a44:	880b      	ldrh	r3, [r1, #0]
 8012a46:	1b5b      	subs	r3, r3, r5
 8012a48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a4c:	4418      	add	r0, r3
 8012a4e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012a52:	1b5b      	subs	r3, r3, r5
 8012a54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a58:	441c      	add	r4, r3
 8012a5a:	e7e8      	b.n	8012a2e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8012a5c:	6830      	ldr	r0, [r6, #0]
 8012a5e:	6803      	ldr	r3, [r0, #0]
 8012a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a62:	4798      	blx	r3
 8012a64:	e7b5      	b.n	80129d2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8012a66:	bf00      	nop
 8012a68:	2400aeec 	.word	0x2400aeec
 8012a6c:	2400aeee 	.word	0x2400aeee
 8012a70:	2400aef0 	.word	0x2400aef0
 8012a74:	2400aef4 	.word	0x2400aef4

08012a78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8012a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a7c:	4698      	mov	r8, r3
 8012a7e:	4b24      	ldr	r3, [pc, #144]	; (8012b10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 8012a80:	b089      	sub	sp, #36	; 0x24
 8012a82:	4605      	mov	r5, r0
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	468a      	mov	sl, r1
 8012a88:	4693      	mov	fp, r2
 8012a8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a8e:	2b02      	cmp	r3, #2
 8012a90:	d106      	bne.n	8012aa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28>
 8012a92:	4b20      	ldr	r3, [pc, #128]	; (8012b14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 8012a94:	f240 11eb 	movw	r1, #491	; 0x1eb
 8012a98:	4a1f      	ldr	r2, [pc, #124]	; (8012b18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8012a9a:	4820      	ldr	r0, [pc, #128]	; (8012b1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 8012a9c:	f006 fb4e 	bl	801913c <__assert_func>
 8012aa0:	ac08      	add	r4, sp, #32
 8012aa2:	f824 8d0c 	strh.w	r8, [r4, #-12]!
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	f7fe f932 	bl	8010d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012aac:	682b      	ldr	r3, [r5, #0]
 8012aae:	4606      	mov	r6, r0
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab4:	4798      	blx	r3
 8012ab6:	4286      	cmp	r6, r0
 8012ab8:	d004      	beq.n	8012ac4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4c>
 8012aba:	4b19      	ldr	r3, [pc, #100]	; (8012b20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa8>)
 8012abc:	f240 11ed 	movw	r1, #493	; 0x1ed
 8012ac0:	4a15      	ldr	r2, [pc, #84]	; (8012b18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8012ac2:	e7ea      	b.n	8012a9a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f7fe f899 	bl	8010bfc <_ZNK8touchgfx6Bitmap7getDataEv>
 8012aca:	4606      	mov	r6, r0
 8012acc:	b920      	cbnz	r0, 8012ad8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x60>
 8012ace:	4b15      	ldr	r3, [pc, #84]	; (8012b24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xac>)
 8012ad0:	f240 11ef 	movw	r1, #495	; 0x1ef
 8012ad4:	4a10      	ldr	r2, [pc, #64]	; (8012b18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 8012ad6:	e7e0      	b.n	8012a9a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8012ad8:	682b      	ldr	r3, [r5, #0]
 8012ada:	4620      	mov	r0, r4
 8012adc:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8012ae0:	f7fe f804 	bl	8010aec <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012ae4:	4607      	mov	r7, r0
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7fe f844 	bl	8010b74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012aec:	465b      	mov	r3, fp
 8012aee:	b200      	sxth	r0, r0
 8012af0:	4652      	mov	r2, sl
 8012af2:	b23f      	sxth	r7, r7
 8012af4:	4629      	mov	r1, r5
 8012af6:	9002      	str	r0, [sp, #8]
 8012af8:	a806      	add	r0, sp, #24
 8012afa:	e9cd 6700 	strd	r6, r7, [sp]
 8012afe:	47c8      	blx	r9
 8012b00:	a906      	add	r1, sp, #24
 8012b02:	4640      	mov	r0, r8
 8012b04:	f7fd feba 	bl	801087c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8012b08:	4630      	mov	r0, r6
 8012b0a:	b009      	add	sp, #36	; 0x24
 8012b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b10:	2400aef4 	.word	0x2400aef4
 8012b14:	0801cc83 	.word	0x0801cc83
 8012b18:	0801d46c 	.word	0x0801d46c
 8012b1c:	0801cc03 	.word	0x0801cc03
 8012b20:	0801cd35 	.word	0x0801cd35
 8012b24:	0801cd8a 	.word	0x0801cd8a

08012b28 <_ZN8touchgfx8LCD24bppD0Ev>:
 8012b28:	b510      	push	{r4, lr}
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	2158      	movs	r1, #88	; 0x58
 8012b2e:	f006 fad6 	bl	80190de <_ZdlPvj>
 8012b32:	4620      	mov	r0, r4
 8012b34:	bd10      	pop	{r4, pc}

08012b36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8012b36:	b510      	push	{r4, lr}
 8012b38:	4604      	mov	r4, r0
 8012b3a:	2104      	movs	r1, #4
 8012b3c:	f006 facf 	bl	80190de <_ZdlPvj>
 8012b40:	4620      	mov	r0, r4
 8012b42:	bd10      	pop	{r4, pc}

08012b44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8012b44:	b510      	push	{r4, lr}
 8012b46:	4604      	mov	r4, r0
 8012b48:	2104      	movs	r1, #4
 8012b4a:	f006 fac8 	bl	80190de <_ZdlPvj>
 8012b4e:	4620      	mov	r0, r4
 8012b50:	bd10      	pop	{r4, pc}

08012b52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8012b52:	b510      	push	{r4, lr}
 8012b54:	4604      	mov	r4, r0
 8012b56:	2104      	movs	r1, #4
 8012b58:	f006 fac1 	bl	80190de <_ZdlPvj>
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	bd10      	pop	{r4, pc}

08012b60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8012b60:	b510      	push	{r4, lr}
 8012b62:	4604      	mov	r4, r0
 8012b64:	2104      	movs	r1, #4
 8012b66:	f006 faba 	bl	80190de <_ZdlPvj>
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	bd10      	pop	{r4, pc}

08012b6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8012b6e:	b510      	push	{r4, lr}
 8012b70:	4604      	mov	r4, r0
 8012b72:	2104      	movs	r1, #4
 8012b74:	f006 fab3 	bl	80190de <_ZdlPvj>
 8012b78:	4620      	mov	r0, r4
 8012b7a:	bd10      	pop	{r4, pc}

08012b7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8012b7c:	b510      	push	{r4, lr}
 8012b7e:	4604      	mov	r4, r0
 8012b80:	2104      	movs	r1, #4
 8012b82:	f006 faac 	bl	80190de <_ZdlPvj>
 8012b86:	4620      	mov	r0, r4
 8012b88:	bd10      	pop	{r4, pc}

08012b8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8012b8a:	b510      	push	{r4, lr}
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	2104      	movs	r1, #4
 8012b90:	f006 faa5 	bl	80190de <_ZdlPvj>
 8012b94:	4620      	mov	r0, r4
 8012b96:	bd10      	pop	{r4, pc}

08012b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8012b98:	b510      	push	{r4, lr}
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	2104      	movs	r1, #4
 8012b9e:	f006 fa9e 	bl	80190de <_ZdlPvj>
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	bd10      	pop	{r4, pc}

08012ba6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8012ba6:	b510      	push	{r4, lr}
 8012ba8:	4604      	mov	r4, r0
 8012baa:	2104      	movs	r1, #4
 8012bac:	f006 fa97 	bl	80190de <_ZdlPvj>
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	bd10      	pop	{r4, pc}

08012bb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8012bb4:	b510      	push	{r4, lr}
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	2104      	movs	r1, #4
 8012bba:	f006 fa90 	bl	80190de <_ZdlPvj>
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	bd10      	pop	{r4, pc}

08012bc2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8012bc2:	b510      	push	{r4, lr}
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	2104      	movs	r1, #4
 8012bc8:	f006 fa89 	bl	80190de <_ZdlPvj>
 8012bcc:	4620      	mov	r0, r4
 8012bce:	bd10      	pop	{r4, pc}

08012bd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8012bd0:	b510      	push	{r4, lr}
 8012bd2:	4604      	mov	r4, r0
 8012bd4:	2104      	movs	r1, #4
 8012bd6:	f006 fa82 	bl	80190de <_ZdlPvj>
 8012bda:	4620      	mov	r0, r4
 8012bdc:	bd10      	pop	{r4, pc}

08012bde <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8012bde:	b510      	push	{r4, lr}
 8012be0:	4604      	mov	r4, r0
 8012be2:	2104      	movs	r1, #4
 8012be4:	f006 fa7b 	bl	80190de <_ZdlPvj>
 8012be8:	4620      	mov	r0, r4
 8012bea:	bd10      	pop	{r4, pc}

08012bec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8012bec:	b510      	push	{r4, lr}
 8012bee:	4604      	mov	r4, r0
 8012bf0:	2104      	movs	r1, #4
 8012bf2:	f006 fa74 	bl	80190de <_ZdlPvj>
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	bd10      	pop	{r4, pc}

08012bfa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8012bfa:	b510      	push	{r4, lr}
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	2104      	movs	r1, #4
 8012c00:	f006 fa6d 	bl	80190de <_ZdlPvj>
 8012c04:	4620      	mov	r0, r4
 8012c06:	bd10      	pop	{r4, pc}

08012c08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8012c08:	b510      	push	{r4, lr}
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	2104      	movs	r1, #4
 8012c0e:	f006 fa66 	bl	80190de <_ZdlPvj>
 8012c12:	4620      	mov	r0, r4
 8012c14:	bd10      	pop	{r4, pc}

08012c16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8012c16:	b510      	push	{r4, lr}
 8012c18:	4604      	mov	r4, r0
 8012c1a:	2104      	movs	r1, #4
 8012c1c:	f006 fa5f 	bl	80190de <_ZdlPvj>
 8012c20:	4620      	mov	r0, r4
 8012c22:	bd10      	pop	{r4, pc}

08012c24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	4604      	mov	r4, r0
 8012c28:	2104      	movs	r1, #4
 8012c2a:	f006 fa58 	bl	80190de <_ZdlPvj>
 8012c2e:	4620      	mov	r0, r4
 8012c30:	bd10      	pop	{r4, pc}

08012c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8012c32:	b510      	push	{r4, lr}
 8012c34:	4604      	mov	r4, r0
 8012c36:	2104      	movs	r1, #4
 8012c38:	f006 fa51 	bl	80190de <_ZdlPvj>
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	bd10      	pop	{r4, pc}

08012c40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8012c40:	b510      	push	{r4, lr}
 8012c42:	4604      	mov	r4, r0
 8012c44:	2104      	movs	r1, #4
 8012c46:	f006 fa4a 	bl	80190de <_ZdlPvj>
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	bd10      	pop	{r4, pc}

08012c4e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8012c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c52:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012c56:	9c06      	ldr	r4, [sp, #24]
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d06e      	beq.n	8012d3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012c5c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8012c60:	2d00      	cmp	r5, #0
 8012c62:	dd6a      	ble.n	8012d3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012c64:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8012c68:	f1bc 0f00 	cmp.w	ip, #0
 8012c6c:	dd65      	ble.n	8012d3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012c6e:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8012c72:	28ff      	cmp	r0, #255	; 0xff
 8012c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c78:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8012c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8012c80:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8012c84:	b2e4      	uxtb	r4, r4
 8012c86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012c8a:	4419      	add	r1, r3
 8012c8c:	fb02 f30c 	mul.w	r3, r2, ip
 8012c90:	eba2 0205 	sub.w	r2, r2, r5
 8012c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012c9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012ca0:	440b      	add	r3, r1
 8012ca2:	d03e      	beq.n	8012d22 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8012ca4:	fa1f fc80 	uxth.w	ip, r0
 8012ca8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8012cac:	fb06 f60c 	mul.w	r6, r6, ip
 8012cb0:	b280      	uxth	r0, r0
 8012cb2:	fb07 f70c 	mul.w	r7, r7, ip
 8012cb6:	fb04 f40c 	mul.w	r4, r4, ip
 8012cba:	4299      	cmp	r1, r3
 8012cbc:	d23d      	bcs.n	8012d3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012cbe:	eb01 0c05 	add.w	ip, r1, r5
 8012cc2:	458c      	cmp	ip, r1
 8012cc4:	f101 0e03 	add.w	lr, r1, #3
 8012cc8:	d928      	bls.n	8012d1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8012cca:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8012cce:	fb11 f100 	smulbb	r1, r1, r0
 8012cd2:	4421      	add	r1, r4
 8012cd4:	b289      	uxth	r1, r1
 8012cd6:	f101 0801 	add.w	r8, r1, #1
 8012cda:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012cde:	1209      	asrs	r1, r1, #8
 8012ce0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8012ce4:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8012ce8:	fb11 f100 	smulbb	r1, r1, r0
 8012cec:	4439      	add	r1, r7
 8012cee:	b289      	uxth	r1, r1
 8012cf0:	f101 0801 	add.w	r8, r1, #1
 8012cf4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012cf8:	1209      	asrs	r1, r1, #8
 8012cfa:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8012cfe:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8012d02:	fb11 f100 	smulbb	r1, r1, r0
 8012d06:	4431      	add	r1, r6
 8012d08:	b289      	uxth	r1, r1
 8012d0a:	f101 0801 	add.w	r8, r1, #1
 8012d0e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012d12:	1209      	asrs	r1, r1, #8
 8012d14:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8012d18:	4671      	mov	r1, lr
 8012d1a:	e7d2      	b.n	8012cc2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8012d1c:	4411      	add	r1, r2
 8012d1e:	e7cc      	b.n	8012cba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8012d20:	4411      	add	r1, r2
 8012d22:	4299      	cmp	r1, r3
 8012d24:	d209      	bcs.n	8012d3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012d26:	1948      	adds	r0, r1, r5
 8012d28:	4281      	cmp	r1, r0
 8012d2a:	d2f9      	bcs.n	8012d20 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8012d2c:	700c      	strb	r4, [r1, #0]
 8012d2e:	3103      	adds	r1, #3
 8012d30:	f801 7c02 	strb.w	r7, [r1, #-2]
 8012d34:	f801 6c01 	strb.w	r6, [r1, #-1]
 8012d38:	e7f6      	b.n	8012d28 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8012d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012d40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8012d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d44:	b093      	sub	sp, #76	; 0x4c
 8012d46:	4699      	mov	r9, r3
 8012d48:	4605      	mov	r5, r0
 8012d4a:	460e      	mov	r6, r1
 8012d4c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8012d50:	4617      	mov	r7, r2
 8012d52:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012d54:	9304      	str	r3, [sp, #16]
 8012d56:	4b8c      	ldr	r3, [pc, #560]	; (8012f88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 8012d58:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d62:	2b02      	cmp	r3, #2
 8012d64:	d106      	bne.n	8012d74 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34>
 8012d66:	4b89      	ldr	r3, [pc, #548]	; (8012f8c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 8012d68:	f240 11f7 	movw	r1, #503	; 0x1f7
 8012d6c:	4a88      	ldr	r2, [pc, #544]	; (8012f90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 8012d6e:	4889      	ldr	r0, [pc, #548]	; (8012f94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 8012d70:	f006 f9e4 	bl	801913c <__assert_func>
 8012d74:	b924      	cbnz	r4, 8012d80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40>
 8012d76:	4b88      	ldr	r3, [pc, #544]	; (8012f98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 8012d78:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8012d7c:	4a84      	ldr	r2, [pc, #528]	; (8012f90 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 8012d7e:	e7f6      	b.n	8012d6e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2e>
 8012d80:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8012d84:	4649      	mov	r1, r9
 8012d86:	f9b9 2000 	ldrsh.w	r2, [r9]
 8012d8a:	a80c      	add	r0, sp, #48	; 0x30
 8012d8c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012d90:	9b04      	ldr	r3, [sp, #16]
 8012d92:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012d96:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8012d9a:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
 8012d9e:	f7f7 fe63 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 8012da2:	4639      	mov	r1, r7
 8012da4:	a80c      	add	r0, sp, #48	; 0x30
 8012da6:	f7f7 fe5f 	bl	800aa68 <_ZN8touchgfx4RectaNERKS0_>
 8012daa:	4b7c      	ldr	r3, [pc, #496]	; (8012f9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 8012dac:	8818      	ldrh	r0, [r3, #0]
 8012dae:	4b7c      	ldr	r3, [pc, #496]	; (8012fa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x260>)
 8012db0:	fa0f fc80 	sxth.w	ip, r0
 8012db4:	8819      	ldrh	r1, [r3, #0]
 8012db6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012dba:	b20f      	sxth	r7, r1
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	da07      	bge.n	8012dd0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x90>
 8012dc0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8012dca:	2300      	movs	r3, #0
 8012dcc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8012dd0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012dd4:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
 8012dd8:	ebac 0302 	sub.w	r3, ip, r2
 8012ddc:	459e      	cmp	lr, r3
 8012dde:	bfc4      	itt	gt
 8012de0:	1a83      	subgt	r3, r0, r2
 8012de2:	f8ad 3034 	strhgt.w	r3, [sp, #52]	; 0x34
 8012de6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	da07      	bge.n	8012dfe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xbe>
 8012dee:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8012df2:	4463      	add	r3, ip
 8012df4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012dfe:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012e02:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8012e06:	1aff      	subs	r7, r7, r3
 8012e08:	45bc      	cmp	ip, r7
 8012e0a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8012fa8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x268>
 8012e0e:	bfc8      	it	gt
 8012e10:	1acf      	subgt	r7, r1, r3
 8012e12:	f89c c000 	ldrb.w	ip, [ip]
 8012e16:	bfc8      	it	gt
 8012e18:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8012e1c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8012e20:	f1bc 0f00 	cmp.w	ip, #0
 8012e24:	d174      	bne.n	8012f10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 8012e26:	4287      	cmp	r7, r0
 8012e28:	bf14      	ite	ne
 8012e2a:	2100      	movne	r1, #0
 8012e2c:	2101      	moveq	r1, #1
 8012e2e:	2f00      	cmp	r7, #0
 8012e30:	9107      	str	r1, [sp, #28]
 8012e32:	dd71      	ble.n	8012f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 8012e34:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8012e38:	2900      	cmp	r1, #0
 8012e3a:	9103      	str	r1, [sp, #12]
 8012e3c:	dd6c      	ble.n	8012f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 8012e3e:	f8b9 1000 	ldrh.w	r1, [r9]
 8012e42:	a80e      	add	r0, sp, #56	; 0x38
 8012e44:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 8012e48:	f04f 0803 	mov.w	r8, #3
 8012e4c:	1a52      	subs	r2, r2, r1
 8012e4e:	a910      	add	r1, sp, #64	; 0x40
 8012e50:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8012e54:	b212      	sxth	r2, r2
 8012e56:	9205      	str	r2, [sp, #20]
 8012e58:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8012e5c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8012f88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8012e60:	1a9b      	subs	r3, r3, r2
 8012e62:	b21b      	sxth	r3, r3
 8012e64:	9306      	str	r3, [sp, #24]
 8012e66:	9b05      	ldr	r3, [sp, #20]
 8012e68:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8012e6c:	9b06      	ldr	r3, [sp, #24]
 8012e6e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012e72:	9b03      	ldr	r3, [sp, #12]
 8012e74:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012e78:	2300      	movs	r3, #0
 8012e7a:	9310      	str	r3, [sp, #64]	; 0x40
 8012e7c:	9b04      	ldr	r3, [sp, #16]
 8012e7e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8012e82:	f7fa fef5 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012e86:	a90c      	add	r1, sp, #48	; 0x30
 8012e88:	4608      	mov	r0, r1
 8012e8a:	910b      	str	r1, [sp, #44]	; 0x2c
 8012e8c:	f7fa fec8 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012e90:	a810      	add	r0, sp, #64	; 0x40
 8012e92:	f7fa fec5 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012e96:	4b43      	ldr	r3, [pc, #268]	; (8012fa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>)
 8012e98:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	881b      	ldrh	r3, [r3, #0]
 8012ea0:	9308      	str	r3, [sp, #32]
 8012ea2:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8012ea6:	b21b      	sxth	r3, r3
 8012ea8:	9302      	str	r3, [sp, #8]
 8012eaa:	6833      	ldr	r3, [r6, #0]
 8012eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eae:	4798      	blx	r3
 8012eb0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012eb4:	9a02      	ldr	r2, [sp, #8]
 8012eb6:	4682      	mov	sl, r0
 8012eb8:	f8d9 0000 	ldr.w	r0, [r9]
 8012ebc:	fb13 f202 	smulbb	r2, r3, r2
 8012ec0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012ec4:	fb13 2308 	smlabb	r3, r3, r8, r2
 8012ec8:	441c      	add	r4, r3
 8012eca:	6803      	ldr	r3, [r0, #0]
 8012ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ece:	4798      	blx	r3
 8012ed0:	900a      	str	r0, [sp, #40]	; 0x28
 8012ed2:	f8d9 0000 	ldr.w	r0, [r9]
 8012ed6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012eda:	6802      	ldr	r2, [r0, #0]
 8012edc:	9309      	str	r3, [sp, #36]	; 0x24
 8012ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012ee0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8012ee4:	4790      	blx	r2
 8012ee6:	f010 0f01 	tst.w	r0, #1
 8012eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eec:	d01d      	beq.n	8012f2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ea>
 8012eee:	f8d9 0000 	ldr.w	r0, [r9]
 8012ef2:	9a04      	ldr	r2, [sp, #16]
 8012ef4:	6803      	ldr	r3, [r0, #0]
 8012ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012ef8:	9200      	str	r2, [sp, #0]
 8012efa:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8012efc:	4623      	mov	r3, r4
 8012efe:	c906      	ldmia	r1, {r1, r2}
 8012f00:	47b0      	blx	r6
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	80af      	strh	r7, [r5, #4]
 8012f06:	802b      	strh	r3, [r5, #0]
 8012f08:	9b06      	ldr	r3, [sp, #24]
 8012f0a:	806b      	strh	r3, [r5, #2]
 8012f0c:	9b03      	ldr	r3, [sp, #12]
 8012f0e:	e007      	b.n	8012f20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 8012f10:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8012f14:	4288      	cmp	r0, r1
 8012f16:	e787      	b.n	8012e28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe8>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	802b      	strh	r3, [r5, #0]
 8012f1c:	806b      	strh	r3, [r5, #2]
 8012f1e:	80ab      	strh	r3, [r5, #4]
 8012f20:	4628      	mov	r0, r5
 8012f22:	80eb      	strh	r3, [r5, #6]
 8012f24:	b013      	add	sp, #76	; 0x4c
 8012f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f2c:	fb0a f606 	mul.w	r6, sl, r6
 8012f30:	fb12 6608 	smlabb	r6, r2, r8, r6
 8012f34:	9a07      	ldr	r2, [sp, #28]
 8012f36:	441e      	add	r6, r3
 8012f38:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8012f3c:	b16a      	cbz	r2, 8012f5a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8012f3e:	9a08      	ldr	r2, [sp, #32]
 8012f40:	4593      	cmp	fp, r2
 8012f42:	d10a      	bne.n	8012f5a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8012f44:	f8d9 0000 	ldr.w	r0, [r9]
 8012f48:	fb03 f30a 	mul.w	r3, r3, sl
 8012f4c:	4621      	mov	r1, r4
 8012f4e:	6802      	ldr	r2, [r0, #0]
 8012f50:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8012f54:	4632      	mov	r2, r6
 8012f56:	47c8      	blx	r9
 8012f58:	e7d3      	b.n	8012f02 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8012f5a:	9a02      	ldr	r2, [sp, #8]
 8012f5c:	f8df b028 	ldr.w	fp, [pc, #40]	; 8012f88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8012f60:	fb02 4803 	mla	r8, r2, r3, r4
 8012f64:	4544      	cmp	r4, r8
 8012f66:	d2cc      	bcs.n	8012f02 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8012f68:	f8db 0000 	ldr.w	r0, [fp]
 8012f6c:	4621      	mov	r1, r4
 8012f6e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8012f72:	6802      	ldr	r2, [r0, #0]
 8012f74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f78:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8012f7c:	4632      	mov	r2, r6
 8012f7e:	47c8      	blx	r9
 8012f80:	9b02      	ldr	r3, [sp, #8]
 8012f82:	4456      	add	r6, sl
 8012f84:	441c      	add	r4, r3
 8012f86:	e7ed      	b.n	8012f64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8012f88:	2400aef4 	.word	0x2400aef4
 8012f8c:	0801cc83 	.word	0x0801cc83
 8012f90:	0801d3d9 	.word	0x0801d3d9
 8012f94:	0801cc03 	.word	0x0801cc03
 8012f98:	0801cc35 	.word	0x0801cc35
 8012f9c:	2400aee8 	.word	0x2400aee8
 8012fa0:	2400aeea 	.word	0x2400aeea
 8012fa4:	2400aeee 	.word	0x2400aeee
 8012fa8:	2400aeec 	.word	0x2400aeec

08012fac <_ZN8touchgfx8LCD24bppC1Ev>:
 8012fac:	2200      	movs	r2, #0
 8012fae:	490c      	ldr	r1, [pc, #48]	; (8012fe0 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8012fb0:	6042      	str	r2, [r0, #4]
 8012fb2:	6001      	str	r1, [r0, #0]
 8012fb4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8012fb8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8012fbc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012fc0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8012fc4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8012fc8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8012fcc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8012fd0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8012fd4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8012fd8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8012fdc:	4770      	bx	lr
 8012fde:	bf00      	nop
 8012fe0:	0801d01c 	.word	0x0801d01c

08012fe4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe8:	b091      	sub	sp, #68	; 0x44
 8012fea:	880d      	ldrh	r5, [r1, #0]
 8012fec:	4607      	mov	r7, r0
 8012fee:	4688      	mov	r8, r1
 8012ff0:	4616      	mov	r6, r2
 8012ff2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8012ff6:	b12d      	cbz	r5, 8013004 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8012ff8:	4b69      	ldr	r3, [pc, #420]	; (80131a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8012ffa:	215e      	movs	r1, #94	; 0x5e
 8012ffc:	4a69      	ldr	r2, [pc, #420]	; (80131a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8012ffe:	486a      	ldr	r0, [pc, #424]	; (80131a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8013000:	f006 f89c 	bl	801913c <__assert_func>
 8013004:	6810      	ldr	r0, [r2, #0]
 8013006:	ac0c      	add	r4, sp, #48	; 0x30
 8013008:	6851      	ldr	r1, [r2, #4]
 801300a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80131ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801300e:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80131b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8013012:	c403      	stmia	r4!, {r0, r1}
 8013014:	6818      	ldr	r0, [r3, #0]
 8013016:	ac0e      	add	r4, sp, #56	; 0x38
 8013018:	6859      	ldr	r1, [r3, #4]
 801301a:	c403      	stmia	r4!, {r0, r1}
 801301c:	a80c      	add	r0, sp, #48	; 0x30
 801301e:	f7fa fdff 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013022:	4631      	mov	r1, r6
 8013024:	a80e      	add	r0, sp, #56	; 0x38
 8013026:	f7fa fe23 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801302a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801302e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013032:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8013036:	f8da 0000 	ldr.w	r0, [sl]
 801303a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801303e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8013042:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8013046:	440f      	add	r7, r1
 8013048:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801304c:	440a      	add	r2, r1
 801304e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8013052:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8013056:	4413      	add	r3, r2
 8013058:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801305c:	6803      	ldr	r3, [r0, #0]
 801305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013060:	4798      	blx	r3
 8013062:	f010 0f80 	tst.w	r0, #128	; 0x80
 8013066:	f8da 0000 	ldr.w	r0, [sl]
 801306a:	d01e      	beq.n	80130aa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 801306c:	6801      	ldr	r1, [r0, #0]
 801306e:	2201      	movs	r2, #1
 8013070:	9509      	str	r5, [sp, #36]	; 0x24
 8013072:	250b      	movs	r5, #11
 8013074:	b2a4      	uxth	r4, r4
 8013076:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801307a:	b2b6      	uxth	r6, r6
 801307c:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8013080:	f8bb 5000 	ldrh.w	r5, [fp]
 8013084:	f8cd 9010 	str.w	r9, [sp, #16]
 8013088:	9602      	str	r6, [sp, #8]
 801308a:	9401      	str	r4, [sp, #4]
 801308c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8013090:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8013094:	9203      	str	r2, [sp, #12]
 8013096:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801309a:	9200      	str	r2, [sp, #0]
 801309c:	4642      	mov	r2, r8
 801309e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80130a0:	4639      	mov	r1, r7
 80130a2:	47a0      	blx	r4
 80130a4:	b011      	add	sp, #68	; 0x44
 80130a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130aa:	6803      	ldr	r3, [r0, #0]
 80130ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ae:	4798      	blx	r3
 80130b0:	f8bb 5000 	ldrh.w	r5, [fp]
 80130b4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80130b8:	f04f 0e04 	mov.w	lr, #4
 80130bc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80130c0:	436e      	muls	r6, r5
 80130c2:	fb05 2303 	mla	r3, r5, r3, r2
 80130c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80130ca:	1b2d      	subs	r5, r5, r4
 80130cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80130d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130d4:	4418      	add	r0, r3
 80130d6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80130da:	1982      	adds	r2, r0, r6
 80130dc:	1b1b      	subs	r3, r3, r4
 80130de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80130e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80130e4:	4290      	cmp	r0, r2
 80130e6:	d254      	bcs.n	8013192 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 80130e8:	eb00 0a04 	add.w	sl, r0, r4
 80130ec:	4550      	cmp	r0, sl
 80130ee:	d24c      	bcs.n	801318a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 80130f0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80130f4:	fb1e e101 	smlabb	r1, lr, r1, lr
 80130f8:	eb08 0c01 	add.w	ip, r8, r1
 80130fc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8013100:	b173      	cbz	r3, 8013120 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8013102:	2bff      	cmp	r3, #255	; 0xff
 8013104:	f818 b001 	ldrb.w	fp, [r8, r1]
 8013108:	d10c      	bne.n	8013124 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801310a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801310e:	d109      	bne.n	8013124 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8013110:	f880 b000 	strb.w	fp, [r0]
 8013114:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8013118:	7043      	strb	r3, [r0, #1]
 801311a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801311e:	7083      	strb	r3, [r0, #2]
 8013120:	3003      	adds	r0, #3
 8013122:	e7e3      	b.n	80130ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8013124:	fb09 f103 	mul.w	r1, r9, r3
 8013128:	1c4b      	adds	r3, r1, #1
 801312a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801312e:	7801      	ldrb	r1, [r0, #0]
 8013130:	121b      	asrs	r3, r3, #8
 8013132:	b29e      	uxth	r6, r3
 8013134:	43db      	mvns	r3, r3
 8013136:	fb1b fb06 	smulbb	fp, fp, r6
 801313a:	b2db      	uxtb	r3, r3
 801313c:	fb01 b103 	mla	r1, r1, r3, fp
 8013140:	b289      	uxth	r1, r1
 8013142:	f101 0b01 	add.w	fp, r1, #1
 8013146:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801314a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801314e:	fb1b fb03 	smulbb	fp, fp, r3
 8013152:	1209      	asrs	r1, r1, #8
 8013154:	7001      	strb	r1, [r0, #0]
 8013156:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801315a:	fb01 b106 	mla	r1, r1, r6, fp
 801315e:	b289      	uxth	r1, r1
 8013160:	f101 0b01 	add.w	fp, r1, #1
 8013164:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8013168:	1209      	asrs	r1, r1, #8
 801316a:	7041      	strb	r1, [r0, #1]
 801316c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8013170:	f890 c002 	ldrb.w	ip, [r0, #2]
 8013174:	fb1c f303 	smulbb	r3, ip, r3
 8013178:	fb01 3606 	mla	r6, r1, r6, r3
 801317c:	b2b6      	uxth	r6, r6
 801317e:	1c73      	adds	r3, r6, #1
 8013180:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8013184:	1236      	asrs	r6, r6, #8
 8013186:	7086      	strb	r6, [r0, #2]
 8013188:	e7ca      	b.n	8013120 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801318a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801318c:	4428      	add	r0, r5
 801318e:	441f      	add	r7, r3
 8013190:	e7a8      	b.n	80130e4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8013192:	4b06      	ldr	r3, [pc, #24]	; (80131ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8013194:	6818      	ldr	r0, [r3, #0]
 8013196:	6803      	ldr	r3, [r0, #0]
 8013198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801319a:	4798      	blx	r3
 801319c:	e782      	b.n	80130a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801319e:	bf00      	nop
 80131a0:	0801cb67 	.word	0x0801cb67
 80131a4:	0801d1fb 	.word	0x0801d1fb
 80131a8:	0801cc03 	.word	0x0801cc03
 80131ac:	2400aef4 	.word	0x2400aef4
 80131b0:	2400aeee 	.word	0x2400aeee

080131b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80131b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b8:	f8b1 9000 	ldrh.w	r9, [r1]
 80131bc:	b091      	sub	sp, #68	; 0x44
 80131be:	4604      	mov	r4, r0
 80131c0:	460e      	mov	r6, r1
 80131c2:	f1b9 0f01 	cmp.w	r9, #1
 80131c6:	4690      	mov	r8, r2
 80131c8:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80131cc:	d005      	beq.n	80131da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 80131ce:	4b69      	ldr	r3, [pc, #420]	; (8013374 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80131d0:	21ac      	movs	r1, #172	; 0xac
 80131d2:	4a69      	ldr	r2, [pc, #420]	; (8013378 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80131d4:	4869      	ldr	r0, [pc, #420]	; (801337c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80131d6:	f005 ffb1 	bl	801913c <__assert_func>
 80131da:	6810      	ldr	r0, [r2, #0]
 80131dc:	ad0c      	add	r5, sp, #48	; 0x30
 80131de:	6851      	ldr	r1, [r2, #4]
 80131e0:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8013380 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80131e4:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8013384 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80131e8:	c503      	stmia	r5!, {r0, r1}
 80131ea:	6818      	ldr	r0, [r3, #0]
 80131ec:	ad0e      	add	r5, sp, #56	; 0x38
 80131ee:	6859      	ldr	r1, [r3, #4]
 80131f0:	c503      	stmia	r5!, {r0, r1}
 80131f2:	a80c      	add	r0, sp, #48	; 0x30
 80131f4:	f7fa fd14 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80131f8:	4641      	mov	r1, r8
 80131fa:	a80e      	add	r0, sp, #56	; 0x38
 80131fc:	f7fa fd38 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013200:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8013204:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013208:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801320c:	f8da 0000 	ldr.w	r0, [sl]
 8013210:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013214:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8013218:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801321c:	440c      	add	r4, r1
 801321e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8013222:	440a      	add	r2, r1
 8013224:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8013228:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801322c:	4413      	add	r3, r2
 801322e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8013232:	6803      	ldr	r3, [r0, #0]
 8013234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013236:	4798      	blx	r3
 8013238:	f010 0f80 	tst.w	r0, #128	; 0x80
 801323c:	f8da 0000 	ldr.w	r0, [sl]
 8013240:	d020      	beq.n	8013284 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8013242:	2200      	movs	r2, #0
 8013244:	f04f 0c0b 	mov.w	ip, #11
 8013248:	6801      	ldr	r1, [r0, #0]
 801324a:	b2ad      	uxth	r5, r5
 801324c:	f8cd c01c 	str.w	ip, [sp, #28]
 8013250:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013254:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8013258:	f8bb c000 	ldrh.w	ip, [fp]
 801325c:	9704      	str	r7, [sp, #16]
 801325e:	9502      	str	r5, [sp, #8]
 8013260:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8013264:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8013268:	9203      	str	r2, [sp, #12]
 801326a:	fa1f f288 	uxth.w	r2, r8
 801326e:	9201      	str	r2, [sp, #4]
 8013270:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8013274:	9200      	str	r2, [sp, #0]
 8013276:	4632      	mov	r2, r6
 8013278:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801327a:	4621      	mov	r1, r4
 801327c:	47a8      	blx	r5
 801327e:	b011      	add	sp, #68	; 0x44
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	6803      	ldr	r3, [r0, #0]
 8013286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013288:	4798      	blx	r3
 801328a:	f8bb 2000 	ldrh.w	r2, [fp]
 801328e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8013292:	f04f 0e03 	mov.w	lr, #3
 8013296:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801329a:	4355      	muls	r5, r2
 801329c:	fa1f fc87 	uxth.w	ip, r7
 80132a0:	fb02 1303 	mla	r3, r2, r3, r1
 80132a4:	eba2 0208 	sub.w	r2, r2, r8
 80132a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80132b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80132b4:	4418      	add	r0, r3
 80132b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80132b8:	1943      	adds	r3, r0, r5
 80132ba:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80132be:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80132c2:	eba2 0208 	sub.w	r2, r2, r8
 80132c6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80132ca:	b2ad      	uxth	r5, r5
 80132cc:	4298      	cmp	r0, r3
 80132ce:	d24a      	bcs.n	8013366 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80132d0:	eb00 0908 	add.w	r9, r0, r8
 80132d4:	4621      	mov	r1, r4
 80132d6:	4548      	cmp	r0, r9
 80132d8:	460c      	mov	r4, r1
 80132da:	d240      	bcs.n	801335e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80132dc:	f04f 0a04 	mov.w	sl, #4
 80132e0:	7824      	ldrb	r4, [r4, #0]
 80132e2:	2fff      	cmp	r7, #255	; 0xff
 80132e4:	f101 0101 	add.w	r1, r1, #1
 80132e8:	fb1e a404 	smlabb	r4, lr, r4, sl
 80132ec:	eb06 0a04 	add.w	sl, r6, r4
 80132f0:	f816 b004 	ldrb.w	fp, [r6, r4]
 80132f4:	d02b      	beq.n	801334e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80132f6:	7804      	ldrb	r4, [r0, #0]
 80132f8:	fb14 f405 	smulbb	r4, r4, r5
 80132fc:	fb0b 440c 	mla	r4, fp, ip, r4
 8013300:	b2a4      	uxth	r4, r4
 8013302:	f104 0b01 	add.w	fp, r4, #1
 8013306:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801330a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801330e:	fb1b fb05 	smulbb	fp, fp, r5
 8013312:	1224      	asrs	r4, r4, #8
 8013314:	7004      	strb	r4, [r0, #0]
 8013316:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801331a:	fb04 b40c 	mla	r4, r4, ip, fp
 801331e:	b2a4      	uxth	r4, r4
 8013320:	f104 0b01 	add.w	fp, r4, #1
 8013324:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8013328:	1224      	asrs	r4, r4, #8
 801332a:	7044      	strb	r4, [r0, #1]
 801332c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8013330:	f890 a002 	ldrb.w	sl, [r0, #2]
 8013334:	fb1a fa05 	smulbb	sl, sl, r5
 8013338:	fb04 a40c 	mla	r4, r4, ip, sl
 801333c:	b2a4      	uxth	r4, r4
 801333e:	f104 0a01 	add.w	sl, r4, #1
 8013342:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8013346:	1224      	asrs	r4, r4, #8
 8013348:	7084      	strb	r4, [r0, #2]
 801334a:	3003      	adds	r0, #3
 801334c:	e7c3      	b.n	80132d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 801334e:	f880 b000 	strb.w	fp, [r0]
 8013352:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8013356:	7044      	strb	r4, [r0, #1]
 8013358:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801335c:	e7f4      	b.n	8013348 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 801335e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013360:	4420      	add	r0, r4
 8013362:	188c      	adds	r4, r1, r2
 8013364:	e7b2      	b.n	80132cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8013366:	4b06      	ldr	r3, [pc, #24]	; (8013380 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8013368:	6818      	ldr	r0, [r3, #0]
 801336a:	6803      	ldr	r3, [r0, #0]
 801336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336e:	4798      	blx	r3
 8013370:	e785      	b.n	801327e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8013372:	bf00      	nop
 8013374:	0801cae6 	.word	0x0801cae6
 8013378:	0801d0ee 	.word	0x0801d0ee
 801337c:	0801cc03 	.word	0x0801cc03
 8013380:	2400aef4 	.word	0x2400aef4
 8013384:	2400aeee 	.word	0x2400aeee

08013388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8013388:	b570      	push	{r4, r5, r6, lr}
 801338a:	780d      	ldrb	r5, [r1, #0]
 801338c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8013390:	2d01      	cmp	r5, #1
 8013392:	d00d      	beq.n	80133b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8013394:	d307      	bcc.n	80133a6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8013396:	2d02      	cmp	r5, #2
 8013398:	d10f      	bne.n	80133ba <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801339a:	4b08      	ldr	r3, [pc, #32]	; (80133bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801339c:	2151      	movs	r1, #81	; 0x51
 801339e:	4a08      	ldr	r2, [pc, #32]	; (80133c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 80133a0:	4808      	ldr	r0, [pc, #32]	; (80133c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 80133a2:	f005 fecb 	bl	801913c <__assert_func>
 80133a6:	9404      	str	r4, [sp, #16]
 80133a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133ac:	f7ff be1a 	b.w	8012fe4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80133b0:	9404      	str	r4, [sp, #16]
 80133b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133b6:	f7ff befd 	b.w	80131b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80133ba:	bd70      	pop	{r4, r5, r6, pc}
 80133bc:	0801ca9b 	.word	0x0801ca9b
 80133c0:	0801d06c 	.word	0x0801d06c
 80133c4:	0801cc03 	.word	0x0801cc03

080133c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80133c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133cc:	4605      	mov	r5, r0
 80133ce:	b08f      	sub	sp, #60	; 0x3c
 80133d0:	460c      	mov	r4, r1
 80133d2:	461f      	mov	r7, r3
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d052      	beq.n	801347e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80133d8:	6808      	ldr	r0, [r1, #0]
 80133da:	ab0a      	add	r3, sp, #40	; 0x28
 80133dc:	6849      	ldr	r1, [r1, #4]
 80133de:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80135a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80133e2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80135ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80133e6:	c303      	stmia	r3!, {r0, r1}
 80133e8:	6810      	ldr	r0, [r2, #0]
 80133ea:	ab0c      	add	r3, sp, #48	; 0x30
 80133ec:	6851      	ldr	r1, [r2, #4]
 80133ee:	c303      	stmia	r3!, {r0, r1}
 80133f0:	a80a      	add	r0, sp, #40	; 0x28
 80133f2:	f7fa fc15 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80133f6:	4621      	mov	r1, r4
 80133f8:	a80c      	add	r0, sp, #48	; 0x30
 80133fa:	f7fa fc39 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80133fe:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8013402:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013406:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801340a:	f8d8 0000 	ldr.w	r0, [r8]
 801340e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013412:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8013416:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801341a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801341e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8013422:	440a      	add	r2, r1
 8013424:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8013428:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801342c:	4413      	add	r3, r2
 801342e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013432:	6803      	ldr	r3, [r0, #0]
 8013434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013436:	4798      	blx	r3
 8013438:	2fff      	cmp	r7, #255	; 0xff
 801343a:	d023      	beq.n	8013484 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801343c:	f010 0f04 	tst.w	r0, #4
 8013440:	f8d8 0000 	ldr.w	r0, [r8]
 8013444:	d021      	beq.n	801348a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8013446:	2100      	movs	r1, #0
 8013448:	f04f 0e01 	mov.w	lr, #1
 801344c:	f8d0 c000 	ldr.w	ip, [r0]
 8013450:	b2a4      	uxth	r4, r4
 8013452:	9106      	str	r1, [sp, #24]
 8013454:	b2b6      	uxth	r6, r6
 8013456:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801345a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801345e:	e9cd e107 	strd	lr, r1, [sp, #28]
 8013462:	f8b9 e000 	ldrh.w	lr, [r9]
 8013466:	9703      	str	r7, [sp, #12]
 8013468:	9401      	str	r4, [sp, #4]
 801346a:	9600      	str	r6, [sp, #0]
 801346c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8013470:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013474:	9102      	str	r1, [sp, #8]
 8013476:	4629      	mov	r1, r5
 8013478:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801347c:	47a0      	blx	r4
 801347e:	b00f      	add	sp, #60	; 0x3c
 8013480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013484:	f010 0f01 	tst.w	r0, #1
 8013488:	e7da      	b.n	8013440 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801348e:	4798      	blx	r3
 8013490:	f8b9 1000 	ldrh.w	r1, [r9]
 8013494:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013498:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801349c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80134a0:	434c      	muls	r4, r1
 80134a2:	2fff      	cmp	r7, #255	; 0xff
 80134a4:	fb01 2303 	mla	r3, r1, r3, r2
 80134a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80134ac:	eba1 0106 	sub.w	r1, r1, r6
 80134b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80134b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80134b8:	4418      	add	r0, r3
 80134ba:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80134be:	eba3 0606 	sub.w	r6, r3, r6
 80134c2:	4404      	add	r4, r0
 80134c4:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80134c8:	d04a      	beq.n	8013560 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80134ca:	43fa      	mvns	r2, r7
 80134cc:	b2bb      	uxth	r3, r7
 80134ce:	b2d7      	uxtb	r7, r2
 80134d0:	42a0      	cmp	r0, r4
 80134d2:	d263      	bcs.n	801359c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80134d4:	eb00 0e0c 	add.w	lr, r0, ip
 80134d8:	4586      	cmp	lr, r0
 80134da:	f100 0803 	add.w	r8, r0, #3
 80134de:	d93a      	bls.n	8013556 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80134e0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80134e4:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80134e8:	00d0      	lsls	r0, r2, #3
 80134ea:	fb19 f907 	smulbb	r9, r9, r7
 80134ee:	b2c0      	uxtb	r0, r0
 80134f0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80134f4:	fb00 9003 	mla	r0, r0, r3, r9
 80134f8:	b280      	uxth	r0, r0
 80134fa:	f100 0901 	add.w	r9, r0, #1
 80134fe:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8013502:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8013506:	fb19 f907 	smulbb	r9, r9, r7
 801350a:	1200      	asrs	r0, r0, #8
 801350c:	f808 0c03 	strb.w	r0, [r8, #-3]
 8013510:	10d0      	asrs	r0, r2, #3
 8013512:	1212      	asrs	r2, r2, #8
 8013514:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8013518:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801351c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8013520:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8013524:	fb00 9003 	mla	r0, r0, r3, r9
 8013528:	b280      	uxth	r0, r0
 801352a:	f100 0901 	add.w	r9, r0, #1
 801352e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8013532:	1200      	asrs	r0, r0, #8
 8013534:	f808 0c02 	strb.w	r0, [r8, #-2]
 8013538:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801353c:	fb10 f007 	smulbb	r0, r0, r7
 8013540:	fb02 0203 	mla	r2, r2, r3, r0
 8013544:	b292      	uxth	r2, r2
 8013546:	1c50      	adds	r0, r2, #1
 8013548:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801354c:	4640      	mov	r0, r8
 801354e:	1212      	asrs	r2, r2, #8
 8013550:	f808 2c01 	strb.w	r2, [r8, #-1]
 8013554:	e7c0      	b.n	80134d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8013556:	4408      	add	r0, r1
 8013558:	4435      	add	r5, r6
 801355a:	e7b9      	b.n	80134d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801355c:	4408      	add	r0, r1
 801355e:	4435      	add	r5, r6
 8013560:	42a0      	cmp	r0, r4
 8013562:	d21b      	bcs.n	801359c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8013564:	eb00 070c 	add.w	r7, r0, ip
 8013568:	42b8      	cmp	r0, r7
 801356a:	d2f7      	bcs.n	801355c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801356c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8013570:	3003      	adds	r0, #3
 8013572:	00da      	lsls	r2, r3, #3
 8013574:	b2d2      	uxtb	r2, r2
 8013576:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801357a:	f800 2c03 	strb.w	r2, [r0, #-3]
 801357e:	10da      	asrs	r2, r3, #3
 8013580:	121b      	asrs	r3, r3, #8
 8013582:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8013586:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801358a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801358e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8013592:	f800 2c02 	strb.w	r2, [r0, #-2]
 8013596:	f800 3c01 	strb.w	r3, [r0, #-1]
 801359a:	e7e5      	b.n	8013568 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801359c:	4b02      	ldr	r3, [pc, #8]	; (80135a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801359e:	6818      	ldr	r0, [r3, #0]
 80135a0:	6803      	ldr	r3, [r0, #0]
 80135a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a4:	4798      	blx	r3
 80135a6:	e76a      	b.n	801347e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80135a8:	2400aef4 	.word	0x2400aef4
 80135ac:	2400aeee 	.word	0x2400aeee

080135b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80135b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135b4:	b08a      	sub	sp, #40	; 0x28
 80135b6:	460d      	mov	r5, r1
 80135b8:	4604      	mov	r4, r0
 80135ba:	461e      	mov	r6, r3
 80135bc:	6808      	ldr	r0, [r1, #0]
 80135be:	ab06      	add	r3, sp, #24
 80135c0:	6849      	ldr	r1, [r1, #4]
 80135c2:	4f5d      	ldr	r7, [pc, #372]	; (8013738 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80135c4:	c303      	stmia	r3!, {r0, r1}
 80135c6:	6810      	ldr	r0, [r2, #0]
 80135c8:	ab08      	add	r3, sp, #32
 80135ca:	6851      	ldr	r1, [r2, #4]
 80135cc:	c303      	stmia	r3!, {r0, r1}
 80135ce:	a806      	add	r0, sp, #24
 80135d0:	f7fa fb26 	bl	800dc20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80135d4:	4629      	mov	r1, r5
 80135d6:	a808      	add	r0, sp, #32
 80135d8:	f7fa fb4a 	bl	800dc70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80135dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80135e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80135e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80135e8:	6838      	ldr	r0, [r7, #0]
 80135ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 80135ee:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80135f2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80135f6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80135fa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80135fe:	440a      	add	r2, r1
 8013600:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013604:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013608:	4413      	add	r3, r2
 801360a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801360e:	6803      	ldr	r3, [r0, #0]
 8013610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013612:	4798      	blx	r3
 8013614:	2eff      	cmp	r6, #255	; 0xff
 8013616:	d119      	bne.n	801364c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8013618:	f010 0f20 	tst.w	r0, #32
 801361c:	6838      	ldr	r0, [r7, #0]
 801361e:	d018      	beq.n	8013652 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8013620:	b2ad      	uxth	r5, r5
 8013622:	2700      	movs	r7, #0
 8013624:	6801      	ldr	r1, [r0, #0]
 8013626:	9501      	str	r5, [sp, #4]
 8013628:	fa1f f588 	uxth.w	r5, r8
 801362c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8013630:	9500      	str	r5, [sp, #0]
 8013632:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013636:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801363a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801363e:	9602      	str	r6, [sp, #8]
 8013640:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8013642:	4621      	mov	r1, r4
 8013644:	47a8      	blx	r5
 8013646:	b00a      	add	sp, #40	; 0x28
 8013648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801364c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013650:	e7e4      	b.n	801361c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8013652:	6803      	ldr	r3, [r0, #0]
 8013654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013656:	4798      	blx	r3
 8013658:	4b38      	ldr	r3, [pc, #224]	; (801373c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801365a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801365e:	f8b3 c000 	ldrh.w	ip, [r3]
 8013662:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013666:	fb0c f505 	mul.w	r5, ip, r5
 801366a:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801366e:	fb0c 2303 	mla	r3, ip, r3, r2
 8013672:	ebac 0c08 	sub.w	ip, ip, r8
 8013676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801367a:	ebae 0e08 	sub.w	lr, lr, r8
 801367e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013682:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013686:	4418      	add	r0, r3
 8013688:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801368c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8013690:	4405      	add	r5, r0
 8013692:	42a8      	cmp	r0, r5
 8013694:	d24a      	bcs.n	801372c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8013696:	eb00 0803 	add.w	r8, r0, r3
 801369a:	4540      	cmp	r0, r8
 801369c:	d243      	bcs.n	8013726 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801369e:	78e2      	ldrb	r2, [r4, #3]
 80136a0:	b15a      	cbz	r2, 80136ba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80136a2:	2aff      	cmp	r2, #255	; 0xff
 80136a4:	f894 9000 	ldrb.w	r9, [r4]
 80136a8:	d10a      	bne.n	80136c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80136aa:	2eff      	cmp	r6, #255	; 0xff
 80136ac:	d108      	bne.n	80136c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80136ae:	f880 9000 	strb.w	r9, [r0]
 80136b2:	7862      	ldrb	r2, [r4, #1]
 80136b4:	7042      	strb	r2, [r0, #1]
 80136b6:	78a2      	ldrb	r2, [r4, #2]
 80136b8:	7082      	strb	r2, [r0, #2]
 80136ba:	3003      	adds	r0, #3
 80136bc:	3404      	adds	r4, #4
 80136be:	e7ec      	b.n	801369a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80136c0:	4372      	muls	r2, r6
 80136c2:	1c51      	adds	r1, r2, #1
 80136c4:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80136c8:	1209      	asrs	r1, r1, #8
 80136ca:	fa1f fa81 	uxth.w	sl, r1
 80136ce:	43c9      	mvns	r1, r1
 80136d0:	fb19 f90a 	smulbb	r9, r9, sl
 80136d4:	b2ca      	uxtb	r2, r1
 80136d6:	7801      	ldrb	r1, [r0, #0]
 80136d8:	fb01 9902 	mla	r9, r1, r2, r9
 80136dc:	fa1f f989 	uxth.w	r9, r9
 80136e0:	f109 0101 	add.w	r1, r9, #1
 80136e4:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80136e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80136ec:	f880 9000 	strb.w	r9, [r0]
 80136f0:	f890 9001 	ldrb.w	r9, [r0, #1]
 80136f4:	7861      	ldrb	r1, [r4, #1]
 80136f6:	fb19 f902 	smulbb	r9, r9, r2
 80136fa:	fb01 910a 	mla	r1, r1, sl, r9
 80136fe:	b289      	uxth	r1, r1
 8013700:	f101 0901 	add.w	r9, r1, #1
 8013704:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8013708:	1209      	asrs	r1, r1, #8
 801370a:	7041      	strb	r1, [r0, #1]
 801370c:	7881      	ldrb	r1, [r0, #2]
 801370e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8013712:	fb11 f202 	smulbb	r2, r1, r2
 8013716:	fb09 220a 	mla	r2, r9, sl, r2
 801371a:	b292      	uxth	r2, r2
 801371c:	1c51      	adds	r1, r2, #1
 801371e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8013722:	1212      	asrs	r2, r2, #8
 8013724:	e7c8      	b.n	80136b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8013726:	4460      	add	r0, ip
 8013728:	4474      	add	r4, lr
 801372a:	e7b2      	b.n	8013692 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801372c:	6838      	ldr	r0, [r7, #0]
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013732:	4798      	blx	r3
 8013734:	e787      	b.n	8013646 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8013736:	bf00      	nop
 8013738:	2400aef4 	.word	0x2400aef4
 801373c:	2400aeee 	.word	0x2400aeee

08013740 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8013740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013744:	b085      	sub	sp, #20
 8013746:	4606      	mov	r6, r0
 8013748:	460c      	mov	r4, r1
 801374a:	4691      	mov	r9, r2
 801374c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8013750:	4698      	mov	r8, r3
 8013752:	b31d      	cbz	r5, 801379c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8013754:	4608      	mov	r0, r1
 8013756:	f7fd f9c9 	bl	8010aec <_ZNK8touchgfx6Bitmap8getWidthEv>
 801375a:	4607      	mov	r7, r0
 801375c:	4620      	mov	r0, r4
 801375e:	f7fd fa09 	bl	8010b74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013762:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013766:	4620      	mov	r0, r4
 8013768:	f8ad 9008 	strh.w	r9, [sp, #8]
 801376c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8013770:	f8ad 700c 	strh.w	r7, [sp, #12]
 8013774:	f7fd facc 	bl	8010d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013778:	280b      	cmp	r0, #11
 801377a:	d838      	bhi.n	80137ee <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801377c:	e8df f000 	tbb	[pc, r0]
 8013780:	37062920 	.word	0x37062920
 8013784:	37373737 	.word	0x37373737
 8013788:	11373737 	.word	0x11373737
 801378c:	4620      	mov	r0, r4
 801378e:	f7fd fa35 	bl	8010bfc <_ZNK8touchgfx6Bitmap7getDataEv>
 8013792:	462b      	mov	r3, r5
 8013794:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013796:	a902      	add	r1, sp, #8
 8013798:	f7ff ff0a 	bl	80135b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801379c:	b005      	add	sp, #20
 801379e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137a2:	4620      	mov	r0, r4
 80137a4:	f7fd fa2a 	bl	8010bfc <_ZNK8touchgfx6Bitmap7getDataEv>
 80137a8:	4606      	mov	r6, r0
 80137aa:	4620      	mov	r0, r4
 80137ac:	f7fd fa58 	bl	8010c60 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80137b0:	9500      	str	r5, [sp, #0]
 80137b2:	4601      	mov	r1, r0
 80137b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137b6:	aa02      	add	r2, sp, #8
 80137b8:	4630      	mov	r0, r6
 80137ba:	f7ff fde5 	bl	8013388 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80137be:	e7ed      	b.n	801379c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80137c0:	4620      	mov	r0, r4
 80137c2:	f7fd fa1b 	bl	8010bfc <_ZNK8touchgfx6Bitmap7getDataEv>
 80137c6:	462b      	mov	r3, r5
 80137c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137ca:	a902      	add	r1, sp, #8
 80137cc:	f7ff fdfc 	bl	80133c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80137d0:	e7e4      	b.n	801379c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80137d2:	6833      	ldr	r3, [r6, #0]
 80137d4:	4620      	mov	r0, r4
 80137d6:	68df      	ldr	r7, [r3, #12]
 80137d8:	f7fd fa10 	bl	8010bfc <_ZNK8touchgfx6Bitmap7getDataEv>
 80137dc:	2300      	movs	r3, #0
 80137de:	4601      	mov	r1, r0
 80137e0:	aa02      	add	r2, sp, #8
 80137e2:	4630      	mov	r0, r6
 80137e4:	e9cd 5300 	strd	r5, r3, [sp]
 80137e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137ea:	47b8      	blx	r7
 80137ec:	e7d6      	b.n	801379c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80137ee:	4b03      	ldr	r3, [pc, #12]	; (80137fc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 80137f0:	2145      	movs	r1, #69	; 0x45
 80137f2:	4a03      	ldr	r2, [pc, #12]	; (8013800 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 80137f4:	4803      	ldr	r0, [pc, #12]	; (8013804 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 80137f6:	f005 fca1 	bl	801913c <__assert_func>
 80137fa:	bf00      	nop
 80137fc:	0801cb34 	.word	0x0801cb34
 8013800:	0801d177 	.word	0x0801d177
 8013804:	0801cc03 	.word	0x0801cc03

08013808 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8013808:	b570      	push	{r4, r5, r6, lr}
 801380a:	9c04      	ldr	r4, [sp, #16]
 801380c:	4605      	mov	r5, r0
 801380e:	4608      	mov	r0, r1
 8013810:	4619      	mov	r1, r3
 8013812:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013816:	2a0d      	cmp	r2, #13
 8013818:	d826      	bhi.n	8013868 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 801381a:	e8df f002 	tbb	[pc, r2]
 801381e:	1107      	.short	0x1107
 8013820:	1e1e1e0c 	.word	0x1e1e1e0c
 8013824:	1e1e1e1e 	.word	0x1e1e1e1e
 8013828:	1e1e1e1e 	.word	0x1e1e1e1e
 801382c:	4622      	mov	r2, r4
 801382e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013832:	f7ff bdc9 	b.w	80133c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8013836:	4622      	mov	r2, r4
 8013838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801383c:	f7ff beb8 	b.w	80135b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013840:	682a      	ldr	r2, [r5, #0]
 8013842:	2600      	movs	r6, #0
 8013844:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8013848:	68d6      	ldr	r6, [r2, #12]
 801384a:	4623      	mov	r3, r4
 801384c:	460a      	mov	r2, r1
 801384e:	4601      	mov	r1, r0
 8013850:	46b4      	mov	ip, r6
 8013852:	4628      	mov	r0, r5
 8013854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013858:	4760      	bx	ip
 801385a:	4b04      	ldr	r3, [pc, #16]	; (801386c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801385c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8013860:	4a03      	ldr	r2, [pc, #12]	; (8013870 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8013862:	4804      	ldr	r0, [pc, #16]	; (8013874 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8013864:	f005 fc6a 	bl	801913c <__assert_func>
 8013868:	bd70      	pop	{r4, r5, r6, pc}
 801386a:	bf00      	nop
 801386c:	0801cdc8 	.word	0x0801cdc8
 8013870:	0801d4f2 	.word	0x0801d4f2
 8013874:	0801cc03 	.word	0x0801cc03

08013878 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8013878:	b158      	cbz	r0, 8013892 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801387a:	2902      	cmp	r1, #2
 801387c:	d00f      	beq.n	801389e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801387e:	2903      	cmp	r1, #3
 8013880:	d010      	beq.n	80138a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8013882:	2901      	cmp	r1, #1
 8013884:	d101      	bne.n	801388a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8013886:	2001      	movs	r0, #1
 8013888:	4770      	bx	lr
 801388a:	4b08      	ldr	r3, [pc, #32]	; (80138ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801388c:	8819      	ldrh	r1, [r3, #0]
 801388e:	4248      	negs	r0, r1
 8013890:	4770      	bx	lr
 8013892:	2902      	cmp	r1, #2
 8013894:	d006      	beq.n	80138a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8013896:	2903      	cmp	r1, #3
 8013898:	d0f7      	beq.n	801388a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801389a:	2901      	cmp	r1, #1
 801389c:	d1f3      	bne.n	8013886 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801389e:	4b03      	ldr	r3, [pc, #12]	; (80138ac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80138a0:	8818      	ldrh	r0, [r3, #0]
 80138a2:	4770      	bx	lr
 80138a4:	f04f 30ff 	mov.w	r0, #4294967295
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	2400aeee 	.word	0x2400aeee

080138b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80138b0:	b170      	cbz	r0, 80138d0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80138b2:	2902      	cmp	r1, #2
 80138b4:	d012      	beq.n	80138dc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80138b6:	2903      	cmp	r1, #3
 80138b8:	d006      	beq.n	80138c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80138ba:	2901      	cmp	r1, #1
 80138bc:	d001      	beq.n	80138c2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80138be:	2001      	movs	r0, #1
 80138c0:	4770      	bx	lr
 80138c2:	4b08      	ldr	r3, [pc, #32]	; (80138e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80138c4:	8818      	ldrh	r0, [r3, #0]
 80138c6:	4770      	bx	lr
 80138c8:	4b06      	ldr	r3, [pc, #24]	; (80138e4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80138ca:	8818      	ldrh	r0, [r3, #0]
 80138cc:	4240      	negs	r0, r0
 80138ce:	4770      	bx	lr
 80138d0:	2902      	cmp	r1, #2
 80138d2:	d0f9      	beq.n	80138c8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80138d4:	2903      	cmp	r1, #3
 80138d6:	d0f2      	beq.n	80138be <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 80138d8:	2901      	cmp	r1, #1
 80138da:	d1f2      	bne.n	80138c2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80138dc:	f04f 30ff 	mov.w	r0, #4294967295
 80138e0:	4770      	bx	lr
 80138e2:	bf00      	nop
 80138e4:	2400aeee 	.word	0x2400aeee

080138e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80138e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ec:	b097      	sub	sp, #92	; 0x5c
 80138ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80138f0:	a912      	add	r1, sp, #72	; 0x48
 80138f2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80138f6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80138fa:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80138fe:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8013902:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8013906:	e881 000c 	stmia.w	r1, {r2, r3}
 801390a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801390e:	930a      	str	r3, [sp, #40]	; 0x28
 8013910:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8013914:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8013918:	9311      	str	r3, [sp, #68]	; 0x44
 801391a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801391e:	798d      	ldrb	r5, [r1, #6]
 8013920:	930c      	str	r3, [sp, #48]	; 0x30
 8013922:	7b4b      	ldrb	r3, [r1, #13]
 8013924:	0158      	lsls	r0, r3, #5
 8013926:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801392a:	4328      	orrs	r0, r5
 801392c:	9009      	str	r0, [sp, #36]	; 0x24
 801392e:	f000 817d 	beq.w	8013c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013932:	011b      	lsls	r3, r3, #4
 8013934:	79c8      	ldrb	r0, [r1, #7]
 8013936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801393a:	4303      	orrs	r3, r0
 801393c:	930e      	str	r3, [sp, #56]	; 0x38
 801393e:	f000 8175 	beq.w	8013c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013942:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8013946:	b29b      	uxth	r3, r3
 8013948:	2f00      	cmp	r7, #0
 801394a:	f000 8117 	beq.w	8013b7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801394e:	1aff      	subs	r7, r7, r3
 8013950:	b2bf      	uxth	r7, r7
 8013952:	043b      	lsls	r3, r7, #16
 8013954:	d502      	bpl.n	801395c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8013956:	1bf6      	subs	r6, r6, r7
 8013958:	2700      	movs	r7, #0
 801395a:	b236      	sxth	r6, r6
 801395c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013960:	a812      	add	r0, sp, #72	; 0x48
 8013962:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8013966:	428e      	cmp	r6, r1
 8013968:	b28b      	uxth	r3, r1
 801396a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801396e:	bfbf      	itttt	lt
 8013970:	18ff      	addlt	r7, r7, r3
 8013972:	1bbe      	sublt	r6, r7, r6
 8013974:	b2b7      	uxthlt	r7, r6
 8013976:	460e      	movlt	r6, r1
 8013978:	8891      	ldrh	r1, [r2, #4]
 801397a:	440b      	add	r3, r1
 801397c:	4631      	mov	r1, r6
 801397e:	b21b      	sxth	r3, r3
 8013980:	9310      	str	r3, [sp, #64]	; 0x40
 8013982:	88d3      	ldrh	r3, [r2, #6]
 8013984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013986:	449a      	add	sl, r3
 8013988:	fa0f f38a 	sxth.w	r3, sl
 801398c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8013990:	930f      	str	r3, [sp, #60]	; 0x3c
 8013992:	4bb6      	ldr	r3, [pc, #728]	; (8013c6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8013994:	f893 b000 	ldrb.w	fp, [r3]
 8013998:	f10b 3cff 	add.w	ip, fp, #4294967295
 801399c:	f1dc 0300 	rsbs	r3, ip, #0
 80139a0:	eb43 030c 	adc.w	r3, r3, ip
 80139a4:	930d      	str	r3, [sp, #52]	; 0x34
 80139a6:	464b      	mov	r3, r9
 80139a8:	f7f9 ffbe 	bl	800d928 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80139ac:	4631      	mov	r1, r6
 80139ae:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80139b2:	464b      	mov	r3, r9
 80139b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139b6:	a812      	add	r0, sp, #72	; 0x48
 80139b8:	f7f9 ffce 	bl	800d958 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80139bc:	a916      	add	r1, sp, #88	; 0x58
 80139be:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80139c2:	a815      	add	r0, sp, #84	; 0x54
 80139c4:	f7fa f8ea 	bl	800db9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80139c8:	f1b9 0f00 	cmp.w	r9, #0
 80139cc:	f040 80d9 	bne.w	8013b82 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 80139d0:	f1bb 0f01 	cmp.w	fp, #1
 80139d4:	f040 80dd 	bne.w	8013b92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 80139d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80139da:	b153      	cbz	r3, 80139f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80139dc:	2508      	movs	r5, #8
 80139de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139e0:	fb95 f3f8 	sdiv	r3, r5, r8
 80139e4:	1e5d      	subs	r5, r3, #1
 80139e6:	4415      	add	r5, r2
 80139e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80139ec:	fb15 f503 	smulbb	r5, r5, r3
 80139f0:	b2ad      	uxth	r5, r5
 80139f2:	b907      	cbnz	r7, 80139f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80139f4:	b16c      	cbz	r4, 8013a12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80139f6:	fb04 7305 	mla	r3, r4, r5, r7
 80139fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80139fc:	ebaa 0a04 	sub.w	sl, sl, r4
 8013a00:	fb08 f303 	mul.w	r3, r8, r3
 8013a04:	fa1f fa8a 	uxth.w	sl, sl
 8013a08:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8013a0c:	f003 0407 	and.w	r4, r3, #7
 8013a10:	9226      	str	r2, [sp, #152]	; 0x98
 8013a12:	4649      	mov	r1, r9
 8013a14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013a16:	f7ff ff2f 	bl	8013878 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8013a1a:	4649      	mov	r1, r9
 8013a1c:	4683      	mov	fp, r0
 8013a1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013a20:	f7ff ff46 	bl	80138b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8013a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a28:	4681      	mov	r9, r0
 8013a2a:	1a9b      	subs	r3, r3, r2
 8013a2c:	459a      	cmp	sl, r3
 8013a2e:	bfa8      	it	ge
 8013a30:	469a      	movge	sl, r3
 8013a32:	f1ba 0f00 	cmp.w	sl, #0
 8013a36:	f340 80f9 	ble.w	8013c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013a3a:	1bf6      	subs	r6, r6, r7
 8013a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a3e:	1b9e      	subs	r6, r3, r6
 8013a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a42:	429e      	cmp	r6, r3
 8013a44:	bfd4      	ite	le
 8013a46:	ebc7 0706 	rsble	r7, r7, r6
 8013a4a:	ebc7 0703 	rsbgt	r7, r7, r3
 8013a4e:	2f00      	cmp	r7, #0
 8013a50:	f340 80ec 	ble.w	8013c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013a54:	1bed      	subs	r5, r5, r7
 8013a56:	fb08 f305 	mul.w	r3, r8, r5
 8013a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8013a5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013a5e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8013a62:	930e      	str	r3, [sp, #56]	; 0x38
 8013a64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013a66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013a6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	9310      	str	r3, [sp, #64]	; 0x40
 8013a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f040 80de 	bne.w	8013c36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8013a7a:	4b7d      	ldr	r3, [pc, #500]	; (8013c70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8013a7c:	6818      	ldr	r0, [r3, #0]
 8013a7e:	6803      	ldr	r3, [r0, #0]
 8013a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a82:	4798      	blx	r3
 8013a84:	2301      	movs	r3, #1
 8013a86:	4a7b      	ldr	r2, [pc, #492]	; (8013c74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8013a88:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8013a8c:	fb07 9b1b 	mls	fp, r7, fp, r9
 8013a90:	fa03 f308 	lsl.w	r3, r3, r8
 8013a94:	8811      	ldrh	r1, [r2, #0]
 8013a96:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8013a9a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8013a9e:	3b01      	subs	r3, #1
 8013aa0:	fb06 bb07 	mla	fp, r6, r7, fp
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8013aa8:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8013aac:	fb01 2303 	mla	r3, r1, r3, r2
 8013ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ab4:	18c3      	adds	r3, r0, r3
 8013ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013aba:	781a      	ldrb	r2, [r3, #0]
 8013abc:	4122      	asrs	r2, r4
 8013abe:	b2d2      	uxtb	r2, r2
 8013ac0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8013ac4:	f0c0 80d8 	bcc.w	8013c78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8013ac8:	46be      	mov	lr, r7
 8013aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013acc:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8013ad0:	f0c0 80ba 	bcc.w	8013c48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 8013ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ad6:	4013      	ands	r3, r2
 8013ad8:	d041      	beq.n	8013b5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8013ada:	20ff      	movs	r0, #255	; 0xff
 8013adc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013ade:	fb90 f5f5 	sdiv	r5, r0, r5
 8013ae2:	436b      	muls	r3, r5
 8013ae4:	2bfe      	cmp	r3, #254	; 0xfe
 8013ae6:	dd03      	ble.n	8013af0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8013ae8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013aea:	4285      	cmp	r5, r0
 8013aec:	f000 80a5 	beq.w	8013c3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8013af0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013af2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013af4:	fb15 f303 	smulbb	r3, r5, r3
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	1c5d      	adds	r5, r3, #1
 8013afc:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8013b00:	780d      	ldrb	r5, [r1, #0]
 8013b02:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013b06:	fa1f fc83 	uxth.w	ip, r3
 8013b0a:	43db      	mvns	r3, r3
 8013b0c:	fb10 f90c 	smulbb	r9, r0, ip
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013b14:	fb05 9503 	mla	r5, r5, r3, r9
 8013b18:	b2ad      	uxth	r5, r5
 8013b1a:	f105 0901 	add.w	r9, r5, #1
 8013b1e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8013b22:	fb10 f90c 	smulbb	r9, r0, ip
 8013b26:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013b28:	122d      	asrs	r5, r5, #8
 8013b2a:	fb10 fc0c 	smulbb	ip, r0, ip
 8013b2e:	700d      	strb	r5, [r1, #0]
 8013b30:	784d      	ldrb	r5, [r1, #1]
 8013b32:	fb05 9503 	mla	r5, r5, r3, r9
 8013b36:	b2ad      	uxth	r5, r5
 8013b38:	f105 0901 	add.w	r9, r5, #1
 8013b3c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8013b40:	122d      	asrs	r5, r5, #8
 8013b42:	704d      	strb	r5, [r1, #1]
 8013b44:	788d      	ldrb	r5, [r1, #2]
 8013b46:	fb05 cc03 	mla	ip, r5, r3, ip
 8013b4a:	fa1f fc8c 	uxth.w	ip, ip
 8013b4e:	f10c 0301 	add.w	r3, ip, #1
 8013b52:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8013b56:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013b5a:	f881 c002 	strb.w	ip, [r1, #2]
 8013b5e:	4444      	add	r4, r8
 8013b60:	4431      	add	r1, r6
 8013b62:	b2a4      	uxth	r4, r4
 8013b64:	2c07      	cmp	r4, #7
 8013b66:	bf89      	itett	hi
 8013b68:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8013b6a:	fa42 f208 	asrls.w	r2, r2, r8
 8013b6e:	2400      	movhi	r4, #0
 8013b70:	785a      	ldrbhi	r2, [r3, #1]
 8013b72:	bf8a      	itet	hi
 8013b74:	3301      	addhi	r3, #1
 8013b76:	b2d2      	uxtbls	r2, r2
 8013b78:	9326      	strhi	r3, [sp, #152]	; 0x98
 8013b7a:	e7a7      	b.n	8013acc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8013b7c:	441e      	add	r6, r3
 8013b7e:	b236      	sxth	r6, r6
 8013b80:	e6ec      	b.n	801395c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8013b82:	f1b9 0f01 	cmp.w	r9, #1
 8013b86:	f47f af27 	bne.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013b8a:	f1bb 0f01 	cmp.w	fp, #1
 8013b8e:	f47f af23 	bne.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013b92:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8013c70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 8013b96:	f8db 0000 	ldr.w	r0, [fp]
 8013b9a:	6803      	ldr	r3, [r0, #0]
 8013b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b9e:	4798      	blx	r3
 8013ba0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8013ba4:	465a      	mov	r2, fp
 8013ba6:	d006      	beq.n	8013bb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8013ba8:	f1b8 0f04 	cmp.w	r8, #4
 8013bac:	d141      	bne.n	8013c32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8013bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bb0:	3300      	adds	r3, #0
 8013bb2:	bf18      	it	ne
 8013bb4:	2301      	movne	r3, #1
 8013bb6:	0580      	lsls	r0, r0, #22
 8013bb8:	d567      	bpl.n	8013c8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8013bba:	f1b8 0f08 	cmp.w	r8, #8
 8013bbe:	d164      	bne.n	8013c8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	bf0c      	ite	eq
 8013bc4:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8013bc8:	f44f 7180 	movne.w	r1, #256	; 0x100
 8013bcc:	2f00      	cmp	r7, #0
 8013bce:	f47f af03 	bne.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013bd2:	2c00      	cmp	r4, #0
 8013bd4:	f47f af00 	bne.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bda:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013bdc:	18f3      	adds	r3, r6, r3
 8013bde:	4283      	cmp	r3, r0
 8013be0:	f73f aefa 	bgt.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013be4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013be8:	4403      	add	r3, r0
 8013bea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013bec:	4283      	cmp	r3, r0
 8013bee:	f73f aef3 	bgt.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013bf2:	f1b8 0f08 	cmp.w	r8, #8
 8013bf6:	6810      	ldr	r0, [r2, #0]
 8013bf8:	f04f 0600 	mov.w	r6, #0
 8013bfc:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8013c00:	bf18      	it	ne
 8013c02:	3501      	addne	r5, #1
 8013c04:	6804      	ldr	r4, [r0, #0]
 8013c06:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013c0a:	bf18      	it	ne
 8013c0c:	f025 0501 	bicne.w	r5, r5, #1
 8013c10:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8013c14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013c16:	bf18      	it	ne
 8013c18:	b2ad      	uxthne	r5, r5
 8013c1a:	9104      	str	r1, [sp, #16]
 8013c1c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013c1e:	e9cd 5a00 	strd	r5, sl, [sp]
 8013c22:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8013c26:	9926      	ldr	r1, [sp, #152]	; 0x98
 8013c28:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8013c2a:	47a0      	blx	r4
 8013c2c:	b017      	add	sp, #92	; 0x5c
 8013c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c32:	2300      	movs	r3, #0
 8013c34:	e7bf      	b.n	8013bb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8013c36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013c38:	e724      	b.n	8013a84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8013c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c3c:	700b      	strb	r3, [r1, #0]
 8013c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c40:	704b      	strb	r3, [r1, #1]
 8013c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c44:	708b      	strb	r3, [r1, #2]
 8013c46:	e78a      	b.n	8013b5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8013c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c4a:	b153      	cbz	r3, 8013c62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8013c4c:	441c      	add	r4, r3
 8013c4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013c50:	b2a4      	uxth	r4, r4
 8013c52:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8013c56:	f004 0407 	and.w	r4, r4, #7
 8013c5a:	781a      	ldrb	r2, [r3, #0]
 8013c5c:	9326      	str	r3, [sp, #152]	; 0x98
 8013c5e:	4122      	asrs	r2, r4
 8013c60:	b2d2      	uxtb	r2, r2
 8013c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c64:	445b      	add	r3, fp
 8013c66:	9309      	str	r3, [sp, #36]	; 0x24
 8013c68:	e72a      	b.n	8013ac0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8013c6a:	bf00      	nop
 8013c6c:	2400aeec 	.word	0x2400aeec
 8013c70:	2400aef4 	.word	0x2400aef4
 8013c74:	2400aeee 	.word	0x2400aeee
 8013c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d1d6      	bne.n	8013c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013c7e:	4b06      	ldr	r3, [pc, #24]	; (8013c98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8013c80:	6818      	ldr	r0, [r3, #0]
 8013c82:	6803      	ldr	r3, [r0, #0]
 8013c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c86:	4798      	blx	r3
 8013c88:	e7d0      	b.n	8013c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	f43f aea4 	beq.w	80139d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013c94:	e79a      	b.n	8013bcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 8013c96:	bf00      	nop
 8013c98:	2400aef4 	.word	0x2400aef4

08013c9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4c15      	ldr	r4, [pc, #84]	; (8013cf4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8013ca0:	4605      	mov	r5, r0
 8013ca2:	7823      	ldrb	r3, [r4, #0]
 8013ca4:	f3bf 8f5b 	dmb	ish
 8013ca8:	07da      	lsls	r2, r3, #31
 8013caa:	d40b      	bmi.n	8013cc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8013cac:	4620      	mov	r0, r4
 8013cae:	f005 fa18 	bl	80190e2 <__cxa_guard_acquire>
 8013cb2:	b138      	cbz	r0, 8013cc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	f005 fa20 	bl	80190fa <__cxa_guard_release>
 8013cba:	4a0f      	ldr	r2, [pc, #60]	; (8013cf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8013cbc:	490f      	ldr	r1, [pc, #60]	; (8013cfc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8013cbe:	4810      	ldr	r0, [pc, #64]	; (8013d00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8013cc0:	f005 fa08 	bl	80190d4 <__aeabi_atexit>
 8013cc4:	4c0f      	ldr	r4, [pc, #60]	; (8013d04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8013cc6:	7823      	ldrb	r3, [r4, #0]
 8013cc8:	f3bf 8f5b 	dmb	ish
 8013ccc:	07db      	lsls	r3, r3, #31
 8013cce:	d40b      	bmi.n	8013ce8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f005 fa06 	bl	80190e2 <__cxa_guard_acquire>
 8013cd6:	b138      	cbz	r0, 8013ce8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8013cd8:	4620      	mov	r0, r4
 8013cda:	f005 fa0e 	bl	80190fa <__cxa_guard_release>
 8013cde:	4a06      	ldr	r2, [pc, #24]	; (8013cf8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8013ce0:	4909      	ldr	r1, [pc, #36]	; (8013d08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8013ce2:	480a      	ldr	r0, [pc, #40]	; (8013d0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8013ce4:	f005 f9f6 	bl	80190d4 <__aeabi_atexit>
 8013ce8:	4b05      	ldr	r3, [pc, #20]	; (8013d00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8013cea:	612b      	str	r3, [r5, #16]
 8013cec:	4b07      	ldr	r3, [pc, #28]	; (8013d0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8013cee:	616b      	str	r3, [r5, #20]
 8013cf0:	bd38      	pop	{r3, r4, r5, pc}
 8013cf2:	bf00      	nop
 8013cf4:	2400afc0 	.word	0x2400afc0
 8013cf8:	24000000 	.word	0x24000000
 8013cfc:	080125d5 	.word	0x080125d5
 8013d00:	240000a0 	.word	0x240000a0
 8013d04:	2400afc4 	.word	0x2400afc4
 8013d08:	080125d3 	.word	0x080125d3
 8013d0c:	240000a4 	.word	0x240000a4

08013d10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8013d10:	b538      	push	{r3, r4, r5, lr}
 8013d12:	4c15      	ldr	r4, [pc, #84]	; (8013d68 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8013d14:	4605      	mov	r5, r0
 8013d16:	7823      	ldrb	r3, [r4, #0]
 8013d18:	f3bf 8f5b 	dmb	ish
 8013d1c:	07da      	lsls	r2, r3, #31
 8013d1e:	d40b      	bmi.n	8013d38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013d20:	4620      	mov	r0, r4
 8013d22:	f005 f9de 	bl	80190e2 <__cxa_guard_acquire>
 8013d26:	b138      	cbz	r0, 8013d38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f005 f9e6 	bl	80190fa <__cxa_guard_release>
 8013d2e:	4a0f      	ldr	r2, [pc, #60]	; (8013d6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013d30:	490f      	ldr	r1, [pc, #60]	; (8013d70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8013d32:	4810      	ldr	r0, [pc, #64]	; (8013d74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8013d34:	f005 f9ce 	bl	80190d4 <__aeabi_atexit>
 8013d38:	4c0f      	ldr	r4, [pc, #60]	; (8013d78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8013d3a:	7823      	ldrb	r3, [r4, #0]
 8013d3c:	f3bf 8f5b 	dmb	ish
 8013d40:	07db      	lsls	r3, r3, #31
 8013d42:	d40b      	bmi.n	8013d5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8013d44:	4620      	mov	r0, r4
 8013d46:	f005 f9cc 	bl	80190e2 <__cxa_guard_acquire>
 8013d4a:	b138      	cbz	r0, 8013d5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	f005 f9d4 	bl	80190fa <__cxa_guard_release>
 8013d52:	4a06      	ldr	r2, [pc, #24]	; (8013d6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013d54:	4909      	ldr	r1, [pc, #36]	; (8013d7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8013d56:	480a      	ldr	r0, [pc, #40]	; (8013d80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8013d58:	f005 f9bc 	bl	80190d4 <__aeabi_atexit>
 8013d5c:	4b05      	ldr	r3, [pc, #20]	; (8013d74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8013d5e:	60ab      	str	r3, [r5, #8]
 8013d60:	4b07      	ldr	r3, [pc, #28]	; (8013d80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8013d62:	60eb      	str	r3, [r5, #12]
 8013d64:	bd38      	pop	{r3, r4, r5, pc}
 8013d66:	bf00      	nop
 8013d68:	2400afa0 	.word	0x2400afa0
 8013d6c:	24000000 	.word	0x24000000
 8013d70:	080125d9 	.word	0x080125d9
 8013d74:	24000080 	.word	0x24000080
 8013d78:	2400afa4 	.word	0x2400afa4
 8013d7c:	080125d7 	.word	0x080125d7
 8013d80:	24000084 	.word	0x24000084

08013d84 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8013d84:	b510      	push	{r4, lr}
 8013d86:	4604      	mov	r4, r0
 8013d88:	f7ff ff88 	bl	8013c9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d92:	f7ff bfbd 	b.w	8013d10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08013d98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8013d98:	b538      	push	{r3, r4, r5, lr}
 8013d9a:	4c15      	ldr	r4, [pc, #84]	; (8013df0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8013d9c:	4605      	mov	r5, r0
 8013d9e:	7823      	ldrb	r3, [r4, #0]
 8013da0:	f3bf 8f5b 	dmb	ish
 8013da4:	07da      	lsls	r2, r3, #31
 8013da6:	d40b      	bmi.n	8013dc0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013da8:	4620      	mov	r0, r4
 8013daa:	f005 f99a 	bl	80190e2 <__cxa_guard_acquire>
 8013dae:	b138      	cbz	r0, 8013dc0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8013db0:	4620      	mov	r0, r4
 8013db2:	f005 f9a2 	bl	80190fa <__cxa_guard_release>
 8013db6:	4a0f      	ldr	r2, [pc, #60]	; (8013df4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8013db8:	490f      	ldr	r1, [pc, #60]	; (8013df8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8013dba:	4810      	ldr	r0, [pc, #64]	; (8013dfc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8013dbc:	f005 f98a 	bl	80190d4 <__aeabi_atexit>
 8013dc0:	4c0f      	ldr	r4, [pc, #60]	; (8013e00 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8013dc2:	7823      	ldrb	r3, [r4, #0]
 8013dc4:	f3bf 8f5b 	dmb	ish
 8013dc8:	07db      	lsls	r3, r3, #31
 8013dca:	d40b      	bmi.n	8013de4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f005 f988 	bl	80190e2 <__cxa_guard_acquire>
 8013dd2:	b138      	cbz	r0, 8013de4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	f005 f990 	bl	80190fa <__cxa_guard_release>
 8013dda:	4a06      	ldr	r2, [pc, #24]	; (8013df4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8013ddc:	4909      	ldr	r1, [pc, #36]	; (8013e04 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8013dde:	480a      	ldr	r0, [pc, #40]	; (8013e08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8013de0:	f005 f978 	bl	80190d4 <__aeabi_atexit>
 8013de4:	4b05      	ldr	r3, [pc, #20]	; (8013dfc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8013de6:	622b      	str	r3, [r5, #32]
 8013de8:	4b07      	ldr	r3, [pc, #28]	; (8013e08 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8013dea:	626b      	str	r3, [r5, #36]	; 0x24
 8013dec:	bd38      	pop	{r3, r4, r5, pc}
 8013dee:	bf00      	nop
 8013df0:	2400afc8 	.word	0x2400afc8
 8013df4:	24000000 	.word	0x24000000
 8013df8:	080125cd 	.word	0x080125cd
 8013dfc:	240000a8 	.word	0x240000a8
 8013e00:	2400afcc 	.word	0x2400afcc
 8013e04:	080125cb 	.word	0x080125cb
 8013e08:	240000ac 	.word	0x240000ac

08013e0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8013e0c:	b538      	push	{r3, r4, r5, lr}
 8013e0e:	4c15      	ldr	r4, [pc, #84]	; (8013e64 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8013e10:	4605      	mov	r5, r0
 8013e12:	7823      	ldrb	r3, [r4, #0]
 8013e14:	f3bf 8f5b 	dmb	ish
 8013e18:	07da      	lsls	r2, r3, #31
 8013e1a:	d40b      	bmi.n	8013e34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f005 f960 	bl	80190e2 <__cxa_guard_acquire>
 8013e22:	b138      	cbz	r0, 8013e34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8013e24:	4620      	mov	r0, r4
 8013e26:	f005 f968 	bl	80190fa <__cxa_guard_release>
 8013e2a:	4a0f      	ldr	r2, [pc, #60]	; (8013e68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013e2c:	490f      	ldr	r1, [pc, #60]	; (8013e6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8013e2e:	4810      	ldr	r0, [pc, #64]	; (8013e70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013e30:	f005 f950 	bl	80190d4 <__aeabi_atexit>
 8013e34:	4c0f      	ldr	r4, [pc, #60]	; (8013e74 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8013e36:	7823      	ldrb	r3, [r4, #0]
 8013e38:	f3bf 8f5b 	dmb	ish
 8013e3c:	07db      	lsls	r3, r3, #31
 8013e3e:	d40b      	bmi.n	8013e58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013e40:	4620      	mov	r0, r4
 8013e42:	f005 f94e 	bl	80190e2 <__cxa_guard_acquire>
 8013e46:	b138      	cbz	r0, 8013e58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f005 f956 	bl	80190fa <__cxa_guard_release>
 8013e4e:	4a06      	ldr	r2, [pc, #24]	; (8013e68 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013e50:	4909      	ldr	r1, [pc, #36]	; (8013e78 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8013e52:	480a      	ldr	r0, [pc, #40]	; (8013e7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8013e54:	f005 f93e 	bl	80190d4 <__aeabi_atexit>
 8013e58:	4b05      	ldr	r3, [pc, #20]	; (8013e70 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013e5a:	61ab      	str	r3, [r5, #24]
 8013e5c:	4b07      	ldr	r3, [pc, #28]	; (8013e7c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8013e5e:	61eb      	str	r3, [r5, #28]
 8013e60:	bd38      	pop	{r3, r4, r5, pc}
 8013e62:	bf00      	nop
 8013e64:	2400afa8 	.word	0x2400afa8
 8013e68:	24000000 	.word	0x24000000
 8013e6c:	080125d1 	.word	0x080125d1
 8013e70:	24000088 	.word	0x24000088
 8013e74:	2400afac 	.word	0x2400afac
 8013e78:	080125cf 	.word	0x080125cf
 8013e7c:	2400008c 	.word	0x2400008c

08013e80 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8013e80:	b510      	push	{r4, lr}
 8013e82:	4604      	mov	r4, r0
 8013e84:	f7ff ff88 	bl	8013d98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8013e88:	4620      	mov	r0, r4
 8013e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e8e:	f7ff bfbd 	b.w	8013e0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08013e94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	4c15      	ldr	r4, [pc, #84]	; (8013eec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8013e98:	4605      	mov	r5, r0
 8013e9a:	7823      	ldrb	r3, [r4, #0]
 8013e9c:	f3bf 8f5b 	dmb	ish
 8013ea0:	07da      	lsls	r2, r3, #31
 8013ea2:	d40b      	bmi.n	8013ebc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	f005 f91c 	bl	80190e2 <__cxa_guard_acquire>
 8013eaa:	b138      	cbz	r0, 8013ebc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8013eac:	4620      	mov	r0, r4
 8013eae:	f005 f924 	bl	80190fa <__cxa_guard_release>
 8013eb2:	4a0f      	ldr	r2, [pc, #60]	; (8013ef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013eb4:	490f      	ldr	r1, [pc, #60]	; (8013ef4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8013eb6:	4810      	ldr	r0, [pc, #64]	; (8013ef8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013eb8:	f005 f90c 	bl	80190d4 <__aeabi_atexit>
 8013ebc:	4c0f      	ldr	r4, [pc, #60]	; (8013efc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8013ebe:	7823      	ldrb	r3, [r4, #0]
 8013ec0:	f3bf 8f5b 	dmb	ish
 8013ec4:	07db      	lsls	r3, r3, #31
 8013ec6:	d40b      	bmi.n	8013ee0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f005 f90a 	bl	80190e2 <__cxa_guard_acquire>
 8013ece:	b138      	cbz	r0, 8013ee0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f005 f912 	bl	80190fa <__cxa_guard_release>
 8013ed6:	4a06      	ldr	r2, [pc, #24]	; (8013ef0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013ed8:	4909      	ldr	r1, [pc, #36]	; (8013f00 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8013eda:	480a      	ldr	r0, [pc, #40]	; (8013f04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013edc:	f005 f8fa 	bl	80190d4 <__aeabi_atexit>
 8013ee0:	4b05      	ldr	r3, [pc, #20]	; (8013ef8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013ee2:	632b      	str	r3, [r5, #48]	; 0x30
 8013ee4:	4b07      	ldr	r3, [pc, #28]	; (8013f04 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013ee6:	636b      	str	r3, [r5, #52]	; 0x34
 8013ee8:	bd38      	pop	{r3, r4, r5, pc}
 8013eea:	bf00      	nop
 8013eec:	2400afb0 	.word	0x2400afb0
 8013ef0:	24000000 	.word	0x24000000
 8013ef4:	080125c5 	.word	0x080125c5
 8013ef8:	24000090 	.word	0x24000090
 8013efc:	2400afb4 	.word	0x2400afb4
 8013f00:	080125c3 	.word	0x080125c3
 8013f04:	24000094 	.word	0x24000094

08013f08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4c15      	ldr	r4, [pc, #84]	; (8013f60 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	7823      	ldrb	r3, [r4, #0]
 8013f10:	f3bf 8f5b 	dmb	ish
 8013f14:	07da      	lsls	r2, r3, #31
 8013f16:	d40b      	bmi.n	8013f30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f005 f8e2 	bl	80190e2 <__cxa_guard_acquire>
 8013f1e:	b138      	cbz	r0, 8013f30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013f20:	4620      	mov	r0, r4
 8013f22:	f005 f8ea 	bl	80190fa <__cxa_guard_release>
 8013f26:	4a0f      	ldr	r2, [pc, #60]	; (8013f64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013f28:	490f      	ldr	r1, [pc, #60]	; (8013f68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8013f2a:	4810      	ldr	r0, [pc, #64]	; (8013f6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013f2c:	f005 f8d2 	bl	80190d4 <__aeabi_atexit>
 8013f30:	4c0f      	ldr	r4, [pc, #60]	; (8013f70 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8013f32:	7823      	ldrb	r3, [r4, #0]
 8013f34:	f3bf 8f5b 	dmb	ish
 8013f38:	07db      	lsls	r3, r3, #31
 8013f3a:	d40b      	bmi.n	8013f54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f005 f8d0 	bl	80190e2 <__cxa_guard_acquire>
 8013f42:	b138      	cbz	r0, 8013f54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013f44:	4620      	mov	r0, r4
 8013f46:	f005 f8d8 	bl	80190fa <__cxa_guard_release>
 8013f4a:	4a06      	ldr	r2, [pc, #24]	; (8013f64 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013f4c:	4909      	ldr	r1, [pc, #36]	; (8013f74 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8013f4e:	480a      	ldr	r0, [pc, #40]	; (8013f78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013f50:	f005 f8c0 	bl	80190d4 <__aeabi_atexit>
 8013f54:	4b05      	ldr	r3, [pc, #20]	; (8013f6c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013f56:	62ab      	str	r3, [r5, #40]	; 0x28
 8013f58:	4b07      	ldr	r3, [pc, #28]	; (8013f78 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013f5a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8013f5c:	bd38      	pop	{r3, r4, r5, pc}
 8013f5e:	bf00      	nop
 8013f60:	2400af88 	.word	0x2400af88
 8013f64:	24000000 	.word	0x24000000
 8013f68:	080125c9 	.word	0x080125c9
 8013f6c:	24000068 	.word	0x24000068
 8013f70:	2400af8c 	.word	0x2400af8c
 8013f74:	080125c7 	.word	0x080125c7
 8013f78:	2400006c 	.word	0x2400006c

08013f7c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8013f7c:	b510      	push	{r4, lr}
 8013f7e:	4604      	mov	r4, r0
 8013f80:	f7ff ff88 	bl	8013e94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8013f84:	4620      	mov	r0, r4
 8013f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f8a:	f7ff bfbd 	b.w	8013f08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08013f90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8013f90:	b538      	push	{r3, r4, r5, lr}
 8013f92:	4c15      	ldr	r4, [pc, #84]	; (8013fe8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8013f94:	4605      	mov	r5, r0
 8013f96:	7823      	ldrb	r3, [r4, #0]
 8013f98:	f3bf 8f5b 	dmb	ish
 8013f9c:	07da      	lsls	r2, r3, #31
 8013f9e:	d40b      	bmi.n	8013fb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f005 f89e 	bl	80190e2 <__cxa_guard_acquire>
 8013fa6:	b138      	cbz	r0, 8013fb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f005 f8a6 	bl	80190fa <__cxa_guard_release>
 8013fae:	4a0f      	ldr	r2, [pc, #60]	; (8013fec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013fb0:	490f      	ldr	r1, [pc, #60]	; (8013ff0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8013fb2:	4810      	ldr	r0, [pc, #64]	; (8013ff4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013fb4:	f005 f88e 	bl	80190d4 <__aeabi_atexit>
 8013fb8:	4c0f      	ldr	r4, [pc, #60]	; (8013ff8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8013fba:	7823      	ldrb	r3, [r4, #0]
 8013fbc:	f3bf 8f5b 	dmb	ish
 8013fc0:	07db      	lsls	r3, r3, #31
 8013fc2:	d40b      	bmi.n	8013fdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	f005 f88c 	bl	80190e2 <__cxa_guard_acquire>
 8013fca:	b138      	cbz	r0, 8013fdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f005 f894 	bl	80190fa <__cxa_guard_release>
 8013fd2:	4a06      	ldr	r2, [pc, #24]	; (8013fec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013fd4:	4909      	ldr	r1, [pc, #36]	; (8013ffc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8013fd6:	480a      	ldr	r0, [pc, #40]	; (8014000 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013fd8:	f005 f87c 	bl	80190d4 <__aeabi_atexit>
 8013fdc:	4b05      	ldr	r3, [pc, #20]	; (8013ff4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013fde:	642b      	str	r3, [r5, #64]	; 0x40
 8013fe0:	4b07      	ldr	r3, [pc, #28]	; (8014000 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013fe2:	646b      	str	r3, [r5, #68]	; 0x44
 8013fe4:	bd38      	pop	{r3, r4, r5, pc}
 8013fe6:	bf00      	nop
 8013fe8:	2400afb8 	.word	0x2400afb8
 8013fec:	24000000 	.word	0x24000000
 8013ff0:	080125bd 	.word	0x080125bd
 8013ff4:	24000098 	.word	0x24000098
 8013ff8:	2400afbc 	.word	0x2400afbc
 8013ffc:	080125bb 	.word	0x080125bb
 8014000:	2400009c 	.word	0x2400009c

08014004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8014004:	b538      	push	{r3, r4, r5, lr}
 8014006:	4c15      	ldr	r4, [pc, #84]	; (801405c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8014008:	4605      	mov	r5, r0
 801400a:	7823      	ldrb	r3, [r4, #0]
 801400c:	f3bf 8f5b 	dmb	ish
 8014010:	07da      	lsls	r2, r3, #31
 8014012:	d40b      	bmi.n	801402c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8014014:	4620      	mov	r0, r4
 8014016:	f005 f864 	bl	80190e2 <__cxa_guard_acquire>
 801401a:	b138      	cbz	r0, 801402c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801401c:	4620      	mov	r0, r4
 801401e:	f005 f86c 	bl	80190fa <__cxa_guard_release>
 8014022:	4a0f      	ldr	r2, [pc, #60]	; (8014060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8014024:	490f      	ldr	r1, [pc, #60]	; (8014064 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8014026:	4810      	ldr	r0, [pc, #64]	; (8014068 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8014028:	f005 f854 	bl	80190d4 <__aeabi_atexit>
 801402c:	4c0f      	ldr	r4, [pc, #60]	; (801406c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801402e:	7823      	ldrb	r3, [r4, #0]
 8014030:	f3bf 8f5b 	dmb	ish
 8014034:	07db      	lsls	r3, r3, #31
 8014036:	d40b      	bmi.n	8014050 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8014038:	4620      	mov	r0, r4
 801403a:	f005 f852 	bl	80190e2 <__cxa_guard_acquire>
 801403e:	b138      	cbz	r0, 8014050 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8014040:	4620      	mov	r0, r4
 8014042:	f005 f85a 	bl	80190fa <__cxa_guard_release>
 8014046:	4a06      	ldr	r2, [pc, #24]	; (8014060 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8014048:	4909      	ldr	r1, [pc, #36]	; (8014070 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801404a:	480a      	ldr	r0, [pc, #40]	; (8014074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801404c:	f005 f842 	bl	80190d4 <__aeabi_atexit>
 8014050:	4b05      	ldr	r3, [pc, #20]	; (8014068 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8014052:	63ab      	str	r3, [r5, #56]	; 0x38
 8014054:	4b07      	ldr	r3, [pc, #28]	; (8014074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8014056:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014058:	bd38      	pop	{r3, r4, r5, pc}
 801405a:	bf00      	nop
 801405c:	2400af98 	.word	0x2400af98
 8014060:	24000000 	.word	0x24000000
 8014064:	080125c1 	.word	0x080125c1
 8014068:	24000078 	.word	0x24000078
 801406c:	2400af9c 	.word	0x2400af9c
 8014070:	080125bf 	.word	0x080125bf
 8014074:	2400007c 	.word	0x2400007c

08014078 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8014078:	b510      	push	{r4, lr}
 801407a:	4604      	mov	r4, r0
 801407c:	f7ff ff88 	bl	8013f90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8014080:	4620      	mov	r0, r4
 8014082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014086:	f7ff bfbd 	b.w	8014004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801408c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801408c:	b538      	push	{r3, r4, r5, lr}
 801408e:	4c15      	ldr	r4, [pc, #84]	; (80140e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8014090:	4605      	mov	r5, r0
 8014092:	7823      	ldrb	r3, [r4, #0]
 8014094:	f3bf 8f5b 	dmb	ish
 8014098:	07da      	lsls	r2, r3, #31
 801409a:	d40b      	bmi.n	80140b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801409c:	4620      	mov	r0, r4
 801409e:	f005 f820 	bl	80190e2 <__cxa_guard_acquire>
 80140a2:	b138      	cbz	r0, 80140b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80140a4:	4620      	mov	r0, r4
 80140a6:	f005 f828 	bl	80190fa <__cxa_guard_release>
 80140aa:	4a0f      	ldr	r2, [pc, #60]	; (80140e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80140ac:	490f      	ldr	r1, [pc, #60]	; (80140ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80140ae:	4810      	ldr	r0, [pc, #64]	; (80140f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80140b0:	f005 f810 	bl	80190d4 <__aeabi_atexit>
 80140b4:	4c0f      	ldr	r4, [pc, #60]	; (80140f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80140b6:	7823      	ldrb	r3, [r4, #0]
 80140b8:	f3bf 8f5b 	dmb	ish
 80140bc:	07db      	lsls	r3, r3, #31
 80140be:	d40b      	bmi.n	80140d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80140c0:	4620      	mov	r0, r4
 80140c2:	f005 f80e 	bl	80190e2 <__cxa_guard_acquire>
 80140c6:	b138      	cbz	r0, 80140d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80140c8:	4620      	mov	r0, r4
 80140ca:	f005 f816 	bl	80190fa <__cxa_guard_release>
 80140ce:	4a06      	ldr	r2, [pc, #24]	; (80140e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80140d0:	4909      	ldr	r1, [pc, #36]	; (80140f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80140d2:	480a      	ldr	r0, [pc, #40]	; (80140fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80140d4:	f004 fffe 	bl	80190d4 <__aeabi_atexit>
 80140d8:	4b05      	ldr	r3, [pc, #20]	; (80140f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80140da:	652b      	str	r3, [r5, #80]	; 0x50
 80140dc:	4b07      	ldr	r3, [pc, #28]	; (80140fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80140de:	656b      	str	r3, [r5, #84]	; 0x54
 80140e0:	bd38      	pop	{r3, r4, r5, pc}
 80140e2:	bf00      	nop
 80140e4:	2400af90 	.word	0x2400af90
 80140e8:	24000000 	.word	0x24000000
 80140ec:	080125b5 	.word	0x080125b5
 80140f0:	24000070 	.word	0x24000070
 80140f4:	2400af94 	.word	0x2400af94
 80140f8:	080125b3 	.word	0x080125b3
 80140fc:	24000074 	.word	0x24000074

08014100 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8014100:	b538      	push	{r3, r4, r5, lr}
 8014102:	4c15      	ldr	r4, [pc, #84]	; (8014158 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8014104:	4605      	mov	r5, r0
 8014106:	7823      	ldrb	r3, [r4, #0]
 8014108:	f3bf 8f5b 	dmb	ish
 801410c:	07da      	lsls	r2, r3, #31
 801410e:	d40b      	bmi.n	8014128 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8014110:	4620      	mov	r0, r4
 8014112:	f004 ffe6 	bl	80190e2 <__cxa_guard_acquire>
 8014116:	b138      	cbz	r0, 8014128 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8014118:	4620      	mov	r0, r4
 801411a:	f004 ffee 	bl	80190fa <__cxa_guard_release>
 801411e:	4a0f      	ldr	r2, [pc, #60]	; (801415c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8014120:	490f      	ldr	r1, [pc, #60]	; (8014160 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8014122:	4810      	ldr	r0, [pc, #64]	; (8014164 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8014124:	f004 ffd6 	bl	80190d4 <__aeabi_atexit>
 8014128:	4c0f      	ldr	r4, [pc, #60]	; (8014168 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801412a:	7823      	ldrb	r3, [r4, #0]
 801412c:	f3bf 8f5b 	dmb	ish
 8014130:	07db      	lsls	r3, r3, #31
 8014132:	d40b      	bmi.n	801414c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8014134:	4620      	mov	r0, r4
 8014136:	f004 ffd4 	bl	80190e2 <__cxa_guard_acquire>
 801413a:	b138      	cbz	r0, 801414c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801413c:	4620      	mov	r0, r4
 801413e:	f004 ffdc 	bl	80190fa <__cxa_guard_release>
 8014142:	4a06      	ldr	r2, [pc, #24]	; (801415c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8014144:	4909      	ldr	r1, [pc, #36]	; (801416c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8014146:	480a      	ldr	r0, [pc, #40]	; (8014170 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8014148:	f004 ffc4 	bl	80190d4 <__aeabi_atexit>
 801414c:	4b05      	ldr	r3, [pc, #20]	; (8014164 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801414e:	64ab      	str	r3, [r5, #72]	; 0x48
 8014150:	4b07      	ldr	r3, [pc, #28]	; (8014170 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8014152:	64eb      	str	r3, [r5, #76]	; 0x4c
 8014154:	bd38      	pop	{r3, r4, r5, pc}
 8014156:	bf00      	nop
 8014158:	2400af80 	.word	0x2400af80
 801415c:	24000000 	.word	0x24000000
 8014160:	080125b9 	.word	0x080125b9
 8014164:	24000060 	.word	0x24000060
 8014168:	2400af84 	.word	0x2400af84
 801416c:	080125b7 	.word	0x080125b7
 8014170:	24000064 	.word	0x24000064

08014174 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8014174:	b510      	push	{r4, lr}
 8014176:	4604      	mov	r4, r0
 8014178:	f7ff ff88 	bl	801408c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801417c:	4620      	mov	r0, r4
 801417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014182:	f7ff bfbd 	b.w	8014100 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08014186 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8014186:	b510      	push	{r4, lr}
 8014188:	4604      	mov	r4, r0
 801418a:	f7ff fff3 	bl	8014174 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801418e:	4620      	mov	r0, r4
 8014190:	f7ff ff72 	bl	8014078 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8014194:	4620      	mov	r0, r4
 8014196:	f7ff fe73 	bl	8013e80 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801419a:	4620      	mov	r0, r4
 801419c:	f7ff fdf2 	bl	8013d84 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80141a0:	4620      	mov	r0, r4
 80141a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141a6:	f7ff bee9 	b.w	8013f7c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080141ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80141ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b0:	b087      	sub	sp, #28
 80141b2:	7888      	ldrb	r0, [r1, #2]
 80141b4:	4616      	mov	r6, r2
 80141b6:	9001      	str	r0, [sp, #4]
 80141b8:	7848      	ldrb	r0, [r1, #1]
 80141ba:	9100      	str	r1, [sp, #0]
 80141bc:	9002      	str	r0, [sp, #8]
 80141be:	7808      	ldrb	r0, [r1, #0]
 80141c0:	9901      	ldr	r1, [sp, #4]
 80141c2:	9003      	str	r0, [sp, #12]
 80141c4:	9802      	ldr	r0, [sp, #8]
 80141c6:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 80141ca:	0200      	lsls	r0, r0, #8
 80141cc:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80141d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80141d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80141d8:	9903      	ldr	r1, [sp, #12]
 80141da:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80141de:	4308      	orrs	r0, r1
 80141e0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80141e4:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 80141e8:	9005      	str	r0, [sp, #20]
 80141ea:	fb05 ca0e 	mla	sl, r5, lr, ip
 80141ee:	2d00      	cmp	r5, #0
 80141f0:	eb06 080a 	add.w	r8, r6, sl
 80141f4:	db4a      	blt.n	801428c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 80141f6:	45a9      	cmp	r9, r5
 80141f8:	dd48      	ble.n	801428c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 80141fa:	f1bc 0f00 	cmp.w	ip, #0
 80141fe:	db43      	blt.n	8014288 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8014200:	45e6      	cmp	lr, ip
 8014202:	dd41      	ble.n	8014288 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8014204:	f816 600a 	ldrb.w	r6, [r6, sl]
 8014208:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801420c:	441e      	add	r6, r3
 801420e:	f11c 0001 	adds.w	r0, ip, #1
 8014212:	d43e      	bmi.n	8014292 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8014214:	4586      	cmp	lr, r0
 8014216:	dd3c      	ble.n	8014292 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8014218:	2a00      	cmp	r2, #0
 801421a:	d03a      	beq.n	8014292 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801421c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014220:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014224:	4418      	add	r0, r3
 8014226:	3501      	adds	r5, #1
 8014228:	d437      	bmi.n	801429a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801422a:	45a9      	cmp	r9, r5
 801422c:	dd35      	ble.n	801429a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801422e:	b3a4      	cbz	r4, 801429a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8014230:	f1bc 0f00 	cmp.w	ip, #0
 8014234:	db2f      	blt.n	8014296 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8014236:	45e6      	cmp	lr, ip
 8014238:	dd2d      	ble.n	8014296 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801423a:	f818 500e 	ldrb.w	r5, [r8, lr]
 801423e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014242:	441d      	add	r5, r3
 8014244:	f11c 0c01 	adds.w	ip, ip, #1
 8014248:	d42a      	bmi.n	80142a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801424a:	45e6      	cmp	lr, ip
 801424c:	dd28      	ble.n	80142a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801424e:	b33a      	cbz	r2, 80142a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8014250:	44c6      	add	lr, r8
 8014252:	f89e c001 	ldrb.w	ip, [lr, #1]
 8014256:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801425a:	4463      	add	r3, ip
 801425c:	ea6f 0c07 	mvn.w	ip, r7
 8014260:	2a0f      	cmp	r2, #15
 8014262:	f896 a000 	ldrb.w	sl, [r6]
 8014266:	fa5f fc8c 	uxtb.w	ip, ip
 801426a:	f890 b000 	ldrb.w	fp, [r0]
 801426e:	f895 9000 	ldrb.w	r9, [r5]
 8014272:	7819      	ldrb	r1, [r3, #0]
 8014274:	d801      	bhi.n	801427a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8014276:	2c0f      	cmp	r4, #15
 8014278:	d914      	bls.n	80142a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801427a:	4b40      	ldr	r3, [pc, #256]	; (801437c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801427c:	f240 115b 	movw	r1, #347	; 0x15b
 8014280:	4a3f      	ldr	r2, [pc, #252]	; (8014380 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8014282:	4840      	ldr	r0, [pc, #256]	; (8014384 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8014284:	f004 ff5a 	bl	801913c <__assert_func>
 8014288:	ae05      	add	r6, sp, #20
 801428a:	e7c0      	b.n	801420e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801428c:	a805      	add	r0, sp, #20
 801428e:	4606      	mov	r6, r0
 8014290:	e7c9      	b.n	8014226 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8014292:	a805      	add	r0, sp, #20
 8014294:	e7c7      	b.n	8014226 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8014296:	ad05      	add	r5, sp, #20
 8014298:	e7d4      	b.n	8014244 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801429a:	ab05      	add	r3, sp, #20
 801429c:	461d      	mov	r5, r3
 801429e:	e7dd      	b.n	801425c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80142a0:	ab05      	add	r3, sp, #20
 80142a2:	e7db      	b.n	801425c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 80142a4:	b292      	uxth	r2, r2
 80142a6:	b2a4      	uxth	r4, r4
 80142a8:	fa1f fc8c 	uxth.w	ip, ip
 80142ac:	fb02 f804 	mul.w	r8, r2, r4
 80142b0:	0112      	lsls	r2, r2, #4
 80142b2:	b2bf      	uxth	r7, r7
 80142b4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80142b8:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80142bc:	eba2 0208 	sub.w	r2, r2, r8
 80142c0:	b2a4      	uxth	r4, r4
 80142c2:	b292      	uxth	r2, r2
 80142c4:	ebae 0e04 	sub.w	lr, lr, r4
 80142c8:	fb02 fb0b 	mul.w	fp, r2, fp
 80142cc:	fa1f fe8e 	uxth.w	lr, lr
 80142d0:	fb0e ba0a 	mla	sl, lr, sl, fp
 80142d4:	fb04 aa09 	mla	sl, r4, r9, sl
 80142d8:	fb08 aa01 	mla	sl, r8, r1, sl
 80142dc:	9903      	ldr	r1, [sp, #12]
 80142de:	fb11 f90c 	smulbb	r9, r1, ip
 80142e2:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80142e6:	9900      	ldr	r1, [sp, #0]
 80142e8:	fb0a 9a07 	mla	sl, sl, r7, r9
 80142ec:	fa1f fa8a 	uxth.w	sl, sl
 80142f0:	f10a 0901 	add.w	r9, sl, #1
 80142f4:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 80142f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80142fc:	f881 a000 	strb.w	sl, [r1]
 8014300:	f890 a001 	ldrb.w	sl, [r0, #1]
 8014304:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014308:	fb02 fa0a 	mul.w	sl, r2, sl
 801430c:	9902      	ldr	r1, [sp, #8]
 801430e:	fb0e aa09 	mla	sl, lr, r9, sl
 8014312:	f895 9001 	ldrb.w	r9, [r5, #1]
 8014316:	fb04 aa09 	mla	sl, r4, r9, sl
 801431a:	f893 9001 	ldrb.w	r9, [r3, #1]
 801431e:	fb08 a909 	mla	r9, r8, r9, sl
 8014322:	fb11 fa0c 	smulbb	sl, r1, ip
 8014326:	9900      	ldr	r1, [sp, #0]
 8014328:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801432c:	fb09 a907 	mla	r9, r9, r7, sl
 8014330:	fa1f f989 	uxth.w	r9, r9
 8014334:	f109 0a01 	add.w	sl, r9, #1
 8014338:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801433c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014340:	f881 9001 	strb.w	r9, [r1, #1]
 8014344:	7880      	ldrb	r0, [r0, #2]
 8014346:	78b6      	ldrb	r6, [r6, #2]
 8014348:	4342      	muls	r2, r0
 801434a:	78a8      	ldrb	r0, [r5, #2]
 801434c:	789b      	ldrb	r3, [r3, #2]
 801434e:	fb0e 2206 	mla	r2, lr, r6, r2
 8014352:	fb04 2400 	mla	r4, r4, r0, r2
 8014356:	fb08 4803 	mla	r8, r8, r3, r4
 801435a:	9b01      	ldr	r3, [sp, #4]
 801435c:	fb13 fc0c 	smulbb	ip, r3, ip
 8014360:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8014364:	fb08 c707 	mla	r7, r8, r7, ip
 8014368:	b2bf      	uxth	r7, r7
 801436a:	f107 0c01 	add.w	ip, r7, #1
 801436e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8014372:	123f      	asrs	r7, r7, #8
 8014374:	708f      	strb	r7, [r1, #2]
 8014376:	b007      	add	sp, #28
 8014378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437c:	0801ce72 	.word	0x0801ce72
 8014380:	0801d286 	.word	0x0801d286
 8014384:	0801ce3f 	.word	0x0801ce3f

08014388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438c:	ed2d 8b08 	vpush	{d8-d11}
 8014390:	b093      	sub	sp, #76	; 0x4c
 8014392:	eeb0 aa40 	vmov.f32	s20, s0
 8014396:	eef0 9a60 	vmov.f32	s19, s1
 801439a:	9210      	str	r2, [sp, #64]	; 0x40
 801439c:	eeb0 9a41 	vmov.f32	s18, s2
 80143a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80143a2:	eeb0 8a62 	vmov.f32	s16, s5
 80143a6:	9309      	str	r3, [sp, #36]	; 0x24
 80143a8:	eef0 8a43 	vmov.f32	s17, s6
 80143ac:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 80143b0:	eef0 ba44 	vmov.f32	s23, s8
 80143b4:	9011      	str	r0, [sp, #68]	; 0x44
 80143b6:	eeb0 ba64 	vmov.f32	s22, s9
 80143ba:	930e      	str	r3, [sp, #56]	; 0x38
 80143bc:	eef0 aa45 	vmov.f32	s21, s10
 80143c0:	6850      	ldr	r0, [r2, #4]
 80143c2:	910d      	str	r1, [sp, #52]	; 0x34
 80143c4:	6812      	ldr	r2, [r2, #0]
 80143c6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80143ca:	fb00 1303 	mla	r3, r0, r3, r1
 80143ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80143d2:	18d3      	adds	r3, r2, r3
 80143d4:	930a      	str	r3, [sp, #40]	; 0x28
 80143d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	930c      	str	r3, [sp, #48]	; 0x30
 80143dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80143de:	685c      	ldr	r4, [r3, #4]
 80143e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143e2:	3404      	adds	r4, #4
 80143e4:	43db      	mvns	r3, r3
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80143ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	dc03      	bgt.n	80143f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80143f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	f340 8250 	ble.w	8014898 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80143f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80143fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80143fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014402:	1e48      	subs	r0, r1, #1
 8014404:	1e55      	subs	r5, r2, #1
 8014406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014408:	2b00      	cmp	r3, #0
 801440a:	f340 80ee 	ble.w	80145ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801440e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8014410:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014412:	1436      	asrs	r6, r6, #16
 8014414:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014418:	d406      	bmi.n	8014428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801441a:	4286      	cmp	r6, r0
 801441c:	da04      	bge.n	8014428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801441e:	2b00      	cmp	r3, #0
 8014420:	db02      	blt.n	8014428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8014422:	42ab      	cmp	r3, r5
 8014424:	f2c0 80e2 	blt.w	80145ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8014428:	3601      	adds	r6, #1
 801442a:	f100 80cf 	bmi.w	80145cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801442e:	42b1      	cmp	r1, r6
 8014430:	f2c0 80cc 	blt.w	80145cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014434:	3301      	adds	r3, #1
 8014436:	f100 80c9 	bmi.w	80145cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801443a:	429a      	cmp	r2, r3
 801443c:	f2c0 80c6 	blt.w	80145cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8014440:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8014444:	f1bb 0f00 	cmp.w	fp, #0
 8014448:	f340 80f1 	ble.w	801462e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801444c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801444e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014450:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8014452:	141d      	asrs	r5, r3, #16
 8014454:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014456:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801445a:	68c7      	ldr	r7, [r0, #12]
 801445c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801445e:	1418      	asrs	r0, r3, #16
 8014460:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8014464:	6892      	ldr	r2, [r2, #8]
 8014466:	f100 8137 	bmi.w	80146d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801446a:	f102 3cff 	add.w	ip, r2, #4294967295
 801446e:	4560      	cmp	r0, ip
 8014470:	f280 8132 	bge.w	80146d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8014474:	2d00      	cmp	r5, #0
 8014476:	f2c0 812f 	blt.w	80146d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801447a:	f107 3cff 	add.w	ip, r7, #4294967295
 801447e:	4565      	cmp	r5, ip
 8014480:	f280 812a 	bge.w	80146d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8014484:	b212      	sxth	r2, r2
 8014486:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014488:	fb05 0002 	mla	r0, r5, r2, r0
 801448c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801448e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8014492:	4405      	add	r5, r0
 8014494:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014498:	eb04 0e0c 	add.w	lr, r4, ip
 801449c:	f1b8 0f00 	cmp.w	r8, #0
 80144a0:	f000 810c 	beq.w	80146bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80144a4:	786f      	ldrb	r7, [r5, #1]
 80144a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80144aa:	4427      	add	r7, r4
 80144ac:	2900      	cmp	r1, #0
 80144ae:	f000 810d 	beq.w	80146cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80144b2:	18a8      	adds	r0, r5, r2
 80144b4:	5caa      	ldrb	r2, [r5, r2]
 80144b6:	7840      	ldrb	r0, [r0, #1]
 80144b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80144bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80144c0:	4422      	add	r2, r4
 80144c2:	4420      	add	r0, r4
 80144c4:	fa1f f388 	uxth.w	r3, r8
 80144c8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80144cc:	b289      	uxth	r1, r1
 80144ce:	f897 c000 	ldrb.w	ip, [r7]
 80144d2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80144d6:	fb03 f901 	mul.w	r9, r3, r1
 80144da:	011b      	lsls	r3, r3, #4
 80144dc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80144e0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80144e4:	eba3 0309 	sub.w	r3, r3, r9
 80144e8:	b289      	uxth	r1, r1
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	eba8 0801 	sub.w	r8, r8, r1
 80144f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80144f4:	fa1f f888 	uxth.w	r8, r8
 80144f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80144fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144fc:	fb08 cc0a 	mla	ip, r8, sl, ip
 8014500:	f892 a000 	ldrb.w	sl, [r2]
 8014504:	fb01 cc0a 	mla	ip, r1, sl, ip
 8014508:	f890 a000 	ldrb.w	sl, [r0]
 801450c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8014510:	f896 a000 	ldrb.w	sl, [r6]
 8014514:	fb1a fa03 	smulbb	sl, sl, r3
 8014518:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801451c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801451e:	fb0c ac05 	mla	ip, ip, r5, sl
 8014522:	fa1f fc8c 	uxth.w	ip, ip
 8014526:	f10c 0a01 	add.w	sl, ip, #1
 801452a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801452e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014532:	f886 a000 	strb.w	sl, [r6]
 8014536:	f897 c001 	ldrb.w	ip, [r7, #1]
 801453a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801453e:	fb03 fc0c 	mul.w	ip, r3, ip
 8014542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014544:	fb08 cc0a 	mla	ip, r8, sl, ip
 8014548:	f892 a001 	ldrb.w	sl, [r2, #1]
 801454c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8014550:	f890 a001 	ldrb.w	sl, [r0, #1]
 8014554:	fb09 cc0a 	mla	ip, r9, sl, ip
 8014558:	f896 a001 	ldrb.w	sl, [r6, #1]
 801455c:	fb1a fa03 	smulbb	sl, sl, r3
 8014560:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8014564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014566:	fb0c ac05 	mla	ip, ip, r5, sl
 801456a:	fa1f fc8c 	uxth.w	ip, ip
 801456e:	f10c 0a01 	add.w	sl, ip, #1
 8014572:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8014576:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801457a:	f886 c001 	strb.w	ip, [r6, #1]
 801457e:	78bf      	ldrb	r7, [r7, #2]
 8014580:	f89e c002 	ldrb.w	ip, [lr, #2]
 8014584:	437b      	muls	r3, r7
 8014586:	fb08 330c 	mla	r3, r8, ip, r3
 801458a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801458e:	7882      	ldrb	r2, [r0, #2]
 8014590:	fb01 310c 	mla	r1, r1, ip, r3
 8014594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014596:	fb09 1902 	mla	r9, r9, r2, r1
 801459a:	78b1      	ldrb	r1, [r6, #2]
 801459c:	fb11 f103 	smulbb	r1, r1, r3
 80145a0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80145a4:	fb09 1505 	mla	r5, r9, r5, r1
 80145a8:	b2ad      	uxth	r5, r5
 80145aa:	1c6b      	adds	r3, r5, #1
 80145ac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80145b0:	122d      	asrs	r5, r5, #8
 80145b2:	70b5      	strb	r5, [r6, #2]
 80145b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80145b6:	3603      	adds	r6, #3
 80145b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80145ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145be:	4413      	add	r3, r2
 80145c0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80145c2:	9325      	str	r3, [sp, #148]	; 0x94
 80145c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80145c6:	4413      	add	r3, r2
 80145c8:	9326      	str	r3, [sp, #152]	; 0x98
 80145ca:	e73b      	b.n	8014444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80145cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80145ce:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80145d0:	4433      	add	r3, r6
 80145d2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80145d4:	9325      	str	r3, [sp, #148]	; 0x94
 80145d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80145d8:	4433      	add	r3, r6
 80145da:	9326      	str	r3, [sp, #152]	; 0x98
 80145dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145de:	3b01      	subs	r3, #1
 80145e0:	9309      	str	r3, [sp, #36]	; 0x24
 80145e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145e4:	3303      	adds	r3, #3
 80145e6:	930a      	str	r3, [sp, #40]	; 0x28
 80145e8:	e70d      	b.n	8014406 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80145ea:	d028      	beq.n	801463e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80145ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80145f0:	3b01      	subs	r3, #1
 80145f2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80145f4:	fb00 5003 	mla	r0, r0, r3, r5
 80145f8:	1400      	asrs	r0, r0, #16
 80145fa:	f53f af21 	bmi.w	8014440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80145fe:	3901      	subs	r1, #1
 8014600:	4288      	cmp	r0, r1
 8014602:	f6bf af1d 	bge.w	8014440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014606:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014608:	9826      	ldr	r0, [sp, #152]	; 0x98
 801460a:	fb01 0303 	mla	r3, r1, r3, r0
 801460e:	141b      	asrs	r3, r3, #16
 8014610:	f53f af16 	bmi.w	8014440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014614:	3a01      	subs	r2, #1
 8014616:	4293      	cmp	r3, r2
 8014618:	f6bf af12 	bge.w	8014440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801461c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801461e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014622:	1cdf      	adds	r7, r3, #3
 8014624:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8014628:	f1b9 0f00 	cmp.w	r9, #0
 801462c:	dc73      	bgt.n	8014716 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014632:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801463a:	441a      	add	r2, r3
 801463c:	920a      	str	r2, [sp, #40]	; 0x28
 801463e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014640:	2b00      	cmp	r3, #0
 8014642:	f340 8129 	ble.w	8014898 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8014646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801464a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801464c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8014650:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8014654:	eef0 6a48 	vmov.f32	s13, s16
 8014658:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801465c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8014660:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014664:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8014668:	eef0 6a68 	vmov.f32	s13, s17
 801466c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014670:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8014674:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8014678:	ee69 7a27 	vmul.f32	s15, s18, s15
 801467c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8014680:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014684:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8014688:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801468c:	ee18 2a10 	vmov	r2, s16
 8014690:	eeb0 8a47 	vmov.f32	s16, s14
 8014694:	fb92 f3f3 	sdiv	r3, r2, r3
 8014698:	ee18 2a90 	vmov	r2, s17
 801469c:	9327      	str	r3, [sp, #156]	; 0x9c
 801469e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80146a0:	eef0 8a67 	vmov.f32	s17, s15
 80146a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80146a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80146aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146ae:	3b01      	subs	r3, #1
 80146b0:	930d      	str	r3, [sp, #52]	; 0x34
 80146b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80146b4:	bf08      	it	eq
 80146b6:	4613      	moveq	r3, r2
 80146b8:	9309      	str	r3, [sp, #36]	; 0x24
 80146ba:	e696      	b.n	80143ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80146bc:	b149      	cbz	r1, 80146d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80146be:	5caa      	ldrb	r2, [r5, r2]
 80146c0:	4670      	mov	r0, lr
 80146c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80146c6:	4422      	add	r2, r4
 80146c8:	4677      	mov	r7, lr
 80146ca:	e6fb      	b.n	80144c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80146cc:	4670      	mov	r0, lr
 80146ce:	4672      	mov	r2, lr
 80146d0:	e6f8      	b.n	80144c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80146d2:	4670      	mov	r0, lr
 80146d4:	4672      	mov	r2, lr
 80146d6:	e7f7      	b.n	80146c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80146d8:	f110 0c01 	adds.w	ip, r0, #1
 80146dc:	f53f af6a 	bmi.w	80145b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80146e0:	4562      	cmp	r2, ip
 80146e2:	f6ff af67 	blt.w	80145b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80146e6:	f115 0c01 	adds.w	ip, r5, #1
 80146ea:	f53f af63 	bmi.w	80145b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80146ee:	4567      	cmp	r7, ip
 80146f0:	f6ff af60 	blt.w	80145b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80146f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146f6:	b23f      	sxth	r7, r7
 80146f8:	b212      	sxth	r2, r2
 80146fa:	9002      	str	r0, [sp, #8]
 80146fc:	9701      	str	r7, [sp, #4]
 80146fe:	9200      	str	r2, [sp, #0]
 8014700:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014704:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8014708:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801470c:	4623      	mov	r3, r4
 801470e:	4631      	mov	r1, r6
 8014710:	f7ff fd4c 	bl	80141ac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8014714:	e74e      	b.n	80145b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8014716:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014718:	9826      	ldr	r0, [sp, #152]	; 0x98
 801471a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801471e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8014720:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8014722:	1400      	asrs	r0, r0, #16
 8014724:	142d      	asrs	r5, r5, #16
 8014726:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014728:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801472c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8014730:	fb02 5000 	mla	r0, r2, r0, r5
 8014734:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014736:	f815 e000 	ldrb.w	lr, [r5, r0]
 801473a:	eb05 0c00 	add.w	ip, r5, r0
 801473e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014742:	eb04 060e 	add.w	r6, r4, lr
 8014746:	2b00      	cmp	r3, #0
 8014748:	f000 8097 	beq.w	801487a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801474c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8014750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014754:	4425      	add	r5, r4
 8014756:	2900      	cmp	r1, #0
 8014758:	f000 8098 	beq.w	801488c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801475c:	eb0c 0002 	add.w	r0, ip, r2
 8014760:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014764:	7840      	ldrb	r0, [r0, #1]
 8014766:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801476a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801476e:	4422      	add	r2, r4
 8014770:	4420      	add	r0, r4
 8014772:	b29b      	uxth	r3, r3
 8014774:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8014778:	b289      	uxth	r1, r1
 801477a:	f895 e000 	ldrb.w	lr, [r5]
 801477e:	3703      	adds	r7, #3
 8014780:	f109 39ff 	add.w	r9, r9, #4294967295
 8014784:	fb03 f801 	mul.w	r8, r3, r1
 8014788:	011b      	lsls	r3, r3, #4
 801478a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801478e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8014792:	eba3 0308 	sub.w	r3, r3, r8
 8014796:	b289      	uxth	r1, r1
 8014798:	b29b      	uxth	r3, r3
 801479a:	ebac 0c01 	sub.w	ip, ip, r1
 801479e:	fb03 fe0e 	mul.w	lr, r3, lr
 80147a2:	fa1f fc8c 	uxth.w	ip, ip
 80147a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80147a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147aa:	fb0c ee0b 	mla	lr, ip, fp, lr
 80147ae:	f892 b000 	ldrb.w	fp, [r2]
 80147b2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80147b6:	f890 b000 	ldrb.w	fp, [r0]
 80147ba:	fb08 ee0b 	mla	lr, r8, fp, lr
 80147be:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80147c2:	fb1b fb03 	smulbb	fp, fp, r3
 80147c6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80147ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147cc:	fb0e be0a 	mla	lr, lr, sl, fp
 80147d0:	fa1f fe8e 	uxth.w	lr, lr
 80147d4:	f10e 0b01 	add.w	fp, lr, #1
 80147d8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80147dc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80147e0:	f807 ec06 	strb.w	lr, [r7, #-6]
 80147e4:	f895 e001 	ldrb.w	lr, [r5, #1]
 80147e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80147ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80147f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147f2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80147f6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80147fa:	fb01 ee0b 	mla	lr, r1, fp, lr
 80147fe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014802:	fb08 ee0b 	mla	lr, r8, fp, lr
 8014806:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801480a:	fb1b fb03 	smulbb	fp, fp, r3
 801480e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8014812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014814:	fb0e be0a 	mla	lr, lr, sl, fp
 8014818:	fa1f fe8e 	uxth.w	lr, lr
 801481c:	f10e 0b01 	add.w	fp, lr, #1
 8014820:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8014824:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014828:	f807 ec05 	strb.w	lr, [r7, #-5]
 801482c:	78ad      	ldrb	r5, [r5, #2]
 801482e:	78b6      	ldrb	r6, [r6, #2]
 8014830:	436b      	muls	r3, r5
 8014832:	7895      	ldrb	r5, [r2, #2]
 8014834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014836:	fb0c 3306 	mla	r3, ip, r6, r3
 801483a:	fb01 3305 	mla	r3, r1, r5, r3
 801483e:	7885      	ldrb	r5, [r0, #2]
 8014840:	fb08 3805 	mla	r8, r8, r5, r3
 8014844:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8014848:	fb13 f302 	smulbb	r3, r3, r2
 801484c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8014850:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014852:	fb08 380a 	mla	r8, r8, sl, r3
 8014856:	fa1f f888 	uxth.w	r8, r8
 801485a:	f108 0301 	add.w	r3, r8, #1
 801485e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8014862:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014864:	4413      	add	r3, r2
 8014866:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014868:	ea4f 2828 	mov.w	r8, r8, asr #8
 801486c:	9325      	str	r3, [sp, #148]	; 0x94
 801486e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014870:	f807 8c04 	strb.w	r8, [r7, #-4]
 8014874:	4413      	add	r3, r2
 8014876:	9326      	str	r3, [sp, #152]	; 0x98
 8014878:	e6d6      	b.n	8014628 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801487a:	b151      	cbz	r1, 8014892 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801487c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014880:	4630      	mov	r0, r6
 8014882:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014886:	4422      	add	r2, r4
 8014888:	4635      	mov	r5, r6
 801488a:	e772      	b.n	8014772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801488c:	4630      	mov	r0, r6
 801488e:	4632      	mov	r2, r6
 8014890:	e76f      	b.n	8014772 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8014892:	4630      	mov	r0, r6
 8014894:	4632      	mov	r2, r6
 8014896:	e7f7      	b.n	8014888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8014898:	b013      	add	sp, #76	; 0x4c
 801489a:	ecbd 8b08 	vpop	{d8-d11}
 801489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080148a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80148a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a8:	784d      	ldrb	r5, [r1, #1]
 80148aa:	f891 9002 	ldrb.w	r9, [r1, #2]
 80148ae:	022d      	lsls	r5, r5, #8
 80148b0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80148b4:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80148b8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80148bc:	f891 9000 	ldrb.w	r9, [r1]
 80148c0:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80148c4:	ea45 0509 	orr.w	r5, r5, r9
 80148c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80148cc:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 80148d0:	9501      	str	r5, [sp, #4]
 80148d2:	fb06 470c 	mla	r7, r6, ip, r4
 80148d6:	2e00      	cmp	r6, #0
 80148d8:	eb02 0e07 	add.w	lr, r2, r7
 80148dc:	db46      	blt.n	801496c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 80148de:	45b0      	cmp	r8, r6
 80148e0:	dd44      	ble.n	801496c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 80148e2:	2c00      	cmp	r4, #0
 80148e4:	db40      	blt.n	8014968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80148e6:	45a4      	cmp	ip, r4
 80148e8:	dd3e      	ble.n	8014968 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 80148ea:	5dd7      	ldrb	r7, [r2, r7]
 80148ec:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80148f0:	441f      	add	r7, r3
 80148f2:	1c62      	adds	r2, r4, #1
 80148f4:	d43d      	bmi.n	8014972 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80148f6:	4594      	cmp	ip, r2
 80148f8:	dd3b      	ble.n	8014972 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80148fa:	f1ba 0f00 	cmp.w	sl, #0
 80148fe:	d038      	beq.n	8014972 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8014900:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8014904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014908:	441d      	add	r5, r3
 801490a:	3601      	adds	r6, #1
 801490c:	d435      	bmi.n	801497a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801490e:	45b0      	cmp	r8, r6
 8014910:	dd33      	ble.n	801497a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8014912:	b390      	cbz	r0, 801497a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8014914:	2c00      	cmp	r4, #0
 8014916:	db2e      	blt.n	8014976 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8014918:	45a4      	cmp	ip, r4
 801491a:	dd2c      	ble.n	8014976 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801491c:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8014920:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014924:	441e      	add	r6, r3
 8014926:	1c62      	adds	r2, r4, #1
 8014928:	d42a      	bmi.n	8014980 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801492a:	4594      	cmp	ip, r2
 801492c:	dd28      	ble.n	8014980 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801492e:	f1ba 0f00 	cmp.w	sl, #0
 8014932:	d025      	beq.n	8014980 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8014934:	44f4      	add	ip, lr
 8014936:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801493a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801493e:	4413      	add	r3, r2
 8014940:	f1ba 0f0f 	cmp.w	sl, #15
 8014944:	f897 8000 	ldrb.w	r8, [r7]
 8014948:	f895 9000 	ldrb.w	r9, [r5]
 801494c:	f896 e000 	ldrb.w	lr, [r6]
 8014950:	f893 c000 	ldrb.w	ip, [r3]
 8014954:	d801      	bhi.n	801495a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8014956:	280f      	cmp	r0, #15
 8014958:	d914      	bls.n	8014984 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801495a:	4b29      	ldr	r3, [pc, #164]	; (8014a00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801495c:	f240 115b 	movw	r1, #347	; 0x15b
 8014960:	4a28      	ldr	r2, [pc, #160]	; (8014a04 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8014962:	4829      	ldr	r0, [pc, #164]	; (8014a08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8014964:	f004 fbea 	bl	801913c <__assert_func>
 8014968:	af01      	add	r7, sp, #4
 801496a:	e7c2      	b.n	80148f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801496c:	ad01      	add	r5, sp, #4
 801496e:	462f      	mov	r7, r5
 8014970:	e7cb      	b.n	801490a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8014972:	ad01      	add	r5, sp, #4
 8014974:	e7c9      	b.n	801490a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8014976:	ae01      	add	r6, sp, #4
 8014978:	e7d5      	b.n	8014926 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801497a:	ab01      	add	r3, sp, #4
 801497c:	461e      	mov	r6, r3
 801497e:	e7df      	b.n	8014940 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8014980:	ab01      	add	r3, sp, #4
 8014982:	e7dd      	b.n	8014940 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8014984:	fa1f f48a 	uxth.w	r4, sl
 8014988:	b280      	uxth	r0, r0
 801498a:	fb04 fa00 	mul.w	sl, r4, r0
 801498e:	0124      	lsls	r4, r4, #4
 8014990:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8014994:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8014998:	b282      	uxth	r2, r0
 801499a:	eba4 000a 	sub.w	r0, r4, sl
 801499e:	ebab 0b02 	sub.w	fp, fp, r2
 80149a2:	b280      	uxth	r0, r0
 80149a4:	fa1f fb8b 	uxth.w	fp, fp
 80149a8:	fb00 f909 	mul.w	r9, r0, r9
 80149ac:	fb0b 9808 	mla	r8, fp, r8, r9
 80149b0:	fb02 8e0e 	mla	lr, r2, lr, r8
 80149b4:	fb0a ec0c 	mla	ip, sl, ip, lr
 80149b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80149bc:	f881 c000 	strb.w	ip, [r1]
 80149c0:	786c      	ldrb	r4, [r5, #1]
 80149c2:	f897 c001 	ldrb.w	ip, [r7, #1]
 80149c6:	4344      	muls	r4, r0
 80149c8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80149cc:	7874      	ldrb	r4, [r6, #1]
 80149ce:	fb02 cc04 	mla	ip, r2, r4, ip
 80149d2:	785c      	ldrb	r4, [r3, #1]
 80149d4:	fb0a c404 	mla	r4, sl, r4, ip
 80149d8:	1224      	asrs	r4, r4, #8
 80149da:	704c      	strb	r4, [r1, #1]
 80149dc:	78ad      	ldrb	r5, [r5, #2]
 80149de:	78bc      	ldrb	r4, [r7, #2]
 80149e0:	4368      	muls	r0, r5
 80149e2:	fb0b 0b04 	mla	fp, fp, r4, r0
 80149e6:	78b0      	ldrb	r0, [r6, #2]
 80149e8:	fb02 b000 	mla	r0, r2, r0, fp
 80149ec:	789a      	ldrb	r2, [r3, #2]
 80149ee:	fb0a 0a02 	mla	sl, sl, r2, r0
 80149f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80149f6:	f881 a002 	strb.w	sl, [r1, #2]
 80149fa:	b003      	add	sp, #12
 80149fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a00:	0801ce72 	.word	0x0801ce72
 8014a04:	0801d286 	.word	0x0801d286
 8014a08:	0801ce3f 	.word	0x0801ce3f

08014a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a10:	ed2d 8b0a 	vpush	{d8-d12}
 8014a14:	b08d      	sub	sp, #52	; 0x34
 8014a16:	eeb0 aa40 	vmov.f32	s20, s0
 8014a1a:	eef0 9a60 	vmov.f32	s19, s1
 8014a1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a20:	eeb0 9a41 	vmov.f32	s18, s2
 8014a24:	9306      	str	r3, [sp, #24]
 8014a26:	eeb0 8a62 	vmov.f32	s16, s5
 8014a2a:	eef0 8a43 	vmov.f32	s17, s6
 8014a2e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014a30:	eeb0 ca44 	vmov.f32	s24, s8
 8014a34:	eef0 ba64 	vmov.f32	s23, s9
 8014a38:	eeb0 ba45 	vmov.f32	s22, s10
 8014a3c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8014a40:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8014a44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014a46:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8014a4a:	6850      	ldr	r0, [r2, #4]
 8014a4c:	6812      	ldr	r2, [r2, #0]
 8014a4e:	fb00 1303 	mla	r3, r0, r3, r1
 8014a52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014a56:	18d3      	adds	r3, r2, r3
 8014a58:	9307      	str	r3, [sp, #28]
 8014a5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	9308      	str	r3, [sp, #32]
 8014a60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a62:	685d      	ldr	r5, [r3, #4]
 8014a64:	3504      	adds	r5, #4
 8014a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	dc03      	bgt.n	8014a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	f340 81e6 	ble.w	8014e40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8014a74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014a7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014a7e:	1e48      	subs	r0, r1, #1
 8014a80:	1e56      	subs	r6, r2, #1
 8014a82:	9b06      	ldr	r3, [sp, #24]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f340 80bd 	ble.w	8014c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8014a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014a8c:	1427      	asrs	r7, r4, #16
 8014a8e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8014a92:	d406      	bmi.n	8014aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014a94:	4287      	cmp	r7, r0
 8014a96:	da04      	bge.n	8014aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	db02      	blt.n	8014aa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8014a9c:	42b3      	cmp	r3, r6
 8014a9e:	f2c0 80b2 	blt.w	8014c06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8014aa2:	3701      	adds	r7, #1
 8014aa4:	f100 80a1 	bmi.w	8014bea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8014aa8:	42b9      	cmp	r1, r7
 8014aaa:	f2c0 809e 	blt.w	8014bea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8014aae:	3301      	adds	r3, #1
 8014ab0:	f100 809b 	bmi.w	8014bea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	f2c0 8098 	blt.w	8014bea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8014aba:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8014abe:	f1bb 0f00 	cmp.w	fp, #0
 8014ac2:	f340 80bf 	ble.w	8014c44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8014ac6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014ac8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8014aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014acc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014ad0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8014ad4:	1420      	asrs	r0, r4, #16
 8014ad6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014ad8:	ea4f 4723 	mov.w	r7, r3, asr #16
 8014adc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8014ae0:	6892      	ldr	r2, [r2, #8]
 8014ae2:	f100 8103 	bmi.w	8014cec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8014ae6:	f102 3eff 	add.w	lr, r2, #4294967295
 8014aea:	4570      	cmp	r0, lr
 8014aec:	f280 80fe 	bge.w	8014cec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8014af0:	2f00      	cmp	r7, #0
 8014af2:	f2c0 80fb 	blt.w	8014cec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8014af6:	f10c 3eff 	add.w	lr, ip, #4294967295
 8014afa:	4577      	cmp	r7, lr
 8014afc:	f280 80f6 	bge.w	8014cec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8014b00:	b212      	sxth	r2, r2
 8014b02:	fb07 0002 	mla	r0, r7, r2, r0
 8014b06:	9f08      	ldr	r7, [sp, #32]
 8014b08:	f817 8000 	ldrb.w	r8, [r7, r0]
 8014b0c:	eb07 0e00 	add.w	lr, r7, r0
 8014b10:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8014b14:	eb05 0c08 	add.w	ip, r5, r8
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f000 80d8 	beq.w	8014cce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8014b1e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8014b22:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014b26:	442f      	add	r7, r5
 8014b28:	2900      	cmp	r1, #0
 8014b2a:	f000 80d9 	beq.w	8014ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8014b2e:	eb0e 0002 	add.w	r0, lr, r2
 8014b32:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014b36:	7840      	ldrb	r0, [r0, #1]
 8014b38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014b3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014b40:	442a      	add	r2, r5
 8014b42:	4428      	add	r0, r5
 8014b44:	b29b      	uxth	r3, r3
 8014b46:	f815 a008 	ldrb.w	sl, [r5, r8]
 8014b4a:	b289      	uxth	r1, r1
 8014b4c:	f897 8000 	ldrb.w	r8, [r7]
 8014b50:	fb03 f901 	mul.w	r9, r3, r1
 8014b54:	011b      	lsls	r3, r3, #4
 8014b56:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014b5a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8014b5e:	eba3 0309 	sub.w	r3, r3, r9
 8014b62:	b289      	uxth	r1, r1
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	ebae 0e01 	sub.w	lr, lr, r1
 8014b6a:	fb03 f808 	mul.w	r8, r3, r8
 8014b6e:	fa1f fe8e 	uxth.w	lr, lr
 8014b72:	fb0e 880a 	mla	r8, lr, sl, r8
 8014b76:	f892 a000 	ldrb.w	sl, [r2]
 8014b7a:	fb01 880a 	mla	r8, r1, sl, r8
 8014b7e:	f890 a000 	ldrb.w	sl, [r0]
 8014b82:	fb09 880a 	mla	r8, r9, sl, r8
 8014b86:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014b8a:	f886 8000 	strb.w	r8, [r6]
 8014b8e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8014b92:	f89c a001 	ldrb.w	sl, [ip, #1]
 8014b96:	fb03 f808 	mul.w	r8, r3, r8
 8014b9a:	fb0e 880a 	mla	r8, lr, sl, r8
 8014b9e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8014ba2:	fb01 880a 	mla	r8, r1, sl, r8
 8014ba6:	f890 a001 	ldrb.w	sl, [r0, #1]
 8014baa:	fb09 880a 	mla	r8, r9, sl, r8
 8014bae:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014bb2:	f886 8001 	strb.w	r8, [r6, #1]
 8014bb6:	78bf      	ldrb	r7, [r7, #2]
 8014bb8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8014bbc:	437b      	muls	r3, r7
 8014bbe:	7892      	ldrb	r2, [r2, #2]
 8014bc0:	fb0e 330c 	mla	r3, lr, ip, r3
 8014bc4:	fb01 3102 	mla	r1, r1, r2, r3
 8014bc8:	7882      	ldrb	r2, [r0, #2]
 8014bca:	fb09 1902 	mla	r9, r9, r2, r1
 8014bce:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014bd2:	f886 9002 	strb.w	r9, [r6, #2]
 8014bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bd8:	3603      	adds	r6, #3
 8014bda:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014bdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014be0:	441c      	add	r4, r3
 8014be2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014be4:	4413      	add	r3, r2
 8014be6:	9322      	str	r3, [sp, #136]	; 0x88
 8014be8:	e769      	b.n	8014abe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8014bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bec:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8014bee:	441c      	add	r4, r3
 8014bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014bf2:	443b      	add	r3, r7
 8014bf4:	9322      	str	r3, [sp, #136]	; 0x88
 8014bf6:	9b06      	ldr	r3, [sp, #24]
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	9306      	str	r3, [sp, #24]
 8014bfc:	9b07      	ldr	r3, [sp, #28]
 8014bfe:	3303      	adds	r3, #3
 8014c00:	9307      	str	r3, [sp, #28]
 8014c02:	e73e      	b.n	8014a82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014c04:	d026      	beq.n	8014c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014c06:	9b06      	ldr	r3, [sp, #24]
 8014c08:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	fb00 4003 	mla	r0, r0, r3, r4
 8014c10:	1400      	asrs	r0, r0, #16
 8014c12:	f53f af52 	bmi.w	8014aba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014c16:	3901      	subs	r1, #1
 8014c18:	4288      	cmp	r0, r1
 8014c1a:	f6bf af4e 	bge.w	8014aba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014c1e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014c20:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014c22:	fb01 0303 	mla	r3, r1, r3, r0
 8014c26:	141b      	asrs	r3, r3, #16
 8014c28:	f53f af47 	bmi.w	8014aba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014c2c:	3a01      	subs	r2, #1
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	f6bf af43 	bge.w	8014aba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014c34:	9b07      	ldr	r3, [sp, #28]
 8014c36:	f8dd a018 	ldr.w	sl, [sp, #24]
 8014c3a:	f103 0803 	add.w	r8, r3, #3
 8014c3e:	f1ba 0f00 	cmp.w	sl, #0
 8014c42:	dc71      	bgt.n	8014d28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8014c44:	9b06      	ldr	r3, [sp, #24]
 8014c46:	9a07      	ldr	r2, [sp, #28]
 8014c48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014c50:	441a      	add	r2, r3
 8014c52:	9207      	str	r2, [sp, #28]
 8014c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	f340 80f2 	ble.w	8014e40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8014c5c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8014c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014c62:	ee79 9aab 	vadd.f32	s19, s19, s23
 8014c66:	eef0 6a48 	vmov.f32	s13, s16
 8014c6a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8014c6e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8014c72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014c76:	ee16 4a90 	vmov	r4, s13
 8014c7a:	eef0 6a68 	vmov.f32	s13, s17
 8014c7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014c82:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8014c86:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8014c8a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8014c8e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8014c92:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8014c96:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8014c9a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8014c9e:	ee18 2a10 	vmov	r2, s16
 8014ca2:	eeb0 8a47 	vmov.f32	s16, s14
 8014ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014caa:	ee18 2a90 	vmov	r2, s17
 8014cae:	9323      	str	r3, [sp, #140]	; 0x8c
 8014cb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014cb2:	eef0 8a67 	vmov.f32	s17, s15
 8014cb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8014cba:	9324      	str	r3, [sp, #144]	; 0x90
 8014cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cc0:	3b01      	subs	r3, #1
 8014cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8014cc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014cc6:	bf08      	it	eq
 8014cc8:	4613      	moveq	r3, r2
 8014cca:	9306      	str	r3, [sp, #24]
 8014ccc:	e6cb      	b.n	8014a66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014cce:	b151      	cbz	r1, 8014ce6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8014cd0:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014cd4:	4660      	mov	r0, ip
 8014cd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014cda:	442a      	add	r2, r5
 8014cdc:	4667      	mov	r7, ip
 8014cde:	e731      	b.n	8014b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014ce0:	4660      	mov	r0, ip
 8014ce2:	4662      	mov	r2, ip
 8014ce4:	e72e      	b.n	8014b44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014ce6:	4660      	mov	r0, ip
 8014ce8:	4662      	mov	r2, ip
 8014cea:	e7f7      	b.n	8014cdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8014cec:	f110 0e01 	adds.w	lr, r0, #1
 8014cf0:	f53f af71 	bmi.w	8014bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014cf4:	4572      	cmp	r2, lr
 8014cf6:	f6ff af6e 	blt.w	8014bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014cfa:	f117 0e01 	adds.w	lr, r7, #1
 8014cfe:	f53f af6a 	bmi.w	8014bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014d02:	45f4      	cmp	ip, lr
 8014d04:	f6ff af67 	blt.w	8014bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014d08:	b212      	sxth	r2, r2
 8014d0a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8014d0e:	fa0f f38c 	sxth.w	r3, ip
 8014d12:	9200      	str	r2, [sp, #0]
 8014d14:	4631      	mov	r1, r6
 8014d16:	9a08      	ldr	r2, [sp, #32]
 8014d18:	9301      	str	r3, [sp, #4]
 8014d1a:	462b      	mov	r3, r5
 8014d1c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014d20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014d22:	f7ff fdbf 	bl	80148a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8014d26:	e756      	b.n	8014bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014d28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014d2a:	1426      	asrs	r6, r4, #16
 8014d2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014d2e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8014d32:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014d36:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014d38:	1400      	asrs	r0, r0, #16
 8014d3a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014d3e:	fb02 6000 	mla	r0, r2, r0, r6
 8014d42:	9e08      	ldr	r6, [sp, #32]
 8014d44:	f816 e000 	ldrb.w	lr, [r6, r0]
 8014d48:	eb06 0c00 	add.w	ip, r6, r0
 8014d4c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014d50:	eb05 070e 	add.w	r7, r5, lr
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d064      	beq.n	8014e22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8014d58:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8014d5c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014d60:	442e      	add	r6, r5
 8014d62:	2900      	cmp	r1, #0
 8014d64:	d066      	beq.n	8014e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8014d66:	eb0c 0002 	add.w	r0, ip, r2
 8014d6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014d6e:	7840      	ldrb	r0, [r0, #1]
 8014d70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014d74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014d78:	442a      	add	r2, r5
 8014d7a:	4428      	add	r0, r5
 8014d7c:	b29b      	uxth	r3, r3
 8014d7e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8014d82:	b289      	uxth	r1, r1
 8014d84:	f896 e000 	ldrb.w	lr, [r6]
 8014d88:	f108 0803 	add.w	r8, r8, #3
 8014d8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d90:	fb03 f901 	mul.w	r9, r3, r1
 8014d94:	011b      	lsls	r3, r3, #4
 8014d96:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014d9a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8014d9e:	eba3 0309 	sub.w	r3, r3, r9
 8014da2:	b289      	uxth	r1, r1
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	ebac 0c01 	sub.w	ip, ip, r1
 8014daa:	fb03 fe0e 	mul.w	lr, r3, lr
 8014dae:	fa1f fc8c 	uxth.w	ip, ip
 8014db2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8014db6:	f892 b000 	ldrb.w	fp, [r2]
 8014dba:	fb01 ee0b 	mla	lr, r1, fp, lr
 8014dbe:	f890 b000 	ldrb.w	fp, [r0]
 8014dc2:	fb09 ee0b 	mla	lr, r9, fp, lr
 8014dc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014dca:	f808 ec06 	strb.w	lr, [r8, #-6]
 8014dce:	f896 e001 	ldrb.w	lr, [r6, #1]
 8014dd2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014dd6:	fb03 fe0e 	mul.w	lr, r3, lr
 8014dda:	fb0c ee0b 	mla	lr, ip, fp, lr
 8014dde:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014de2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8014de6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014dea:	fb09 ee0b 	mla	lr, r9, fp, lr
 8014dee:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014df2:	f808 ec05 	strb.w	lr, [r8, #-5]
 8014df6:	78b6      	ldrb	r6, [r6, #2]
 8014df8:	78bf      	ldrb	r7, [r7, #2]
 8014dfa:	4373      	muls	r3, r6
 8014dfc:	7896      	ldrb	r6, [r2, #2]
 8014dfe:	7882      	ldrb	r2, [r0, #2]
 8014e00:	fb0c 3307 	mla	r3, ip, r7, r3
 8014e04:	fb01 3306 	mla	r3, r1, r6, r3
 8014e08:	fb09 3902 	mla	r9, r9, r2, r3
 8014e0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014e10:	441c      	add	r4, r3
 8014e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014e14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e18:	4413      	add	r3, r2
 8014e1a:	f808 9c04 	strb.w	r9, [r8, #-4]
 8014e1e:	9322      	str	r3, [sp, #136]	; 0x88
 8014e20:	e70d      	b.n	8014c3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8014e22:	b151      	cbz	r1, 8014e3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8014e24:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014e28:	4638      	mov	r0, r7
 8014e2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014e2e:	442a      	add	r2, r5
 8014e30:	463e      	mov	r6, r7
 8014e32:	e7a3      	b.n	8014d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8014e34:	4638      	mov	r0, r7
 8014e36:	463a      	mov	r2, r7
 8014e38:	e7a0      	b.n	8014d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8014e3a:	4638      	mov	r0, r7
 8014e3c:	463a      	mov	r2, r7
 8014e3e:	e7f7      	b.n	8014e30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8014e40:	b00d      	add	sp, #52	; 0x34
 8014e42:	ecbd 8b0a 	vpop	{d8-d12}
 8014e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014e4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8014e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e50:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8014e54:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8014e58:	2d00      	cmp	r5, #0
 8014e5a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8014e5e:	fb05 040e 	mla	r4, r5, lr, r0
 8014e62:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8014e66:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8014e6a:	eb02 0804 	add.w	r8, r2, r4
 8014e6e:	db40      	blt.n	8014ef2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8014e70:	45a9      	cmp	r9, r5
 8014e72:	dd3e      	ble.n	8014ef2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	db3a      	blt.n	8014eee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8014e78:	4586      	cmp	lr, r0
 8014e7a:	dd38      	ble.n	8014eee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8014e7c:	5d12      	ldrb	r2, [r2, r4]
 8014e7e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014e82:	1c42      	adds	r2, r0, #1
 8014e84:	d438      	bmi.n	8014ef8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8014e86:	4596      	cmp	lr, r2
 8014e88:	dd36      	ble.n	8014ef8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8014e8a:	b3bf      	cbz	r7, 8014efc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8014e8c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8014e90:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8014e94:	3501      	adds	r5, #1
 8014e96:	d435      	bmi.n	8014f04 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8014e98:	45a9      	cmp	r9, r5
 8014e9a:	dd33      	ble.n	8014f04 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8014e9c:	f1bc 0f00 	cmp.w	ip, #0
 8014ea0:	d033      	beq.n	8014f0a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	db2c      	blt.n	8014f00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8014ea6:	4586      	cmp	lr, r0
 8014ea8:	dd2a      	ble.n	8014f00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8014eaa:	f818 200e 	ldrb.w	r2, [r8, lr]
 8014eae:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014eb2:	3001      	adds	r0, #1
 8014eb4:	d42c      	bmi.n	8014f10 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8014eb6:	4586      	cmp	lr, r0
 8014eb8:	dd2a      	ble.n	8014f10 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8014eba:	b35f      	cbz	r7, 8014f14 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8014ebc:	44c6      	add	lr, r8
 8014ebe:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8014ec2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014ec6:	2f0f      	cmp	r7, #15
 8014ec8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8014ecc:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8014ed0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8014ed4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8014ed8:	d802      	bhi.n	8014ee0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8014eda:	f1bc 0f0f 	cmp.w	ip, #15
 8014ede:	d91b      	bls.n	8014f18 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8014ee0:	4b77      	ldr	r3, [pc, #476]	; (80150c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8014ee2:	f240 115b 	movw	r1, #347	; 0x15b
 8014ee6:	4a77      	ldr	r2, [pc, #476]	; (80150c4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8014ee8:	4877      	ldr	r0, [pc, #476]	; (80150c8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8014eea:	f004 f927 	bl	801913c <__assert_func>
 8014eee:	2600      	movs	r6, #0
 8014ef0:	e7c7      	b.n	8014e82 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8014ef2:	2400      	movs	r4, #0
 8014ef4:	4626      	mov	r6, r4
 8014ef6:	e7cd      	b.n	8014e94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8014ef8:	2400      	movs	r4, #0
 8014efa:	e7cb      	b.n	8014e94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8014efc:	463c      	mov	r4, r7
 8014efe:	e7c9      	b.n	8014e94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8014f00:	2500      	movs	r5, #0
 8014f02:	e7d6      	b.n	8014eb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8014f04:	2200      	movs	r2, #0
 8014f06:	4615      	mov	r5, r2
 8014f08:	e7dd      	b.n	8014ec6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014f0a:	4662      	mov	r2, ip
 8014f0c:	4665      	mov	r5, ip
 8014f0e:	e7da      	b.n	8014ec6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014f10:	2200      	movs	r2, #0
 8014f12:	e7d8      	b.n	8014ec6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014f14:	463a      	mov	r2, r7
 8014f16:	e7d6      	b.n	8014ec6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014f18:	b2bf      	uxth	r7, r7
 8014f1a:	fa1f f08c 	uxth.w	r0, ip
 8014f1e:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8014f22:	fb00 fe07 	mul.w	lr, r0, r7
 8014f26:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8014f2a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8014f2e:	ebac 070e 	sub.w	r7, ip, lr
 8014f32:	b280      	uxth	r0, r0
 8014f34:	b2bf      	uxth	r7, r7
 8014f36:	1a1b      	subs	r3, r3, r0
 8014f38:	fb07 fc0a 	mul.w	ip, r7, sl
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	fb00 cc09 	mla	ip, r0, r9, ip
 8014f48:	fb0e cc08 	mla	ip, lr, r8, ip
 8014f4c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8014f50:	9301      	str	r3, [sp, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	f000 80b0 	beq.w	80150b8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8014f58:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8014f5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014f60:	fb0b fc0c 	mul.w	ip, fp, ip
 8014f64:	fb0b f606 	mul.w	r6, fp, r6
 8014f68:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014f6c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8014f70:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8014f74:	44dc      	add	ip, fp
 8014f76:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014f7a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8014f7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014f82:	fb0a fb0b 	mul.w	fp, sl, fp
 8014f86:	fb0a fa04 	mul.w	sl, sl, r4
 8014f8a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014f8e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8014f92:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8014f96:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014f9a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014f9e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014fa2:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8014fa6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014faa:	0a36      	lsrs	r6, r6, #8
 8014fac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014fb0:	44dc      	add	ip, fp
 8014fb2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014fb6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014fba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014fbe:	fb09 fb0b 	mul.w	fp, r9, fp
 8014fc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014fc6:	fb09 f905 	mul.w	r9, r9, r5
 8014fca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014fce:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8014fd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014fd6:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8014fda:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014fde:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8014fe2:	fb0c fc07 	mul.w	ip, ip, r7
 8014fe6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8014fea:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8014fee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014ff2:	445c      	add	r4, fp
 8014ff4:	fb08 f505 	mul.w	r5, r8, r5
 8014ff8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014ffc:	fb08 f802 	mul.w	r8, r8, r2
 8015000:	0a24      	lsrs	r4, r4, #8
 8015002:	0a2a      	lsrs	r2, r5, #8
 8015004:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8015008:	fb07 f70a 	mul.w	r7, r7, sl
 801500c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015010:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015014:	4415      	add	r5, r2
 8015016:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801501a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801501e:	9a00      	ldr	r2, [sp, #0]
 8015020:	0a2d      	lsrs	r5, r5, #8
 8015022:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8015026:	fb03 cc02 	mla	ip, r3, r2, ip
 801502a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801502e:	fb02 7306 	mla	r3, r2, r6, r7
 8015032:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8015036:	9a01      	ldr	r2, [sp, #4]
 8015038:	fb05 c50e 	mla	r5, r5, lr, ip
 801503c:	fb0e 3e08 	mla	lr, lr, r8, r3
 8015040:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8015044:	fb04 5400 	mla	r4, r4, r0, r5
 8015048:	fb00 e303 	mla	r3, r0, r3, lr
 801504c:	0a24      	lsrs	r4, r4, #8
 801504e:	0a1b      	lsrs	r3, r3, #8
 8015050:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015054:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015058:	431c      	orrs	r4, r3
 801505a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801505e:	b29b      	uxth	r3, r3
 8015060:	b2e0      	uxtb	r0, r4
 8015062:	435a      	muls	r2, r3
 8015064:	fb10 f003 	smulbb	r0, r0, r3
 8015068:	1c55      	adds	r5, r2, #1
 801506a:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801506e:	780a      	ldrb	r2, [r1, #0]
 8015070:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8015074:	b2ed      	uxtb	r5, r5
 8015076:	fb02 0205 	mla	r2, r2, r5, r0
 801507a:	b292      	uxth	r2, r2
 801507c:	1c50      	adds	r0, r2, #1
 801507e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015082:	7848      	ldrb	r0, [r1, #1]
 8015084:	fb10 f005 	smulbb	r0, r0, r5
 8015088:	1212      	asrs	r2, r2, #8
 801508a:	700a      	strb	r2, [r1, #0]
 801508c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8015090:	0c24      	lsrs	r4, r4, #16
 8015092:	fb02 0203 	mla	r2, r2, r3, r0
 8015096:	b292      	uxth	r2, r2
 8015098:	1c50      	adds	r0, r2, #1
 801509a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801509e:	1212      	asrs	r2, r2, #8
 80150a0:	704a      	strb	r2, [r1, #1]
 80150a2:	788a      	ldrb	r2, [r1, #2]
 80150a4:	fb12 f505 	smulbb	r5, r2, r5
 80150a8:	fb04 5303 	mla	r3, r4, r3, r5
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80150b4:	121b      	asrs	r3, r3, #8
 80150b6:	708b      	strb	r3, [r1, #2]
 80150b8:	b003      	add	sp, #12
 80150ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150be:	bf00      	nop
 80150c0:	0801ce72 	.word	0x0801ce72
 80150c4:	0801d286 	.word	0x0801d286
 80150c8:	0801ce3f 	.word	0x0801ce3f

080150cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80150cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d0:	ed2d 8b08 	vpush	{d8-d11}
 80150d4:	b09f      	sub	sp, #124	; 0x7c
 80150d6:	eeb0 aa40 	vmov.f32	s20, s0
 80150da:	eef0 9a60 	vmov.f32	s19, s1
 80150de:	921b      	str	r2, [sp, #108]	; 0x6c
 80150e0:	eeb0 9a41 	vmov.f32	s18, s2
 80150e4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80150e6:	eeb0 8a62 	vmov.f32	s16, s5
 80150ea:	9309      	str	r3, [sp, #36]	; 0x24
 80150ec:	eef0 8a43 	vmov.f32	s17, s6
 80150f0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80150f4:	eef0 ba44 	vmov.f32	s23, s8
 80150f8:	901d      	str	r0, [sp, #116]	; 0x74
 80150fa:	eeb0 ba64 	vmov.f32	s22, s9
 80150fe:	931c      	str	r3, [sp, #112]	; 0x70
 8015100:	eef0 aa45 	vmov.f32	s21, s10
 8015104:	6850      	ldr	r0, [r2, #4]
 8015106:	9119      	str	r1, [sp, #100]	; 0x64
 8015108:	6812      	ldr	r2, [r2, #0]
 801510a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 801510c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8015110:	fb00 1303 	mla	r3, r0, r3, r1
 8015114:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015118:	18d3      	adds	r3, r2, r3
 801511a:	930c      	str	r3, [sp, #48]	; 0x30
 801511c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	9312      	str	r3, [sp, #72]	; 0x48
 8015122:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015124:	685e      	ldr	r6, [r3, #4]
 8015126:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801512a:	3604      	adds	r6, #4
 801512c:	930d      	str	r3, [sp, #52]	; 0x34
 801512e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015130:	2b00      	cmp	r3, #0
 8015132:	dc03      	bgt.n	801513c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015136:	2b00      	cmp	r3, #0
 8015138:	f340 8378 	ble.w	801582c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801513c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801513e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015142:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015146:	1e48      	subs	r0, r1, #1
 8015148:	1e57      	subs	r7, r2, #1
 801514a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801514c:	2b00      	cmp	r3, #0
 801514e:	f340 818c 	ble.w	801546a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8015152:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015154:	142b      	asrs	r3, r5, #16
 8015156:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801515a:	d406      	bmi.n	801516a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801515c:	4584      	cmp	ip, r0
 801515e:	da04      	bge.n	801516a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015160:	2b00      	cmp	r3, #0
 8015162:	db02      	blt.n	801516a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015164:	42bb      	cmp	r3, r7
 8015166:	f2c0 8181 	blt.w	801546c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 801516a:	f11c 0c01 	adds.w	ip, ip, #1
 801516e:	f100 816f 	bmi.w	8015450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015172:	4561      	cmp	r1, ip
 8015174:	f2c0 816c 	blt.w	8015450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015178:	3301      	adds	r3, #1
 801517a:	f100 8169 	bmi.w	8015450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801517e:	429a      	cmp	r2, r3
 8015180:	f2c0 8166 	blt.w	8015450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8015184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015186:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015188:	931a      	str	r3, [sp, #104]	; 0x68
 801518a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801518c:	2b00      	cmp	r3, #0
 801518e:	f340 818c 	ble.w	80154aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8015192:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015194:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8015198:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801519c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80151a0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80151a2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80151a6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80151a8:	141b      	asrs	r3, r3, #16
 80151aa:	f100 81d0 	bmi.w	801554e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80151ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80151b2:	4543      	cmp	r3, r8
 80151b4:	f280 81cb 	bge.w	801554e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80151b8:	f1bc 0f00 	cmp.w	ip, #0
 80151bc:	f2c0 81c7 	blt.w	801554e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80151c0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80151c4:	45c4      	cmp	ip, r8
 80151c6:	f280 81c2 	bge.w	801554e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80151ca:	b200      	sxth	r0, r0
 80151cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80151ce:	fb0c 3300 	mla	r3, ip, r0, r3
 80151d2:	eb04 0803 	add.w	r8, r4, r3
 80151d6:	5ce3      	ldrb	r3, [r4, r3]
 80151d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80151dc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80151e0:	2a00      	cmp	r2, #0
 80151e2:	f000 81a9 	beq.w	8015538 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 80151e6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80151ea:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80151ee:	940e      	str	r4, [sp, #56]	; 0x38
 80151f0:	0e24      	lsrs	r4, r4, #24
 80151f2:	9415      	str	r4, [sp, #84]	; 0x54
 80151f4:	b179      	cbz	r1, 8015216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80151f6:	eb08 0c00 	add.w	ip, r8, r0
 80151fa:	f818 0000 	ldrb.w	r0, [r8, r0]
 80151fe:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015202:	900a      	str	r0, [sp, #40]	; 0x28
 8015204:	0e00      	lsrs	r0, r0, #24
 8015206:	9013      	str	r0, [sp, #76]	; 0x4c
 8015208:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801520c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015210:	900f      	str	r0, [sp, #60]	; 0x3c
 8015212:	0e00      	lsrs	r0, r0, #24
 8015214:	9016      	str	r0, [sp, #88]	; 0x58
 8015216:	b292      	uxth	r2, r2
 8015218:	9815      	ldr	r0, [sp, #84]	; 0x54
 801521a:	b289      	uxth	r1, r1
 801521c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801521e:	fb02 f901 	mul.w	r9, r2, r1
 8015222:	0112      	lsls	r2, r2, #4
 8015224:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8015228:	eba2 0809 	sub.w	r8, r2, r9
 801522c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015230:	b289      	uxth	r1, r1
 8015232:	fa1f f888 	uxth.w	r8, r8
 8015236:	1a52      	subs	r2, r2, r1
 8015238:	fb08 f000 	mul.w	r0, r8, r0
 801523c:	b292      	uxth	r2, r2
 801523e:	fb02 000e 	mla	r0, r2, lr, r0
 8015242:	fb01 0004 	mla	r0, r1, r4, r0
 8015246:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015248:	fb09 0004 	mla	r0, r9, r4, r0
 801524c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015250:	2800      	cmp	r0, #0
 8015252:	f000 80f2 	beq.w	801543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015256:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801525a:	d01b      	beq.n	8015294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801525c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015264:	fb0e fa0a 	mul.w	sl, lr, sl
 8015268:	fb0e fe03 	mul.w	lr, lr, r3
 801526c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015270:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015274:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015278:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801527c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015280:	4453      	add	r3, sl
 8015282:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015286:	0a1b      	lsrs	r3, r3, #8
 8015288:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801528c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015290:	ea43 030c 	orr.w	r3, r3, ip
 8015294:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015296:	2cff      	cmp	r4, #255	; 0xff
 8015298:	d021      	beq.n	80152de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801529a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801529c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80152a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80152a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80152a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80152a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80152ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80152ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80152b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80152b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80152ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80152be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80152c2:	44de      	add	lr, fp
 80152c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80152c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80152cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80152d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80152d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80152d8:	ea4e 040a 	orr.w	r4, lr, sl
 80152dc:	940e      	str	r4, [sp, #56]	; 0x38
 80152de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80152e0:	2cff      	cmp	r4, #255	; 0xff
 80152e2:	d021      	beq.n	8015328 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80152e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80152e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80152ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80152ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80152f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80152f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80152f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80152f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80152fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015300:	fb04 fa0a 	mul.w	sl, r4, sl
 8015304:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015308:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801530c:	44de      	add	lr, fp
 801530e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015312:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015316:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801531a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801531e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015322:	ea4e 040a 	orr.w	r4, lr, sl
 8015326:	940a      	str	r4, [sp, #40]	; 0x28
 8015328:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801532a:	2cff      	cmp	r4, #255	; 0xff
 801532c:	d021      	beq.n	8015372 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801532e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015330:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015334:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015336:	fb04 fb0b 	mul.w	fp, r4, fp
 801533a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801533c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015340:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8015342:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015346:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801534a:	fb04 fa0a 	mul.w	sl, r4, sl
 801534e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015352:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015356:	44de      	add	lr, fp
 8015358:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801535c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015360:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015364:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015368:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801536c:	ea4e 040a 	orr.w	r4, lr, sl
 8015370:	940f      	str	r4, [sp, #60]	; 0x3c
 8015372:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015374:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8015378:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801537c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015382:	fb08 fc0c 	mul.w	ip, r8, ip
 8015386:	fb02 cc0e 	mla	ip, r2, lr, ip
 801538a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801538e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015390:	fb01 cc0e 	mla	ip, r1, lr, ip
 8015394:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015398:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801539a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801539e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80153a2:	fb08 f80e 	mul.w	r8, r8, lr
 80153a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80153aa:	fb02 8303 	mla	r3, r2, r3, r8
 80153ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80153b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80153b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153ba:	fb01 330a 	mla	r3, r1, sl, r3
 80153be:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80153c2:	fb09 3901 	mla	r9, r9, r1, r3
 80153c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80153ca:	4343      	muls	r3, r0
 80153cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80153d0:	1c58      	adds	r0, r3, #1
 80153d2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80153d6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80153da:	ea4c 0c09 	orr.w	ip, ip, r9
 80153de:	783b      	ldrb	r3, [r7, #0]
 80153e0:	fa5f f28c 	uxtb.w	r2, ip
 80153e4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80153e8:	fb12 f201 	smulbb	r2, r2, r1
 80153ec:	b2c0      	uxtb	r0, r0
 80153ee:	fb03 2300 	mla	r3, r3, r0, r2
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	1c5a      	adds	r2, r3, #1
 80153f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80153fa:	787a      	ldrb	r2, [r7, #1]
 80153fc:	fb12 f200 	smulbb	r2, r2, r0
 8015400:	121b      	asrs	r3, r3, #8
 8015402:	703b      	strb	r3, [r7, #0]
 8015404:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8015408:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801540c:	fb03 2301 	mla	r3, r3, r1, r2
 8015410:	b29b      	uxth	r3, r3
 8015412:	1c5a      	adds	r2, r3, #1
 8015414:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015418:	121b      	asrs	r3, r3, #8
 801541a:	707b      	strb	r3, [r7, #1]
 801541c:	78bb      	ldrb	r3, [r7, #2]
 801541e:	fb13 f000 	smulbb	r0, r3, r0
 8015422:	fb0c 0c01 	mla	ip, ip, r1, r0
 8015426:	fa1f fc8c 	uxth.w	ip, ip
 801542a:	f10c 0301 	add.w	r3, ip, #1
 801542e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8015432:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8015436:	f887 c002 	strb.w	ip, [r7, #2]
 801543a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801543c:	3703      	adds	r7, #3
 801543e:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8015440:	441a      	add	r2, r3
 8015442:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015444:	441d      	add	r5, r3
 8015446:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015448:	9231      	str	r2, [sp, #196]	; 0xc4
 801544a:	3b01      	subs	r3, #1
 801544c:	931a      	str	r3, [sp, #104]	; 0x68
 801544e:	e69c      	b.n	801518a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8015450:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015452:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015454:	441c      	add	r4, r3
 8015456:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015458:	441d      	add	r5, r3
 801545a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801545c:	9431      	str	r4, [sp, #196]	; 0xc4
 801545e:	3b01      	subs	r3, #1
 8015460:	9309      	str	r3, [sp, #36]	; 0x24
 8015462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015464:	3303      	adds	r3, #3
 8015466:	930c      	str	r3, [sp, #48]	; 0x30
 8015468:	e66f      	b.n	801514a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801546a:	d026      	beq.n	80154ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801546e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8015470:	3b01      	subs	r3, #1
 8015472:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015474:	fb00 4003 	mla	r0, r0, r3, r4
 8015478:	1400      	asrs	r0, r0, #16
 801547a:	f53f ae83 	bmi.w	8015184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801547e:	3901      	subs	r1, #1
 8015480:	4288      	cmp	r0, r1
 8015482:	f6bf ae7f 	bge.w	8015184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015486:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8015488:	fb01 5303 	mla	r3, r1, r3, r5
 801548c:	141b      	asrs	r3, r3, #16
 801548e:	f53f ae79 	bmi.w	8015184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8015492:	3a01      	subs	r2, #1
 8015494:	4293      	cmp	r3, r2
 8015496:	f6bf ae75 	bge.w	8015184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801549a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801549c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80154a0:	f103 0e03 	add.w	lr, r3, #3
 80154a4:	f1bb 0f00 	cmp.w	fp, #0
 80154a8:	dc71      	bgt.n	801558e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80154aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80154b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80154b6:	4423      	add	r3, r4
 80154b8:	930c      	str	r3, [sp, #48]	; 0x30
 80154ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f340 81b5 	ble.w	801582c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80154c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80154c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80154c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80154cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80154d0:	eef0 6a48 	vmov.f32	s13, s16
 80154d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80154d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80154dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80154e0:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80154e4:	eef0 6a68 	vmov.f32	s13, s17
 80154e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80154ec:	ee16 5a90 	vmov	r5, s13
 80154f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80154f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80154f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80154fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015500:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015504:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015508:	ee18 2a10 	vmov	r2, s16
 801550c:	eeb0 8a47 	vmov.f32	s16, s14
 8015510:	fb92 f3f3 	sdiv	r3, r2, r3
 8015514:	ee18 2a90 	vmov	r2, s17
 8015518:	9333      	str	r3, [sp, #204]	; 0xcc
 801551a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801551c:	eef0 8a67 	vmov.f32	s17, s15
 8015520:	fb92 f3f3 	sdiv	r3, r2, r3
 8015524:	9334      	str	r3, [sp, #208]	; 0xd0
 8015526:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015528:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801552a:	3b01      	subs	r3, #1
 801552c:	9319      	str	r3, [sp, #100]	; 0x64
 801552e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015530:	bf08      	it	eq
 8015532:	4613      	moveq	r3, r2
 8015534:	9309      	str	r3, [sp, #36]	; 0x24
 8015536:	e5fa      	b.n	801512e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8015538:	2900      	cmp	r1, #0
 801553a:	f43f ae6c 	beq.w	8015216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801553e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8015542:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015546:	900a      	str	r0, [sp, #40]	; 0x28
 8015548:	0e00      	lsrs	r0, r0, #24
 801554a:	9013      	str	r0, [sp, #76]	; 0x4c
 801554c:	e663      	b.n	8015216 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801554e:	f113 0801 	adds.w	r8, r3, #1
 8015552:	f53f af72 	bmi.w	801543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015556:	4540      	cmp	r0, r8
 8015558:	f6ff af6f 	blt.w	801543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801555c:	f11c 0801 	adds.w	r8, ip, #1
 8015560:	f53f af6b 	bmi.w	801543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015564:	45c6      	cmp	lr, r8
 8015566:	f6ff af68 	blt.w	801543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801556a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801556c:	b200      	sxth	r0, r0
 801556e:	9302      	str	r3, [sp, #8]
 8015570:	fa0f f38e 	sxth.w	r3, lr
 8015574:	9000      	str	r0, [sp, #0]
 8015576:	9301      	str	r3, [sp, #4]
 8015578:	4633      	mov	r3, r6
 801557a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801557c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8015580:	e9cd c203 	strd	ip, r2, [sp, #12]
 8015584:	4639      	mov	r1, r7
 8015586:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015588:	f7ff fc60 	bl	8014e4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801558c:	e755      	b.n	801543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801558e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015590:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015594:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8015596:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801559a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801559c:	1427      	asrs	r7, r4, #16
 801559e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80155a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80155a4:	142b      	asrs	r3, r5, #16
 80155a6:	fb01 7303 	mla	r3, r1, r3, r7
 80155aa:	18e7      	adds	r7, r4, r3
 80155ac:	5ce3      	ldrb	r3, [r4, r3]
 80155ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80155b2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80155b6:	2a00      	cmp	r2, #0
 80155b8:	f000 812e 	beq.w	8015818 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80155bc:	f897 8001 	ldrb.w	r8, [r7, #1]
 80155c0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80155c4:	9410      	str	r4, [sp, #64]	; 0x40
 80155c6:	0e24      	lsrs	r4, r4, #24
 80155c8:	9417      	str	r4, [sp, #92]	; 0x5c
 80155ca:	b170      	cbz	r0, 80155ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80155cc:	eb07 0801 	add.w	r8, r7, r1
 80155d0:	5c79      	ldrb	r1, [r7, r1]
 80155d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80155d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80155d8:	0e09      	lsrs	r1, r1, #24
 80155da:	9114      	str	r1, [sp, #80]	; 0x50
 80155dc:	f898 1001 	ldrb.w	r1, [r8, #1]
 80155e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80155e4:	9111      	str	r1, [sp, #68]	; 0x44
 80155e6:	0e09      	lsrs	r1, r1, #24
 80155e8:	9118      	str	r1, [sp, #96]	; 0x60
 80155ea:	b292      	uxth	r2, r2
 80155ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80155ee:	b280      	uxth	r0, r0
 80155f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80155f2:	fb02 f900 	mul.w	r9, r2, r0
 80155f6:	0112      	lsls	r2, r2, #4
 80155f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80155fc:	eba2 0809 	sub.w	r8, r2, r9
 8015600:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015604:	b280      	uxth	r0, r0
 8015606:	fa1f f888 	uxth.w	r8, r8
 801560a:	1a12      	subs	r2, r2, r0
 801560c:	fb08 f101 	mul.w	r1, r8, r1
 8015610:	b292      	uxth	r2, r2
 8015612:	fb02 110c 	mla	r1, r2, ip, r1
 8015616:	fb00 1104 	mla	r1, r0, r4, r1
 801561a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801561c:	fb09 1104 	mla	r1, r9, r4, r1
 8015620:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015624:	2900      	cmp	r1, #0
 8015626:	f000 80ec 	beq.w	8015802 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801562a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801562e:	d019      	beq.n	8015664 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8015630:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015638:	fb0c fa0a 	mul.w	sl, ip, sl
 801563c:	fb0c fc03 	mul.w	ip, ip, r3
 8015640:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015644:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015648:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801564c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015650:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8015654:	4453      	add	r3, sl
 8015656:	0a3f      	lsrs	r7, r7, #8
 8015658:	0a1b      	lsrs	r3, r3, #8
 801565a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801565e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015662:	433b      	orrs	r3, r7
 8015664:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015666:	2cff      	cmp	r4, #255	; 0xff
 8015668:	d020      	beq.n	80156ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801566a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801566c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015670:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015672:	4367      	muls	r7, r4
 8015674:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015676:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801567a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801567e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015680:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015684:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015688:	fb04 fa0a 	mul.w	sl, r4, sl
 801568c:	44bc      	add	ip, r7
 801568e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015692:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015696:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801569a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801569e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80156a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80156a6:	ea4c 040a 	orr.w	r4, ip, sl
 80156aa:	9410      	str	r4, [sp, #64]	; 0x40
 80156ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80156ae:	2cff      	cmp	r4, #255	; 0xff
 80156b0:	d020      	beq.n	80156f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80156b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80156b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80156b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80156ba:	4367      	muls	r7, r4
 80156bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80156be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80156c2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80156c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80156c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80156cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80156d0:	fb04 fa0a 	mul.w	sl, r4, sl
 80156d4:	44bc      	add	ip, r7
 80156d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80156da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80156de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80156e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80156e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80156ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80156ee:	ea4c 040a 	orr.w	r4, ip, sl
 80156f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80156f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80156f6:	2cff      	cmp	r4, #255	; 0xff
 80156f8:	d020      	beq.n	801573c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80156fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80156fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015700:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015702:	4367      	muls	r7, r4
 8015704:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015706:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801570a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801570e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015710:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015714:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015718:	fb04 fa0a 	mul.w	sl, r4, sl
 801571c:	44bc      	add	ip, r7
 801571e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015722:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015726:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801572a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801572e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015732:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015736:	ea4c 040a 	orr.w	r4, ip, sl
 801573a:	9411      	str	r4, [sp, #68]	; 0x44
 801573c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801573e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8015742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015746:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801574a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801574c:	fb08 f707 	mul.w	r7, r8, r7
 8015750:	fb02 770c 	mla	r7, r2, ip, r7
 8015754:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015758:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801575a:	fb00 770c 	mla	r7, r0, ip, r7
 801575e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015762:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015764:	fb09 770c 	mla	r7, r9, ip, r7
 8015768:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801576c:	fb08 f80c 	mul.w	r8, r8, ip
 8015770:	0a3f      	lsrs	r7, r7, #8
 8015772:	fb02 8303 	mla	r3, r2, r3, r8
 8015776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015778:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801577c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015780:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015782:	fb00 330a 	mla	r3, r0, sl, r3
 8015786:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801578a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801578c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8015790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015792:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015796:	434b      	muls	r3, r1
 8015798:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801579c:	1c59      	adds	r1, r3, #1
 801579e:	ea47 070c 	orr.w	r7, r7, ip
 80157a2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80157a6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80157aa:	b2fa      	uxtb	r2, r7
 80157ac:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80157b0:	fb12 f200 	smulbb	r2, r2, r0
 80157b4:	b2c9      	uxtb	r1, r1
 80157b6:	fb03 2301 	mla	r3, r3, r1, r2
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	1c5a      	adds	r2, r3, #1
 80157be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80157c2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80157c6:	fb12 f201 	smulbb	r2, r2, r1
 80157ca:	121b      	asrs	r3, r3, #8
 80157cc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80157d0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80157d4:	0c3f      	lsrs	r7, r7, #16
 80157d6:	fb03 2300 	mla	r3, r3, r0, r2
 80157da:	b29b      	uxth	r3, r3
 80157dc:	1c5a      	adds	r2, r3, #1
 80157de:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80157e2:	121b      	asrs	r3, r3, #8
 80157e4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80157e8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80157ec:	fb13 f101 	smulbb	r1, r3, r1
 80157f0:	fb07 1700 	mla	r7, r7, r0, r1
 80157f4:	b2bf      	uxth	r7, r7
 80157f6:	1c7b      	adds	r3, r7, #1
 80157f8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80157fc:	123f      	asrs	r7, r7, #8
 80157fe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8015802:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015804:	f10e 0e03 	add.w	lr, lr, #3
 8015808:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801580a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801580e:	441a      	add	r2, r3
 8015810:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8015812:	9231      	str	r2, [sp, #196]	; 0xc4
 8015814:	441d      	add	r5, r3
 8015816:	e645      	b.n	80154a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8015818:	2800      	cmp	r0, #0
 801581a:	f43f aee6 	beq.w	80155ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801581e:	5c79      	ldrb	r1, [r7, r1]
 8015820:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015824:	910b      	str	r1, [sp, #44]	; 0x2c
 8015826:	0e09      	lsrs	r1, r1, #24
 8015828:	9114      	str	r1, [sp, #80]	; 0x50
 801582a:	e6de      	b.n	80155ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801582c:	b01f      	add	sp, #124	; 0x7c
 801582e:	ecbd 8b08 	vpop	{d8-d11}
 8015832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015838 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8015838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8015840:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8015844:	2c00      	cmp	r4, #0
 8015846:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801584a:	fb04 060c 	mla	r6, r4, ip, r0
 801584e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8015852:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8015856:	eb02 0e06 	add.w	lr, r2, r6
 801585a:	db3d      	blt.n	80158d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801585c:	45a0      	cmp	r8, r4
 801585e:	dd3b      	ble.n	80158d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8015860:	2800      	cmp	r0, #0
 8015862:	db37      	blt.n	80158d4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8015864:	4584      	cmp	ip, r0
 8015866:	dd35      	ble.n	80158d4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8015868:	5d92      	ldrb	r2, [r2, r6]
 801586a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801586e:	1c46      	adds	r6, r0, #1
 8015870:	d435      	bmi.n	80158de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8015872:	45b4      	cmp	ip, r6
 8015874:	dd33      	ble.n	80158de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8015876:	b3a5      	cbz	r5, 80158e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8015878:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801587c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8015880:	3401      	adds	r4, #1
 8015882:	d432      	bmi.n	80158ea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8015884:	45a0      	cmp	r8, r4
 8015886:	dd30      	ble.n	80158ea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8015888:	b397      	cbz	r7, 80158f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801588a:	2800      	cmp	r0, #0
 801588c:	db2b      	blt.n	80158e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801588e:	4584      	cmp	ip, r0
 8015890:	dd29      	ble.n	80158e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8015892:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8015896:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801589a:	3001      	adds	r0, #1
 801589c:	d42b      	bmi.n	80158f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801589e:	4584      	cmp	ip, r0
 80158a0:	dd29      	ble.n	80158f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80158a2:	b355      	cbz	r5, 80158fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80158a4:	44f4      	add	ip, lr
 80158a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80158aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80158ae:	2d0f      	cmp	r5, #15
 80158b0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80158b4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80158b8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80158bc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80158c0:	d801      	bhi.n	80158c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 80158c2:	2f0f      	cmp	r7, #15
 80158c4:	d91b      	bls.n	80158fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 80158c6:	4b7f      	ldr	r3, [pc, #508]	; (8015ac4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 80158c8:	f240 115b 	movw	r1, #347	; 0x15b
 80158cc:	4a7e      	ldr	r2, [pc, #504]	; (8015ac8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 80158ce:	487f      	ldr	r0, [pc, #508]	; (8015acc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 80158d0:	f003 fc34 	bl	801913c <__assert_func>
 80158d4:	2200      	movs	r2, #0
 80158d6:	e7ca      	b.n	801586e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 80158d8:	2600      	movs	r6, #0
 80158da:	4632      	mov	r2, r6
 80158dc:	e7d0      	b.n	8015880 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 80158de:	2600      	movs	r6, #0
 80158e0:	e7ce      	b.n	8015880 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 80158e2:	462e      	mov	r6, r5
 80158e4:	e7cc      	b.n	8015880 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 80158e6:	2400      	movs	r4, #0
 80158e8:	e7d7      	b.n	801589a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 80158ea:	2300      	movs	r3, #0
 80158ec:	461c      	mov	r4, r3
 80158ee:	e7de      	b.n	80158ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80158f0:	463b      	mov	r3, r7
 80158f2:	463c      	mov	r4, r7
 80158f4:	e7db      	b.n	80158ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80158f6:	2300      	movs	r3, #0
 80158f8:	e7d9      	b.n	80158ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80158fa:	462b      	mov	r3, r5
 80158fc:	e7d7      	b.n	80158ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80158fe:	b2a8      	uxth	r0, r5
 8015900:	b2bf      	uxth	r7, r7
 8015902:	fb07 fe00 	mul.w	lr, r7, r0
 8015906:	0100      	lsls	r0, r0, #4
 8015908:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801590c:	eba0 0c0e 	sub.w	ip, r0, lr
 8015910:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8015914:	b2bf      	uxth	r7, r7
 8015916:	fa1f fc8c 	uxth.w	ip, ip
 801591a:	1bc5      	subs	r5, r0, r7
 801591c:	fb0c f00a 	mul.w	r0, ip, sl
 8015920:	b2ad      	uxth	r5, r5
 8015922:	fb05 000b 	mla	r0, r5, fp, r0
 8015926:	fb07 0009 	mla	r0, r7, r9, r0
 801592a:	fb0e 0008 	mla	r0, lr, r8, r0
 801592e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015932:	9001      	str	r0, [sp, #4]
 8015934:	2800      	cmp	r0, #0
 8015936:	f000 80c2 	beq.w	8015abe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 801593a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801593e:	d018      	beq.n	8015972 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8015940:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8015944:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015948:	fb0b f000 	mul.w	r0, fp, r0
 801594c:	fb0b fb02 	mul.w	fp, fp, r2
 8015950:	0a02      	lsrs	r2, r0, #8
 8015952:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8015956:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801595a:	4402      	add	r2, r0
 801595c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8015960:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8015964:	0a12      	lsrs	r2, r2, #8
 8015966:	0a00      	lsrs	r0, r0, #8
 8015968:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801596c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8015970:	4302      	orrs	r2, r0
 8015972:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015976:	d01a      	beq.n	80159ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8015978:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801597c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015980:	fb0a f000 	mul.w	r0, sl, r0
 8015984:	fb0a fa06 	mul.w	sl, sl, r6
 8015988:	0a06      	lsrs	r6, r0, #8
 801598a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801598e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8015992:	4406      	add	r6, r0
 8015994:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8015998:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801599c:	0a36      	lsrs	r6, r6, #8
 801599e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80159a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80159a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80159aa:	ea46 060a 	orr.w	r6, r6, sl
 80159ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80159b2:	d01b      	beq.n	80159ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80159b4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80159b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80159bc:	fb09 fa0a 	mul.w	sl, r9, sl
 80159c0:	fb09 f004 	mul.w	r0, r9, r4
 80159c4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80159c8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80159cc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80159d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80159d4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80159d8:	4454      	add	r4, sl
 80159da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80159de:	0a24      	lsrs	r4, r4, #8
 80159e0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80159e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80159e8:	ea44 0409 	orr.w	r4, r4, r9
 80159ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80159f0:	d01b      	beq.n	8015a2a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 80159f2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80159f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80159fa:	fb08 f909 	mul.w	r9, r8, r9
 80159fe:	fb08 f003 	mul.w	r0, r8, r3
 8015a02:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8015a06:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8015a0a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8015a0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015a12:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8015a16:	444b      	add	r3, r9
 8015a18:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8015a1c:	0a1b      	lsrs	r3, r3, #8
 8015a1e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8015a22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015a26:	ea43 0308 	orr.w	r3, r3, r8
 8015a2a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8015a2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8015a32:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8015a36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015a3a:	fb0c f000 	mul.w	r0, ip, r0
 8015a3e:	fb0c f606 	mul.w	r6, ip, r6
 8015a42:	fb05 0808 	mla	r8, r5, r8, r0
 8015a46:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8015a4a:	fb05 6502 	mla	r5, r5, r2, r6
 8015a4e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8015a52:	fb07 8800 	mla	r8, r7, r0, r8
 8015a56:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8015a5a:	fb07 5704 	mla	r7, r7, r4, r5
 8015a5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015a62:	fb0e 8000 	mla	r0, lr, r0, r8
 8015a66:	780a      	ldrb	r2, [r1, #0]
 8015a68:	fb0e 7e03 	mla	lr, lr, r3, r7
 8015a6c:	9b01      	ldr	r3, [sp, #4]
 8015a6e:	0a00      	lsrs	r0, r0, #8
 8015a70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015a74:	43db      	mvns	r3, r3
 8015a76:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8015a80:	ea40 0e0e 	orr.w	lr, r0, lr
 8015a84:	fb02 f003 	mul.w	r0, r2, r3
 8015a88:	1c42      	adds	r2, r0, #1
 8015a8a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8015a8e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8015a92:	700a      	strb	r2, [r1, #0]
 8015a94:	784a      	ldrb	r2, [r1, #1]
 8015a96:	435a      	muls	r2, r3
 8015a98:	1c50      	adds	r0, r2, #1
 8015a9a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8015a9e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8015aa2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8015aa6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8015aaa:	704a      	strb	r2, [r1, #1]
 8015aac:	788a      	ldrb	r2, [r1, #2]
 8015aae:	4353      	muls	r3, r2
 8015ab0:	1c5a      	adds	r2, r3, #1
 8015ab2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015ab6:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8015aba:	f881 e002 	strb.w	lr, [r1, #2]
 8015abe:	b003      	add	sp, #12
 8015ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac4:	0801ce72 	.word	0x0801ce72
 8015ac8:	0801d286 	.word	0x0801d286
 8015acc:	0801ce3f 	.word	0x0801ce3f

08015ad0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad4:	ed2d 8b0a 	vpush	{d8-d12}
 8015ad8:	b09b      	sub	sp, #108	; 0x6c
 8015ada:	eeb0 aa40 	vmov.f32	s20, s0
 8015ade:	eef0 9a60 	vmov.f32	s19, s1
 8015ae2:	9218      	str	r2, [sp, #96]	; 0x60
 8015ae4:	eeb0 9a41 	vmov.f32	s18, s2
 8015ae8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8015aea:	eeb0 8a62 	vmov.f32	s16, s5
 8015aee:	9019      	str	r0, [sp, #100]	; 0x64
 8015af0:	eef0 8a43 	vmov.f32	s17, s6
 8015af4:	6850      	ldr	r0, [r2, #4]
 8015af6:	eeb0 ca44 	vmov.f32	s24, s8
 8015afa:	9116      	str	r1, [sp, #88]	; 0x58
 8015afc:	eef0 ba64 	vmov.f32	s23, s9
 8015b00:	9307      	str	r3, [sp, #28]
 8015b02:	eeb0 ba45 	vmov.f32	s22, s10
 8015b06:	6812      	ldr	r2, [r2, #0]
 8015b08:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8015b0c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8015b0e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8015b12:	fb00 1303 	mla	r3, r0, r3, r1
 8015b16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015b1a:	18d3      	adds	r3, r2, r3
 8015b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8015b1e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b24:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015b26:	685e      	ldr	r6, [r3, #4]
 8015b28:	3604      	adds	r6, #4
 8015b2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	dc03      	bgt.n	8015b38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015b30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	f340 834f 	ble.w	80161d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8015b38:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015b3a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015b3e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015b42:	1e48      	subs	r0, r1, #1
 8015b44:	1e57      	subs	r7, r2, #1
 8015b46:	9b07      	ldr	r3, [sp, #28]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f340 8178 	ble.w	8015e3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015b4e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015b50:	142b      	asrs	r3, r5, #16
 8015b52:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8015b56:	d406      	bmi.n	8015b66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015b58:	4584      	cmp	ip, r0
 8015b5a:	da04      	bge.n	8015b66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	db02      	blt.n	8015b66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015b60:	42bb      	cmp	r3, r7
 8015b62:	f2c0 816d 	blt.w	8015e40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8015b66:	f11c 0c01 	adds.w	ip, ip, #1
 8015b6a:	f100 815b 	bmi.w	8015e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8015b6e:	4561      	cmp	r1, ip
 8015b70:	f2c0 8158 	blt.w	8015e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8015b74:	3301      	adds	r3, #1
 8015b76:	f100 8155 	bmi.w	8015e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	f2c0 8152 	blt.w	8015e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8015b80:	9b07      	ldr	r3, [sp, #28]
 8015b82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015b84:	9317      	str	r3, [sp, #92]	; 0x5c
 8015b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f340 8178 	ble.w	8015e7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8015b8e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015b90:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8015b94:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015b98:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015b9c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015b9e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8015ba2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015ba4:	141b      	asrs	r3, r3, #16
 8015ba6:	f100 81ba 	bmi.w	8015f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8015baa:	f101 38ff 	add.w	r8, r1, #4294967295
 8015bae:	4543      	cmp	r3, r8
 8015bb0:	f280 81b5 	bge.w	8015f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8015bb4:	f1bc 0f00 	cmp.w	ip, #0
 8015bb8:	f2c0 81b1 	blt.w	8015f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8015bbc:	f10e 38ff 	add.w	r8, lr, #4294967295
 8015bc0:	45c4      	cmp	ip, r8
 8015bc2:	f280 81ac 	bge.w	8015f1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8015bc6:	b209      	sxth	r1, r1
 8015bc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015bca:	fb0c 3301 	mla	r3, ip, r1, r3
 8015bce:	eb04 0803 	add.w	r8, r4, r3
 8015bd2:	5ce3      	ldrb	r3, [r4, r3]
 8015bd4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015bd8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8015bdc:	2a00      	cmp	r2, #0
 8015bde:	f000 8193 	beq.w	8015f08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8015be2:	f898 c001 	ldrb.w	ip, [r8, #1]
 8015be6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8015bea:	940b      	str	r4, [sp, #44]	; 0x2c
 8015bec:	0e24      	lsrs	r4, r4, #24
 8015bee:	9412      	str	r4, [sp, #72]	; 0x48
 8015bf0:	b178      	cbz	r0, 8015c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015bf2:	eb08 0c01 	add.w	ip, r8, r1
 8015bf6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015bfa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015bfe:	9108      	str	r1, [sp, #32]
 8015c00:	0e09      	lsrs	r1, r1, #24
 8015c02:	9110      	str	r1, [sp, #64]	; 0x40
 8015c04:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8015c08:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015c0c:	910c      	str	r1, [sp, #48]	; 0x30
 8015c0e:	0e09      	lsrs	r1, r1, #24
 8015c10:	9113      	str	r1, [sp, #76]	; 0x4c
 8015c12:	b292      	uxth	r2, r2
 8015c14:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015c16:	b280      	uxth	r0, r0
 8015c18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015c1a:	fb02 f900 	mul.w	r9, r2, r0
 8015c1e:	0112      	lsls	r2, r2, #4
 8015c20:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8015c24:	eba2 0809 	sub.w	r8, r2, r9
 8015c28:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015c2c:	b280      	uxth	r0, r0
 8015c2e:	fa1f f888 	uxth.w	r8, r8
 8015c32:	1a12      	subs	r2, r2, r0
 8015c34:	fb08 f101 	mul.w	r1, r8, r1
 8015c38:	b292      	uxth	r2, r2
 8015c3a:	fb02 110e 	mla	r1, r2, lr, r1
 8015c3e:	fb00 1104 	mla	r1, r0, r4, r1
 8015c42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015c44:	fb09 1104 	mla	r1, r9, r4, r1
 8015c48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015c4c:	2900      	cmp	r1, #0
 8015c4e:	f000 80de 	beq.w	8015e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015c52:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015c56:	d01b      	beq.n	8015c90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015c58:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015c5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015c60:	fb0e fa0a 	mul.w	sl, lr, sl
 8015c64:	fb0e fe03 	mul.w	lr, lr, r3
 8015c68:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015c6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015c70:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8015c74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015c78:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8015c7c:	4453      	add	r3, sl
 8015c7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c82:	0a1b      	lsrs	r3, r3, #8
 8015c84:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015c88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015c8c:	ea43 030c 	orr.w	r3, r3, ip
 8015c90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015c92:	2cff      	cmp	r4, #255	; 0xff
 8015c94:	d021      	beq.n	8015cda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8015c96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015c98:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015c9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015c9e:	fb04 fb0b 	mul.w	fp, r4, fp
 8015ca2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015ca4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015ca8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015caa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015cae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015cb2:	fb04 fa0a 	mul.w	sl, r4, sl
 8015cb6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015cba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015cbe:	44de      	add	lr, fp
 8015cc0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015cc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015cc8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015ccc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015cd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015cd4:	ea4e 040a 	orr.w	r4, lr, sl
 8015cd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8015cda:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015cdc:	2cff      	cmp	r4, #255	; 0xff
 8015cde:	d021      	beq.n	8015d24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8015ce0:	9c08      	ldr	r4, [sp, #32]
 8015ce2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015ce6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015ce8:	fb04 fb0b 	mul.w	fp, r4, fp
 8015cec:	9c08      	ldr	r4, [sp, #32]
 8015cee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015cf2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015cf4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015cf8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015cfc:	fb04 fa0a 	mul.w	sl, r4, sl
 8015d00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015d04:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015d08:	44de      	add	lr, fp
 8015d0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015d0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015d12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015d16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015d1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015d1e:	ea4e 040a 	orr.w	r4, lr, sl
 8015d22:	9408      	str	r4, [sp, #32]
 8015d24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d26:	2cff      	cmp	r4, #255	; 0xff
 8015d28:	d021      	beq.n	8015d6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8015d2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d2c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015d30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d32:	fb04 fb0b 	mul.w	fp, r4, fp
 8015d36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015d3c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d3e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015d42:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015d46:	fb04 fa0a 	mul.w	sl, r4, sl
 8015d4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015d4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015d52:	44de      	add	lr, fp
 8015d54:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015d58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015d5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015d60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015d64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015d68:	ea4e 040a 	orr.w	r4, lr, sl
 8015d6c:	940c      	str	r4, [sp, #48]	; 0x30
 8015d6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015d70:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8015d74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015d78:	43c9      	mvns	r1, r1
 8015d7a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015d7e:	9c08      	ldr	r4, [sp, #32]
 8015d80:	b2c9      	uxtb	r1, r1
 8015d82:	fb08 fc0c 	mul.w	ip, r8, ip
 8015d86:	fb02 cc0e 	mla	ip, r2, lr, ip
 8015d8a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015d8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d90:	fb00 cc0e 	mla	ip, r0, lr, ip
 8015d94:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8015d98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015d9a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8015d9e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8015da2:	fb08 f80e 	mul.w	r8, r8, lr
 8015da6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015daa:	fb02 8303 	mla	r3, r2, r3, r8
 8015dae:	9a08      	ldr	r2, [sp, #32]
 8015db0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015db4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8015db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015dba:	fb00 330a 	mla	r3, r0, sl, r3
 8015dbe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8015dc2:	fb09 3900 	mla	r9, r9, r0, r3
 8015dc6:	783b      	ldrb	r3, [r7, #0]
 8015dc8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015dcc:	fb03 f201 	mul.w	r2, r3, r1
 8015dd0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8015dd4:	1c53      	adds	r3, r2, #1
 8015dd6:	ea4c 0c09 	orr.w	ip, ip, r9
 8015dda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015dde:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8015de2:	703b      	strb	r3, [r7, #0]
 8015de4:	787b      	ldrb	r3, [r7, #1]
 8015de6:	434b      	muls	r3, r1
 8015de8:	1c5a      	adds	r2, r3, #1
 8015dea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015dee:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8015df2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015df6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015dfa:	707b      	strb	r3, [r7, #1]
 8015dfc:	78bb      	ldrb	r3, [r7, #2]
 8015dfe:	4359      	muls	r1, r3
 8015e00:	1c4b      	adds	r3, r1, #1
 8015e02:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8015e06:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8015e0a:	f887 c002 	strb.w	ip, [r7, #2]
 8015e0e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015e10:	3703      	adds	r7, #3
 8015e12:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015e14:	441a      	add	r2, r3
 8015e16:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015e18:	441d      	add	r5, r3
 8015e1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e1c:	922f      	str	r2, [sp, #188]	; 0xbc
 8015e1e:	3b01      	subs	r3, #1
 8015e20:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e22:	e6b0      	b.n	8015b86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8015e24:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015e26:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015e28:	441c      	add	r4, r3
 8015e2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015e2c:	441d      	add	r5, r3
 8015e2e:	9b07      	ldr	r3, [sp, #28]
 8015e30:	942f      	str	r4, [sp, #188]	; 0xbc
 8015e32:	3b01      	subs	r3, #1
 8015e34:	9307      	str	r3, [sp, #28]
 8015e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e38:	3303      	adds	r3, #3
 8015e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8015e3c:	e683      	b.n	8015b46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015e3e:	d026      	beq.n	8015e8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8015e40:	9b07      	ldr	r3, [sp, #28]
 8015e42:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8015e44:	3b01      	subs	r3, #1
 8015e46:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015e48:	fb00 4003 	mla	r0, r0, r3, r4
 8015e4c:	1400      	asrs	r0, r0, #16
 8015e4e:	f53f ae97 	bmi.w	8015b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015e52:	3901      	subs	r1, #1
 8015e54:	4288      	cmp	r0, r1
 8015e56:	f6bf ae93 	bge.w	8015b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015e5a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8015e5c:	fb01 5303 	mla	r3, r1, r3, r5
 8015e60:	141b      	asrs	r3, r3, #16
 8015e62:	f53f ae8d 	bmi.w	8015b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015e66:	3a01      	subs	r2, #1
 8015e68:	4293      	cmp	r3, r2
 8015e6a:	f6bf ae89 	bge.w	8015b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e70:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8015e74:	f103 0e03 	add.w	lr, r3, #3
 8015e78:	f1bb 0f00 	cmp.w	fp, #0
 8015e7c:	dc6d      	bgt.n	8015f5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8015e7e:	9b07      	ldr	r3, [sp, #28]
 8015e80:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8015e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e8a:	4423      	add	r3, r4
 8015e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8015e8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f340 81a0 	ble.w	80161d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8015e96:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8015e9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015e9c:	ee79 9aab 	vadd.f32	s19, s19, s23
 8015ea0:	eef0 6a48 	vmov.f32	s13, s16
 8015ea4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8015ea8:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8015eac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015eb0:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8015eb4:	eef0 6a68 	vmov.f32	s13, s17
 8015eb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015ebc:	ee16 5a90 	vmov	r5, s13
 8015ec0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8015ec4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015ec8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8015ecc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015ed0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015ed4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015ed8:	ee18 2a10 	vmov	r2, s16
 8015edc:	eeb0 8a47 	vmov.f32	s16, s14
 8015ee0:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ee4:	ee18 2a90 	vmov	r2, s17
 8015ee8:	9331      	str	r3, [sp, #196]	; 0xc4
 8015eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015eec:	eef0 8a67 	vmov.f32	s17, s15
 8015ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ef4:	9332      	str	r3, [sp, #200]	; 0xc8
 8015ef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015ef8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015efa:	3b01      	subs	r3, #1
 8015efc:	9316      	str	r3, [sp, #88]	; 0x58
 8015efe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015f00:	bf08      	it	eq
 8015f02:	4613      	moveq	r3, r2
 8015f04:	9307      	str	r3, [sp, #28]
 8015f06:	e610      	b.n	8015b2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	f43f ae82 	beq.w	8015c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015f0e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015f12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015f16:	9108      	str	r1, [sp, #32]
 8015f18:	0e09      	lsrs	r1, r1, #24
 8015f1a:	9110      	str	r1, [sp, #64]	; 0x40
 8015f1c:	e679      	b.n	8015c12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015f1e:	f113 0801 	adds.w	r8, r3, #1
 8015f22:	f53f af74 	bmi.w	8015e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015f26:	4541      	cmp	r1, r8
 8015f28:	f6ff af71 	blt.w	8015e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015f2c:	f11c 0801 	adds.w	r8, ip, #1
 8015f30:	f53f af6d 	bmi.w	8015e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015f34:	45c6      	cmp	lr, r8
 8015f36:	f6ff af6a 	blt.w	8015e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015f3a:	b209      	sxth	r1, r1
 8015f3c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8015f40:	fa0f f38e 	sxth.w	r3, lr
 8015f44:	9100      	str	r1, [sp, #0]
 8015f46:	4639      	mov	r1, r7
 8015f48:	9301      	str	r3, [sp, #4]
 8015f4a:	4633      	mov	r3, r6
 8015f4c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8015f50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f52:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015f54:	f7ff fc70 	bl	8015838 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8015f58:	e759      	b.n	8015e0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015f5a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015f5c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015f60:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015f62:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015f66:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015f68:	1427      	asrs	r7, r4, #16
 8015f6a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015f6c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015f70:	142b      	asrs	r3, r5, #16
 8015f72:	fb01 7303 	mla	r3, r1, r3, r7
 8015f76:	18e7      	adds	r7, r4, r3
 8015f78:	5ce3      	ldrb	r3, [r4, r3]
 8015f7a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015f7e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8015f82:	2a00      	cmp	r2, #0
 8015f84:	f000 811d 	beq.w	80161c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8015f88:	f897 8001 	ldrb.w	r8, [r7, #1]
 8015f8c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8015f90:	940d      	str	r4, [sp, #52]	; 0x34
 8015f92:	0e24      	lsrs	r4, r4, #24
 8015f94:	9414      	str	r4, [sp, #80]	; 0x50
 8015f96:	b170      	cbz	r0, 8015fb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8015f98:	eb07 0801 	add.w	r8, r7, r1
 8015f9c:	5c79      	ldrb	r1, [r7, r1]
 8015f9e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015fa2:	9109      	str	r1, [sp, #36]	; 0x24
 8015fa4:	0e09      	lsrs	r1, r1, #24
 8015fa6:	9111      	str	r1, [sp, #68]	; 0x44
 8015fa8:	f898 1001 	ldrb.w	r1, [r8, #1]
 8015fac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015fb0:	910e      	str	r1, [sp, #56]	; 0x38
 8015fb2:	0e09      	lsrs	r1, r1, #24
 8015fb4:	9115      	str	r1, [sp, #84]	; 0x54
 8015fb6:	b292      	uxth	r2, r2
 8015fb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015fba:	b280      	uxth	r0, r0
 8015fbc:	fb02 f900 	mul.w	r9, r2, r0
 8015fc0:	0112      	lsls	r2, r2, #4
 8015fc2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8015fc6:	eba2 0809 	sub.w	r8, r2, r9
 8015fca:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8015fce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015fd0:	b280      	uxth	r0, r0
 8015fd2:	fa1f f888 	uxth.w	r8, r8
 8015fd6:	1a09      	subs	r1, r1, r0
 8015fd8:	fb08 f202 	mul.w	r2, r8, r2
 8015fdc:	b289      	uxth	r1, r1
 8015fde:	fb01 220c 	mla	r2, r1, ip, r2
 8015fe2:	fb00 2204 	mla	r2, r0, r4, r2
 8015fe6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015fe8:	fb09 2204 	mla	r2, r9, r4, r2
 8015fec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015ff0:	2a00      	cmp	r2, #0
 8015ff2:	f000 80db 	beq.w	80161ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8015ff6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015ffa:	d019      	beq.n	8016030 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8015ffc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8016000:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016004:	fb0c fa0a 	mul.w	sl, ip, sl
 8016008:	fb0c fc03 	mul.w	ip, ip, r3
 801600c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016010:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016014:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8016018:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801601c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8016020:	4453      	add	r3, sl
 8016022:	0a3f      	lsrs	r7, r7, #8
 8016024:	0a1b      	lsrs	r3, r3, #8
 8016026:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801602a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801602e:	433b      	orrs	r3, r7
 8016030:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016032:	2cff      	cmp	r4, #255	; 0xff
 8016034:	d020      	beq.n	8016078 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8016036:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016038:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801603c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801603e:	4367      	muls	r7, r4
 8016040:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016042:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8016046:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801604a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801604c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016050:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016054:	fb04 fa0a 	mul.w	sl, r4, sl
 8016058:	44bc      	add	ip, r7
 801605a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801605e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016062:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016066:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801606a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801606e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016072:	ea4c 040a 	orr.w	r4, ip, sl
 8016076:	940d      	str	r4, [sp, #52]	; 0x34
 8016078:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801607a:	2cff      	cmp	r4, #255	; 0xff
 801607c:	d020      	beq.n	80160c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801607e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016080:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016084:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016086:	4367      	muls	r7, r4
 8016088:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801608a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801608e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016092:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016094:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8016098:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801609c:	fb04 fa0a 	mul.w	sl, r4, sl
 80160a0:	44bc      	add	ip, r7
 80160a2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80160a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80160aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80160ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80160b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80160b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80160ba:	ea4c 040a 	orr.w	r4, ip, sl
 80160be:	9409      	str	r4, [sp, #36]	; 0x24
 80160c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80160c2:	2cff      	cmp	r4, #255	; 0xff
 80160c4:	d020      	beq.n	8016108 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 80160c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80160c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80160cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80160ce:	4367      	muls	r7, r4
 80160d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80160d2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80160d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80160da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80160dc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80160e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80160e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80160e8:	44bc      	add	ip, r7
 80160ea:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80160ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80160f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80160f6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80160fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80160fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016102:	ea4c 040a 	orr.w	r4, ip, sl
 8016106:	940e      	str	r4, [sp, #56]	; 0x38
 8016108:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801610a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801610e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016112:	43d2      	mvns	r2, r2
 8016114:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8016118:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801611a:	b2d2      	uxtb	r2, r2
 801611c:	fb08 f707 	mul.w	r7, r8, r7
 8016120:	fb01 770c 	mla	r7, r1, ip, r7
 8016124:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016128:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801612a:	fb00 770c 	mla	r7, r0, ip, r7
 801612e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016132:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016134:	fb09 770c 	mla	r7, r9, ip, r7
 8016138:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801613c:	fb08 f80c 	mul.w	r8, r8, ip
 8016140:	0a3f      	lsrs	r7, r7, #8
 8016142:	fb01 8303 	mla	r3, r1, r3, r8
 8016146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016148:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801614c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8016150:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016152:	fb00 330a 	mla	r3, r0, sl, r3
 8016156:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801615a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801615e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8016162:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016166:	fb03 f102 	mul.w	r1, r3, r2
 801616a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801616e:	1c4b      	adds	r3, r1, #1
 8016170:	ea47 070c 	orr.w	r7, r7, ip
 8016174:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8016178:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801617c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8016180:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8016184:	4353      	muls	r3, r2
 8016186:	1c59      	adds	r1, r3, #1
 8016188:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801618c:	0a3b      	lsrs	r3, r7, #8
 801618e:	0c3f      	lsrs	r7, r7, #16
 8016190:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8016194:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8016198:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801619c:	435a      	muls	r2, r3
 801619e:	1c53      	adds	r3, r2, #1
 80161a0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80161a4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80161a8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80161ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80161ae:	f10e 0e03 	add.w	lr, lr, #3
 80161b2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80161b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80161b8:	441a      	add	r2, r3
 80161ba:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80161bc:	922f      	str	r2, [sp, #188]	; 0xbc
 80161be:	441d      	add	r5, r3
 80161c0:	e65a      	b.n	8015e78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	f43f aef7 	beq.w	8015fb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80161c8:	5c79      	ldrb	r1, [r7, r1]
 80161ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80161ce:	9109      	str	r1, [sp, #36]	; 0x24
 80161d0:	0e09      	lsrs	r1, r1, #24
 80161d2:	9111      	str	r1, [sp, #68]	; 0x44
 80161d4:	e6ef      	b.n	8015fb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80161d6:	b01b      	add	sp, #108	; 0x6c
 80161d8:	ecbd 8b0a 	vpop	{d8-d12}
 80161dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80161e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e4:	b08d      	sub	sp, #52	; 0x34
 80161e6:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80161ea:	9103      	str	r1, [sp, #12]
 80161ec:	fb07 5803 	mla	r8, r7, r3, r5
 80161f0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80161f4:	9803      	ldr	r0, [sp, #12]
 80161f6:	2f00      	cmp	r7, #0
 80161f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80161fa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80161fe:	9903      	ldr	r1, [sp, #12]
 8016200:	9c03      	ldr	r4, [sp, #12]
 8016202:	eb02 0608 	add.w	r6, r2, r8
 8016206:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801620a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801620e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8016212:	7809      	ldrb	r1, [r1, #0]
 8016214:	7840      	ldrb	r0, [r0, #1]
 8016216:	78a4      	ldrb	r4, [r4, #2]
 8016218:	db51      	blt.n	80162be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801621a:	45be      	cmp	lr, r7
 801621c:	dd4f      	ble.n	80162be <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801621e:	2d00      	cmp	r5, #0
 8016220:	db49      	blt.n	80162b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8016222:	42ab      	cmp	r3, r5
 8016224:	dd47      	ble.n	80162b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8016226:	f812 2008 	ldrb.w	r2, [r2, r8]
 801622a:	9204      	str	r2, [sp, #16]
 801622c:	7872      	ldrb	r2, [r6, #1]
 801622e:	9205      	str	r2, [sp, #20]
 8016230:	78b2      	ldrb	r2, [r6, #2]
 8016232:	9206      	str	r2, [sp, #24]
 8016234:	1c6a      	adds	r2, r5, #1
 8016236:	d449      	bmi.n	80162cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8016238:	4293      	cmp	r3, r2
 801623a:	dd47      	ble.n	80162cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801623c:	f1bc 0f00 	cmp.w	ip, #0
 8016240:	d044      	beq.n	80162cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8016242:	7972      	ldrb	r2, [r6, #5]
 8016244:	f896 b003 	ldrb.w	fp, [r6, #3]
 8016248:	f896 a004 	ldrb.w	sl, [r6, #4]
 801624c:	9201      	str	r2, [sp, #4]
 801624e:	3701      	adds	r7, #1
 8016250:	d444      	bmi.n	80162dc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8016252:	45be      	cmp	lr, r7
 8016254:	dd42      	ble.n	80162dc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8016256:	f1b9 0f00 	cmp.w	r9, #0
 801625a:	f000 80c1 	beq.w	80163e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801625e:	2d00      	cmp	r5, #0
 8016260:	db38      	blt.n	80162d4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8016262:	42ab      	cmp	r3, r5
 8016264:	dd36      	ble.n	80162d4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8016266:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801626a:	f816 8002 	ldrb.w	r8, [r6, r2]
 801626e:	2203      	movs	r2, #3
 8016270:	fb03 6702 	mla	r7, r3, r2, r6
 8016274:	fb03 6202 	mla	r2, r3, r2, r6
 8016278:	787f      	ldrb	r7, [r7, #1]
 801627a:	f892 e002 	ldrb.w	lr, [r2, #2]
 801627e:	9702      	str	r7, [sp, #8]
 8016280:	3501      	adds	r5, #1
 8016282:	d432      	bmi.n	80162ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8016284:	42ab      	cmp	r3, r5
 8016286:	dd30      	ble.n	80162ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8016288:	f1bc 0f00 	cmp.w	ip, #0
 801628c:	d031      	beq.n	80162f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801628e:	2703      	movs	r7, #3
 8016290:	fb13 7207 	smlabb	r2, r3, r7, r7
 8016294:	5cb5      	ldrb	r5, [r6, r2]
 8016296:	fb03 6207 	mla	r2, r3, r7, r6
 801629a:	fb03 6307 	mla	r3, r3, r7, r6
 801629e:	7912      	ldrb	r2, [r2, #4]
 80162a0:	795e      	ldrb	r6, [r3, #5]
 80162a2:	f1bc 0f0f 	cmp.w	ip, #15
 80162a6:	d927      	bls.n	80162f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80162a8:	4b53      	ldr	r3, [pc, #332]	; (80163f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80162aa:	f240 115b 	movw	r1, #347	; 0x15b
 80162ae:	4a53      	ldr	r2, [pc, #332]	; (80163fc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80162b0:	4853      	ldr	r0, [pc, #332]	; (8016400 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80162b2:	f002 ff43 	bl	801913c <__assert_func>
 80162b6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80162ba:	9104      	str	r1, [sp, #16]
 80162bc:	e7ba      	b.n	8016234 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80162be:	9401      	str	r4, [sp, #4]
 80162c0:	4682      	mov	sl, r0
 80162c2:	468b      	mov	fp, r1
 80162c4:	9104      	str	r1, [sp, #16]
 80162c6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80162ca:	e7c0      	b.n	801624e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80162cc:	9401      	str	r4, [sp, #4]
 80162ce:	4682      	mov	sl, r0
 80162d0:	468b      	mov	fp, r1
 80162d2:	e7bc      	b.n	801624e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80162d4:	46a6      	mov	lr, r4
 80162d6:	9002      	str	r0, [sp, #8]
 80162d8:	4688      	mov	r8, r1
 80162da:	e7d1      	b.n	8016280 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80162dc:	4626      	mov	r6, r4
 80162de:	4602      	mov	r2, r0
 80162e0:	460d      	mov	r5, r1
 80162e2:	46a6      	mov	lr, r4
 80162e4:	9002      	str	r0, [sp, #8]
 80162e6:	4688      	mov	r8, r1
 80162e8:	e7db      	b.n	80162a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80162ea:	4626      	mov	r6, r4
 80162ec:	4602      	mov	r2, r0
 80162ee:	460d      	mov	r5, r1
 80162f0:	e7d7      	b.n	80162a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80162f2:	4626      	mov	r6, r4
 80162f4:	4602      	mov	r2, r0
 80162f6:	460d      	mov	r5, r1
 80162f8:	f1b9 0f0f 	cmp.w	r9, #15
 80162fc:	d8d4      	bhi.n	80162a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80162fe:	fa1f f38c 	uxth.w	r3, ip
 8016302:	fa1f fc89 	uxth.w	ip, r9
 8016306:	fb03 f70c 	mul.w	r7, r3, ip
 801630a:	011b      	lsls	r3, r3, #4
 801630c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8016310:	9707      	str	r7, [sp, #28]
 8016312:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8016316:	fa1f fc8c 	uxth.w	ip, ip
 801631a:	eba7 070c 	sub.w	r7, r7, ip
 801631e:	b2bf      	uxth	r7, r7
 8016320:	9709      	str	r7, [sp, #36]	; 0x24
 8016322:	9f07      	ldr	r7, [sp, #28]
 8016324:	1bdb      	subs	r3, r3, r7
 8016326:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801632a:	b29b      	uxth	r3, r3
 801632c:	9708      	str	r7, [sp, #32]
 801632e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016330:	930a      	str	r3, [sp, #40]	; 0x28
 8016332:	ea6f 0907 	mvn.w	r9, r7
 8016336:	fb03 fb0b 	mul.w	fp, r3, fp
 801633a:	9f04      	ldr	r7, [sp, #16]
 801633c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801633e:	fa5f f989 	uxtb.w	r9, r9
 8016342:	fb03 bb07 	mla	fp, r3, r7, fp
 8016346:	9f07      	ldr	r7, [sp, #28]
 8016348:	fb11 f109 	smulbb	r1, r1, r9
 801634c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634e:	fb0c b808 	mla	r8, ip, r8, fp
 8016352:	fb10 f009 	smulbb	r0, r0, r9
 8016356:	fb14 f409 	smulbb	r4, r4, r9
 801635a:	fb07 8805 	mla	r8, r7, r5, r8
 801635e:	9d08      	ldr	r5, [sp, #32]
 8016360:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016362:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8016366:	fb08 1805 	mla	r8, r8, r5, r1
 801636a:	9d05      	ldr	r5, [sp, #20]
 801636c:	fa1f f888 	uxth.w	r8, r8
 8016370:	f108 0101 	add.w	r1, r8, #1
 8016374:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8016378:	9903      	ldr	r1, [sp, #12]
 801637a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801637e:	f881 8000 	strb.w	r8, [r1]
 8016382:	fb03 f10a 	mul.w	r1, r3, sl
 8016386:	fb07 1105 	mla	r1, r7, r5, r1
 801638a:	9d02      	ldr	r5, [sp, #8]
 801638c:	fb0c 1105 	mla	r1, ip, r5, r1
 8016390:	9d07      	ldr	r5, [sp, #28]
 8016392:	fb05 1102 	mla	r1, r5, r2, r1
 8016396:	9a08      	ldr	r2, [sp, #32]
 8016398:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801639c:	fb01 0102 	mla	r1, r1, r2, r0
 80163a0:	9a03      	ldr	r2, [sp, #12]
 80163a2:	b289      	uxth	r1, r1
 80163a4:	1c48      	adds	r0, r1, #1
 80163a6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80163aa:	1209      	asrs	r1, r1, #8
 80163ac:	7051      	strb	r1, [r2, #1]
 80163ae:	9a01      	ldr	r2, [sp, #4]
 80163b0:	4353      	muls	r3, r2
 80163b2:	9a06      	ldr	r2, [sp, #24]
 80163b4:	fb07 3702 	mla	r7, r7, r2, r3
 80163b8:	9b08      	ldr	r3, [sp, #32]
 80163ba:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80163be:	fb05 c606 	mla	r6, r5, r6, ip
 80163c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80163c6:	fb06 4603 	mla	r6, r6, r3, r4
 80163ca:	9b03      	ldr	r3, [sp, #12]
 80163cc:	b2b6      	uxth	r6, r6
 80163ce:	f106 0e01 	add.w	lr, r6, #1
 80163d2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80163d6:	1236      	asrs	r6, r6, #8
 80163d8:	709e      	strb	r6, [r3, #2]
 80163da:	b00d      	add	sp, #52	; 0x34
 80163dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163e0:	f1bc 0f0f 	cmp.w	ip, #15
 80163e4:	f63f af60 	bhi.w	80162a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80163e8:	4626      	mov	r6, r4
 80163ea:	4602      	mov	r2, r0
 80163ec:	460d      	mov	r5, r1
 80163ee:	46a6      	mov	lr, r4
 80163f0:	9002      	str	r0, [sp, #8]
 80163f2:	4688      	mov	r8, r1
 80163f4:	e783      	b.n	80162fe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80163f6:	bf00      	nop
 80163f8:	0801ce72 	.word	0x0801ce72
 80163fc:	0801d286 	.word	0x0801d286
 8016400:	0801ce3f 	.word	0x0801ce3f

08016404 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016408:	ed2d 8b08 	vpush	{d8-d11}
 801640c:	b09f      	sub	sp, #124	; 0x7c
 801640e:	eeb0 aa40 	vmov.f32	s20, s0
 8016412:	eef0 9a60 	vmov.f32	s19, s1
 8016416:	920e      	str	r2, [sp, #56]	; 0x38
 8016418:	eeb0 9a41 	vmov.f32	s18, s2
 801641c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801641e:	eeb0 8a62 	vmov.f32	s16, s5
 8016422:	9307      	str	r3, [sp, #28]
 8016424:	eef0 8a43 	vmov.f32	s17, s6
 8016428:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801642c:	eef0 ba44 	vmov.f32	s23, s8
 8016430:	901d      	str	r0, [sp, #116]	; 0x74
 8016432:	eeb0 ba64 	vmov.f32	s22, s9
 8016436:	930c      	str	r3, [sp, #48]	; 0x30
 8016438:	eef0 aa45 	vmov.f32	s21, s10
 801643c:	6850      	ldr	r0, [r2, #4]
 801643e:	910b      	str	r1, [sp, #44]	; 0x2c
 8016440:	6812      	ldr	r2, [r2, #0]
 8016442:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8016446:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 801644a:	fb00 1303 	mla	r3, r0, r3, r1
 801644e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016452:	18d3      	adds	r3, r2, r3
 8016454:	9308      	str	r3, [sp, #32]
 8016456:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	930a      	str	r3, [sp, #40]	; 0x28
 801645c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801645e:	43db      	mvns	r3, r3
 8016460:	b2db      	uxtb	r3, r3
 8016462:	9309      	str	r3, [sp, #36]	; 0x24
 8016464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016466:	2b00      	cmp	r3, #0
 8016468:	dc03      	bgt.n	8016472 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801646a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801646c:	2b00      	cmp	r3, #0
 801646e:	f340 81f5 	ble.w	801685c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8016472:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016474:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016478:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801647c:	1e48      	subs	r0, r1, #1
 801647e:	1e54      	subs	r4, r2, #1
 8016480:	9b07      	ldr	r3, [sp, #28]
 8016482:	2b00      	cmp	r3, #0
 8016484:	f340 80d5 	ble.w	8016632 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8016488:	ea5f 452a 	movs.w	r5, sl, asr #16
 801648c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8016490:	d406      	bmi.n	80164a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016492:	4285      	cmp	r5, r0
 8016494:	da04      	bge.n	80164a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8016496:	2b00      	cmp	r3, #0
 8016498:	db02      	blt.n	80164a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801649a:	42a3      	cmp	r3, r4
 801649c:	f2c0 80ca 	blt.w	8016634 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80164a0:	3501      	adds	r5, #1
 80164a2:	f100 80bb 	bmi.w	801661c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80164a6:	42a9      	cmp	r1, r5
 80164a8:	f2c0 80b8 	blt.w	801661c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80164ac:	3301      	adds	r3, #1
 80164ae:	f100 80b5 	bmi.w	801661c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80164b2:	429a      	cmp	r2, r3
 80164b4:	f2c0 80b2 	blt.w	801661c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80164b8:	9b07      	ldr	r3, [sp, #28]
 80164ba:	9d08      	ldr	r5, [sp, #32]
 80164bc:	930d      	str	r3, [sp, #52]	; 0x34
 80164be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	f340 80d6 	ble.w	8016672 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80164c6:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80164c8:	ea4f 4428 	mov.w	r4, r8, asr #16
 80164cc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80164ce:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80164d2:	68c6      	ldr	r6, [r0, #12]
 80164d4:	ea5f 402a 	movs.w	r0, sl, asr #16
 80164d8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80164dc:	689b      	ldr	r3, [r3, #8]
 80164de:	f100 810f 	bmi.w	8016700 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80164e2:	1e5f      	subs	r7, r3, #1
 80164e4:	42b8      	cmp	r0, r7
 80164e6:	f280 810b 	bge.w	8016700 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80164ea:	2c00      	cmp	r4, #0
 80164ec:	f2c0 8108 	blt.w	8016700 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80164f0:	1e77      	subs	r7, r6, #1
 80164f2:	42bc      	cmp	r4, r7
 80164f4:	f280 8104 	bge.w	8016700 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80164f8:	b21b      	sxth	r3, r3
 80164fa:	fb04 0003 	mla	r0, r4, r3, r0
 80164fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016500:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016504:	1826      	adds	r6, r4, r0
 8016506:	5c24      	ldrb	r4, [r4, r0]
 8016508:	78b7      	ldrb	r7, [r6, #2]
 801650a:	7870      	ldrb	r0, [r6, #1]
 801650c:	970f      	str	r7, [sp, #60]	; 0x3c
 801650e:	7977      	ldrb	r7, [r6, #5]
 8016510:	f896 e003 	ldrb.w	lr, [r6, #3]
 8016514:	f896 c004 	ldrb.w	ip, [r6, #4]
 8016518:	9710      	str	r7, [sp, #64]	; 0x40
 801651a:	b1c9      	cbz	r1, 8016550 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801651c:	f04f 0b03 	mov.w	fp, #3
 8016520:	f06f 0904 	mvn.w	r9, #4
 8016524:	3605      	adds	r6, #5
 8016526:	fb13 930b 	smlabb	r3, r3, fp, r9
 801652a:	eb06 0b03 	add.w	fp, r6, r3
 801652e:	5cf3      	ldrb	r3, [r6, r3]
 8016530:	9311      	str	r3, [sp, #68]	; 0x44
 8016532:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8016536:	9313      	str	r3, [sp, #76]	; 0x4c
 8016538:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801653c:	9315      	str	r3, [sp, #84]	; 0x54
 801653e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8016542:	9312      	str	r3, [sp, #72]	; 0x48
 8016544:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8016548:	9314      	str	r3, [sp, #80]	; 0x50
 801654a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801654e:	9316      	str	r3, [sp, #88]	; 0x58
 8016550:	b292      	uxth	r2, r2
 8016552:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016554:	b289      	uxth	r1, r1
 8016556:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801655a:	fb02 f601 	mul.w	r6, r2, r1
 801655e:	0112      	lsls	r2, r2, #4
 8016560:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8016564:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8016568:	1b92      	subs	r2, r2, r6
 801656a:	b289      	uxth	r1, r1
 801656c:	b292      	uxth	r2, r2
 801656e:	eba9 0901 	sub.w	r9, r9, r1
 8016572:	fb02 fe0e 	mul.w	lr, r2, lr
 8016576:	fa1f f989 	uxth.w	r9, r9
 801657a:	fb02 fc0c 	mul.w	ip, r2, ip
 801657e:	fb09 e404 	mla	r4, r9, r4, lr
 8016582:	f895 e000 	ldrb.w	lr, [r5]
 8016586:	fb09 c000 	mla	r0, r9, r0, ip
 801658a:	fb01 4407 	mla	r4, r1, r7, r4
 801658e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8016590:	fb06 4407 	mla	r4, r6, r7, r4
 8016594:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016596:	fb1e fe07 	smulbb	lr, lr, r7
 801659a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801659e:	fb04 e403 	mla	r4, r4, r3, lr
 80165a2:	b2a4      	uxth	r4, r4
 80165a4:	f104 0e01 	add.w	lr, r4, #1
 80165a8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80165ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80165ae:	fb01 0004 	mla	r0, r1, r4, r0
 80165b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80165b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80165b8:	fb06 0004 	mla	r0, r6, r4, r0
 80165bc:	786c      	ldrb	r4, [r5, #1]
 80165be:	f885 e000 	strb.w	lr, [r5]
 80165c2:	fb14 f407 	smulbb	r4, r4, r7
 80165c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80165ca:	fb00 4003 	mla	r0, r0, r3, r4
 80165ce:	b280      	uxth	r0, r0
 80165d0:	1c44      	adds	r4, r0, #1
 80165d2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80165d6:	1200      	asrs	r0, r0, #8
 80165d8:	7068      	strb	r0, [r5, #1]
 80165da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80165dc:	4342      	muls	r2, r0
 80165de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80165e0:	fb09 2200 	mla	r2, r9, r0, r2
 80165e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80165e6:	fb01 2100 	mla	r1, r1, r0, r2
 80165ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80165ec:	fb06 1602 	mla	r6, r6, r2, r1
 80165f0:	78a9      	ldrb	r1, [r5, #2]
 80165f2:	fb11 f107 	smulbb	r1, r1, r7
 80165f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80165fa:	fb06 1303 	mla	r3, r6, r3, r1
 80165fe:	b29b      	uxth	r3, r3
 8016600:	1c5e      	adds	r6, r3, #1
 8016602:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8016606:	121b      	asrs	r3, r3, #8
 8016608:	70ab      	strb	r3, [r5, #2]
 801660a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801660c:	3503      	adds	r5, #3
 801660e:	449a      	add	sl, r3
 8016610:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016612:	4498      	add	r8, r3
 8016614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016616:	3b01      	subs	r3, #1
 8016618:	930d      	str	r3, [sp, #52]	; 0x34
 801661a:	e750      	b.n	80164be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801661c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801661e:	449a      	add	sl, r3
 8016620:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016622:	4498      	add	r8, r3
 8016624:	9b07      	ldr	r3, [sp, #28]
 8016626:	3b01      	subs	r3, #1
 8016628:	9307      	str	r3, [sp, #28]
 801662a:	9b08      	ldr	r3, [sp, #32]
 801662c:	3303      	adds	r3, #3
 801662e:	9308      	str	r3, [sp, #32]
 8016630:	e726      	b.n	8016480 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016632:	d026      	beq.n	8016682 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016634:	9b07      	ldr	r3, [sp, #28]
 8016636:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8016638:	3b01      	subs	r3, #1
 801663a:	fb00 a003 	mla	r0, r0, r3, sl
 801663e:	1400      	asrs	r0, r0, #16
 8016640:	f53f af3a 	bmi.w	80164b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016644:	3901      	subs	r1, #1
 8016646:	4288      	cmp	r0, r1
 8016648:	f6bf af36 	bge.w	80164b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801664c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801664e:	fb01 8303 	mla	r3, r1, r3, r8
 8016652:	141b      	asrs	r3, r3, #16
 8016654:	f53f af30 	bmi.w	80164b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016658:	3a01      	subs	r2, #1
 801665a:	4293      	cmp	r3, r2
 801665c:	f6bf af2c 	bge.w	80164b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016660:	9b08      	ldr	r3, [sp, #32]
 8016662:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016666:	1cdd      	adds	r5, r3, #3
 8016668:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801666c:	f1bc 0f00 	cmp.w	ip, #0
 8016670:	dc5f      	bgt.n	8016732 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8016672:	9b07      	ldr	r3, [sp, #28]
 8016674:	9a08      	ldr	r2, [sp, #32]
 8016676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801667a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801667e:	441a      	add	r2, r3
 8016680:	9208      	str	r2, [sp, #32]
 8016682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016684:	2b00      	cmp	r3, #0
 8016686:	f340 80e9 	ble.w	801685c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801668a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801668e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016690:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016694:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016698:	eef0 6a48 	vmov.f32	s13, s16
 801669c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80166a0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80166a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166a8:	ee16 aa90 	vmov	sl, s13
 80166ac:	eef0 6a68 	vmov.f32	s13, s17
 80166b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166b4:	ee16 8a90 	vmov	r8, s13
 80166b8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80166bc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80166c0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80166c4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80166c8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80166cc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80166d0:	ee18 2a10 	vmov	r2, s16
 80166d4:	eeb0 8a47 	vmov.f32	s16, s14
 80166d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80166dc:	ee18 2a90 	vmov	r2, s17
 80166e0:	9333      	str	r3, [sp, #204]	; 0xcc
 80166e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80166e4:	eef0 8a67 	vmov.f32	s17, s15
 80166e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80166ec:	9334      	str	r3, [sp, #208]	; 0xd0
 80166ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80166f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166f2:	3b01      	subs	r3, #1
 80166f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80166f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80166f8:	bf08      	it	eq
 80166fa:	4613      	moveq	r3, r2
 80166fc:	9307      	str	r3, [sp, #28]
 80166fe:	e6b1      	b.n	8016464 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016700:	1c47      	adds	r7, r0, #1
 8016702:	d482      	bmi.n	801660a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016704:	42bb      	cmp	r3, r7
 8016706:	db80      	blt.n	801660a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016708:	1c67      	adds	r7, r4, #1
 801670a:	f53f af7e 	bmi.w	801660a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801670e:	42be      	cmp	r6, r7
 8016710:	f6ff af7b 	blt.w	801660a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016714:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016716:	b236      	sxth	r6, r6
 8016718:	9001      	str	r0, [sp, #4]
 801671a:	b21b      	sxth	r3, r3
 801671c:	9600      	str	r6, [sp, #0]
 801671e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016720:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8016724:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8016728:	4629      	mov	r1, r5
 801672a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801672c:	f7ff fd58 	bl	80161e0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8016730:	e76b      	b.n	801660a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016732:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8016734:	ea4f 402a 	mov.w	r0, sl, asr #16
 8016738:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801673c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8016740:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8016744:	ea4f 4128 	mov.w	r1, r8, asr #16
 8016748:	fb07 0101 	mla	r1, r7, r1, r0
 801674c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801674e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016752:	1844      	adds	r4, r0, r1
 8016754:	5c40      	ldrb	r0, [r0, r1]
 8016756:	78a6      	ldrb	r6, [r4, #2]
 8016758:	7861      	ldrb	r1, [r4, #1]
 801675a:	960f      	str	r6, [sp, #60]	; 0x3c
 801675c:	78e6      	ldrb	r6, [r4, #3]
 801675e:	910d      	str	r1, [sp, #52]	; 0x34
 8016760:	9610      	str	r6, [sp, #64]	; 0x40
 8016762:	f894 9004 	ldrb.w	r9, [r4, #4]
 8016766:	f894 b005 	ldrb.w	fp, [r4, #5]
 801676a:	b192      	cbz	r2, 8016792 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801676c:	f06f 0604 	mvn.w	r6, #4
 8016770:	2103      	movs	r1, #3
 8016772:	3405      	adds	r4, #5
 8016774:	fb17 6701 	smlabb	r7, r7, r1, r6
 8016778:	19e6      	adds	r6, r4, r7
 801677a:	5de4      	ldrb	r4, [r4, r7]
 801677c:	9417      	str	r4, [sp, #92]	; 0x5c
 801677e:	7874      	ldrb	r4, [r6, #1]
 8016780:	9419      	str	r4, [sp, #100]	; 0x64
 8016782:	78b4      	ldrb	r4, [r6, #2]
 8016784:	941b      	str	r4, [sp, #108]	; 0x6c
 8016786:	78f4      	ldrb	r4, [r6, #3]
 8016788:	9418      	str	r4, [sp, #96]	; 0x60
 801678a:	7934      	ldrb	r4, [r6, #4]
 801678c:	941a      	str	r4, [sp, #104]	; 0x68
 801678e:	7974      	ldrb	r4, [r6, #5]
 8016790:	941c      	str	r4, [sp, #112]	; 0x70
 8016792:	b29b      	uxth	r3, r3
 8016794:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016796:	b292      	uxth	r2, r2
 8016798:	9909      	ldr	r1, [sp, #36]	; 0x24
 801679a:	3503      	adds	r5, #3
 801679c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80167a0:	fb03 f402 	mul.w	r4, r3, r2
 80167a4:	011b      	lsls	r3, r3, #4
 80167a6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80167aa:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80167ae:	1b1b      	subs	r3, r3, r4
 80167b0:	b292      	uxth	r2, r2
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	1ab6      	subs	r6, r6, r2
 80167b6:	435f      	muls	r7, r3
 80167b8:	b2b6      	uxth	r6, r6
 80167ba:	fb03 f909 	mul.w	r9, r3, r9
 80167be:	fb03 fb0b 	mul.w	fp, r3, fp
 80167c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167c4:	fb06 7000 	mla	r0, r6, r0, r7
 80167c8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80167ca:	fb06 bb03 	mla	fp, r6, r3, fp
 80167ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167d0:	fb02 0007 	mla	r0, r2, r7, r0
 80167d4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80167d6:	fb02 bb03 	mla	fp, r2, r3, fp
 80167da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80167dc:	fb04 0007 	mla	r0, r4, r7, r0
 80167e0:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80167e4:	fb17 f701 	smulbb	r7, r7, r1
 80167e8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80167ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80167ee:	fb00 700e 	mla	r0, r0, lr, r7
 80167f2:	fb06 9101 	mla	r1, r6, r1, r9
 80167f6:	b280      	uxth	r0, r0
 80167f8:	1c47      	adds	r7, r0, #1
 80167fa:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80167fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016800:	1200      	asrs	r0, r0, #8
 8016802:	f805 0c06 	strb.w	r0, [r5, #-6]
 8016806:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016808:	fb02 1100 	mla	r1, r2, r0, r1
 801680c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801680e:	fb04 1100 	mla	r1, r4, r0, r1
 8016812:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8016816:	fb04 b403 	mla	r4, r4, r3, fp
 801681a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801681e:	fb10 f007 	smulbb	r0, r0, r7
 8016822:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8016826:	fb13 f307 	smulbb	r3, r3, r7
 801682a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801682e:	fb01 010e 	mla	r1, r1, lr, r0
 8016832:	fb04 340e 	mla	r4, r4, lr, r3
 8016836:	b289      	uxth	r1, r1
 8016838:	b2a4      	uxth	r4, r4
 801683a:	1c48      	adds	r0, r1, #1
 801683c:	1c63      	adds	r3, r4, #1
 801683e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8016842:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8016846:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016848:	1209      	asrs	r1, r1, #8
 801684a:	1224      	asrs	r4, r4, #8
 801684c:	449a      	add	sl, r3
 801684e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016850:	f805 1c05 	strb.w	r1, [r5, #-5]
 8016854:	f805 4c04 	strb.w	r4, [r5, #-4]
 8016858:	4498      	add	r8, r3
 801685a:	e707      	b.n	801666c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801685c:	b01f      	add	sp, #124	; 0x7c
 801685e:	ecbd 8b08 	vpop	{d8-d11}
 8016862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016868 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8016868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801686c:	b085      	sub	sp, #20
 801686e:	784d      	ldrb	r5, [r1, #1]
 8016870:	788e      	ldrb	r6, [r1, #2]
 8016872:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8016876:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801687a:	9403      	str	r4, [sp, #12]
 801687c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016880:	780c      	ldrb	r4, [r1, #0]
 8016882:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8016886:	fb07 ce03 	mla	lr, r7, r3, ip
 801688a:	2f00      	cmp	r7, #0
 801688c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016890:	eb02 0b0e 	add.w	fp, r2, lr
 8016894:	db56      	blt.n	8016944 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8016896:	45b9      	cmp	r9, r7
 8016898:	dd54      	ble.n	8016944 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801689a:	f1bc 0f00 	cmp.w	ip, #0
 801689e:	db4d      	blt.n	801693c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80168a0:	4563      	cmp	r3, ip
 80168a2:	dd4b      	ble.n	801693c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80168a4:	f812 200e 	ldrb.w	r2, [r2, lr]
 80168a8:	9200      	str	r2, [sp, #0]
 80168aa:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80168ae:	9201      	str	r2, [sp, #4]
 80168b0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80168b4:	9202      	str	r2, [sp, #8]
 80168b6:	f11c 0201 	adds.w	r2, ip, #1
 80168ba:	d44a      	bmi.n	8016952 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80168bc:	4293      	cmp	r3, r2
 80168be:	dd48      	ble.n	8016952 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d046      	beq.n	8016952 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80168c4:	f89b e003 	ldrb.w	lr, [fp, #3]
 80168c8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80168cc:	f89b a005 	ldrb.w	sl, [fp, #5]
 80168d0:	3701      	adds	r7, #1
 80168d2:	d446      	bmi.n	8016962 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80168d4:	45b9      	cmp	r9, r7
 80168d6:	dd44      	ble.n	8016962 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80168d8:	9a03      	ldr	r2, [sp, #12]
 80168da:	2a00      	cmp	r2, #0
 80168dc:	d045      	beq.n	801696a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80168de:	f1bc 0f00 	cmp.w	ip, #0
 80168e2:	db3a      	blt.n	801695a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80168e4:	4563      	cmp	r3, ip
 80168e6:	dd38      	ble.n	801695a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80168e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80168ec:	f04f 0903 	mov.w	r9, #3
 80168f0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 80168f4:	fb03 b209 	mla	r2, r3, r9, fp
 80168f8:	fb03 b909 	mla	r9, r3, r9, fp
 80168fc:	7852      	ldrb	r2, [r2, #1]
 80168fe:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016902:	f11c 0c01 	adds.w	ip, ip, #1
 8016906:	d40d      	bmi.n	8016924 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8016908:	4563      	cmp	r3, ip
 801690a:	dd0b      	ble.n	8016924 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801690c:	b160      	cbz	r0, 8016928 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801690e:	2603      	movs	r6, #3
 8016910:	fb13 6406 	smlabb	r4, r3, r6, r6
 8016914:	fb03 b506 	mla	r5, r3, r6, fp
 8016918:	fb03 b306 	mla	r3, r3, r6, fp
 801691c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8016920:	792d      	ldrb	r5, [r5, #4]
 8016922:	795e      	ldrb	r6, [r3, #5]
 8016924:	280f      	cmp	r0, #15
 8016926:	d802      	bhi.n	801692e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8016928:	9b03      	ldr	r3, [sp, #12]
 801692a:	2b0f      	cmp	r3, #15
 801692c:	d922      	bls.n	8016974 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801692e:	4b2f      	ldr	r3, [pc, #188]	; (80169ec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8016930:	f240 115b 	movw	r1, #347	; 0x15b
 8016934:	4a2e      	ldr	r2, [pc, #184]	; (80169f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8016936:	482f      	ldr	r0, [pc, #188]	; (80169f4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8016938:	f002 fc00 	bl	801913c <__assert_func>
 801693c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8016940:	9400      	str	r4, [sp, #0]
 8016942:	e7b8      	b.n	80168b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8016944:	46b2      	mov	sl, r6
 8016946:	46a8      	mov	r8, r5
 8016948:	46a6      	mov	lr, r4
 801694a:	9400      	str	r4, [sp, #0]
 801694c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8016950:	e7be      	b.n	80168d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8016952:	46b2      	mov	sl, r6
 8016954:	46a8      	mov	r8, r5
 8016956:	46a6      	mov	lr, r4
 8016958:	e7ba      	b.n	80168d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801695a:	46b1      	mov	r9, r6
 801695c:	462a      	mov	r2, r5
 801695e:	4627      	mov	r7, r4
 8016960:	e7cf      	b.n	8016902 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8016962:	46b1      	mov	r9, r6
 8016964:	462a      	mov	r2, r5
 8016966:	4627      	mov	r7, r4
 8016968:	e7dc      	b.n	8016924 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801696a:	280f      	cmp	r0, #15
 801696c:	d8df      	bhi.n	801692e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801696e:	46b1      	mov	r9, r6
 8016970:	462a      	mov	r2, r5
 8016972:	4627      	mov	r7, r4
 8016974:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8016978:	b280      	uxth	r0, r0
 801697a:	fb00 f30b 	mul.w	r3, r0, fp
 801697e:	0100      	lsls	r0, r0, #4
 8016980:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8016984:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8016988:	1ac0      	subs	r0, r0, r3
 801698a:	fa1f fb8b 	uxth.w	fp, fp
 801698e:	b280      	uxth	r0, r0
 8016990:	ebac 0c0b 	sub.w	ip, ip, fp
 8016994:	9003      	str	r0, [sp, #12]
 8016996:	fa1f fc8c 	uxth.w	ip, ip
 801699a:	fb00 fe0e 	mul.w	lr, r0, lr
 801699e:	9800      	ldr	r0, [sp, #0]
 80169a0:	fb0c ee00 	mla	lr, ip, r0, lr
 80169a4:	9803      	ldr	r0, [sp, #12]
 80169a6:	fb00 f808 	mul.w	r8, r0, r8
 80169aa:	9801      	ldr	r0, [sp, #4]
 80169ac:	fb0b ee07 	mla	lr, fp, r7, lr
 80169b0:	fb0c 8800 	mla	r8, ip, r0, r8
 80169b4:	fb03 ee04 	mla	lr, r3, r4, lr
 80169b8:	fb0b 8202 	mla	r2, fp, r2, r8
 80169bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80169c0:	fb03 2505 	mla	r5, r3, r5, r2
 80169c4:	9a03      	ldr	r2, [sp, #12]
 80169c6:	f881 e000 	strb.w	lr, [r1]
 80169ca:	fb02 f00a 	mul.w	r0, r2, sl
 80169ce:	9a02      	ldr	r2, [sp, #8]
 80169d0:	122d      	asrs	r5, r5, #8
 80169d2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80169d6:	704d      	strb	r5, [r1, #1]
 80169d8:	fb0b c909 	mla	r9, fp, r9, ip
 80169dc:	fb03 9606 	mla	r6, r3, r6, r9
 80169e0:	1236      	asrs	r6, r6, #8
 80169e2:	708e      	strb	r6, [r1, #2]
 80169e4:	b005      	add	sp, #20
 80169e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ea:	bf00      	nop
 80169ec:	0801ce72 	.word	0x0801ce72
 80169f0:	0801d286 	.word	0x0801d286
 80169f4:	0801ce3f 	.word	0x0801ce3f

080169f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80169f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169fc:	ed2d 8b08 	vpush	{d8-d11}
 8016a00:	b09b      	sub	sp, #108	; 0x6c
 8016a02:	eeb0 aa40 	vmov.f32	s20, s0
 8016a06:	eef0 9a60 	vmov.f32	s19, s1
 8016a0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8016a0c:	eeb0 9a41 	vmov.f32	s18, s2
 8016a10:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8016a12:	eeb0 8a62 	vmov.f32	s16, s5
 8016a16:	9019      	str	r0, [sp, #100]	; 0x64
 8016a18:	eef0 8a43 	vmov.f32	s17, s6
 8016a1c:	6850      	ldr	r0, [r2, #4]
 8016a1e:	eef0 ba44 	vmov.f32	s23, s8
 8016a22:	9109      	str	r1, [sp, #36]	; 0x24
 8016a24:	eeb0 ba64 	vmov.f32	s22, s9
 8016a28:	9306      	str	r3, [sp, #24]
 8016a2a:	eef0 aa45 	vmov.f32	s21, s10
 8016a2e:	6812      	ldr	r2, [r2, #0]
 8016a30:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8016a34:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8016a38:	fb00 1303 	mla	r3, r0, r3, r1
 8016a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a40:	18d3      	adds	r3, r2, r3
 8016a42:	9307      	str	r3, [sp, #28]
 8016a44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	9308      	str	r3, [sp, #32]
 8016a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	dc03      	bgt.n	8016a58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	f340 81ab 	ble.w	8016dae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8016a58:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016a5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016a5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016a62:	1e48      	subs	r0, r1, #1
 8016a64:	1e55      	subs	r5, r2, #1
 8016a66:	9b06      	ldr	r3, [sp, #24]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f340 80b1 	ble.w	8016bd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8016a6e:	ea5f 462b 	movs.w	r6, fp, asr #16
 8016a72:	ea4f 4324 	mov.w	r3, r4, asr #16
 8016a76:	d406      	bmi.n	8016a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016a78:	4286      	cmp	r6, r0
 8016a7a:	da04      	bge.n	8016a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	db02      	blt.n	8016a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016a80:	42ab      	cmp	r3, r5
 8016a82:	f2c0 80a6 	blt.w	8016bd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8016a86:	3601      	adds	r6, #1
 8016a88:	f100 8097 	bmi.w	8016bba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8016a8c:	42b1      	cmp	r1, r6
 8016a8e:	f2c0 8094 	blt.w	8016bba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8016a92:	3301      	adds	r3, #1
 8016a94:	f100 8091 	bmi.w	8016bba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	f2c0 808e 	blt.w	8016bba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8016a9e:	9b06      	ldr	r3, [sp, #24]
 8016aa0:	9e07      	ldr	r6, [sp, #28]
 8016aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8016aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	f340 80b0 	ble.w	8016c0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8016aac:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8016aae:	1425      	asrs	r5, r4, #16
 8016ab0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016ab2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8016ab6:	68c7      	ldr	r7, [r0, #12]
 8016ab8:	ea5f 402b 	movs.w	r0, fp, asr #16
 8016abc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8016ac0:	689b      	ldr	r3, [r3, #8]
 8016ac2:	f100 80ea 	bmi.w	8016c9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016ac6:	f103 3cff 	add.w	ip, r3, #4294967295
 8016aca:	4560      	cmp	r0, ip
 8016acc:	f280 80e5 	bge.w	8016c9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016ad0:	2d00      	cmp	r5, #0
 8016ad2:	f2c0 80e2 	blt.w	8016c9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016ad6:	f107 3cff 	add.w	ip, r7, #4294967295
 8016ada:	4565      	cmp	r5, ip
 8016adc:	f280 80dd 	bge.w	8016c9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016ae0:	b21b      	sxth	r3, r3
 8016ae2:	fb05 0003 	mla	r0, r5, r3, r0
 8016ae6:	9d08      	ldr	r5, [sp, #32]
 8016ae8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016aec:	182f      	adds	r7, r5, r0
 8016aee:	5c2d      	ldrb	r5, [r5, r0]
 8016af0:	7878      	ldrb	r0, [r7, #1]
 8016af2:	f897 e002 	ldrb.w	lr, [r7, #2]
 8016af6:	900c      	str	r0, [sp, #48]	; 0x30
 8016af8:	f897 9003 	ldrb.w	r9, [r7, #3]
 8016afc:	f897 8004 	ldrb.w	r8, [r7, #4]
 8016b00:	f897 a005 	ldrb.w	sl, [r7, #5]
 8016b04:	b1c9      	cbz	r1, 8016b3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016b06:	f04f 0c03 	mov.w	ip, #3
 8016b0a:	f06f 0004 	mvn.w	r0, #4
 8016b0e:	3705      	adds	r7, #5
 8016b10:	fb13 030c 	smlabb	r3, r3, ip, r0
 8016b14:	eb07 0c03 	add.w	ip, r7, r3
 8016b18:	5cfb      	ldrb	r3, [r7, r3]
 8016b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8016b1c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b22:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8016b26:	9311      	str	r3, [sp, #68]	; 0x44
 8016b28:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8016b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8016b2e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8016b32:	9310      	str	r3, [sp, #64]	; 0x40
 8016b34:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8016b38:	9312      	str	r3, [sp, #72]	; 0x48
 8016b3a:	b292      	uxth	r2, r2
 8016b3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016b3e:	b289      	uxth	r1, r1
 8016b40:	fb02 f301 	mul.w	r3, r2, r1
 8016b44:	0112      	lsls	r2, r2, #4
 8016b46:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8016b4a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8016b4e:	1ad2      	subs	r2, r2, r3
 8016b50:	b289      	uxth	r1, r1
 8016b52:	b292      	uxth	r2, r2
 8016b54:	1a7f      	subs	r7, r7, r1
 8016b56:	fb02 f909 	mul.w	r9, r2, r9
 8016b5a:	b2bf      	uxth	r7, r7
 8016b5c:	fb02 f808 	mul.w	r8, r2, r8
 8016b60:	fb02 fa0a 	mul.w	sl, r2, sl
 8016b64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b66:	fb07 9905 	mla	r9, r7, r5, r9
 8016b6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016b6c:	fb07 8800 	mla	r8, r7, r0, r8
 8016b70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016b72:	fb07 aa0e 	mla	sl, r7, lr, sl
 8016b76:	fb01 9905 	mla	r9, r1, r5, r9
 8016b7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016b7c:	fb01 8800 	mla	r8, r1, r0, r8
 8016b80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016b82:	fb01 a102 	mla	r1, r1, r2, sl
 8016b86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b88:	fb03 9905 	mla	r9, r3, r5, r9
 8016b8c:	fb03 8800 	mla	r8, r3, r0, r8
 8016b90:	fb03 1302 	mla	r3, r3, r2, r1
 8016b94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b98:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016b9c:	121b      	asrs	r3, r3, #8
 8016b9e:	f886 9000 	strb.w	r9, [r6]
 8016ba2:	f886 8001 	strb.w	r8, [r6, #1]
 8016ba6:	70b3      	strb	r3, [r6, #2]
 8016ba8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016baa:	3603      	adds	r6, #3
 8016bac:	449b      	add	fp, r3
 8016bae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016bb0:	441c      	add	r4, r3
 8016bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bb4:	3b01      	subs	r3, #1
 8016bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8016bb8:	e774      	b.n	8016aa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8016bba:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016bbc:	449b      	add	fp, r3
 8016bbe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016bc0:	441c      	add	r4, r3
 8016bc2:	9b06      	ldr	r3, [sp, #24]
 8016bc4:	3b01      	subs	r3, #1
 8016bc6:	9306      	str	r3, [sp, #24]
 8016bc8:	9b07      	ldr	r3, [sp, #28]
 8016bca:	3303      	adds	r3, #3
 8016bcc:	9307      	str	r3, [sp, #28]
 8016bce:	e74a      	b.n	8016a66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016bd0:	d024      	beq.n	8016c1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8016bd2:	9b06      	ldr	r3, [sp, #24]
 8016bd4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8016bd6:	3b01      	subs	r3, #1
 8016bd8:	fb00 b003 	mla	r0, r0, r3, fp
 8016bdc:	1400      	asrs	r0, r0, #16
 8016bde:	f53f af5e 	bmi.w	8016a9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016be2:	3901      	subs	r1, #1
 8016be4:	4288      	cmp	r0, r1
 8016be6:	f6bf af5a 	bge.w	8016a9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016bea:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8016bec:	fb01 4303 	mla	r3, r1, r3, r4
 8016bf0:	141b      	asrs	r3, r3, #16
 8016bf2:	f53f af54 	bmi.w	8016a9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016bf6:	3a01      	subs	r2, #1
 8016bf8:	4293      	cmp	r3, r2
 8016bfa:	f6bf af50 	bge.w	8016a9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016bfe:	9b07      	ldr	r3, [sp, #28]
 8016c00:	f8dd e018 	ldr.w	lr, [sp, #24]
 8016c04:	1cde      	adds	r6, r3, #3
 8016c06:	f1be 0f00 	cmp.w	lr, #0
 8016c0a:	dc5f      	bgt.n	8016ccc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8016c0c:	9b06      	ldr	r3, [sp, #24]
 8016c0e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016c12:	9b07      	ldr	r3, [sp, #28]
 8016c14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016c18:	4423      	add	r3, r4
 8016c1a:	9307      	str	r3, [sp, #28]
 8016c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	f340 80c5 	ble.w	8016dae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8016c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c2a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016c2e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016c32:	eef0 6a48 	vmov.f32	s13, s16
 8016c36:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016c3a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016c3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c42:	ee16 ba90 	vmov	fp, s13
 8016c46:	eef0 6a68 	vmov.f32	s13, s17
 8016c4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c4e:	ee16 4a90 	vmov	r4, s13
 8016c52:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016c56:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016c5a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016c5e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016c62:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016c66:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016c6a:	ee18 2a10 	vmov	r2, s16
 8016c6e:	eeb0 8a47 	vmov.f32	s16, s14
 8016c72:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c76:	ee18 2a90 	vmov	r2, s17
 8016c7a:	932f      	str	r3, [sp, #188]	; 0xbc
 8016c7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c7e:	eef0 8a67 	vmov.f32	s17, s15
 8016c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c86:	9330      	str	r3, [sp, #192]	; 0xc0
 8016c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016c8c:	3b01      	subs	r3, #1
 8016c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c92:	bf08      	it	eq
 8016c94:	4613      	moveq	r3, r2
 8016c96:	9306      	str	r3, [sp, #24]
 8016c98:	e6d7      	b.n	8016a4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8016c9a:	f110 0c01 	adds.w	ip, r0, #1
 8016c9e:	d483      	bmi.n	8016ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8016ca0:	4563      	cmp	r3, ip
 8016ca2:	db81      	blt.n	8016ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8016ca4:	f115 0c01 	adds.w	ip, r5, #1
 8016ca8:	f53f af7e 	bmi.w	8016ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8016cac:	4567      	cmp	r7, ip
 8016cae:	f6ff af7b 	blt.w	8016ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8016cb2:	b23f      	sxth	r7, r7
 8016cb4:	b21b      	sxth	r3, r3
 8016cb6:	9700      	str	r7, [sp, #0]
 8016cb8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8016cbc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8016cc0:	9a08      	ldr	r2, [sp, #32]
 8016cc2:	4631      	mov	r1, r6
 8016cc4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016cc6:	f7ff fdcf 	bl	8016868 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8016cca:	e76d      	b.n	8016ba8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8016ccc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8016cce:	ea4f 402b 	mov.w	r0, fp, asr #16
 8016cd2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8016cd6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8016cda:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8016cde:	1421      	asrs	r1, r4, #16
 8016ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ce2:	fb0c 0101 	mla	r1, ip, r1, r0
 8016ce6:	9808      	ldr	r0, [sp, #32]
 8016ce8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016cec:	1845      	adds	r5, r0, r1
 8016cee:	5c40      	ldrb	r0, [r0, r1]
 8016cf0:	796f      	ldrb	r7, [r5, #5]
 8016cf2:	7869      	ldrb	r1, [r5, #1]
 8016cf4:	f895 8002 	ldrb.w	r8, [r5, #2]
 8016cf8:	f895 a003 	ldrb.w	sl, [r5, #3]
 8016cfc:	f895 9004 	ldrb.w	r9, [r5, #4]
 8016d00:	970c      	str	r7, [sp, #48]	; 0x30
 8016d02:	b1a2      	cbz	r2, 8016d2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8016d04:	2703      	movs	r7, #3
 8016d06:	f06f 0304 	mvn.w	r3, #4
 8016d0a:	3505      	adds	r5, #5
 8016d0c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8016d10:	eb05 070c 	add.w	r7, r5, ip
 8016d14:	f815 500c 	ldrb.w	r5, [r5, ip]
 8016d18:	9513      	str	r5, [sp, #76]	; 0x4c
 8016d1a:	787d      	ldrb	r5, [r7, #1]
 8016d1c:	9515      	str	r5, [sp, #84]	; 0x54
 8016d1e:	78bd      	ldrb	r5, [r7, #2]
 8016d20:	9517      	str	r5, [sp, #92]	; 0x5c
 8016d22:	78fd      	ldrb	r5, [r7, #3]
 8016d24:	9514      	str	r5, [sp, #80]	; 0x50
 8016d26:	793d      	ldrb	r5, [r7, #4]
 8016d28:	9516      	str	r5, [sp, #88]	; 0x58
 8016d2a:	797d      	ldrb	r5, [r7, #5]
 8016d2c:	9518      	str	r5, [sp, #96]	; 0x60
 8016d2e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016d32:	b292      	uxth	r2, r2
 8016d34:	3603      	adds	r6, #3
 8016d36:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016d3a:	fb03 f502 	mul.w	r5, r3, r2
 8016d3e:	011b      	lsls	r3, r3, #4
 8016d40:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8016d44:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8016d48:	1b5b      	subs	r3, r3, r5
 8016d4a:	b292      	uxth	r2, r2
 8016d4c:	b29b      	uxth	r3, r3
 8016d4e:	1abf      	subs	r7, r7, r2
 8016d50:	fb03 f909 	mul.w	r9, r3, r9
 8016d54:	b2bf      	uxth	r7, r7
 8016d56:	fb03 fa0a 	mul.w	sl, r3, sl
 8016d5a:	fb07 9901 	mla	r9, r7, r1, r9
 8016d5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016d60:	fb07 aa00 	mla	sl, r7, r0, sl
 8016d64:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016d66:	fb02 9901 	mla	r9, r2, r1, r9
 8016d6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016d6c:	fb02 aa00 	mla	sl, r2, r0, sl
 8016d70:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016d72:	fb05 9901 	mla	r9, r5, r1, r9
 8016d76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d78:	fb05 aa00 	mla	sl, r5, r0, sl
 8016d7c:	434b      	muls	r3, r1
 8016d7e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016d80:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d84:	fb07 3308 	mla	r3, r7, r8, r3
 8016d88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d8c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8016d90:	fb02 3201 	mla	r2, r2, r1, r3
 8016d94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016d96:	f806 9c05 	strb.w	r9, [r6, #-5]
 8016d9a:	fb05 2503 	mla	r5, r5, r3, r2
 8016d9e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016da0:	122d      	asrs	r5, r5, #8
 8016da2:	449b      	add	fp, r3
 8016da4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016da6:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016daa:	441c      	add	r4, r3
 8016dac:	e72b      	b.n	8016c06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8016dae:	b01b      	add	sp, #108	; 0x6c
 8016db0:	ecbd 8b08 	vpop	{d8-d11}
 8016db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016db8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8016db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dbc:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8016dc0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8016dc4:	fb04 5603 	mla	r6, r4, r3, r5
 8016dc8:	2c00      	cmp	r4, #0
 8016dca:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016dce:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8016dd2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8016dd6:	db36      	blt.n	8016e46 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8016dd8:	45a6      	cmp	lr, r4
 8016dda:	dd34      	ble.n	8016e46 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8016ddc:	2d00      	cmp	r5, #0
 8016dde:	db30      	blt.n	8016e42 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8016de0:	42ab      	cmp	r3, r5
 8016de2:	dd2e      	ble.n	8016e42 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8016de4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8016de8:	1c6e      	adds	r6, r5, #1
 8016dea:	d42f      	bmi.n	8016e4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8016dec:	42b3      	cmp	r3, r6
 8016dee:	dd2d      	ble.n	8016e4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8016df0:	b370      	cbz	r0, 8016e50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8016df2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8016df6:	3401      	adds	r4, #1
 8016df8:	d42e      	bmi.n	8016e58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8016dfa:	45a6      	cmp	lr, r4
 8016dfc:	dd2c      	ble.n	8016e58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8016dfe:	b377      	cbz	r7, 8016e5e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8016e00:	2d00      	cmp	r5, #0
 8016e02:	db27      	blt.n	8016e54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8016e04:	42ab      	cmp	r3, r5
 8016e06:	dd25      	ble.n	8016e54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8016e08:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8016e0c:	3501      	adds	r5, #1
 8016e0e:	d429      	bmi.n	8016e64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8016e10:	42ab      	cmp	r3, r5
 8016e12:	dd27      	ble.n	8016e64 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8016e14:	b340      	cbz	r0, 8016e68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8016e16:	3301      	adds	r3, #1
 8016e18:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8016e1c:	280f      	cmp	r0, #15
 8016e1e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8016e22:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8016e26:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8016e2a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8016e2e:	d801      	bhi.n	8016e34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8016e30:	2f0f      	cmp	r7, #15
 8016e32:	d91b      	bls.n	8016e6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8016e34:	4b89      	ldr	r3, [pc, #548]	; (801705c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8016e36:	f240 115b 	movw	r1, #347	; 0x15b
 8016e3a:	4a89      	ldr	r2, [pc, #548]	; (8017060 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8016e3c:	4889      	ldr	r0, [pc, #548]	; (8017064 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8016e3e:	f002 f97d 	bl	801913c <__assert_func>
 8016e42:	2200      	movs	r2, #0
 8016e44:	e7d0      	b.n	8016de8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8016e46:	2600      	movs	r6, #0
 8016e48:	4632      	mov	r2, r6
 8016e4a:	e7d4      	b.n	8016df6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8016e4c:	2600      	movs	r6, #0
 8016e4e:	e7d2      	b.n	8016df6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8016e50:	4606      	mov	r6, r0
 8016e52:	e7d0      	b.n	8016df6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8016e54:	2400      	movs	r4, #0
 8016e56:	e7d9      	b.n	8016e0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8016e58:	2300      	movs	r3, #0
 8016e5a:	461c      	mov	r4, r3
 8016e5c:	e7de      	b.n	8016e1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8016e5e:	463b      	mov	r3, r7
 8016e60:	463c      	mov	r4, r7
 8016e62:	e7db      	b.n	8016e1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8016e64:	2300      	movs	r3, #0
 8016e66:	e7d9      	b.n	8016e1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	e7d7      	b.n	8016e1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8016e6c:	b280      	uxth	r0, r0
 8016e6e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8016e72:	b2bf      	uxth	r7, r7
 8016e74:	fb00 fe07 	mul.w	lr, r0, r7
 8016e78:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8016e7c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8016e80:	eba0 0c0e 	sub.w	ip, r0, lr
 8016e84:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8016e88:	b2bf      	uxth	r7, r7
 8016e8a:	fa1f fc8c 	uxth.w	ip, ip
 8016e8e:	eba5 0507 	sub.w	r5, r5, r7
 8016e92:	fb0c f00a 	mul.w	r0, ip, sl
 8016e96:	b2ad      	uxth	r5, r5
 8016e98:	fb05 000b 	mla	r0, r5, fp, r0
 8016e9c:	fb07 0009 	mla	r0, r7, r9, r0
 8016ea0:	fb0e 0008 	mla	r0, lr, r8, r0
 8016ea4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016ea8:	9001      	str	r0, [sp, #4]
 8016eaa:	d018      	beq.n	8016ede <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8016eac:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8016eb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016eb4:	fb0b f000 	mul.w	r0, fp, r0
 8016eb8:	fb0b fb02 	mul.w	fp, fp, r2
 8016ebc:	0a02      	lsrs	r2, r0, #8
 8016ebe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8016ec2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016ec6:	4402      	add	r2, r0
 8016ec8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8016ecc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8016ed0:	0a12      	lsrs	r2, r2, #8
 8016ed2:	0a00      	lsrs	r0, r0, #8
 8016ed4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016ed8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8016edc:	4302      	orrs	r2, r0
 8016ede:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016ee2:	d01a      	beq.n	8016f1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8016ee4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8016ee8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016eec:	fb0a f000 	mul.w	r0, sl, r0
 8016ef0:	fb0a fa06 	mul.w	sl, sl, r6
 8016ef4:	0a06      	lsrs	r6, r0, #8
 8016ef6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8016efa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8016efe:	4406      	add	r6, r0
 8016f00:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8016f04:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8016f08:	0a36      	lsrs	r6, r6, #8
 8016f0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016f0e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8016f12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016f16:	ea46 060a 	orr.w	r6, r6, sl
 8016f1a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016f1e:	d01b      	beq.n	8016f58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8016f20:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8016f24:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016f28:	fb09 fa0a 	mul.w	sl, r9, sl
 8016f2c:	fb09 f004 	mul.w	r0, r9, r4
 8016f30:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8016f34:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016f38:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8016f3c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016f40:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8016f44:	4454      	add	r4, sl
 8016f46:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016f4a:	0a24      	lsrs	r4, r4, #8
 8016f4c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8016f50:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016f54:	ea44 0409 	orr.w	r4, r4, r9
 8016f58:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016f5c:	d01b      	beq.n	8016f96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8016f5e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8016f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016f66:	fb08 f909 	mul.w	r9, r8, r9
 8016f6a:	fb08 f003 	mul.w	r0, r8, r3
 8016f6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016f72:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8016f76:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8016f7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016f7e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8016f82:	444b      	add	r3, r9
 8016f84:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8016f88:	0a1b      	lsrs	r3, r3, #8
 8016f8a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8016f8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016f92:	ea43 0308 	orr.w	r3, r3, r8
 8016f96:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8016f9a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016f9e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8016fa2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016fa6:	fb0c f000 	mul.w	r0, ip, r0
 8016faa:	fb0c f606 	mul.w	r6, ip, r6
 8016fae:	fb05 0808 	mla	r8, r5, r8, r0
 8016fb2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8016fb6:	fb05 6502 	mla	r5, r5, r2, r6
 8016fba:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016fbe:	fb07 8800 	mla	r8, r7, r0, r8
 8016fc2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8016fc6:	fb07 5704 	mla	r7, r7, r4, r5
 8016fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016fce:	fb0e 8000 	mla	r0, lr, r0, r8
 8016fd2:	fb0e 7e03 	mla	lr, lr, r3, r7
 8016fd6:	9b01      	ldr	r3, [sp, #4]
 8016fd8:	0a00      	lsrs	r0, r0, #8
 8016fda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016fde:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016fe2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016fe6:	ea40 0e0e 	orr.w	lr, r0, lr
 8016fea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016fee:	b280      	uxth	r0, r0
 8016ff0:	fa5f f48e 	uxtb.w	r4, lr
 8016ff4:	4343      	muls	r3, r0
 8016ff6:	fb14 f400 	smulbb	r4, r4, r0
 8016ffa:	1c5a      	adds	r2, r3, #1
 8016ffc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017000:	780b      	ldrb	r3, [r1, #0]
 8017002:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8017006:	b2d2      	uxtb	r2, r2
 8017008:	fb03 4302 	mla	r3, r3, r2, r4
 801700c:	b29b      	uxth	r3, r3
 801700e:	1c5c      	adds	r4, r3, #1
 8017010:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8017014:	784c      	ldrb	r4, [r1, #1]
 8017016:	fb14 f402 	smulbb	r4, r4, r2
 801701a:	121b      	asrs	r3, r3, #8
 801701c:	700b      	strb	r3, [r1, #0]
 801701e:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8017022:	fb03 4300 	mla	r3, r3, r0, r4
 8017026:	b29b      	uxth	r3, r3
 8017028:	1c5c      	adds	r4, r3, #1
 801702a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801702e:	121b      	asrs	r3, r3, #8
 8017030:	704b      	strb	r3, [r1, #1]
 8017032:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8017036:	f891 e002 	ldrb.w	lr, [r1, #2]
 801703a:	fb1e fe02 	smulbb	lr, lr, r2
 801703e:	fb03 ee00 	mla	lr, r3, r0, lr
 8017042:	fa1f fe8e 	uxth.w	lr, lr
 8017046:	f10e 0301 	add.w	r3, lr, #1
 801704a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801704e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017052:	f881 e002 	strb.w	lr, [r1, #2]
 8017056:	b003      	add	sp, #12
 8017058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801705c:	0801ce72 	.word	0x0801ce72
 8017060:	0801d286 	.word	0x0801d286
 8017064:	0801ce3f 	.word	0x0801ce3f

08017068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	ed2d 8b08 	vpush	{d8-d11}
 8017070:	b09d      	sub	sp, #116	; 0x74
 8017072:	eeb0 aa40 	vmov.f32	s20, s0
 8017076:	eef0 9a60 	vmov.f32	s19, s1
 801707a:	9219      	str	r2, [sp, #100]	; 0x64
 801707c:	eeb0 9a41 	vmov.f32	s18, s2
 8017080:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8017082:	eeb0 8a62 	vmov.f32	s16, s5
 8017086:	9307      	str	r3, [sp, #28]
 8017088:	eef0 8a43 	vmov.f32	s17, s6
 801708c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8017090:	eef0 ba44 	vmov.f32	s23, s8
 8017094:	901b      	str	r0, [sp, #108]	; 0x6c
 8017096:	eeb0 ba64 	vmov.f32	s22, s9
 801709a:	931a      	str	r3, [sp, #104]	; 0x68
 801709c:	eef0 aa45 	vmov.f32	s21, s10
 80170a0:	6850      	ldr	r0, [r2, #4]
 80170a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80170a4:	6812      	ldr	r2, [r2, #0]
 80170a6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80170aa:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 80170ae:	fb00 1303 	mla	r3, r0, r3, r1
 80170b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80170b6:	18d3      	adds	r3, r2, r3
 80170b8:	930a      	str	r3, [sp, #40]	; 0x28
 80170ba:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	9310      	str	r3, [sp, #64]	; 0x40
 80170c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80170c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80170c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	dc03      	bgt.n	80170d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80170cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	f340 8368 	ble.w	80177a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80170d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80170d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80170da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80170de:	1e48      	subs	r0, r1, #1
 80170e0:	1e57      	subs	r7, r2, #1
 80170e2:	9b07      	ldr	r3, [sp, #28]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	f340 8187 	ble.w	80173f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80170ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80170ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80170f2:	d406      	bmi.n	8017102 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80170f4:	4584      	cmp	ip, r0
 80170f6:	da04      	bge.n	8017102 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	db02      	blt.n	8017102 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80170fc:	42bb      	cmp	r3, r7
 80170fe:	f2c0 817c 	blt.w	80173fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8017102:	f11c 0c01 	adds.w	ip, ip, #1
 8017106:	f100 816c 	bmi.w	80173e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801710a:	4561      	cmp	r1, ip
 801710c:	f2c0 8169 	blt.w	80173e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017110:	3301      	adds	r3, #1
 8017112:	f100 8166 	bmi.w	80173e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017116:	429a      	cmp	r2, r3
 8017118:	f2c0 8163 	blt.w	80173e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801711c:	9b07      	ldr	r3, [sp, #28]
 801711e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017120:	9318      	str	r3, [sp, #96]	; 0x60
 8017122:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017124:	2b00      	cmp	r3, #0
 8017126:	f340 8186 	ble.w	8017436 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801712a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801712c:	142a      	asrs	r2, r5, #16
 801712e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8017132:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017136:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801713a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801713e:	f100 81cb 	bmi.w	80174d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017142:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017146:	4542      	cmp	r2, r8
 8017148:	f280 81c6 	bge.w	80174d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801714c:	2800      	cmp	r0, #0
 801714e:	f2c0 81c3 	blt.w	80174d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8017152:	f103 38ff 	add.w	r8, r3, #4294967295
 8017156:	4540      	cmp	r0, r8
 8017158:	f280 81be 	bge.w	80174d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801715c:	fa0f f38e 	sxth.w	r3, lr
 8017160:	fb00 2203 	mla	r2, r0, r3, r2
 8017164:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017166:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801716a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801716e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8017172:	2900      	cmp	r1, #0
 8017174:	f000 81a6 	beq.w	80174c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8017178:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801717c:	900c      	str	r0, [sp, #48]	; 0x30
 801717e:	0e00      	lsrs	r0, r0, #24
 8017180:	9013      	str	r0, [sp, #76]	; 0x4c
 8017182:	f1bc 0f00 	cmp.w	ip, #0
 8017186:	d00f      	beq.n	80171a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801718c:	3b01      	subs	r3, #1
 801718e:	009b      	lsls	r3, r3, #2
 8017190:	3304      	adds	r3, #4
 8017192:	eb08 0003 	add.w	r0, r8, r3
 8017196:	f858 3003 	ldr.w	r3, [r8, r3]
 801719a:	9308      	str	r3, [sp, #32]
 801719c:	0e1b      	lsrs	r3, r3, #24
 801719e:	9311      	str	r3, [sp, #68]	; 0x44
 80171a0:	6843      	ldr	r3, [r0, #4]
 80171a2:	930d      	str	r3, [sp, #52]	; 0x34
 80171a4:	0e1b      	lsrs	r3, r3, #24
 80171a6:	9314      	str	r3, [sp, #80]	; 0x50
 80171a8:	b289      	uxth	r1, r1
 80171aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80171ac:	fa1f fc8c 	uxth.w	ip, ip
 80171b0:	0108      	lsls	r0, r1, #4
 80171b2:	fb01 f90c 	mul.w	r9, r1, ip
 80171b6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80171ba:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80171be:	eba0 0809 	sub.w	r8, r0, r9
 80171c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80171c4:	fa1f f18c 	uxth.w	r1, ip
 80171c8:	fa1f f888 	uxth.w	r8, r8
 80171cc:	1a5b      	subs	r3, r3, r1
 80171ce:	fb08 f000 	mul.w	r0, r8, r0
 80171d2:	b29b      	uxth	r3, r3
 80171d4:	fb03 000e 	mla	r0, r3, lr, r0
 80171d8:	fb01 0004 	mla	r0, r1, r4, r0
 80171dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80171de:	fb09 0004 	mla	r0, r9, r4, r0
 80171e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80171e6:	2800      	cmp	r0, #0
 80171e8:	f000 80f2 	beq.w	80173d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80171ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80171f0:	d01b      	beq.n	801722a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80171f2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80171f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80171fa:	fb0e fa0a 	mul.w	sl, lr, sl
 80171fe:	fb0e fe02 	mul.w	lr, lr, r2
 8017202:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8017206:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801720a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801720e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017212:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017216:	4452      	add	r2, sl
 8017218:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801721c:	0a12      	lsrs	r2, r2, #8
 801721e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017222:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017226:	ea42 020c 	orr.w	r2, r2, ip
 801722a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801722c:	2cff      	cmp	r4, #255	; 0xff
 801722e:	d021      	beq.n	8017274 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8017230:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017232:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017236:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017238:	fb04 fb0b 	mul.w	fp, r4, fp
 801723c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801723e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017242:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017244:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017248:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801724c:	fb04 fa0a 	mul.w	sl, r4, sl
 8017250:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017254:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017258:	44de      	add	lr, fp
 801725a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801725e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017262:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017266:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801726a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801726e:	ea4e 040a 	orr.w	r4, lr, sl
 8017272:	940c      	str	r4, [sp, #48]	; 0x30
 8017274:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017276:	2cff      	cmp	r4, #255	; 0xff
 8017278:	d021      	beq.n	80172be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801727a:	9c08      	ldr	r4, [sp, #32]
 801727c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017280:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017282:	fb04 fb0b 	mul.w	fp, r4, fp
 8017286:	9c08      	ldr	r4, [sp, #32]
 8017288:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801728c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801728e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017292:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017296:	fb04 fa0a 	mul.w	sl, r4, sl
 801729a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801729e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80172a2:	44de      	add	lr, fp
 80172a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80172a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80172ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80172b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80172b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80172b8:	ea4e 040a 	orr.w	r4, lr, sl
 80172bc:	9408      	str	r4, [sp, #32]
 80172be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172c0:	2cff      	cmp	r4, #255	; 0xff
 80172c2:	d021      	beq.n	8017308 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80172c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80172c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80172ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80172d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80172d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80172d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80172dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80172e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80172e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80172e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80172ec:	44de      	add	lr, fp
 80172ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80172f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80172f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80172fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80172fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017302:	ea4e 040a 	orr.w	r4, lr, sl
 8017306:	940d      	str	r4, [sp, #52]	; 0x34
 8017308:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801730a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801730e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017312:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017316:	9c08      	ldr	r4, [sp, #32]
 8017318:	fb08 fc0c 	mul.w	ip, r8, ip
 801731c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8017320:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017324:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017326:	fb01 cc0e 	mla	ip, r1, lr, ip
 801732a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801732e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017330:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017334:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017338:	fb08 f80e 	mul.w	r8, r8, lr
 801733c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017340:	fb03 8202 	mla	r2, r3, r2, r8
 8017344:	9b08      	ldr	r3, [sp, #32]
 8017346:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801734a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801734e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017350:	fb01 220a 	mla	r2, r1, sl, r2
 8017354:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8017358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801735a:	fb09 2901 	mla	r9, r9, r1, r2
 801735e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017360:	4343      	muls	r3, r0
 8017362:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017366:	1c58      	adds	r0, r3, #1
 8017368:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801736c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017370:	783b      	ldrb	r3, [r7, #0]
 8017372:	ea4c 0c09 	orr.w	ip, ip, r9
 8017376:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801737a:	fa5f f28c 	uxtb.w	r2, ip
 801737e:	b2c0      	uxtb	r0, r0
 8017380:	fb12 f201 	smulbb	r2, r2, r1
 8017384:	fb03 2300 	mla	r3, r3, r0, r2
 8017388:	b29b      	uxth	r3, r3
 801738a:	1c5a      	adds	r2, r3, #1
 801738c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017390:	787a      	ldrb	r2, [r7, #1]
 8017392:	fb12 f200 	smulbb	r2, r2, r0
 8017396:	121b      	asrs	r3, r3, #8
 8017398:	703b      	strb	r3, [r7, #0]
 801739a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801739e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80173a2:	fb03 2301 	mla	r3, r3, r1, r2
 80173a6:	b29b      	uxth	r3, r3
 80173a8:	1c5a      	adds	r2, r3, #1
 80173aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80173ae:	121b      	asrs	r3, r3, #8
 80173b0:	707b      	strb	r3, [r7, #1]
 80173b2:	78bb      	ldrb	r3, [r7, #2]
 80173b4:	fb13 f000 	smulbb	r0, r3, r0
 80173b8:	fb0c 0c01 	mla	ip, ip, r1, r0
 80173bc:	fa1f fc8c 	uxth.w	ip, ip
 80173c0:	f10c 0301 	add.w	r3, ip, #1
 80173c4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80173c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80173cc:	f887 c002 	strb.w	ip, [r7, #2]
 80173d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80173d2:	3703      	adds	r7, #3
 80173d4:	441d      	add	r5, r3
 80173d6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80173d8:	441e      	add	r6, r3
 80173da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80173dc:	3b01      	subs	r3, #1
 80173de:	9318      	str	r3, [sp, #96]	; 0x60
 80173e0:	e69f      	b.n	8017122 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80173e2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80173e4:	441d      	add	r5, r3
 80173e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80173e8:	441e      	add	r6, r3
 80173ea:	9b07      	ldr	r3, [sp, #28]
 80173ec:	3b01      	subs	r3, #1
 80173ee:	9307      	str	r3, [sp, #28]
 80173f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173f2:	3303      	adds	r3, #3
 80173f4:	930a      	str	r3, [sp, #40]	; 0x28
 80173f6:	e674      	b.n	80170e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80173f8:	d025      	beq.n	8017446 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80173fa:	9b07      	ldr	r3, [sp, #28]
 80173fc:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80173fe:	3b01      	subs	r3, #1
 8017400:	fb00 5003 	mla	r0, r0, r3, r5
 8017404:	1400      	asrs	r0, r0, #16
 8017406:	f53f ae89 	bmi.w	801711c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801740a:	3901      	subs	r1, #1
 801740c:	4288      	cmp	r0, r1
 801740e:	f6bf ae85 	bge.w	801711c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017412:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8017414:	fb01 6303 	mla	r3, r1, r3, r6
 8017418:	141b      	asrs	r3, r3, #16
 801741a:	f53f ae7f 	bmi.w	801711c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801741e:	3a01      	subs	r2, #1
 8017420:	4293      	cmp	r3, r2
 8017422:	f6bf ae7b 	bge.w	801711c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8017426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017428:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801742c:	f103 0e03 	add.w	lr, r3, #3
 8017430:	f1bb 0f00 	cmp.w	fp, #0
 8017434:	dc6e      	bgt.n	8017514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8017436:	9b07      	ldr	r3, [sp, #28]
 8017438:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801743c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801743e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017442:	4423      	add	r3, r4
 8017444:	930a      	str	r3, [sp, #40]	; 0x28
 8017446:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017448:	2b00      	cmp	r3, #0
 801744a:	f340 81ab 	ble.w	80177a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801744e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017452:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017454:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017458:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801745c:	eef0 6a48 	vmov.f32	s13, s16
 8017460:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017464:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017468:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801746c:	ee16 5a90 	vmov	r5, s13
 8017470:	eef0 6a68 	vmov.f32	s13, s17
 8017474:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017478:	ee16 6a90 	vmov	r6, s13
 801747c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017480:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017484:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017488:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801748c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017490:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017494:	ee18 2a10 	vmov	r2, s16
 8017498:	eeb0 8a47 	vmov.f32	s16, s14
 801749c:	fb92 f3f3 	sdiv	r3, r2, r3
 80174a0:	ee18 2a90 	vmov	r2, s17
 80174a4:	9331      	str	r3, [sp, #196]	; 0xc4
 80174a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80174a8:	eef0 8a67 	vmov.f32	s17, s15
 80174ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80174b0:	9332      	str	r3, [sp, #200]	; 0xc8
 80174b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80174b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80174b6:	3b01      	subs	r3, #1
 80174b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80174ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80174bc:	bf08      	it	eq
 80174be:	4613      	moveq	r3, r2
 80174c0:	9307      	str	r3, [sp, #28]
 80174c2:	e600      	b.n	80170c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80174c4:	f1bc 0f00 	cmp.w	ip, #0
 80174c8:	f43f ae6e 	beq.w	80171a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80174cc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80174d0:	9308      	str	r3, [sp, #32]
 80174d2:	0e1b      	lsrs	r3, r3, #24
 80174d4:	9311      	str	r3, [sp, #68]	; 0x44
 80174d6:	e667      	b.n	80171a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80174d8:	f112 0801 	adds.w	r8, r2, #1
 80174dc:	f53f af78 	bmi.w	80173d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80174e0:	45c6      	cmp	lr, r8
 80174e2:	f6ff af75 	blt.w	80173d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80174e6:	f110 0801 	adds.w	r8, r0, #1
 80174ea:	f53f af71 	bmi.w	80173d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80174ee:	4543      	cmp	r3, r8
 80174f0:	f6ff af6e 	blt.w	80173d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80174f4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80174f6:	b21b      	sxth	r3, r3
 80174f8:	9201      	str	r2, [sp, #4]
 80174fa:	9300      	str	r3, [sp, #0]
 80174fc:	fa0f f38e 	sxth.w	r3, lr
 8017500:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017506:	e9cd c404 	strd	ip, r4, [sp, #16]
 801750a:	4639      	mov	r1, r7
 801750c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801750e:	f7ff fc53 	bl	8016db8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8017512:	e75d      	b.n	80173d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017514:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8017516:	142f      	asrs	r7, r5, #16
 8017518:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801751a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801751e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8017522:	1433      	asrs	r3, r6, #16
 8017524:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017528:	fb02 7303 	mla	r3, r2, r3, r7
 801752c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8017530:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017534:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017538:	2900      	cmp	r1, #0
 801753a:	f000 812a 	beq.w	8017792 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801753e:	687c      	ldr	r4, [r7, #4]
 8017540:	940e      	str	r4, [sp, #56]	; 0x38
 8017542:	0e24      	lsrs	r4, r4, #24
 8017544:	9415      	str	r4, [sp, #84]	; 0x54
 8017546:	b178      	cbz	r0, 8017568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8017548:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801754c:	3a01      	subs	r2, #1
 801754e:	0092      	lsls	r2, r2, #2
 8017550:	3204      	adds	r2, #4
 8017552:	eb07 0802 	add.w	r8, r7, r2
 8017556:	58ba      	ldr	r2, [r7, r2]
 8017558:	9209      	str	r2, [sp, #36]	; 0x24
 801755a:	0e12      	lsrs	r2, r2, #24
 801755c:	9212      	str	r2, [sp, #72]	; 0x48
 801755e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017562:	920f      	str	r2, [sp, #60]	; 0x3c
 8017564:	0e12      	lsrs	r2, r2, #24
 8017566:	9216      	str	r2, [sp, #88]	; 0x58
 8017568:	b289      	uxth	r1, r1
 801756a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801756c:	b280      	uxth	r0, r0
 801756e:	fb01 f900 	mul.w	r9, r1, r0
 8017572:	0109      	lsls	r1, r1, #4
 8017574:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017578:	eba1 0809 	sub.w	r8, r1, r9
 801757c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8017580:	9915      	ldr	r1, [sp, #84]	; 0x54
 8017582:	b280      	uxth	r0, r0
 8017584:	fa1f f888 	uxth.w	r8, r8
 8017588:	1a12      	subs	r2, r2, r0
 801758a:	fb08 f101 	mul.w	r1, r8, r1
 801758e:	b292      	uxth	r2, r2
 8017590:	fb02 110c 	mla	r1, r2, ip, r1
 8017594:	fb00 1104 	mla	r1, r0, r4, r1
 8017598:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801759a:	fb09 1104 	mla	r1, r9, r4, r1
 801759e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80175a2:	2900      	cmp	r1, #0
 80175a4:	f000 80ec 	beq.w	8017780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80175a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80175ac:	d019      	beq.n	80175e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80175ae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80175b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80175b6:	fb0c fa0a 	mul.w	sl, ip, sl
 80175ba:	fb0c fc03 	mul.w	ip, ip, r3
 80175be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80175c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80175c6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80175ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80175ce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80175d2:	4453      	add	r3, sl
 80175d4:	0a3f      	lsrs	r7, r7, #8
 80175d6:	0a1b      	lsrs	r3, r3, #8
 80175d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80175dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80175e0:	433b      	orrs	r3, r7
 80175e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80175e4:	2cff      	cmp	r4, #255	; 0xff
 80175e6:	d020      	beq.n	801762a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 80175e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80175ea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80175ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80175f0:	4367      	muls	r7, r4
 80175f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80175f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80175f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80175fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80175fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017602:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017606:	fb04 fa0a 	mul.w	sl, r4, sl
 801760a:	44bc      	add	ip, r7
 801760c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017610:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017614:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017618:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801761c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017620:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017624:	ea4c 040a 	orr.w	r4, ip, sl
 8017628:	940e      	str	r4, [sp, #56]	; 0x38
 801762a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801762c:	2cff      	cmp	r4, #255	; 0xff
 801762e:	d020      	beq.n	8017672 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8017630:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017632:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017636:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017638:	4367      	muls	r7, r4
 801763a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801763c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017640:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017644:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017646:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801764a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801764e:	fb04 fa0a 	mul.w	sl, r4, sl
 8017652:	44bc      	add	ip, r7
 8017654:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017658:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801765c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017660:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017664:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017668:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801766c:	ea4c 040a 	orr.w	r4, ip, sl
 8017670:	9409      	str	r4, [sp, #36]	; 0x24
 8017672:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017674:	2cff      	cmp	r4, #255	; 0xff
 8017676:	d020      	beq.n	80176ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8017678:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801767a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801767e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017680:	4367      	muls	r7, r4
 8017682:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017684:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017688:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801768c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801768e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017692:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017696:	fb04 fa0a 	mul.w	sl, r4, sl
 801769a:	44bc      	add	ip, r7
 801769c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80176a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80176a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80176a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80176ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80176b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80176b4:	ea4c 040a 	orr.w	r4, ip, sl
 80176b8:	940f      	str	r4, [sp, #60]	; 0x3c
 80176ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80176bc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80176c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80176c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80176c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80176ca:	fb08 f707 	mul.w	r7, r8, r7
 80176ce:	fb02 770c 	mla	r7, r2, ip, r7
 80176d2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80176d6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80176d8:	fb00 770c 	mla	r7, r0, ip, r7
 80176dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80176e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80176e2:	fb09 770c 	mla	r7, r9, ip, r7
 80176e6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80176ea:	fb08 f80c 	mul.w	r8, r8, ip
 80176ee:	0a3f      	lsrs	r7, r7, #8
 80176f0:	fb02 8303 	mla	r3, r2, r3, r8
 80176f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176f6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80176fa:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80176fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017700:	fb00 330a 	mla	r3, r0, sl, r3
 8017704:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8017708:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801770a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801770e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017710:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017714:	434b      	muls	r3, r1
 8017716:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801771a:	1c59      	adds	r1, r3, #1
 801771c:	ea47 070c 	orr.w	r7, r7, ip
 8017720:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017724:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8017728:	b2fa      	uxtb	r2, r7
 801772a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801772e:	fb12 f200 	smulbb	r2, r2, r0
 8017732:	b2c9      	uxtb	r1, r1
 8017734:	fb03 2301 	mla	r3, r3, r1, r2
 8017738:	b29b      	uxth	r3, r3
 801773a:	1c5a      	adds	r2, r3, #1
 801773c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017740:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8017744:	fb12 f201 	smulbb	r2, r2, r1
 8017748:	121b      	asrs	r3, r3, #8
 801774a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801774e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8017752:	0c3f      	lsrs	r7, r7, #16
 8017754:	fb03 2300 	mla	r3, r3, r0, r2
 8017758:	b29b      	uxth	r3, r3
 801775a:	1c5a      	adds	r2, r3, #1
 801775c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017760:	121b      	asrs	r3, r3, #8
 8017762:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8017766:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801776a:	fb13 f101 	smulbb	r1, r3, r1
 801776e:	fb07 1700 	mla	r7, r7, r0, r1
 8017772:	b2bf      	uxth	r7, r7
 8017774:	1c79      	adds	r1, r7, #1
 8017776:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801777a:	123f      	asrs	r7, r7, #8
 801777c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8017780:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8017782:	f10e 0e03 	add.w	lr, lr, #3
 8017786:	f10b 3bff 	add.w	fp, fp, #4294967295
 801778a:	441d      	add	r5, r3
 801778c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801778e:	441e      	add	r6, r3
 8017790:	e64e      	b.n	8017430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8017792:	2800      	cmp	r0, #0
 8017794:	f43f aee8 	beq.w	8017568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8017798:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801779c:	9209      	str	r2, [sp, #36]	; 0x24
 801779e:	0e12      	lsrs	r2, r2, #24
 80177a0:	9212      	str	r2, [sp, #72]	; 0x48
 80177a2:	e6e1      	b.n	8017568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80177a4:	b01d      	add	sp, #116	; 0x74
 80177a6:	ecbd 8b08 	vpop	{d8-d11}
 80177aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080177b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80177b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177b4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80177b8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80177bc:	fb04 5603 	mla	r6, r4, r3, r5
 80177c0:	2c00      	cmp	r4, #0
 80177c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80177c6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80177ca:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80177ce:	db36      	blt.n	801783e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 80177d0:	45a6      	cmp	lr, r4
 80177d2:	dd34      	ble.n	801783e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 80177d4:	2d00      	cmp	r5, #0
 80177d6:	db30      	blt.n	801783a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 80177d8:	42ab      	cmp	r3, r5
 80177da:	dd2e      	ble.n	801783a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 80177dc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80177e0:	1c6e      	adds	r6, r5, #1
 80177e2:	d42f      	bmi.n	8017844 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 80177e4:	42b3      	cmp	r3, r6
 80177e6:	dd2d      	ble.n	8017844 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 80177e8:	b370      	cbz	r0, 8017848 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 80177ea:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80177ee:	3401      	adds	r4, #1
 80177f0:	d42e      	bmi.n	8017850 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 80177f2:	45a6      	cmp	lr, r4
 80177f4:	dd2c      	ble.n	8017850 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 80177f6:	b377      	cbz	r7, 8017856 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 80177f8:	2d00      	cmp	r5, #0
 80177fa:	db27      	blt.n	801784c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 80177fc:	42ab      	cmp	r3, r5
 80177fe:	dd25      	ble.n	801784c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8017800:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8017804:	3501      	adds	r5, #1
 8017806:	d429      	bmi.n	801785c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8017808:	42ab      	cmp	r3, r5
 801780a:	dd27      	ble.n	801785c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801780c:	b340      	cbz	r0, 8017860 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801780e:	3301      	adds	r3, #1
 8017810:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8017814:	280f      	cmp	r0, #15
 8017816:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801781a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801781e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8017822:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8017826:	d801      	bhi.n	801782c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8017828:	2f0f      	cmp	r7, #15
 801782a:	d91b      	bls.n	8017864 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801782c:	4b7e      	ldr	r3, [pc, #504]	; (8017a28 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801782e:	f240 115b 	movw	r1, #347	; 0x15b
 8017832:	4a7e      	ldr	r2, [pc, #504]	; (8017a2c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8017834:	487e      	ldr	r0, [pc, #504]	; (8017a30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8017836:	f001 fc81 	bl	801913c <__assert_func>
 801783a:	2200      	movs	r2, #0
 801783c:	e7d0      	b.n	80177e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801783e:	2600      	movs	r6, #0
 8017840:	4632      	mov	r2, r6
 8017842:	e7d4      	b.n	80177ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8017844:	2600      	movs	r6, #0
 8017846:	e7d2      	b.n	80177ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8017848:	4606      	mov	r6, r0
 801784a:	e7d0      	b.n	80177ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801784c:	2400      	movs	r4, #0
 801784e:	e7d9      	b.n	8017804 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8017850:	2300      	movs	r3, #0
 8017852:	461c      	mov	r4, r3
 8017854:	e7de      	b.n	8017814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8017856:	463b      	mov	r3, r7
 8017858:	463c      	mov	r4, r7
 801785a:	e7db      	b.n	8017814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801785c:	2300      	movs	r3, #0
 801785e:	e7d9      	b.n	8017814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8017860:	4603      	mov	r3, r0
 8017862:	e7d7      	b.n	8017814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8017864:	b280      	uxth	r0, r0
 8017866:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801786a:	b2bf      	uxth	r7, r7
 801786c:	fb00 fe07 	mul.w	lr, r0, r7
 8017870:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017874:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8017878:	eba0 0c0e 	sub.w	ip, r0, lr
 801787c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017880:	b2bf      	uxth	r7, r7
 8017882:	fa1f fc8c 	uxth.w	ip, ip
 8017886:	eba0 0507 	sub.w	r5, r0, r7
 801788a:	fb0c f00a 	mul.w	r0, ip, sl
 801788e:	b2ad      	uxth	r5, r5
 8017890:	fb05 000b 	mla	r0, r5, fp, r0
 8017894:	fb07 0009 	mla	r0, r7, r9, r0
 8017898:	fb0e 0008 	mla	r0, lr, r8, r0
 801789c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80178a0:	9001      	str	r0, [sp, #4]
 80178a2:	d018      	beq.n	80178d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80178a4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80178a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80178ac:	fb0b f000 	mul.w	r0, fp, r0
 80178b0:	fb0b fb02 	mul.w	fp, fp, r2
 80178b4:	0a02      	lsrs	r2, r0, #8
 80178b6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80178ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80178be:	4402      	add	r2, r0
 80178c0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80178c4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80178c8:	0a12      	lsrs	r2, r2, #8
 80178ca:	0a00      	lsrs	r0, r0, #8
 80178cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80178d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80178d4:	4302      	orrs	r2, r0
 80178d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80178da:	d01a      	beq.n	8017912 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 80178dc:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80178e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80178e4:	fb0a f000 	mul.w	r0, sl, r0
 80178e8:	fb0a fa06 	mul.w	sl, sl, r6
 80178ec:	0a06      	lsrs	r6, r0, #8
 80178ee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80178f2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80178f6:	4406      	add	r6, r0
 80178f8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80178fc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8017900:	0a36      	lsrs	r6, r6, #8
 8017902:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017906:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801790a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801790e:	ea46 060a 	orr.w	r6, r6, sl
 8017912:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017916:	d01b      	beq.n	8017950 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8017918:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801791c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017920:	fb09 fa0a 	mul.w	sl, r9, sl
 8017924:	fb09 f004 	mul.w	r0, r9, r4
 8017928:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801792c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017930:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8017934:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017938:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801793c:	4454      	add	r4, sl
 801793e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017942:	0a24      	lsrs	r4, r4, #8
 8017944:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017948:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801794c:	ea44 0409 	orr.w	r4, r4, r9
 8017950:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017954:	d01b      	beq.n	801798e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8017956:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801795a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801795e:	fb08 f909 	mul.w	r9, r8, r9
 8017962:	fb08 f003 	mul.w	r0, r8, r3
 8017966:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801796a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801796e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8017972:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017976:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801797a:	444b      	add	r3, r9
 801797c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8017980:	0a1b      	lsrs	r3, r3, #8
 8017982:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8017986:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801798a:	ea43 0308 	orr.w	r3, r3, r8
 801798e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8017992:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017996:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801799a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801799e:	fb0c f000 	mul.w	r0, ip, r0
 80179a2:	fb0c f606 	mul.w	r6, ip, r6
 80179a6:	fb05 0808 	mla	r8, r5, r8, r0
 80179aa:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80179ae:	fb05 6502 	mla	r5, r5, r2, r6
 80179b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80179b6:	fb07 8800 	mla	r8, r7, r0, r8
 80179ba:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80179be:	fb07 5704 	mla	r7, r7, r4, r5
 80179c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80179c6:	fb0e 8000 	mla	r0, lr, r0, r8
 80179ca:	780a      	ldrb	r2, [r1, #0]
 80179cc:	fb0e 7e03 	mla	lr, lr, r3, r7
 80179d0:	9b01      	ldr	r3, [sp, #4]
 80179d2:	0a00      	lsrs	r0, r0, #8
 80179d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80179d8:	43db      	mvns	r3, r3
 80179da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80179e4:	ea40 0e0e 	orr.w	lr, r0, lr
 80179e8:	fb02 f003 	mul.w	r0, r2, r3
 80179ec:	1c42      	adds	r2, r0, #1
 80179ee:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80179f2:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80179f6:	700a      	strb	r2, [r1, #0]
 80179f8:	784a      	ldrb	r2, [r1, #1]
 80179fa:	435a      	muls	r2, r3
 80179fc:	1c50      	adds	r0, r2, #1
 80179fe:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8017a02:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8017a06:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8017a0a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017a0e:	704a      	strb	r2, [r1, #1]
 8017a10:	788a      	ldrb	r2, [r1, #2]
 8017a12:	4353      	muls	r3, r2
 8017a14:	1c5a      	adds	r2, r3, #1
 8017a16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017a1a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8017a1e:	f881 e002 	strb.w	lr, [r1, #2]
 8017a22:	b003      	add	sp, #12
 8017a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a28:	0801ce72 	.word	0x0801ce72
 8017a2c:	0801d286 	.word	0x0801d286
 8017a30:	0801ce3f 	.word	0x0801ce3f

08017a34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a38:	ed2d 8b08 	vpush	{d8-d11}
 8017a3c:	b099      	sub	sp, #100	; 0x64
 8017a3e:	eeb0 aa40 	vmov.f32	s20, s0
 8017a42:	eef0 9a60 	vmov.f32	s19, s1
 8017a46:	9017      	str	r0, [sp, #92]	; 0x5c
 8017a48:	eeb0 9a41 	vmov.f32	s18, s2
 8017a4c:	9306      	str	r3, [sp, #24]
 8017a4e:	eeb0 8a62 	vmov.f32	s16, s5
 8017a52:	eef0 8a43 	vmov.f32	s17, s6
 8017a56:	eef0 ba44 	vmov.f32	s23, s8
 8017a5a:	eeb0 ba64 	vmov.f32	s22, s9
 8017a5e:	eef0 aa45 	vmov.f32	s21, s10
 8017a62:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8017a66:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017a68:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8017a6c:	6850      	ldr	r0, [r2, #4]
 8017a6e:	6812      	ldr	r2, [r2, #0]
 8017a70:	fb00 1303 	mla	r3, r0, r3, r1
 8017a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a78:	18d3      	adds	r3, r2, r3
 8017a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8017a7c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017a7e:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	930e      	str	r3, [sp, #56]	; 0x38
 8017a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	dc03      	bgt.n	8017a94 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017a8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	f340 8360 	ble.w	8018154 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8017a94:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017a96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017a9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017a9e:	1e48      	subs	r0, r1, #1
 8017aa0:	1e57      	subs	r7, r2, #1
 8017aa2:	9b06      	ldr	r3, [sp, #24]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	f340 817b 	ble.w	8017da0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8017aaa:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8017aae:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017ab2:	d406      	bmi.n	8017ac2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017ab4:	4584      	cmp	ip, r0
 8017ab6:	da04      	bge.n	8017ac2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	db02      	blt.n	8017ac2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017abc:	42bb      	cmp	r3, r7
 8017abe:	f2c0 8170 	blt.w	8017da2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8017ac2:	f11c 0c01 	adds.w	ip, ip, #1
 8017ac6:	f100 8160 	bmi.w	8017d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017aca:	4561      	cmp	r1, ip
 8017acc:	f2c0 815d 	blt.w	8017d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	f100 815a 	bmi.w	8017d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	f2c0 8157 	blt.w	8017d8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017adc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017ae0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017ae2:	f1b8 0f00 	cmp.w	r8, #0
 8017ae6:	f340 8179 	ble.w	8017ddc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8017aea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8017aec:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8017af0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017af2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017af6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8017afa:	142a      	asrs	r2, r5, #16
 8017afc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017b00:	689b      	ldr	r3, [r3, #8]
 8017b02:	f100 81be 	bmi.w	8017e82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017b06:	f103 39ff 	add.w	r9, r3, #4294967295
 8017b0a:	454a      	cmp	r2, r9
 8017b0c:	f280 81b9 	bge.w	8017e82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017b10:	f1bc 0f00 	cmp.w	ip, #0
 8017b14:	f2c0 81b5 	blt.w	8017e82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017b18:	f10e 39ff 	add.w	r9, lr, #4294967295
 8017b1c:	45cc      	cmp	ip, r9
 8017b1e:	f280 81b0 	bge.w	8017e82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017b22:	b21b      	sxth	r3, r3
 8017b24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017b26:	fb0c 2203 	mla	r2, ip, r3, r2
 8017b2a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8017b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b32:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8017b36:	2900      	cmp	r1, #0
 8017b38:	f000 8197 	beq.w	8017e6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8017b3c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8017b40:	940a      	str	r4, [sp, #40]	; 0x28
 8017b42:	0e24      	lsrs	r4, r4, #24
 8017b44:	9411      	str	r4, [sp, #68]	; 0x44
 8017b46:	b180      	cbz	r0, 8017b6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017b4c:	3b01      	subs	r3, #1
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	3304      	adds	r3, #4
 8017b52:	eb09 0c03 	add.w	ip, r9, r3
 8017b56:	f859 3003 	ldr.w	r3, [r9, r3]
 8017b5a:	9307      	str	r3, [sp, #28]
 8017b5c:	0e1b      	lsrs	r3, r3, #24
 8017b5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b60:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b66:	0e1b      	lsrs	r3, r3, #24
 8017b68:	9312      	str	r3, [sp, #72]	; 0x48
 8017b6a:	b289      	uxth	r1, r1
 8017b6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b6e:	b280      	uxth	r0, r0
 8017b70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017b72:	fb01 fa00 	mul.w	sl, r1, r0
 8017b76:	0109      	lsls	r1, r1, #4
 8017b78:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8017b7c:	eba1 090a 	sub.w	r9, r1, sl
 8017b80:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8017b84:	b280      	uxth	r0, r0
 8017b86:	fa1f f989 	uxth.w	r9, r9
 8017b8a:	1a09      	subs	r1, r1, r0
 8017b8c:	fb09 f303 	mul.w	r3, r9, r3
 8017b90:	b289      	uxth	r1, r1
 8017b92:	fb01 330e 	mla	r3, r1, lr, r3
 8017b96:	fb00 3304 	mla	r3, r0, r4, r3
 8017b9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017b9c:	fb0a 3304 	mla	r3, sl, r4, r3
 8017ba0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	f000 80e8 	beq.w	8017d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8017baa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017bae:	d01b      	beq.n	8017be8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8017bb0:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8017bb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017bb8:	fb0e fb0b 	mul.w	fp, lr, fp
 8017bbc:	fb0e fe02 	mul.w	lr, lr, r2
 8017bc0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8017bc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017bc8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017bcc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017bd0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017bd4:	445a      	add	r2, fp
 8017bd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017bda:	0a12      	lsrs	r2, r2, #8
 8017bdc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017be0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017be4:	ea42 020c 	orr.w	r2, r2, ip
 8017be8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017bea:	2cff      	cmp	r4, #255	; 0xff
 8017bec:	d021      	beq.n	8017c32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8017bee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017bf0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017bf4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017bf6:	fb04 fc0c 	mul.w	ip, r4, ip
 8017bfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017bfc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017c00:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8017c04:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017c06:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017c0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c0e:	fb04 fb0b 	mul.w	fp, r4, fp
 8017c12:	44e6      	add	lr, ip
 8017c14:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8017c18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017c1c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8017c20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c24:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017c28:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017c2c:	ea4e 040b 	orr.w	r4, lr, fp
 8017c30:	940a      	str	r4, [sp, #40]	; 0x28
 8017c32:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c34:	2cff      	cmp	r4, #255	; 0xff
 8017c36:	d021      	beq.n	8017c7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017c38:	9c07      	ldr	r4, [sp, #28]
 8017c3a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017c3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c40:	fb04 fc0c 	mul.w	ip, r4, ip
 8017c44:	9c07      	ldr	r4, [sp, #28]
 8017c46:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017c4a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8017c4e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c50:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017c54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c58:	fb04 fb0b 	mul.w	fp, r4, fp
 8017c5c:	44e6      	add	lr, ip
 8017c5e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8017c62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017c66:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8017c6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c6e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017c72:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017c76:	ea4e 040b 	orr.w	r4, lr, fp
 8017c7a:	9407      	str	r4, [sp, #28]
 8017c7c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017c7e:	2cff      	cmp	r4, #255	; 0xff
 8017c80:	d021      	beq.n	8017cc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8017c82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017c84:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017c88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017c8a:	fb04 fc0c 	mul.w	ip, r4, ip
 8017c8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017c90:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017c94:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8017c98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017c9a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017c9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017ca2:	fb04 fb0b 	mul.w	fp, r4, fp
 8017ca6:	44e6      	add	lr, ip
 8017ca8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8017cac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017cb0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8017cb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017cb8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017cbc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017cc0:	ea4e 040b 	orr.w	r4, lr, fp
 8017cc4:	940b      	str	r4, [sp, #44]	; 0x2c
 8017cc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017cc8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8017ccc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017cd0:	2bff      	cmp	r3, #255	; 0xff
 8017cd2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017cd6:	9c07      	ldr	r4, [sp, #28]
 8017cd8:	fb09 fc0c 	mul.w	ip, r9, ip
 8017cdc:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017ce0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017ce4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017ce6:	fb00 cc0e 	mla	ip, r0, lr, ip
 8017cea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017cee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017cf0:	fb0a cc0e 	mla	ip, sl, lr, ip
 8017cf4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017cf8:	fb09 f90e 	mul.w	r9, r9, lr
 8017cfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d00:	fb01 9202 	mla	r2, r1, r2, r9
 8017d04:	9907      	ldr	r1, [sp, #28]
 8017d06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d0a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8017d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d10:	fb00 220b 	mla	r2, r0, fp, r2
 8017d14:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8017d18:	fb0a 2a00 	mla	sl, sl, r0, r2
 8017d1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017d20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017d24:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017d28:	fa5f f08c 	uxtb.w	r0, ip
 8017d2c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8017d30:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017d34:	f000 80a2 	beq.w	8017e7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8017d38:	43db      	mvns	r3, r3
 8017d3a:	783a      	ldrb	r2, [r7, #0]
 8017d3c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	fb02 fe03 	mul.w	lr, r2, r3
 8017d46:	fb0a fa03 	mul.w	sl, sl, r3
 8017d4a:	f10e 0201 	add.w	r2, lr, #1
 8017d4e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8017d52:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017d56:	703a      	strb	r2, [r7, #0]
 8017d58:	787a      	ldrb	r2, [r7, #1]
 8017d5a:	fb02 f003 	mul.w	r0, r2, r3
 8017d5e:	f10a 0301 	add.w	r3, sl, #1
 8017d62:	1c42      	adds	r2, r0, #1
 8017d64:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8017d68:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017d6c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8017d70:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8017d74:	707a      	strb	r2, [r7, #1]
 8017d76:	f887 c002 	strb.w	ip, [r7, #2]
 8017d7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017d7c:	3703      	adds	r7, #3
 8017d7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017d82:	441d      	add	r5, r3
 8017d84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017d86:	441e      	add	r6, r3
 8017d88:	e6ab      	b.n	8017ae2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8017d8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017d8c:	441d      	add	r5, r3
 8017d8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017d90:	441e      	add	r6, r3
 8017d92:	9b06      	ldr	r3, [sp, #24]
 8017d94:	3b01      	subs	r3, #1
 8017d96:	9306      	str	r3, [sp, #24]
 8017d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d9a:	3303      	adds	r3, #3
 8017d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8017d9e:	e680      	b.n	8017aa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017da0:	d024      	beq.n	8017dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8017da2:	9b06      	ldr	r3, [sp, #24]
 8017da4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8017da6:	3b01      	subs	r3, #1
 8017da8:	fb00 5003 	mla	r0, r0, r3, r5
 8017dac:	1400      	asrs	r0, r0, #16
 8017dae:	f53f ae95 	bmi.w	8017adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017db2:	3901      	subs	r1, #1
 8017db4:	4288      	cmp	r0, r1
 8017db6:	f6bf ae91 	bge.w	8017adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017dba:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8017dbc:	fb01 6303 	mla	r3, r1, r3, r6
 8017dc0:	141b      	asrs	r3, r3, #16
 8017dc2:	f53f ae8b 	bmi.w	8017adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017dc6:	3a01      	subs	r2, #1
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	f6bf ae87 	bge.w	8017adc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dd0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017dd4:	1cdf      	adds	r7, r3, #3
 8017dd6:	f1bb 0f00 	cmp.w	fp, #0
 8017dda:	dc6e      	bgt.n	8017eba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8017ddc:	9b06      	ldr	r3, [sp, #24]
 8017dde:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017de4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017de8:	4423      	add	r3, r4
 8017dea:	9309      	str	r3, [sp, #36]	; 0x24
 8017dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	f340 81b0 	ble.w	8018154 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8017df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017df8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017dfa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017dfe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8017e02:	eef0 6a48 	vmov.f32	s13, s16
 8017e06:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017e0a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017e0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e12:	ee16 5a90 	vmov	r5, s13
 8017e16:	eef0 6a68 	vmov.f32	s13, s17
 8017e1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e1e:	ee16 6a90 	vmov	r6, s13
 8017e22:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017e26:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017e2a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017e2e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017e32:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017e36:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017e3a:	ee18 2a10 	vmov	r2, s16
 8017e3e:	eeb0 8a47 	vmov.f32	s16, s14
 8017e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e46:	ee18 2a90 	vmov	r2, s17
 8017e4a:	932d      	str	r3, [sp, #180]	; 0xb4
 8017e4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017e4e:	eef0 8a67 	vmov.f32	s17, s15
 8017e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e56:	932e      	str	r3, [sp, #184]	; 0xb8
 8017e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017e5c:	3b01      	subs	r3, #1
 8017e5e:	9315      	str	r3, [sp, #84]	; 0x54
 8017e60:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017e62:	bf08      	it	eq
 8017e64:	4613      	moveq	r3, r2
 8017e66:	9306      	str	r3, [sp, #24]
 8017e68:	e60d      	b.n	8017a86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	f43f ae7d 	beq.w	8017b6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017e70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017e74:	9307      	str	r3, [sp, #28]
 8017e76:	0e1b      	lsrs	r3, r3, #24
 8017e78:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e7a:	e676      	b.n	8017b6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017e7c:	7038      	strb	r0, [r7, #0]
 8017e7e:	7079      	strb	r1, [r7, #1]
 8017e80:	e779      	b.n	8017d76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8017e82:	f112 0901 	adds.w	r9, r2, #1
 8017e86:	f53f af78 	bmi.w	8017d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8017e8a:	454b      	cmp	r3, r9
 8017e8c:	f6ff af75 	blt.w	8017d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8017e90:	f11c 0901 	adds.w	r9, ip, #1
 8017e94:	f53f af71 	bmi.w	8017d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8017e98:	45ce      	cmp	lr, r9
 8017e9a:	f6ff af6e 	blt.w	8017d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8017e9e:	b21b      	sxth	r3, r3
 8017ea0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8017ea4:	fa0f f28e 	sxth.w	r2, lr
 8017ea8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8017eac:	9200      	str	r2, [sp, #0]
 8017eae:	4639      	mov	r1, r7
 8017eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017eb2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017eb4:	f7ff fc7c 	bl	80177b0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8017eb8:	e75f      	b.n	8017d7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8017eba:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8017ebc:	1429      	asrs	r1, r5, #16
 8017ebe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017ec0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8017ec4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8017ec8:	1433      	asrs	r3, r6, #16
 8017eca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017ece:	fb0c 1303 	mla	r3, ip, r3, r1
 8017ed2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017ed4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017ed8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017edc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017ee0:	2a00      	cmp	r2, #0
 8017ee2:	f000 8129 	beq.w	8018138 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8017ee6:	684c      	ldr	r4, [r1, #4]
 8017ee8:	940c      	str	r4, [sp, #48]	; 0x30
 8017eea:	0e24      	lsrs	r4, r4, #24
 8017eec:	9413      	str	r4, [sp, #76]	; 0x4c
 8017eee:	b198      	cbz	r0, 8017f18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8017ef0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8017ef4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017ef8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8017efc:	f10c 0c04 	add.w	ip, ip, #4
 8017f00:	eb01 080c 	add.w	r8, r1, ip
 8017f04:	f851 100c 	ldr.w	r1, [r1, ip]
 8017f08:	9108      	str	r1, [sp, #32]
 8017f0a:	0e09      	lsrs	r1, r1, #24
 8017f0c:	9110      	str	r1, [sp, #64]	; 0x40
 8017f0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017f12:	910d      	str	r1, [sp, #52]	; 0x34
 8017f14:	0e09      	lsrs	r1, r1, #24
 8017f16:	9114      	str	r1, [sp, #80]	; 0x50
 8017f18:	b292      	uxth	r2, r2
 8017f1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017f1c:	b280      	uxth	r0, r0
 8017f1e:	fb02 f900 	mul.w	r9, r2, r0
 8017f22:	0112      	lsls	r2, r2, #4
 8017f24:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017f28:	eba2 0809 	sub.w	r8, r2, r9
 8017f2c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8017f30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f32:	b280      	uxth	r0, r0
 8017f34:	fa1f f888 	uxth.w	r8, r8
 8017f38:	1a09      	subs	r1, r1, r0
 8017f3a:	fb08 f202 	mul.w	r2, r8, r2
 8017f3e:	b289      	uxth	r1, r1
 8017f40:	fb01 220e 	mla	r2, r1, lr, r2
 8017f44:	fb00 2204 	mla	r2, r0, r4, r2
 8017f48:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f4a:	fb09 2204 	mla	r2, r9, r4, r2
 8017f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017f52:	2a00      	cmp	r2, #0
 8017f54:	f000 80e8 	beq.w	8018128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8017f58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017f5c:	d01b      	beq.n	8017f96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8017f5e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017f66:	fb0e fa0a 	mul.w	sl, lr, sl
 8017f6a:	fb0e fe03 	mul.w	lr, lr, r3
 8017f6e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017f72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017f76:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017f7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017f7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017f82:	4453      	add	r3, sl
 8017f84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017f88:	0a1b      	lsrs	r3, r3, #8
 8017f8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017f8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017f92:	ea43 030c 	orr.w	r3, r3, ip
 8017f96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017f98:	2cff      	cmp	r4, #255	; 0xff
 8017f9a:	d021      	beq.n	8017fe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8017f9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017f9e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017fa2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017fa4:	fb04 fc0c 	mul.w	ip, r4, ip
 8017fa8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017faa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017fae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017fb2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017fb4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017fb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017fbc:	fb04 fa0a 	mul.w	sl, r4, sl
 8017fc0:	44e6      	add	lr, ip
 8017fc2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017fc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017fca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017fce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017fd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017fd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017fda:	ea4e 040a 	orr.w	r4, lr, sl
 8017fde:	940c      	str	r4, [sp, #48]	; 0x30
 8017fe0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017fe2:	2cff      	cmp	r4, #255	; 0xff
 8017fe4:	d021      	beq.n	801802a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8017fe6:	9c08      	ldr	r4, [sp, #32]
 8017fe8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017fec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017fee:	fb04 fc0c 	mul.w	ip, r4, ip
 8017ff2:	9c08      	ldr	r4, [sp, #32]
 8017ff4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017ff8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017ffa:	fb04 fa0e 	mul.w	sl, r4, lr
 8017ffe:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018002:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018006:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801800a:	44e6      	add	lr, ip
 801800c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018010:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018018:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801801c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018020:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018024:	ea4e 040a 	orr.w	r4, lr, sl
 8018028:	9408      	str	r4, [sp, #32]
 801802a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801802c:	2cff      	cmp	r4, #255	; 0xff
 801802e:	d021      	beq.n	8018074 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8018030:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018032:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018036:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018038:	fb04 fc0c 	mul.w	ip, r4, ip
 801803c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801803e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018042:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018046:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018048:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801804c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018050:	fb04 fa0a 	mul.w	sl, r4, sl
 8018054:	44e6      	add	lr, ip
 8018056:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801805a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801805e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018062:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018066:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801806a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801806e:	ea4e 040a 	orr.w	r4, lr, sl
 8018072:	940d      	str	r4, [sp, #52]	; 0x34
 8018074:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018076:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801807a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801807e:	2aff      	cmp	r2, #255	; 0xff
 8018080:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018084:	9c08      	ldr	r4, [sp, #32]
 8018086:	fb08 fc0c 	mul.w	ip, r8, ip
 801808a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801808e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018092:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018094:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018098:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801809c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801809e:	fb09 cc0e 	mla	ip, r9, lr, ip
 80180a2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80180a6:	fb08 f80e 	mul.w	r8, r8, lr
 80180aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80180ae:	fb01 8303 	mla	r3, r1, r3, r8
 80180b2:	9908      	ldr	r1, [sp, #32]
 80180b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80180b8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80180bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80180be:	fb00 330a 	mla	r3, r0, sl, r3
 80180c2:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80180c6:	fb09 3e0e 	mla	lr, r9, lr, r3
 80180ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80180ce:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80180d2:	ea4c 0c0e 	orr.w	ip, ip, lr
 80180d6:	fa5f f08c 	uxtb.w	r0, ip
 80180da:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80180de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80180e2:	d032      	beq.n	801814a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 80180e4:	43d2      	mvns	r2, r2
 80180e6:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80180ea:	b2d2      	uxtb	r2, r2
 80180ec:	fb0e fe02 	mul.w	lr, lr, r2
 80180f0:	f10e 0301 	add.w	r3, lr, #1
 80180f4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80180f8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80180fc:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8018100:	4350      	muls	r0, r2
 8018102:	f807 3c03 	strb.w	r3, [r7, #-3]
 8018106:	1c43      	adds	r3, r0, #1
 8018108:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801810c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018110:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8018114:	4353      	muls	r3, r2
 8018116:	f807 1c02 	strb.w	r1, [r7, #-2]
 801811a:	1c5a      	adds	r2, r3, #1
 801811c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8018120:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8018124:	f807 cc01 	strb.w	ip, [r7, #-1]
 8018128:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801812a:	3703      	adds	r7, #3
 801812c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018130:	441d      	add	r5, r3
 8018132:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018134:	441e      	add	r6, r3
 8018136:	e64e      	b.n	8017dd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8018138:	2800      	cmp	r0, #0
 801813a:	f43f aeed 	beq.w	8017f18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801813e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8018142:	9108      	str	r1, [sp, #32]
 8018144:	0e09      	lsrs	r1, r1, #24
 8018146:	9110      	str	r1, [sp, #64]	; 0x40
 8018148:	e6e6      	b.n	8017f18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801814a:	f807 0c03 	strb.w	r0, [r7, #-3]
 801814e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8018152:	e7e7      	b.n	8018124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8018154:	b019      	add	sp, #100	; 0x64
 8018156:	ecbd 8b08 	vpop	{d8-d11}
 801815a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018160 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8018160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018164:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8018168:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801816c:	2800      	cmp	r0, #0
 801816e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8018172:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8018176:	fb0c 0e03 	mla	lr, ip, r3, r0
 801817a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801817e:	db6b      	blt.n	8018258 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8018180:	4580      	cmp	r8, r0
 8018182:	dd69      	ble.n	8018258 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8018184:	f1bc 0f00 	cmp.w	ip, #0
 8018188:	db66      	blt.n	8018258 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801818a:	45e1      	cmp	r9, ip
 801818c:	dd64      	ble.n	8018258 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801818e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8018192:	f01e 0f01 	tst.w	lr, #1
 8018196:	5d16      	ldrb	r6, [r2, r4]
 8018198:	bf0c      	ite	eq
 801819a:	f006 060f 	andeq.w	r6, r6, #15
 801819e:	1136      	asrne	r6, r6, #4
 80181a0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80181a4:	b2f6      	uxtb	r6, r6
 80181a6:	f110 0a01 	adds.w	sl, r0, #1
 80181aa:	d457      	bmi.n	801825c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80181ac:	45d0      	cmp	r8, sl
 80181ae:	dd55      	ble.n	801825c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80181b0:	f1bc 0f00 	cmp.w	ip, #0
 80181b4:	db52      	blt.n	801825c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80181b6:	45e1      	cmp	r9, ip
 80181b8:	dd50      	ble.n	801825c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80181ba:	2f00      	cmp	r7, #0
 80181bc:	f000 80ac 	beq.w	8018318 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80181c0:	f10e 0b01 	add.w	fp, lr, #1
 80181c4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80181c8:	f01b 0f01 	tst.w	fp, #1
 80181cc:	5d14      	ldrb	r4, [r2, r4]
 80181ce:	bf0c      	ite	eq
 80181d0:	f004 040f 	andeq.w	r4, r4, #15
 80181d4:	1124      	asrne	r4, r4, #4
 80181d6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80181da:	b2e4      	uxtb	r4, r4
 80181dc:	2d00      	cmp	r5, #0
 80181de:	f000 8096 	beq.w	801830e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80181e2:	2800      	cmp	r0, #0
 80181e4:	f10c 0c01 	add.w	ip, ip, #1
 80181e8:	db3c      	blt.n	8018264 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80181ea:	4580      	cmp	r8, r0
 80181ec:	dd3a      	ble.n	8018264 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80181ee:	f1bc 0f00 	cmp.w	ip, #0
 80181f2:	db37      	blt.n	8018264 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80181f4:	45e1      	cmp	r9, ip
 80181f6:	dd35      	ble.n	8018264 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80181f8:	eb03 0b0e 	add.w	fp, r3, lr
 80181fc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8018200:	f01b 0f01 	tst.w	fp, #1
 8018204:	5c10      	ldrb	r0, [r2, r0]
 8018206:	bf0c      	ite	eq
 8018208:	f000 000f 	andeq.w	r0, r0, #15
 801820c:	1100      	asrne	r0, r0, #4
 801820e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018212:	b2c0      	uxtb	r0, r0
 8018214:	f1ba 0f00 	cmp.w	sl, #0
 8018218:	db26      	blt.n	8018268 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801821a:	45d0      	cmp	r8, sl
 801821c:	dd24      	ble.n	8018268 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801821e:	f1bc 0f00 	cmp.w	ip, #0
 8018222:	db21      	blt.n	8018268 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8018224:	45e1      	cmp	r9, ip
 8018226:	dd1f      	ble.n	8018268 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8018228:	b307      	cbz	r7, 801826c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801822a:	3301      	adds	r3, #1
 801822c:	449e      	add	lr, r3
 801822e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8018232:	f01e 0f01 	tst.w	lr, #1
 8018236:	5cd3      	ldrb	r3, [r2, r3]
 8018238:	bf0c      	ite	eq
 801823a:	f003 030f 	andeq.w	r3, r3, #15
 801823e:	111b      	asrne	r3, r3, #4
 8018240:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018244:	b2db      	uxtb	r3, r3
 8018246:	2f0f      	cmp	r7, #15
 8018248:	d911      	bls.n	801826e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801824a:	4b35      	ldr	r3, [pc, #212]	; (8018320 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801824c:	f240 115b 	movw	r1, #347	; 0x15b
 8018250:	4a34      	ldr	r2, [pc, #208]	; (8018324 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8018252:	4835      	ldr	r0, [pc, #212]	; (8018328 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8018254:	f000 ff72 	bl	801913c <__assert_func>
 8018258:	2600      	movs	r6, #0
 801825a:	e7a4      	b.n	80181a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801825c:	2400      	movs	r4, #0
 801825e:	e7bd      	b.n	80181dc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8018260:	463c      	mov	r4, r7
 8018262:	e7be      	b.n	80181e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8018264:	2000      	movs	r0, #0
 8018266:	e7d5      	b.n	8018214 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8018268:	2300      	movs	r3, #0
 801826a:	e7ec      	b.n	8018246 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801826c:	463b      	mov	r3, r7
 801826e:	2d0f      	cmp	r5, #15
 8018270:	d8eb      	bhi.n	801824a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8018272:	b2bf      	uxth	r7, r7
 8018274:	b2ad      	uxth	r5, r5
 8018276:	fb07 f205 	mul.w	r2, r7, r5
 801827a:	013f      	lsls	r7, r7, #4
 801827c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8018280:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8018284:	1abf      	subs	r7, r7, r2
 8018286:	b2ad      	uxth	r5, r5
 8018288:	b2bf      	uxth	r7, r7
 801828a:	ebac 0c05 	sub.w	ip, ip, r5
 801828e:	437c      	muls	r4, r7
 8018290:	fa1f fc8c 	uxth.w	ip, ip
 8018294:	fb06 440c 	mla	r4, r6, ip, r4
 8018298:	fb05 4400 	mla	r4, r5, r0, r4
 801829c:	fb02 4203 	mla	r2, r2, r3, r4
 80182a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80182a4:	b38a      	cbz	r2, 801830a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80182a6:	4b21      	ldr	r3, [pc, #132]	; (801832c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80182a8:	681c      	ldr	r4, [r3, #0]
 80182aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80182ae:	b2e5      	uxtb	r5, r4
 80182b0:	4353      	muls	r3, r2
 80182b2:	1c5a      	adds	r2, r3, #1
 80182b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80182b8:	1212      	asrs	r2, r2, #8
 80182ba:	b290      	uxth	r0, r2
 80182bc:	43d2      	mvns	r2, r2
 80182be:	fb15 f500 	smulbb	r5, r5, r0
 80182c2:	b2d3      	uxtb	r3, r2
 80182c4:	780a      	ldrb	r2, [r1, #0]
 80182c6:	fb02 5203 	mla	r2, r2, r3, r5
 80182ca:	b292      	uxth	r2, r2
 80182cc:	1c55      	adds	r5, r2, #1
 80182ce:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80182d2:	784d      	ldrb	r5, [r1, #1]
 80182d4:	fb15 f503 	smulbb	r5, r5, r3
 80182d8:	1212      	asrs	r2, r2, #8
 80182da:	700a      	strb	r2, [r1, #0]
 80182dc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80182e0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80182e4:	fb02 5200 	mla	r2, r2, r0, r5
 80182e8:	b292      	uxth	r2, r2
 80182ea:	1c55      	adds	r5, r2, #1
 80182ec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80182f0:	1212      	asrs	r2, r2, #8
 80182f2:	704a      	strb	r2, [r1, #1]
 80182f4:	788a      	ldrb	r2, [r1, #2]
 80182f6:	fb12 f303 	smulbb	r3, r2, r3
 80182fa:	fb04 3300 	mla	r3, r4, r0, r3
 80182fe:	b29b      	uxth	r3, r3
 8018300:	1c5a      	adds	r2, r3, #1
 8018302:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018306:	121b      	asrs	r3, r3, #8
 8018308:	708b      	strb	r3, [r1, #2]
 801830a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801830e:	2f0f      	cmp	r7, #15
 8018310:	d89b      	bhi.n	801824a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8018312:	462b      	mov	r3, r5
 8018314:	4628      	mov	r0, r5
 8018316:	e7ac      	b.n	8018272 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8018318:	2d00      	cmp	r5, #0
 801831a:	d1a1      	bne.n	8018260 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801831c:	462c      	mov	r4, r5
 801831e:	e7f8      	b.n	8018312 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8018320:	0801ce72 	.word	0x0801ce72
 8018324:	0801d286 	.word	0x0801d286
 8018328:	0801ce3f 	.word	0x0801ce3f
 801832c:	2400aefc 	.word	0x2400aefc

08018330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018334:	ed2d 8b08 	vpush	{d8-d11}
 8018338:	b097      	sub	sp, #92	; 0x5c
 801833a:	eeb0 aa40 	vmov.f32	s20, s0
 801833e:	eef0 9a60 	vmov.f32	s19, s1
 8018342:	9214      	str	r2, [sp, #80]	; 0x50
 8018344:	eeb0 9a41 	vmov.f32	s18, s2
 8018348:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801834a:	eeb0 8a62 	vmov.f32	s16, s5
 801834e:	9309      	str	r3, [sp, #36]	; 0x24
 8018350:	eef0 8a43 	vmov.f32	s17, s6
 8018354:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8018358:	eef0 ba44 	vmov.f32	s23, s8
 801835c:	9015      	str	r0, [sp, #84]	; 0x54
 801835e:	eeb0 ba64 	vmov.f32	s22, s9
 8018362:	6850      	ldr	r0, [r2, #4]
 8018364:	eef0 aa45 	vmov.f32	s21, s10
 8018368:	910c      	str	r1, [sp, #48]	; 0x30
 801836a:	930e      	str	r3, [sp, #56]	; 0x38
 801836c:	6812      	ldr	r2, [r2, #0]
 801836e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018372:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8018376:	fb00 1303 	mla	r3, r0, r3, r1
 801837a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801837e:	eb02 0a03 	add.w	sl, r2, r3
 8018382:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018384:	689b      	ldr	r3, [r3, #8]
 8018386:	3301      	adds	r3, #1
 8018388:	f023 0301 	bic.w	r3, r3, #1
 801838c:	930f      	str	r3, [sp, #60]	; 0x3c
 801838e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018390:	681f      	ldr	r7, [r3, #0]
 8018392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018394:	2b00      	cmp	r3, #0
 8018396:	dc03      	bgt.n	80183a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801839a:	2b00      	cmp	r3, #0
 801839c:	f340 8247 	ble.w	801882e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80183a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80183a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80183a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80183aa:	1e48      	subs	r0, r1, #1
 80183ac:	f102 3cff 	add.w	ip, r2, #4294967295
 80183b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f340 80e5 	ble.w	8018582 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80183b8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80183bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80183c0:	d406      	bmi.n	80183d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80183c2:	4586      	cmp	lr, r0
 80183c4:	da04      	bge.n	80183d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	db02      	blt.n	80183d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80183ca:	4563      	cmp	r3, ip
 80183cc:	f2c0 80da 	blt.w	8018584 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80183d0:	f11e 0e01 	adds.w	lr, lr, #1
 80183d4:	f100 80cb 	bmi.w	801856e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80183d8:	4571      	cmp	r1, lr
 80183da:	f2c0 80c8 	blt.w	801856e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80183de:	3301      	adds	r3, #1
 80183e0:	f100 80c5 	bmi.w	801856e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80183e4:	429a      	cmp	r2, r3
 80183e6:	f2c0 80c2 	blt.w	801856e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80183ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183ec:	46d0      	mov	r8, sl
 80183ee:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80183f2:	930d      	str	r3, [sp, #52]	; 0x34
 80183f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	f340 80e3 	ble.w	80185c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80183fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80183fe:	1430      	asrs	r0, r6, #16
 8018400:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8018404:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018408:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801840c:	142b      	asrs	r3, r5, #16
 801840e:	f100 812e 	bmi.w	801866e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018412:	f10c 3bff 	add.w	fp, ip, #4294967295
 8018416:	455b      	cmp	r3, fp
 8018418:	f280 8129 	bge.w	801866e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801841c:	2800      	cmp	r0, #0
 801841e:	f2c0 8126 	blt.w	801866e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8018422:	f10e 3bff 	add.w	fp, lr, #4294967295
 8018426:	4558      	cmp	r0, fp
 8018428:	f280 8121 	bge.w	801866e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801842c:	fb00 3309 	mla	r3, r0, r9, r3
 8018430:	0858      	lsrs	r0, r3, #1
 8018432:	07dc      	lsls	r4, r3, #31
 8018434:	f817 c000 	ldrb.w	ip, [r7, r0]
 8018438:	bf54      	ite	pl
 801843a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801843e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018442:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018446:	fa5f fc8c 	uxtb.w	ip, ip
 801844a:	2a00      	cmp	r2, #0
 801844c:	f000 80fe 	beq.w	801864c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8018450:	1c58      	adds	r0, r3, #1
 8018452:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8018456:	07c0      	lsls	r0, r0, #31
 8018458:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801845c:	bf54      	ite	pl
 801845e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8018462:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8018466:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801846a:	fa5f f08e 	uxtb.w	r0, lr
 801846e:	9010      	str	r0, [sp, #64]	; 0x40
 8018470:	b1d9      	cbz	r1, 80184aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8018472:	444b      	add	r3, r9
 8018474:	0858      	lsrs	r0, r3, #1
 8018476:	07dc      	lsls	r4, r3, #31
 8018478:	f103 0301 	add.w	r3, r3, #1
 801847c:	5c38      	ldrb	r0, [r7, r0]
 801847e:	bf54      	ite	pl
 8018480:	f000 000f 	andpl.w	r0, r0, #15
 8018484:	1100      	asrmi	r0, r0, #4
 8018486:	07dc      	lsls	r4, r3, #31
 8018488:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801848c:	b2c0      	uxtb	r0, r0
 801848e:	900a      	str	r0, [sp, #40]	; 0x28
 8018490:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8018494:	f817 e000 	ldrb.w	lr, [r7, r0]
 8018498:	bf54      	ite	pl
 801849a:	f00e 030f 	andpl.w	r3, lr, #15
 801849e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80184a2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80184a6:	b2db      	uxtb	r3, r3
 80184a8:	9311      	str	r3, [sp, #68]	; 0x44
 80184aa:	b292      	uxth	r2, r2
 80184ac:	b289      	uxth	r1, r1
 80184ae:	0113      	lsls	r3, r2, #4
 80184b0:	fb02 f001 	mul.w	r0, r2, r1
 80184b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80184b6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80184ba:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80184be:	1a1b      	subs	r3, r3, r0
 80184c0:	b289      	uxth	r1, r1
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	ebae 0e01 	sub.w	lr, lr, r1
 80184c8:	4353      	muls	r3, r2
 80184ca:	fa1f fe8e 	uxth.w	lr, lr
 80184ce:	fb0c 320e 	mla	r2, ip, lr, r3
 80184d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184d4:	fb01 2203 	mla	r2, r1, r3, r2
 80184d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184da:	fb00 2203 	mla	r2, r0, r3, r2
 80184de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80184e2:	2a00      	cmp	r2, #0
 80184e4:	d039      	beq.n	801855a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80184e6:	4bc7      	ldr	r3, [pc, #796]	; (8018804 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80184e8:	6819      	ldr	r1, [r3, #0]
 80184ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184ec:	fa5f fc81 	uxtb.w	ip, r1
 80184f0:	435a      	muls	r2, r3
 80184f2:	1c53      	adds	r3, r2, #1
 80184f4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80184f8:	1212      	asrs	r2, r2, #8
 80184fa:	b290      	uxth	r0, r2
 80184fc:	43d2      	mvns	r2, r2
 80184fe:	fb1c fc00 	smulbb	ip, ip, r0
 8018502:	b2d3      	uxtb	r3, r2
 8018504:	f898 2000 	ldrb.w	r2, [r8]
 8018508:	fb02 c203 	mla	r2, r2, r3, ip
 801850c:	b292      	uxth	r2, r2
 801850e:	f102 0c01 	add.w	ip, r2, #1
 8018512:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018516:	f898 c001 	ldrb.w	ip, [r8, #1]
 801851a:	fb1c fc03 	smulbb	ip, ip, r3
 801851e:	1212      	asrs	r2, r2, #8
 8018520:	f888 2000 	strb.w	r2, [r8]
 8018524:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8018528:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801852c:	fb02 c200 	mla	r2, r2, r0, ip
 8018530:	b292      	uxth	r2, r2
 8018532:	f102 0c01 	add.w	ip, r2, #1
 8018536:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801853a:	1212      	asrs	r2, r2, #8
 801853c:	f888 2001 	strb.w	r2, [r8, #1]
 8018540:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018544:	fb12 f303 	smulbb	r3, r2, r3
 8018548:	fb01 3300 	mla	r3, r1, r0, r3
 801854c:	b29b      	uxth	r3, r3
 801854e:	1c5a      	adds	r2, r3, #1
 8018550:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018554:	121b      	asrs	r3, r3, #8
 8018556:	f888 3002 	strb.w	r3, [r8, #2]
 801855a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801855c:	f108 0803 	add.w	r8, r8, #3
 8018560:	441d      	add	r5, r3
 8018562:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018564:	441e      	add	r6, r3
 8018566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018568:	3b01      	subs	r3, #1
 801856a:	930d      	str	r3, [sp, #52]	; 0x34
 801856c:	e742      	b.n	80183f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801856e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018570:	f10a 0a03 	add.w	sl, sl, #3
 8018574:	441d      	add	r5, r3
 8018576:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018578:	441e      	add	r6, r3
 801857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801857c:	3b01      	subs	r3, #1
 801857e:	9309      	str	r3, [sp, #36]	; 0x24
 8018580:	e716      	b.n	80183b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018582:	d024      	beq.n	80185ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018586:	982b      	ldr	r0, [sp, #172]	; 0xac
 8018588:	3b01      	subs	r3, #1
 801858a:	fb00 5003 	mla	r0, r0, r3, r5
 801858e:	1400      	asrs	r0, r0, #16
 8018590:	f53f af2b 	bmi.w	80183ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018594:	3901      	subs	r1, #1
 8018596:	4288      	cmp	r0, r1
 8018598:	f6bf af27 	bge.w	80183ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801859c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801859e:	fb01 6303 	mla	r3, r1, r3, r6
 80185a2:	141b      	asrs	r3, r3, #16
 80185a4:	f53f af21 	bmi.w	80183ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80185a8:	3a01      	subs	r2, #1
 80185aa:	4293      	cmp	r3, r2
 80185ac:	f6bf af1d 	bge.w	80183ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80185b0:	f10a 0e03 	add.w	lr, sl, #3
 80185b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80185b8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80185bc:	f1b8 0f00 	cmp.w	r8, #0
 80185c0:	dc76      	bgt.n	80186b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80185c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80185c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80185cc:	44a2      	add	sl, r4
 80185ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	f340 812c 	ble.w	801882e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80185d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80185da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80185dc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80185e0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80185e4:	eef0 6a48 	vmov.f32	s13, s16
 80185e8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80185ec:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80185f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80185f4:	ee16 5a90 	vmov	r5, s13
 80185f8:	eef0 6a68 	vmov.f32	s13, s17
 80185fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018600:	ee16 6a90 	vmov	r6, s13
 8018604:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018608:	ee69 7a27 	vmul.f32	s15, s18, s15
 801860c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018610:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018614:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018618:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801861c:	ee18 2a10 	vmov	r2, s16
 8018620:	eeb0 8a47 	vmov.f32	s16, s14
 8018624:	fb92 f3f3 	sdiv	r3, r2, r3
 8018628:	ee18 2a90 	vmov	r2, s17
 801862c:	932b      	str	r3, [sp, #172]	; 0xac
 801862e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018630:	eef0 8a67 	vmov.f32	s17, s15
 8018634:	fb92 f3f3 	sdiv	r3, r2, r3
 8018638:	932c      	str	r3, [sp, #176]	; 0xb0
 801863a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801863c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801863e:	3b01      	subs	r3, #1
 8018640:	930c      	str	r3, [sp, #48]	; 0x30
 8018642:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018644:	bf08      	it	eq
 8018646:	4613      	moveq	r3, r2
 8018648:	9309      	str	r3, [sp, #36]	; 0x24
 801864a:	e6a2      	b.n	8018392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801864c:	2900      	cmp	r1, #0
 801864e:	f43f af2c 	beq.w	80184aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8018652:	eb09 0003 	add.w	r0, r9, r3
 8018656:	0843      	lsrs	r3, r0, #1
 8018658:	07c0      	lsls	r0, r0, #31
 801865a:	5cfb      	ldrb	r3, [r7, r3]
 801865c:	bf54      	ite	pl
 801865e:	f003 030f 	andpl.w	r3, r3, #15
 8018662:	111b      	asrmi	r3, r3, #4
 8018664:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018668:	b2db      	uxtb	r3, r3
 801866a:	930a      	str	r3, [sp, #40]	; 0x28
 801866c:	e71d      	b.n	80184aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801866e:	f113 0b01 	adds.w	fp, r3, #1
 8018672:	f53f af72 	bmi.w	801855a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8018676:	45dc      	cmp	ip, fp
 8018678:	f6ff af6f 	blt.w	801855a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801867c:	f110 0b01 	adds.w	fp, r0, #1
 8018680:	f53f af6b 	bmi.w	801855a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8018684:	45de      	cmp	lr, fp
 8018686:	f6ff af68 	blt.w	801855a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801868a:	9302      	str	r3, [sp, #8]
 801868c:	fa0f f38e 	sxth.w	r3, lr
 8018690:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018692:	9301      	str	r3, [sp, #4]
 8018694:	fa0f f38c 	sxth.w	r3, ip
 8018698:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801869c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80186a0:	9300      	str	r3, [sp, #0]
 80186a2:	463a      	mov	r2, r7
 80186a4:	464b      	mov	r3, r9
 80186a6:	4641      	mov	r1, r8
 80186a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80186aa:	f7ff fd59 	bl	8018160 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80186ae:	e754      	b.n	801855a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80186b0:	142a      	asrs	r2, r5, #16
 80186b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80186b6:	1433      	asrs	r3, r6, #16
 80186b8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80186bc:	fb09 2303 	mla	r3, r9, r3, r2
 80186c0:	085a      	lsrs	r2, r3, #1
 80186c2:	07dc      	lsls	r4, r3, #31
 80186c4:	5cba      	ldrb	r2, [r7, r2]
 80186c6:	bf54      	ite	pl
 80186c8:	f002 020f 	andpl.w	r2, r2, #15
 80186cc:	1112      	asrmi	r2, r2, #4
 80186ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80186d2:	b2d2      	uxtb	r2, r2
 80186d4:	2900      	cmp	r1, #0
 80186d6:	f000 8097 	beq.w	8018808 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80186da:	f103 0b01 	add.w	fp, r3, #1
 80186de:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80186e2:	f01b 0f01 	tst.w	fp, #1
 80186e6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80186ea:	bf0c      	ite	eq
 80186ec:	f00c 0c0f 	andeq.w	ip, ip, #15
 80186f0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80186f4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80186f8:	fa5f f48c 	uxtb.w	r4, ip
 80186fc:	9412      	str	r4, [sp, #72]	; 0x48
 80186fe:	b300      	cbz	r0, 8018742 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8018700:	444b      	add	r3, r9
 8018702:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8018706:	07dc      	lsls	r4, r3, #31
 8018708:	f103 0301 	add.w	r3, r3, #1
 801870c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018710:	bf54      	ite	pl
 8018712:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018716:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801871a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801871e:	fa5f f48c 	uxtb.w	r4, ip
 8018722:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8018726:	940b      	str	r4, [sp, #44]	; 0x2c
 8018728:	07dc      	lsls	r4, r3, #31
 801872a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801872e:	bf54      	ite	pl
 8018730:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018734:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018738:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801873c:	fa5f f38c 	uxtb.w	r3, ip
 8018740:	9313      	str	r3, [sp, #76]	; 0x4c
 8018742:	b289      	uxth	r1, r1
 8018744:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018746:	b280      	uxth	r0, r0
 8018748:	fb01 f300 	mul.w	r3, r1, r0
 801874c:	0109      	lsls	r1, r1, #4
 801874e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8018752:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8018756:	1ac9      	subs	r1, r1, r3
 8018758:	b280      	uxth	r0, r0
 801875a:	b289      	uxth	r1, r1
 801875c:	ebac 0c00 	sub.w	ip, ip, r0
 8018760:	4361      	muls	r1, r4
 8018762:	fa1f fc8c 	uxth.w	ip, ip
 8018766:	fb02 120c 	mla	r2, r2, ip, r1
 801876a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801876c:	fb00 2001 	mla	r0, r0, r1, r2
 8018770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018772:	fb03 0302 	mla	r3, r3, r2, r0
 8018776:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801877a:	2b00      	cmp	r3, #0
 801877c:	d039      	beq.n	80187f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801877e:	4a21      	ldr	r2, [pc, #132]	; (8018804 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8018780:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8018784:	6810      	ldr	r0, [r2, #0]
 8018786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018788:	fa5f fc80 	uxtb.w	ip, r0
 801878c:	4353      	muls	r3, r2
 801878e:	1c5a      	adds	r2, r3, #1
 8018790:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018794:	121b      	asrs	r3, r3, #8
 8018796:	b29a      	uxth	r2, r3
 8018798:	43db      	mvns	r3, r3
 801879a:	fb1c fc02 	smulbb	ip, ip, r2
 801879e:	b2db      	uxtb	r3, r3
 80187a0:	fb01 c103 	mla	r1, r1, r3, ip
 80187a4:	b289      	uxth	r1, r1
 80187a6:	f101 0c01 	add.w	ip, r1, #1
 80187aa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80187ae:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80187b2:	fb1c fc03 	smulbb	ip, ip, r3
 80187b6:	1209      	asrs	r1, r1, #8
 80187b8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80187bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80187c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80187c4:	fb01 c102 	mla	r1, r1, r2, ip
 80187c8:	b289      	uxth	r1, r1
 80187ca:	f101 0c01 	add.w	ip, r1, #1
 80187ce:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80187d2:	1209      	asrs	r1, r1, #8
 80187d4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80187d8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80187dc:	fb11 f303 	smulbb	r3, r1, r3
 80187e0:	fb00 3002 	mla	r0, r0, r2, r3
 80187e4:	b280      	uxth	r0, r0
 80187e6:	1c42      	adds	r2, r0, #1
 80187e8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80187ec:	1200      	asrs	r0, r0, #8
 80187ee:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80187f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80187f4:	f10e 0e03 	add.w	lr, lr, #3
 80187f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80187fc:	441d      	add	r5, r3
 80187fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018800:	441e      	add	r6, r3
 8018802:	e6db      	b.n	80185bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8018804:	2400aefc 	.word	0x2400aefc
 8018808:	2800      	cmp	r0, #0
 801880a:	d09a      	beq.n	8018742 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801880c:	444b      	add	r3, r9
 801880e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8018812:	07db      	lsls	r3, r3, #31
 8018814:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018818:	bf54      	ite	pl
 801881a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801881e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018822:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018826:	fa5f f38c 	uxtb.w	r3, ip
 801882a:	930b      	str	r3, [sp, #44]	; 0x2c
 801882c:	e789      	b.n	8018742 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801882e:	b017      	add	sp, #92	; 0x5c
 8018830:	ecbd 8b08 	vpop	{d8-d11}
 8018834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018838 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8018838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801883c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8018840:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8018844:	2800      	cmp	r0, #0
 8018846:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801884a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801884e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8018852:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8018856:	db6b      	blt.n	8018930 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8018858:	4580      	cmp	r8, r0
 801885a:	dd69      	ble.n	8018930 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801885c:	f1bc 0f00 	cmp.w	ip, #0
 8018860:	db66      	blt.n	8018930 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8018862:	45e1      	cmp	r9, ip
 8018864:	dd64      	ble.n	8018930 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8018866:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801886a:	f01e 0f01 	tst.w	lr, #1
 801886e:	5d16      	ldrb	r6, [r2, r4]
 8018870:	bf0c      	ite	eq
 8018872:	f006 060f 	andeq.w	r6, r6, #15
 8018876:	1136      	asrne	r6, r6, #4
 8018878:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801887c:	b2f6      	uxtb	r6, r6
 801887e:	f110 0a01 	adds.w	sl, r0, #1
 8018882:	d457      	bmi.n	8018934 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8018884:	45d0      	cmp	r8, sl
 8018886:	dd55      	ble.n	8018934 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8018888:	f1bc 0f00 	cmp.w	ip, #0
 801888c:	db52      	blt.n	8018934 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801888e:	45e1      	cmp	r9, ip
 8018890:	dd50      	ble.n	8018934 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8018892:	2f00      	cmp	r7, #0
 8018894:	f000 80a5 	beq.w	80189e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8018898:	f10e 0b01 	add.w	fp, lr, #1
 801889c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80188a0:	f01b 0f01 	tst.w	fp, #1
 80188a4:	5d14      	ldrb	r4, [r2, r4]
 80188a6:	bf0c      	ite	eq
 80188a8:	f004 040f 	andeq.w	r4, r4, #15
 80188ac:	1124      	asrne	r4, r4, #4
 80188ae:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80188b2:	b2e4      	uxtb	r4, r4
 80188b4:	2d00      	cmp	r5, #0
 80188b6:	f000 808f 	beq.w	80189d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80188ba:	2800      	cmp	r0, #0
 80188bc:	f10c 0c01 	add.w	ip, ip, #1
 80188c0:	db3c      	blt.n	801893c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80188c2:	4580      	cmp	r8, r0
 80188c4:	dd3a      	ble.n	801893c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80188c6:	f1bc 0f00 	cmp.w	ip, #0
 80188ca:	db37      	blt.n	801893c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80188cc:	45e1      	cmp	r9, ip
 80188ce:	dd35      	ble.n	801893c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80188d0:	eb03 0b0e 	add.w	fp, r3, lr
 80188d4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80188d8:	f01b 0f01 	tst.w	fp, #1
 80188dc:	5c10      	ldrb	r0, [r2, r0]
 80188de:	bf0c      	ite	eq
 80188e0:	f000 000f 	andeq.w	r0, r0, #15
 80188e4:	1100      	asrne	r0, r0, #4
 80188e6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80188ea:	b2c0      	uxtb	r0, r0
 80188ec:	f1ba 0f00 	cmp.w	sl, #0
 80188f0:	db26      	blt.n	8018940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80188f2:	45d0      	cmp	r8, sl
 80188f4:	dd24      	ble.n	8018940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80188f6:	f1bc 0f00 	cmp.w	ip, #0
 80188fa:	db21      	blt.n	8018940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80188fc:	45e1      	cmp	r9, ip
 80188fe:	dd1f      	ble.n	8018940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8018900:	b307      	cbz	r7, 8018944 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8018902:	3301      	adds	r3, #1
 8018904:	449e      	add	lr, r3
 8018906:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801890a:	f01e 0f01 	tst.w	lr, #1
 801890e:	5cd3      	ldrb	r3, [r2, r3]
 8018910:	bf0c      	ite	eq
 8018912:	f003 030f 	andeq.w	r3, r3, #15
 8018916:	111b      	asrne	r3, r3, #4
 8018918:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801891c:	b2db      	uxtb	r3, r3
 801891e:	2f0f      	cmp	r7, #15
 8018920:	d911      	bls.n	8018946 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8018922:	4b32      	ldr	r3, [pc, #200]	; (80189ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8018924:	f240 115b 	movw	r1, #347	; 0x15b
 8018928:	4a31      	ldr	r2, [pc, #196]	; (80189f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801892a:	4832      	ldr	r0, [pc, #200]	; (80189f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801892c:	f000 fc06 	bl	801913c <__assert_func>
 8018930:	2600      	movs	r6, #0
 8018932:	e7a4      	b.n	801887e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8018934:	2400      	movs	r4, #0
 8018936:	e7bd      	b.n	80188b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8018938:	463c      	mov	r4, r7
 801893a:	e7be      	b.n	80188ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801893c:	2000      	movs	r0, #0
 801893e:	e7d5      	b.n	80188ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8018940:	2300      	movs	r3, #0
 8018942:	e7ec      	b.n	801891e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8018944:	463b      	mov	r3, r7
 8018946:	2d0f      	cmp	r5, #15
 8018948:	d8eb      	bhi.n	8018922 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801894a:	b2bf      	uxth	r7, r7
 801894c:	b2ad      	uxth	r5, r5
 801894e:	fb07 f205 	mul.w	r2, r7, r5
 8018952:	013f      	lsls	r7, r7, #4
 8018954:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8018958:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801895c:	1abf      	subs	r7, r7, r2
 801895e:	b2ad      	uxth	r5, r5
 8018960:	b2bf      	uxth	r7, r7
 8018962:	ebac 0c05 	sub.w	ip, ip, r5
 8018966:	437c      	muls	r4, r7
 8018968:	fa1f fc8c 	uxth.w	ip, ip
 801896c:	fb06 440c 	mla	r4, r6, ip, r4
 8018970:	fb05 4400 	mla	r4, r5, r0, r4
 8018974:	fb02 4303 	mla	r3, r2, r3, r4
 8018978:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801897c:	b353      	cbz	r3, 80189d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801897e:	4a1e      	ldr	r2, [pc, #120]	; (80189f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8018980:	7808      	ldrb	r0, [r1, #0]
 8018982:	6814      	ldr	r4, [r2, #0]
 8018984:	b29a      	uxth	r2, r3
 8018986:	43db      	mvns	r3, r3
 8018988:	b2e5      	uxtb	r5, r4
 801898a:	b2db      	uxtb	r3, r3
 801898c:	fb15 f502 	smulbb	r5, r5, r2
 8018990:	fb00 5003 	mla	r0, r0, r3, r5
 8018994:	b280      	uxth	r0, r0
 8018996:	1c45      	adds	r5, r0, #1
 8018998:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801899c:	784d      	ldrb	r5, [r1, #1]
 801899e:	fb15 f503 	smulbb	r5, r5, r3
 80189a2:	1200      	asrs	r0, r0, #8
 80189a4:	7008      	strb	r0, [r1, #0]
 80189a6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80189aa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80189ae:	fb00 5002 	mla	r0, r0, r2, r5
 80189b2:	b280      	uxth	r0, r0
 80189b4:	1c45      	adds	r5, r0, #1
 80189b6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80189ba:	1200      	asrs	r0, r0, #8
 80189bc:	7048      	strb	r0, [r1, #1]
 80189be:	7888      	ldrb	r0, [r1, #2]
 80189c0:	fb10 f303 	smulbb	r3, r0, r3
 80189c4:	fb04 3202 	mla	r2, r4, r2, r3
 80189c8:	b292      	uxth	r2, r2
 80189ca:	1c53      	adds	r3, r2, #1
 80189cc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80189d0:	1212      	asrs	r2, r2, #8
 80189d2:	708a      	strb	r2, [r1, #2]
 80189d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d8:	2f0f      	cmp	r7, #15
 80189da:	d8a2      	bhi.n	8018922 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80189dc:	462b      	mov	r3, r5
 80189de:	4628      	mov	r0, r5
 80189e0:	e7b3      	b.n	801894a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 80189e2:	2d00      	cmp	r5, #0
 80189e4:	d1a8      	bne.n	8018938 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 80189e6:	462c      	mov	r4, r5
 80189e8:	e7f8      	b.n	80189dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 80189ea:	bf00      	nop
 80189ec:	0801ce72 	.word	0x0801ce72
 80189f0:	0801d286 	.word	0x0801d286
 80189f4:	0801ce3f 	.word	0x0801ce3f
 80189f8:	2400aefc 	.word	0x2400aefc

080189fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80189fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a00:	ed2d 8b08 	vpush	{d8-d11}
 8018a04:	b093      	sub	sp, #76	; 0x4c
 8018a06:	461c      	mov	r4, r3
 8018a08:	eeb0 aa40 	vmov.f32	s20, s0
 8018a0c:	920c      	str	r2, [sp, #48]	; 0x30
 8018a0e:	eef0 9a60 	vmov.f32	s19, s1
 8018a12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018a14:	eeb0 9a41 	vmov.f32	s18, s2
 8018a18:	9011      	str	r0, [sp, #68]	; 0x44
 8018a1a:	eeb0 8a62 	vmov.f32	s16, s5
 8018a1e:	6850      	ldr	r0, [r2, #4]
 8018a20:	eef0 8a43 	vmov.f32	s17, s6
 8018a24:	9107      	str	r1, [sp, #28]
 8018a26:	eef0 ba44 	vmov.f32	s23, s8
 8018a2a:	6812      	ldr	r2, [r2, #0]
 8018a2c:	eeb0 ba64 	vmov.f32	s22, s9
 8018a30:	eef0 aa45 	vmov.f32	s21, s10
 8018a34:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8018a38:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8018a3c:	fb00 1303 	mla	r3, r0, r3, r1
 8018a40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a44:	eb02 0b03 	add.w	fp, r2, r3
 8018a48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018a4a:	689b      	ldr	r3, [r3, #8]
 8018a4c:	3301      	adds	r3, #1
 8018a4e:	f023 0301 	bic.w	r3, r3, #1
 8018a52:	9309      	str	r3, [sp, #36]	; 0x24
 8018a54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018a56:	f8d3 8000 	ldr.w	r8, [r3]
 8018a5a:	9b07      	ldr	r3, [sp, #28]
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	dc03      	bgt.n	8018a68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	f340 822b 	ble.w	8018ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018a68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018a6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018a6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018a72:	1e48      	subs	r0, r1, #1
 8018a74:	1e57      	subs	r7, r2, #1
 8018a76:	2c00      	cmp	r4, #0
 8018a78:	f340 80d7 	ble.w	8018c2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8018a7c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8018a80:	ea4f 4326 	mov.w	r3, r6, asr #16
 8018a84:	d406      	bmi.n	8018a94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a86:	4584      	cmp	ip, r0
 8018a88:	da04      	bge.n	8018a94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	db02      	blt.n	8018a94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018a8e:	42bb      	cmp	r3, r7
 8018a90:	f2c0 80cc 	blt.w	8018c2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8018a94:	f11c 0c01 	adds.w	ip, ip, #1
 8018a98:	f100 80bf 	bmi.w	8018c1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8018a9c:	4561      	cmp	r1, ip
 8018a9e:	f2c0 80bc 	blt.w	8018c1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8018aa2:	3301      	adds	r3, #1
 8018aa4:	f100 80b9 	bmi.w	8018c1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	f2c0 80b6 	blt.w	8018c1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8018aae:	46a2      	mov	sl, r4
 8018ab0:	465f      	mov	r7, fp
 8018ab2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8018ab6:	f1ba 0f00 	cmp.w	sl, #0
 8018aba:	f340 80d4 	ble.w	8018c66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018abe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8018ac2:	1430      	asrs	r0, r6, #16
 8018ac4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018ac8:	9308      	str	r3, [sp, #32]
 8018aca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018acc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8018ad0:	142b      	asrs	r3, r5, #16
 8018ad2:	f100 8124 	bmi.w	8018d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8018ad6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8018ada:	4293      	cmp	r3, r2
 8018adc:	f280 811f 	bge.w	8018d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8018ae0:	2800      	cmp	r0, #0
 8018ae2:	f2c0 811c 	blt.w	8018d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8018ae6:	f10e 32ff 	add.w	r2, lr, #4294967295
 8018aea:	4290      	cmp	r0, r2
 8018aec:	f280 8117 	bge.w	8018d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8018af0:	fb00 3309 	mla	r3, r0, r9, r3
 8018af4:	0858      	lsrs	r0, r3, #1
 8018af6:	07da      	lsls	r2, r3, #31
 8018af8:	9a08      	ldr	r2, [sp, #32]
 8018afa:	f818 c000 	ldrb.w	ip, [r8, r0]
 8018afe:	bf54      	ite	pl
 8018b00:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018b04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018b08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018b0c:	fa5f fc8c 	uxtb.w	ip, ip
 8018b10:	2a00      	cmp	r2, #0
 8018b12:	f000 80ed 	beq.w	8018cf0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8018b16:	1c58      	adds	r0, r3, #1
 8018b18:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8018b1c:	07c0      	lsls	r0, r0, #31
 8018b1e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8018b22:	bf54      	ite	pl
 8018b24:	f00e 0e0f 	andpl.w	lr, lr, #15
 8018b28:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8018b2c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8018b30:	fa5f fe8e 	uxtb.w	lr, lr
 8018b34:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8018b38:	b1c9      	cbz	r1, 8018b6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8018b3a:	444b      	add	r3, r9
 8018b3c:	0858      	lsrs	r0, r3, #1
 8018b3e:	07da      	lsls	r2, r3, #31
 8018b40:	f818 0000 	ldrb.w	r0, [r8, r0]
 8018b44:	bf54      	ite	pl
 8018b46:	f000 000f 	andpl.w	r0, r0, #15
 8018b4a:	1100      	asrmi	r0, r0, #4
 8018b4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018b50:	b2c0      	uxtb	r0, r0
 8018b52:	900a      	str	r0, [sp, #40]	; 0x28
 8018b54:	1c58      	adds	r0, r3, #1
 8018b56:	0843      	lsrs	r3, r0, #1
 8018b58:	07c2      	lsls	r2, r0, #31
 8018b5a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8018b5e:	bf54      	ite	pl
 8018b60:	f003 030f 	andpl.w	r3, r3, #15
 8018b64:	111b      	asrmi	r3, r3, #4
 8018b66:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018b6a:	b2db      	uxtb	r3, r3
 8018b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8018b6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018b72:	b289      	uxth	r1, r1
 8018b74:	fb02 f301 	mul.w	r3, r2, r1
 8018b78:	0112      	lsls	r2, r2, #4
 8018b7a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8018b7e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8018b82:	1ad2      	subs	r2, r2, r3
 8018b84:	b289      	uxth	r1, r1
 8018b86:	b292      	uxth	r2, r2
 8018b88:	1a40      	subs	r0, r0, r1
 8018b8a:	fa1f fe80 	uxth.w	lr, r0
 8018b8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018b90:	4342      	muls	r2, r0
 8018b92:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8018b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b98:	fb01 c102 	mla	r1, r1, r2, ip
 8018b9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b9e:	fb03 1302 	mla	r3, r3, r2, r1
 8018ba2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018ba6:	b383      	cbz	r3, 8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018ba8:	4ac7      	ldr	r2, [pc, #796]	; (8018ec8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8018baa:	2bff      	cmp	r3, #255	; 0xff
 8018bac:	6812      	ldr	r2, [r2, #0]
 8018bae:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8018bb2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8018bb6:	b2d2      	uxtb	r2, r2
 8018bb8:	f000 80ac 	beq.w	8018d14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8018bbc:	b299      	uxth	r1, r3
 8018bbe:	43db      	mvns	r3, r3
 8018bc0:	f897 c000 	ldrb.w	ip, [r7]
 8018bc4:	fb12 f201 	smulbb	r2, r2, r1
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	fb10 f001 	smulbb	r0, r0, r1
 8018bce:	fb0c 2203 	mla	r2, ip, r3, r2
 8018bd2:	fb1e f101 	smulbb	r1, lr, r1
 8018bd6:	b292      	uxth	r2, r2
 8018bd8:	f102 0c01 	add.w	ip, r2, #1
 8018bdc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018be0:	1212      	asrs	r2, r2, #8
 8018be2:	703a      	strb	r2, [r7, #0]
 8018be4:	787a      	ldrb	r2, [r7, #1]
 8018be6:	fb02 0003 	mla	r0, r2, r3, r0
 8018bea:	b280      	uxth	r0, r0
 8018bec:	1c42      	adds	r2, r0, #1
 8018bee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018bf2:	78ba      	ldrb	r2, [r7, #2]
 8018bf4:	fb02 1303 	mla	r3, r2, r3, r1
 8018bf8:	1200      	asrs	r0, r0, #8
 8018bfa:	b29b      	uxth	r3, r3
 8018bfc:	7078      	strb	r0, [r7, #1]
 8018bfe:	f103 0e01 	add.w	lr, r3, #1
 8018c02:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8018c06:	121b      	asrs	r3, r3, #8
 8018c08:	70bb      	strb	r3, [r7, #2]
 8018c0a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018c0c:	3703      	adds	r7, #3
 8018c0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018c12:	441d      	add	r5, r3
 8018c14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018c16:	441e      	add	r6, r3
 8018c18:	e74d      	b.n	8018ab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018c1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018c1c:	3c01      	subs	r4, #1
 8018c1e:	f10b 0b03 	add.w	fp, fp, #3
 8018c22:	441d      	add	r5, r3
 8018c24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018c26:	441e      	add	r6, r3
 8018c28:	e725      	b.n	8018a76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018c2a:	d021      	beq.n	8018c70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8018c2c:	1e63      	subs	r3, r4, #1
 8018c2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8018c30:	fb00 5003 	mla	r0, r0, r3, r5
 8018c34:	1400      	asrs	r0, r0, #16
 8018c36:	f53f af3a 	bmi.w	8018aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018c3a:	3901      	subs	r1, #1
 8018c3c:	4288      	cmp	r0, r1
 8018c3e:	f6bf af36 	bge.w	8018aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018c42:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018c44:	fb01 6303 	mla	r3, r1, r3, r6
 8018c48:	141b      	asrs	r3, r3, #16
 8018c4a:	f53f af30 	bmi.w	8018aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018c4e:	3a01      	subs	r2, #1
 8018c50:	4293      	cmp	r3, r2
 8018c52:	f6bf af2c 	bge.w	8018aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018c56:	f10b 0c03 	add.w	ip, fp, #3
 8018c5a:	46a6      	mov	lr, r4
 8018c5c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8018c60:	f1be 0f00 	cmp.w	lr, #0
 8018c64:	dc79      	bgt.n	8018d5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8018c66:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018c6a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018c6e:	44a3      	add	fp, r4
 8018c70:	9b07      	ldr	r3, [sp, #28]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	f340 8123 	ble.w	8018ebe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018c7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018c7e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018c82:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018c86:	eef0 6a48 	vmov.f32	s13, s16
 8018c8a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018c8e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018c92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018c96:	ee16 5a90 	vmov	r5, s13
 8018c9a:	eef0 6a68 	vmov.f32	s13, s17
 8018c9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ca2:	ee16 6a90 	vmov	r6, s13
 8018ca6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018caa:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018cae:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018cb2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018cb6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018cba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018cbe:	ee18 2a10 	vmov	r2, s16
 8018cc2:	eeb0 8a47 	vmov.f32	s16, s14
 8018cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cca:	ee18 2a90 	vmov	r2, s17
 8018cce:	9327      	str	r3, [sp, #156]	; 0x9c
 8018cd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018cd2:	eef0 8a67 	vmov.f32	s17, s15
 8018cd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cda:	9328      	str	r3, [sp, #160]	; 0xa0
 8018cdc:	9b07      	ldr	r3, [sp, #28]
 8018cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ce0:	3b01      	subs	r3, #1
 8018ce2:	9307      	str	r3, [sp, #28]
 8018ce4:	bf08      	it	eq
 8018ce6:	4614      	moveq	r4, r2
 8018ce8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018cea:	bf18      	it	ne
 8018cec:	461c      	movne	r4, r3
 8018cee:	e6b4      	b.n	8018a5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018cf0:	2900      	cmp	r1, #0
 8018cf2:	f43f af3c 	beq.w	8018b6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8018cf6:	eb09 0003 	add.w	r0, r9, r3
 8018cfa:	0843      	lsrs	r3, r0, #1
 8018cfc:	07c0      	lsls	r0, r0, #31
 8018cfe:	f818 3003 	ldrb.w	r3, [r8, r3]
 8018d02:	bf54      	ite	pl
 8018d04:	f003 030f 	andpl.w	r3, r3, #15
 8018d08:	111b      	asrmi	r3, r3, #4
 8018d0a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	930a      	str	r3, [sp, #40]	; 0x28
 8018d12:	e72c      	b.n	8018b6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8018d14:	703a      	strb	r2, [r7, #0]
 8018d16:	7078      	strb	r0, [r7, #1]
 8018d18:	f887 e002 	strb.w	lr, [r7, #2]
 8018d1c:	e775      	b.n	8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018d1e:	1c5a      	adds	r2, r3, #1
 8018d20:	f53f af73 	bmi.w	8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018d24:	4594      	cmp	ip, r2
 8018d26:	f6ff af70 	blt.w	8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018d2a:	1c42      	adds	r2, r0, #1
 8018d2c:	f53f af6d 	bmi.w	8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018d30:	4596      	cmp	lr, r2
 8018d32:	f6ff af6a 	blt.w	8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018d36:	9302      	str	r3, [sp, #8]
 8018d38:	fa0f f38e 	sxth.w	r3, lr
 8018d3c:	9a08      	ldr	r2, [sp, #32]
 8018d3e:	9301      	str	r3, [sp, #4]
 8018d40:	fa0f f38c 	sxth.w	r3, ip
 8018d44:	9105      	str	r1, [sp, #20]
 8018d46:	4639      	mov	r1, r7
 8018d48:	9300      	str	r3, [sp, #0]
 8018d4a:	464b      	mov	r3, r9
 8018d4c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8018d50:	4642      	mov	r2, r8
 8018d52:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018d54:	f7ff fd70 	bl	8018838 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8018d58:	e757      	b.n	8018c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018d5a:	142a      	asrs	r2, r5, #16
 8018d5c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018d60:	1433      	asrs	r3, r6, #16
 8018d62:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8018d66:	fb09 2303 	mla	r3, r9, r3, r2
 8018d6a:	085a      	lsrs	r2, r3, #1
 8018d6c:	07d9      	lsls	r1, r3, #31
 8018d6e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8018d72:	bf54      	ite	pl
 8018d74:	f002 020f 	andpl.w	r2, r2, #15
 8018d78:	1112      	asrmi	r2, r2, #4
 8018d7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018d7e:	b2d2      	uxtb	r2, r2
 8018d80:	2800      	cmp	r0, #0
 8018d82:	f000 8085 	beq.w	8018e90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8018d86:	f103 0a01 	add.w	sl, r3, #1
 8018d8a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8018d8e:	f01a 0f01 	tst.w	sl, #1
 8018d92:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018d96:	bf0c      	ite	eq
 8018d98:	f001 010f 	andeq.w	r1, r1, #15
 8018d9c:	1109      	asrne	r1, r1, #4
 8018d9e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018da2:	b2c9      	uxtb	r1, r1
 8018da4:	910f      	str	r1, [sp, #60]	; 0x3c
 8018da6:	b1df      	cbz	r7, 8018de0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8018da8:	444b      	add	r3, r9
 8018daa:	0859      	lsrs	r1, r3, #1
 8018dac:	f013 0f01 	tst.w	r3, #1
 8018db0:	f103 0301 	add.w	r3, r3, #1
 8018db4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018db8:	bf0c      	ite	eq
 8018dba:	f001 010f 	andeq.w	r1, r1, #15
 8018dbe:	1109      	asrne	r1, r1, #4
 8018dc0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018dc4:	b2c9      	uxtb	r1, r1
 8018dc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8018dc8:	0859      	lsrs	r1, r3, #1
 8018dca:	07db      	lsls	r3, r3, #31
 8018dcc:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018dd0:	bf54      	ite	pl
 8018dd2:	f001 010f 	andpl.w	r1, r1, #15
 8018dd6:	1109      	asrmi	r1, r1, #4
 8018dd8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018ddc:	b2c9      	uxtb	r1, r1
 8018dde:	9110      	str	r1, [sp, #64]	; 0x40
 8018de0:	b280      	uxth	r0, r0
 8018de2:	b2bf      	uxth	r7, r7
 8018de4:	fb00 f307 	mul.w	r3, r0, r7
 8018de8:	0100      	lsls	r0, r0, #4
 8018dea:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8018dee:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8018df2:	1ac0      	subs	r0, r0, r3
 8018df4:	b2bf      	uxth	r7, r7
 8018df6:	b280      	uxth	r0, r0
 8018df8:	1bc9      	subs	r1, r1, r7
 8018dfa:	fa1f fa81 	uxth.w	sl, r1
 8018dfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018e00:	4348      	muls	r0, r1
 8018e02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018e04:	fb02 020a 	mla	r2, r2, sl, r0
 8018e08:	fb07 2701 	mla	r7, r7, r1, r2
 8018e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e0e:	fb03 7302 	mla	r3, r3, r2, r7
 8018e12:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018e16:	b393      	cbz	r3, 8018e7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018e18:	4a2b      	ldr	r2, [pc, #172]	; (8018ec8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8018e1a:	2bff      	cmp	r3, #255	; 0xff
 8018e1c:	6811      	ldr	r1, [r2, #0]
 8018e1e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8018e22:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8018e26:	b2c9      	uxtb	r1, r1
 8018e28:	d042      	beq.n	8018eb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8018e2a:	b298      	uxth	r0, r3
 8018e2c:	43db      	mvns	r3, r3
 8018e2e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8018e32:	fb11 f100 	smulbb	r1, r1, r0
 8018e36:	b2db      	uxtb	r3, r3
 8018e38:	fb17 f700 	smulbb	r7, r7, r0
 8018e3c:	fb02 1103 	mla	r1, r2, r3, r1
 8018e40:	fb1a f000 	smulbb	r0, sl, r0
 8018e44:	b289      	uxth	r1, r1
 8018e46:	1c4a      	adds	r2, r1, #1
 8018e48:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018e4c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8018e50:	fb02 7703 	mla	r7, r2, r3, r7
 8018e54:	1209      	asrs	r1, r1, #8
 8018e56:	b2bf      	uxth	r7, r7
 8018e58:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8018e5c:	1c7a      	adds	r2, r7, #1
 8018e5e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018e62:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8018e66:	fb02 0303 	mla	r3, r2, r3, r0
 8018e6a:	123f      	asrs	r7, r7, #8
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8018e72:	1c5a      	adds	r2, r3, #1
 8018e74:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018e78:	121b      	asrs	r3, r3, #8
 8018e7a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8018e7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018e80:	f10c 0c03 	add.w	ip, ip, #3
 8018e84:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018e88:	441d      	add	r5, r3
 8018e8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018e8c:	441e      	add	r6, r3
 8018e8e:	e6e7      	b.n	8018c60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8018e90:	2f00      	cmp	r7, #0
 8018e92:	d0a5      	beq.n	8018de0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8018e94:	444b      	add	r3, r9
 8018e96:	0859      	lsrs	r1, r3, #1
 8018e98:	07db      	lsls	r3, r3, #31
 8018e9a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018e9e:	bf54      	ite	pl
 8018ea0:	f001 010f 	andpl.w	r1, r1, #15
 8018ea4:	1109      	asrmi	r1, r1, #4
 8018ea6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018eaa:	b2c9      	uxtb	r1, r1
 8018eac:	910b      	str	r1, [sp, #44]	; 0x2c
 8018eae:	e797      	b.n	8018de0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8018eb0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8018eb4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8018eb8:	f80c ac01 	strb.w	sl, [ip, #-1]
 8018ebc:	e7df      	b.n	8018e7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018ebe:	b013      	add	sp, #76	; 0x4c
 8018ec0:	ecbd 8b08 	vpop	{d8-d11}
 8018ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec8:	2400aefc 	.word	0x2400aefc

08018ecc <CRC_Lock>:
 8018ecc:	4a20      	ldr	r2, [pc, #128]	; (8018f50 <CRC_Lock+0x84>)
 8018ece:	b530      	push	{r4, r5, lr}
 8018ed0:	6813      	ldr	r3, [r2, #0]
 8018ed2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8018ed6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8018eda:	f023 0301 	bic.w	r3, r3, #1
 8018ede:	6013      	str	r3, [r2, #0]
 8018ee0:	4b1c      	ldr	r3, [pc, #112]	; (8018f54 <CRC_Lock+0x88>)
 8018ee2:	681a      	ldr	r2, [r3, #0]
 8018ee4:	4022      	ands	r2, r4
 8018ee6:	42aa      	cmp	r2, r5
 8018ee8:	d005      	beq.n	8018ef6 <CRC_Lock+0x2a>
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f24c 2270 	movw	r2, #49776	; 0xc270
 8018ef0:	4023      	ands	r3, r4
 8018ef2:	4293      	cmp	r3, r2
 8018ef4:	d124      	bne.n	8018f40 <CRC_Lock+0x74>
 8018ef6:	4b18      	ldr	r3, [pc, #96]	; (8018f58 <CRC_Lock+0x8c>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	bb0b      	cbnz	r3, 8018f40 <CRC_Lock+0x74>
 8018efc:	4b17      	ldr	r3, [pc, #92]	; (8018f5c <CRC_Lock+0x90>)
 8018efe:	681a      	ldr	r2, [r3, #0]
 8018f00:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8018f04:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8018f08:	d00d      	beq.n	8018f26 <CRC_Lock+0x5a>
 8018f0a:	681a      	ldr	r2, [r3, #0]
 8018f0c:	f240 4483 	movw	r4, #1155	; 0x483
 8018f10:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8018f14:	42a2      	cmp	r2, r4
 8018f16:	d006      	beq.n	8018f26 <CRC_Lock+0x5a>
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	f240 4285 	movw	r2, #1157	; 0x485
 8018f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018f22:	4293      	cmp	r3, r2
 8018f24:	d10c      	bne.n	8018f40 <CRC_Lock+0x74>
 8018f26:	4b0e      	ldr	r3, [pc, #56]	; (8018f60 <CRC_Lock+0x94>)
 8018f28:	2201      	movs	r2, #1
 8018f2a:	601a      	str	r2, [r3, #0]
 8018f2c:	681a      	ldr	r2, [r3, #0]
 8018f2e:	2a00      	cmp	r2, #0
 8018f30:	d1fc      	bne.n	8018f2c <CRC_Lock+0x60>
 8018f32:	4b0c      	ldr	r3, [pc, #48]	; (8018f64 <CRC_Lock+0x98>)
 8018f34:	6018      	str	r0, [r3, #0]
 8018f36:	6818      	ldr	r0, [r3, #0]
 8018f38:	1a43      	subs	r3, r0, r1
 8018f3a:	4258      	negs	r0, r3
 8018f3c:	4158      	adcs	r0, r3
 8018f3e:	bd30      	pop	{r4, r5, pc}
 8018f40:	4b09      	ldr	r3, [pc, #36]	; (8018f68 <CRC_Lock+0x9c>)
 8018f42:	2201      	movs	r2, #1
 8018f44:	601a      	str	r2, [r3, #0]
 8018f46:	681a      	ldr	r2, [r3, #0]
 8018f48:	2a00      	cmp	r2, #0
 8018f4a:	d1fc      	bne.n	8018f46 <CRC_Lock+0x7a>
 8018f4c:	4b07      	ldr	r3, [pc, #28]	; (8018f6c <CRC_Lock+0xa0>)
 8018f4e:	e7f1      	b.n	8018f34 <CRC_Lock+0x68>
 8018f50:	e0002000 	.word	0xe0002000
 8018f54:	e000ed00 	.word	0xe000ed00
 8018f58:	e0042000 	.word	0xe0042000
 8018f5c:	5c001000 	.word	0x5c001000
 8018f60:	58024c08 	.word	0x58024c08
 8018f64:	58024c00 	.word	0x58024c00
 8018f68:	40023008 	.word	0x40023008
 8018f6c:	40023000 	.word	0x40023000

08018f70 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8018f70:	6101      	str	r1, [r0, #16]
 8018f72:	4770      	bx	lr

08018f74 <_ZN8touchgfx8Gestures4tickEv>:
 8018f74:	7b83      	ldrb	r3, [r0, #14]
 8018f76:	b14b      	cbz	r3, 8018f8c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8018f78:	8903      	ldrh	r3, [r0, #8]
 8018f7a:	3301      	adds	r3, #1
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	2b07      	cmp	r3, #7
 8018f80:	8103      	strh	r3, [r0, #8]
 8018f82:	bf81      	itttt	hi
 8018f84:	2300      	movhi	r3, #0
 8018f86:	8143      	strhhi	r3, [r0, #10]
 8018f88:	8183      	strhhi	r3, [r0, #12]
 8018f8a:	7383      	strbhi	r3, [r0, #14]
 8018f8c:	4770      	bx	lr
	...

08018f90 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8018f90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018f94:	4698      	mov	r8, r3
 8018f96:	8883      	ldrh	r3, [r0, #4]
 8018f98:	4604      	mov	r4, r0
 8018f9a:	4617      	mov	r7, r2
 8018f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018fa0:	eba8 0303 	sub.w	r3, r8, r3
 8018fa4:	4a19      	ldr	r2, [pc, #100]	; (801900c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8018fa6:	460e      	mov	r6, r1
 8018fa8:	b21b      	sxth	r3, r3
 8018faa:	88c1      	ldrh	r1, [r0, #6]
 8018fac:	9200      	str	r2, [sp, #0]
 8018fae:	2000      	movs	r0, #0
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	8aa2      	ldrh	r2, [r4, #20]
 8018fb4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8018fb8:	bfb8      	it	lt
 8018fba:	425b      	neglt	r3, r3
 8018fbc:	f88d 0004 	strb.w	r0, [sp, #4]
 8018fc0:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018fc4:	b21b      	sxth	r3, r3
 8018fc6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018fca:	f8ad 500c 	strh.w	r5, [sp, #12]
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	dc07      	bgt.n	8018fe2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8018fd2:	1a69      	subs	r1, r5, r1
 8018fd4:	b209      	sxth	r1, r1
 8018fd6:	2900      	cmp	r1, #0
 8018fd8:	bfb8      	it	lt
 8018fda:	4249      	neglt	r1, r1
 8018fdc:	b209      	sxth	r1, r1
 8018fde:	428a      	cmp	r2, r1
 8018fe0:	da10      	bge.n	8019004 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8018fe2:	6920      	ldr	r0, [r4, #16]
 8018fe4:	4669      	mov	r1, sp
 8018fe6:	eba8 0606 	sub.w	r6, r8, r6
 8018fea:	1bef      	subs	r7, r5, r7
 8018fec:	6803      	ldr	r3, [r0, #0]
 8018fee:	685b      	ldr	r3, [r3, #4]
 8018ff0:	4798      	blx	r3
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	2001      	movs	r0, #1
 8018ff6:	8166      	strh	r6, [r4, #10]
 8018ff8:	8123      	strh	r3, [r4, #8]
 8018ffa:	81a7      	strh	r7, [r4, #12]
 8018ffc:	f8a4 8004 	strh.w	r8, [r4, #4]
 8019000:	80e5      	strh	r5, [r4, #6]
 8019002:	73a0      	strb	r0, [r4, #14]
 8019004:	b004      	add	sp, #16
 8019006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801900a:	bf00      	nop
 801900c:	0801c27c 	.word	0x0801c27c

08019010 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8019010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019012:	461e      	mov	r6, r3
 8019014:	1e4b      	subs	r3, r1, #1
 8019016:	b085      	sub	sp, #20
 8019018:	4604      	mov	r4, r0
 801901a:	2b01      	cmp	r3, #1
 801901c:	460d      	mov	r5, r1
 801901e:	4617      	mov	r7, r2
 8019020:	d84b      	bhi.n	80190ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8019022:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019026:	1cd3      	adds	r3, r2, #3
 8019028:	b29b      	uxth	r3, r3
 801902a:	2b06      	cmp	r3, #6
 801902c:	d916      	bls.n	801905c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801902e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80190d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8019032:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019036:	f8cd c004 	str.w	ip, [sp, #4]
 801903a:	f04f 0c00 	mov.w	ip, #0
 801903e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019042:	6900      	ldr	r0, [r0, #16]
 8019044:	f8ad 100c 	strh.w	r1, [sp, #12]
 8019048:	a901      	add	r1, sp, #4
 801904a:	f88d c008 	strb.w	ip, [sp, #8]
 801904e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8019052:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019056:	6803      	ldr	r3, [r0, #0]
 8019058:	689b      	ldr	r3, [r3, #8]
 801905a:	4798      	blx	r3
 801905c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019060:	1cd3      	adds	r3, r2, #3
 8019062:	b29b      	uxth	r3, r3
 8019064:	2b06      	cmp	r3, #6
 8019066:	d916      	bls.n	8019096 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8019068:	f8df c064 	ldr.w	ip, [pc, #100]	; 80190d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801906c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019070:	f8cd c004 	str.w	ip, [sp, #4]
 8019074:	f04f 0c01 	mov.w	ip, #1
 8019078:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801907c:	6920      	ldr	r0, [r4, #16]
 801907e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8019082:	a901      	add	r1, sp, #4
 8019084:	f88d c008 	strb.w	ip, [sp, #8]
 8019088:	f8ad 200a 	strh.w	r2, [sp, #10]
 801908c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019090:	6803      	ldr	r3, [r0, #0]
 8019092:	689b      	ldr	r3, [r3, #8]
 8019094:	4798      	blx	r3
 8019096:	4b0d      	ldr	r3, [pc, #52]	; (80190cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8019098:	a901      	add	r1, sp, #4
 801909a:	6920      	ldr	r0, [r4, #16]
 801909c:	9301      	str	r3, [sp, #4]
 801909e:	2300      	movs	r3, #0
 80190a0:	f88d 5008 	strb.w	r5, [sp, #8]
 80190a4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80190a8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80190ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80190b0:	6803      	ldr	r3, [r0, #0]
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	4798      	blx	r3
 80190b6:	b005      	add	sp, #20
 80190b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190ba:	2900      	cmp	r1, #0
 80190bc:	d1eb      	bne.n	8019096 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80190be:	80a2      	strh	r2, [r4, #4]
 80190c0:	80c6      	strh	r6, [r0, #6]
 80190c2:	60a1      	str	r1, [r4, #8]
 80190c4:	81a1      	strh	r1, [r4, #12]
 80190c6:	73a1      	strb	r1, [r4, #14]
 80190c8:	e7e5      	b.n	8019096 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80190ca:	bf00      	nop
 80190cc:	0801c268 	.word	0x0801c268
 80190d0:	0801c290 	.word	0x0801c290

080190d4 <__aeabi_atexit>:
 80190d4:	460b      	mov	r3, r1
 80190d6:	4601      	mov	r1, r0
 80190d8:	4618      	mov	r0, r3
 80190da:	f000 b853 	b.w	8019184 <__cxa_atexit>

080190de <_ZdlPvj>:
 80190de:	f000 b812 	b.w	8019106 <_ZdlPv>

080190e2 <__cxa_guard_acquire>:
 80190e2:	6803      	ldr	r3, [r0, #0]
 80190e4:	07db      	lsls	r3, r3, #31
 80190e6:	d406      	bmi.n	80190f6 <__cxa_guard_acquire+0x14>
 80190e8:	7843      	ldrb	r3, [r0, #1]
 80190ea:	b103      	cbz	r3, 80190ee <__cxa_guard_acquire+0xc>
 80190ec:	deff      	udf	#255	; 0xff
 80190ee:	2301      	movs	r3, #1
 80190f0:	7043      	strb	r3, [r0, #1]
 80190f2:	4618      	mov	r0, r3
 80190f4:	4770      	bx	lr
 80190f6:	2000      	movs	r0, #0
 80190f8:	4770      	bx	lr

080190fa <__cxa_guard_release>:
 80190fa:	2301      	movs	r3, #1
 80190fc:	6003      	str	r3, [r0, #0]
 80190fe:	4770      	bx	lr

08019100 <__cxa_pure_virtual>:
 8019100:	b508      	push	{r3, lr}
 8019102:	f000 f80f 	bl	8019124 <_ZSt9terminatev>

08019106 <_ZdlPv>:
 8019106:	f000 b88f 	b.w	8019228 <free>

0801910a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801910a:	b508      	push	{r3, lr}
 801910c:	4780      	blx	r0
 801910e:	f000 f80e 	bl	801912e <abort>
	...

08019114 <_ZSt13get_terminatev>:
 8019114:	4b02      	ldr	r3, [pc, #8]	; (8019120 <_ZSt13get_terminatev+0xc>)
 8019116:	6818      	ldr	r0, [r3, #0]
 8019118:	f3bf 8f5b 	dmb	ish
 801911c:	4770      	bx	lr
 801911e:	bf00      	nop
 8019120:	240000b0 	.word	0x240000b0

08019124 <_ZSt9terminatev>:
 8019124:	b508      	push	{r3, lr}
 8019126:	f7ff fff5 	bl	8019114 <_ZSt13get_terminatev>
 801912a:	f7ff ffee 	bl	801910a <_ZN10__cxxabiv111__terminateEPFvvE>

0801912e <abort>:
 801912e:	b508      	push	{r3, lr}
 8019130:	2006      	movs	r0, #6
 8019132:	f000 fc9d 	bl	8019a70 <raise>
 8019136:	2001      	movs	r0, #1
 8019138:	f7e7 fff0 	bl	800111c <_exit>

0801913c <__assert_func>:
 801913c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801913e:	4614      	mov	r4, r2
 8019140:	461a      	mov	r2, r3
 8019142:	4b09      	ldr	r3, [pc, #36]	; (8019168 <__assert_func+0x2c>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4605      	mov	r5, r0
 8019148:	68d8      	ldr	r0, [r3, #12]
 801914a:	b14c      	cbz	r4, 8019160 <__assert_func+0x24>
 801914c:	4b07      	ldr	r3, [pc, #28]	; (801916c <__assert_func+0x30>)
 801914e:	9100      	str	r1, [sp, #0]
 8019150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019154:	4906      	ldr	r1, [pc, #24]	; (8019170 <__assert_func+0x34>)
 8019156:	462b      	mov	r3, r5
 8019158:	f000 f828 	bl	80191ac <fiprintf>
 801915c:	f7ff ffe7 	bl	801912e <abort>
 8019160:	4b04      	ldr	r3, [pc, #16]	; (8019174 <__assert_func+0x38>)
 8019162:	461c      	mov	r4, r3
 8019164:	e7f3      	b.n	801914e <__assert_func+0x12>
 8019166:	bf00      	nop
 8019168:	240000b4 	.word	0x240000b4
 801916c:	0801d589 	.word	0x0801d589
 8019170:	0801d596 	.word	0x0801d596
 8019174:	0801d5c4 	.word	0x0801d5c4

08019178 <atexit>:
 8019178:	2300      	movs	r3, #0
 801917a:	4601      	mov	r1, r0
 801917c:	461a      	mov	r2, r3
 801917e:	4618      	mov	r0, r3
 8019180:	f000 bd52 	b.w	8019c28 <__register_exitproc>

08019184 <__cxa_atexit>:
 8019184:	b510      	push	{r4, lr}
 8019186:	4c05      	ldr	r4, [pc, #20]	; (801919c <__cxa_atexit+0x18>)
 8019188:	4613      	mov	r3, r2
 801918a:	b12c      	cbz	r4, 8019198 <__cxa_atexit+0x14>
 801918c:	460a      	mov	r2, r1
 801918e:	4601      	mov	r1, r0
 8019190:	2002      	movs	r0, #2
 8019192:	f000 fd49 	bl	8019c28 <__register_exitproc>
 8019196:	bd10      	pop	{r4, pc}
 8019198:	4620      	mov	r0, r4
 801919a:	e7fc      	b.n	8019196 <__cxa_atexit+0x12>
 801919c:	08019c29 	.word	0x08019c29

080191a0 <__errno>:
 80191a0:	4b01      	ldr	r3, [pc, #4]	; (80191a8 <__errno+0x8>)
 80191a2:	6818      	ldr	r0, [r3, #0]
 80191a4:	4770      	bx	lr
 80191a6:	bf00      	nop
 80191a8:	240000b4 	.word	0x240000b4

080191ac <fiprintf>:
 80191ac:	b40e      	push	{r1, r2, r3}
 80191ae:	b503      	push	{r0, r1, lr}
 80191b0:	4601      	mov	r1, r0
 80191b2:	ab03      	add	r3, sp, #12
 80191b4:	4805      	ldr	r0, [pc, #20]	; (80191cc <fiprintf+0x20>)
 80191b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80191ba:	6800      	ldr	r0, [r0, #0]
 80191bc:	9301      	str	r3, [sp, #4]
 80191be:	f000 f95b 	bl	8019478 <_vfiprintf_r>
 80191c2:	b002      	add	sp, #8
 80191c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80191c8:	b003      	add	sp, #12
 80191ca:	4770      	bx	lr
 80191cc:	240000b4 	.word	0x240000b4

080191d0 <__libc_init_array>:
 80191d0:	b570      	push	{r4, r5, r6, lr}
 80191d2:	4d0d      	ldr	r5, [pc, #52]	; (8019208 <__libc_init_array+0x38>)
 80191d4:	4c0d      	ldr	r4, [pc, #52]	; (801920c <__libc_init_array+0x3c>)
 80191d6:	1b64      	subs	r4, r4, r5
 80191d8:	10a4      	asrs	r4, r4, #2
 80191da:	2600      	movs	r6, #0
 80191dc:	42a6      	cmp	r6, r4
 80191de:	d109      	bne.n	80191f4 <__libc_init_array+0x24>
 80191e0:	4d0b      	ldr	r5, [pc, #44]	; (8019210 <__libc_init_array+0x40>)
 80191e2:	4c0c      	ldr	r4, [pc, #48]	; (8019214 <__libc_init_array+0x44>)
 80191e4:	f001 f85a 	bl	801a29c <_init>
 80191e8:	1b64      	subs	r4, r4, r5
 80191ea:	10a4      	asrs	r4, r4, #2
 80191ec:	2600      	movs	r6, #0
 80191ee:	42a6      	cmp	r6, r4
 80191f0:	d105      	bne.n	80191fe <__libc_init_array+0x2e>
 80191f2:	bd70      	pop	{r4, r5, r6, pc}
 80191f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80191f8:	4798      	blx	r3
 80191fa:	3601      	adds	r6, #1
 80191fc:	e7ee      	b.n	80191dc <__libc_init_array+0xc>
 80191fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019202:	4798      	blx	r3
 8019204:	3601      	adds	r6, #1
 8019206:	e7f2      	b.n	80191ee <__libc_init_array+0x1e>
 8019208:	0801da50 	.word	0x0801da50
 801920c:	0801da50 	.word	0x0801da50
 8019210:	0801da50 	.word	0x0801da50
 8019214:	0801da68 	.word	0x0801da68

08019218 <malloc>:
 8019218:	4b02      	ldr	r3, [pc, #8]	; (8019224 <malloc+0xc>)
 801921a:	4601      	mov	r1, r0
 801921c:	6818      	ldr	r0, [r3, #0]
 801921e:	f000 b88d 	b.w	801933c <_malloc_r>
 8019222:	bf00      	nop
 8019224:	240000b4 	.word	0x240000b4

08019228 <free>:
 8019228:	4b02      	ldr	r3, [pc, #8]	; (8019234 <free+0xc>)
 801922a:	4601      	mov	r1, r0
 801922c:	6818      	ldr	r0, [r3, #0]
 801922e:	f000 b819 	b.w	8019264 <_free_r>
 8019232:	bf00      	nop
 8019234:	240000b4 	.word	0x240000b4

08019238 <memcpy>:
 8019238:	440a      	add	r2, r1
 801923a:	4291      	cmp	r1, r2
 801923c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019240:	d100      	bne.n	8019244 <memcpy+0xc>
 8019242:	4770      	bx	lr
 8019244:	b510      	push	{r4, lr}
 8019246:	f811 4b01 	ldrb.w	r4, [r1], #1
 801924a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801924e:	4291      	cmp	r1, r2
 8019250:	d1f9      	bne.n	8019246 <memcpy+0xe>
 8019252:	bd10      	pop	{r4, pc}

08019254 <memset>:
 8019254:	4402      	add	r2, r0
 8019256:	4603      	mov	r3, r0
 8019258:	4293      	cmp	r3, r2
 801925a:	d100      	bne.n	801925e <memset+0xa>
 801925c:	4770      	bx	lr
 801925e:	f803 1b01 	strb.w	r1, [r3], #1
 8019262:	e7f9      	b.n	8019258 <memset+0x4>

08019264 <_free_r>:
 8019264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019266:	2900      	cmp	r1, #0
 8019268:	d044      	beq.n	80192f4 <_free_r+0x90>
 801926a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801926e:	9001      	str	r0, [sp, #4]
 8019270:	2b00      	cmp	r3, #0
 8019272:	f1a1 0404 	sub.w	r4, r1, #4
 8019276:	bfb8      	it	lt
 8019278:	18e4      	addlt	r4, r4, r3
 801927a:	f000 ff57 	bl	801a12c <__malloc_lock>
 801927e:	4a1e      	ldr	r2, [pc, #120]	; (80192f8 <_free_r+0x94>)
 8019280:	9801      	ldr	r0, [sp, #4]
 8019282:	6813      	ldr	r3, [r2, #0]
 8019284:	b933      	cbnz	r3, 8019294 <_free_r+0x30>
 8019286:	6063      	str	r3, [r4, #4]
 8019288:	6014      	str	r4, [r2, #0]
 801928a:	b003      	add	sp, #12
 801928c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019290:	f000 bf52 	b.w	801a138 <__malloc_unlock>
 8019294:	42a3      	cmp	r3, r4
 8019296:	d908      	bls.n	80192aa <_free_r+0x46>
 8019298:	6825      	ldr	r5, [r4, #0]
 801929a:	1961      	adds	r1, r4, r5
 801929c:	428b      	cmp	r3, r1
 801929e:	bf01      	itttt	eq
 80192a0:	6819      	ldreq	r1, [r3, #0]
 80192a2:	685b      	ldreq	r3, [r3, #4]
 80192a4:	1949      	addeq	r1, r1, r5
 80192a6:	6021      	streq	r1, [r4, #0]
 80192a8:	e7ed      	b.n	8019286 <_free_r+0x22>
 80192aa:	461a      	mov	r2, r3
 80192ac:	685b      	ldr	r3, [r3, #4]
 80192ae:	b10b      	cbz	r3, 80192b4 <_free_r+0x50>
 80192b0:	42a3      	cmp	r3, r4
 80192b2:	d9fa      	bls.n	80192aa <_free_r+0x46>
 80192b4:	6811      	ldr	r1, [r2, #0]
 80192b6:	1855      	adds	r5, r2, r1
 80192b8:	42a5      	cmp	r5, r4
 80192ba:	d10b      	bne.n	80192d4 <_free_r+0x70>
 80192bc:	6824      	ldr	r4, [r4, #0]
 80192be:	4421      	add	r1, r4
 80192c0:	1854      	adds	r4, r2, r1
 80192c2:	42a3      	cmp	r3, r4
 80192c4:	6011      	str	r1, [r2, #0]
 80192c6:	d1e0      	bne.n	801928a <_free_r+0x26>
 80192c8:	681c      	ldr	r4, [r3, #0]
 80192ca:	685b      	ldr	r3, [r3, #4]
 80192cc:	6053      	str	r3, [r2, #4]
 80192ce:	4421      	add	r1, r4
 80192d0:	6011      	str	r1, [r2, #0]
 80192d2:	e7da      	b.n	801928a <_free_r+0x26>
 80192d4:	d902      	bls.n	80192dc <_free_r+0x78>
 80192d6:	230c      	movs	r3, #12
 80192d8:	6003      	str	r3, [r0, #0]
 80192da:	e7d6      	b.n	801928a <_free_r+0x26>
 80192dc:	6825      	ldr	r5, [r4, #0]
 80192de:	1961      	adds	r1, r4, r5
 80192e0:	428b      	cmp	r3, r1
 80192e2:	bf04      	itt	eq
 80192e4:	6819      	ldreq	r1, [r3, #0]
 80192e6:	685b      	ldreq	r3, [r3, #4]
 80192e8:	6063      	str	r3, [r4, #4]
 80192ea:	bf04      	itt	eq
 80192ec:	1949      	addeq	r1, r1, r5
 80192ee:	6021      	streq	r1, [r4, #0]
 80192f0:	6054      	str	r4, [r2, #4]
 80192f2:	e7ca      	b.n	801928a <_free_r+0x26>
 80192f4:	b003      	add	sp, #12
 80192f6:	bd30      	pop	{r4, r5, pc}
 80192f8:	2400afd0 	.word	0x2400afd0

080192fc <sbrk_aligned>:
 80192fc:	b570      	push	{r4, r5, r6, lr}
 80192fe:	4e0e      	ldr	r6, [pc, #56]	; (8019338 <sbrk_aligned+0x3c>)
 8019300:	460c      	mov	r4, r1
 8019302:	6831      	ldr	r1, [r6, #0]
 8019304:	4605      	mov	r5, r0
 8019306:	b911      	cbnz	r1, 801930e <sbrk_aligned+0x12>
 8019308:	f000 fb7a 	bl	8019a00 <_sbrk_r>
 801930c:	6030      	str	r0, [r6, #0]
 801930e:	4621      	mov	r1, r4
 8019310:	4628      	mov	r0, r5
 8019312:	f000 fb75 	bl	8019a00 <_sbrk_r>
 8019316:	1c43      	adds	r3, r0, #1
 8019318:	d00a      	beq.n	8019330 <sbrk_aligned+0x34>
 801931a:	1cc4      	adds	r4, r0, #3
 801931c:	f024 0403 	bic.w	r4, r4, #3
 8019320:	42a0      	cmp	r0, r4
 8019322:	d007      	beq.n	8019334 <sbrk_aligned+0x38>
 8019324:	1a21      	subs	r1, r4, r0
 8019326:	4628      	mov	r0, r5
 8019328:	f000 fb6a 	bl	8019a00 <_sbrk_r>
 801932c:	3001      	adds	r0, #1
 801932e:	d101      	bne.n	8019334 <sbrk_aligned+0x38>
 8019330:	f04f 34ff 	mov.w	r4, #4294967295
 8019334:	4620      	mov	r0, r4
 8019336:	bd70      	pop	{r4, r5, r6, pc}
 8019338:	2400afd4 	.word	0x2400afd4

0801933c <_malloc_r>:
 801933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019340:	1ccd      	adds	r5, r1, #3
 8019342:	f025 0503 	bic.w	r5, r5, #3
 8019346:	3508      	adds	r5, #8
 8019348:	2d0c      	cmp	r5, #12
 801934a:	bf38      	it	cc
 801934c:	250c      	movcc	r5, #12
 801934e:	2d00      	cmp	r5, #0
 8019350:	4607      	mov	r7, r0
 8019352:	db01      	blt.n	8019358 <_malloc_r+0x1c>
 8019354:	42a9      	cmp	r1, r5
 8019356:	d905      	bls.n	8019364 <_malloc_r+0x28>
 8019358:	230c      	movs	r3, #12
 801935a:	603b      	str	r3, [r7, #0]
 801935c:	2600      	movs	r6, #0
 801935e:	4630      	mov	r0, r6
 8019360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019364:	4e2e      	ldr	r6, [pc, #184]	; (8019420 <_malloc_r+0xe4>)
 8019366:	f000 fee1 	bl	801a12c <__malloc_lock>
 801936a:	6833      	ldr	r3, [r6, #0]
 801936c:	461c      	mov	r4, r3
 801936e:	bb34      	cbnz	r4, 80193be <_malloc_r+0x82>
 8019370:	4629      	mov	r1, r5
 8019372:	4638      	mov	r0, r7
 8019374:	f7ff ffc2 	bl	80192fc <sbrk_aligned>
 8019378:	1c43      	adds	r3, r0, #1
 801937a:	4604      	mov	r4, r0
 801937c:	d14d      	bne.n	801941a <_malloc_r+0xde>
 801937e:	6834      	ldr	r4, [r6, #0]
 8019380:	4626      	mov	r6, r4
 8019382:	2e00      	cmp	r6, #0
 8019384:	d140      	bne.n	8019408 <_malloc_r+0xcc>
 8019386:	6823      	ldr	r3, [r4, #0]
 8019388:	4631      	mov	r1, r6
 801938a:	4638      	mov	r0, r7
 801938c:	eb04 0803 	add.w	r8, r4, r3
 8019390:	f000 fb36 	bl	8019a00 <_sbrk_r>
 8019394:	4580      	cmp	r8, r0
 8019396:	d13a      	bne.n	801940e <_malloc_r+0xd2>
 8019398:	6821      	ldr	r1, [r4, #0]
 801939a:	3503      	adds	r5, #3
 801939c:	1a6d      	subs	r5, r5, r1
 801939e:	f025 0503 	bic.w	r5, r5, #3
 80193a2:	3508      	adds	r5, #8
 80193a4:	2d0c      	cmp	r5, #12
 80193a6:	bf38      	it	cc
 80193a8:	250c      	movcc	r5, #12
 80193aa:	4629      	mov	r1, r5
 80193ac:	4638      	mov	r0, r7
 80193ae:	f7ff ffa5 	bl	80192fc <sbrk_aligned>
 80193b2:	3001      	adds	r0, #1
 80193b4:	d02b      	beq.n	801940e <_malloc_r+0xd2>
 80193b6:	6823      	ldr	r3, [r4, #0]
 80193b8:	442b      	add	r3, r5
 80193ba:	6023      	str	r3, [r4, #0]
 80193bc:	e00e      	b.n	80193dc <_malloc_r+0xa0>
 80193be:	6822      	ldr	r2, [r4, #0]
 80193c0:	1b52      	subs	r2, r2, r5
 80193c2:	d41e      	bmi.n	8019402 <_malloc_r+0xc6>
 80193c4:	2a0b      	cmp	r2, #11
 80193c6:	d916      	bls.n	80193f6 <_malloc_r+0xba>
 80193c8:	1961      	adds	r1, r4, r5
 80193ca:	42a3      	cmp	r3, r4
 80193cc:	6025      	str	r5, [r4, #0]
 80193ce:	bf18      	it	ne
 80193d0:	6059      	strne	r1, [r3, #4]
 80193d2:	6863      	ldr	r3, [r4, #4]
 80193d4:	bf08      	it	eq
 80193d6:	6031      	streq	r1, [r6, #0]
 80193d8:	5162      	str	r2, [r4, r5]
 80193da:	604b      	str	r3, [r1, #4]
 80193dc:	4638      	mov	r0, r7
 80193de:	f104 060b 	add.w	r6, r4, #11
 80193e2:	f000 fea9 	bl	801a138 <__malloc_unlock>
 80193e6:	f026 0607 	bic.w	r6, r6, #7
 80193ea:	1d23      	adds	r3, r4, #4
 80193ec:	1af2      	subs	r2, r6, r3
 80193ee:	d0b6      	beq.n	801935e <_malloc_r+0x22>
 80193f0:	1b9b      	subs	r3, r3, r6
 80193f2:	50a3      	str	r3, [r4, r2]
 80193f4:	e7b3      	b.n	801935e <_malloc_r+0x22>
 80193f6:	6862      	ldr	r2, [r4, #4]
 80193f8:	42a3      	cmp	r3, r4
 80193fa:	bf0c      	ite	eq
 80193fc:	6032      	streq	r2, [r6, #0]
 80193fe:	605a      	strne	r2, [r3, #4]
 8019400:	e7ec      	b.n	80193dc <_malloc_r+0xa0>
 8019402:	4623      	mov	r3, r4
 8019404:	6864      	ldr	r4, [r4, #4]
 8019406:	e7b2      	b.n	801936e <_malloc_r+0x32>
 8019408:	4634      	mov	r4, r6
 801940a:	6876      	ldr	r6, [r6, #4]
 801940c:	e7b9      	b.n	8019382 <_malloc_r+0x46>
 801940e:	230c      	movs	r3, #12
 8019410:	603b      	str	r3, [r7, #0]
 8019412:	4638      	mov	r0, r7
 8019414:	f000 fe90 	bl	801a138 <__malloc_unlock>
 8019418:	e7a1      	b.n	801935e <_malloc_r+0x22>
 801941a:	6025      	str	r5, [r4, #0]
 801941c:	e7de      	b.n	80193dc <_malloc_r+0xa0>
 801941e:	bf00      	nop
 8019420:	2400afd0 	.word	0x2400afd0

08019424 <__sfputc_r>:
 8019424:	6893      	ldr	r3, [r2, #8]
 8019426:	3b01      	subs	r3, #1
 8019428:	2b00      	cmp	r3, #0
 801942a:	b410      	push	{r4}
 801942c:	6093      	str	r3, [r2, #8]
 801942e:	da08      	bge.n	8019442 <__sfputc_r+0x1e>
 8019430:	6994      	ldr	r4, [r2, #24]
 8019432:	42a3      	cmp	r3, r4
 8019434:	db01      	blt.n	801943a <__sfputc_r+0x16>
 8019436:	290a      	cmp	r1, #10
 8019438:	d103      	bne.n	8019442 <__sfputc_r+0x1e>
 801943a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801943e:	f000 bb33 	b.w	8019aa8 <__swbuf_r>
 8019442:	6813      	ldr	r3, [r2, #0]
 8019444:	1c58      	adds	r0, r3, #1
 8019446:	6010      	str	r0, [r2, #0]
 8019448:	7019      	strb	r1, [r3, #0]
 801944a:	4608      	mov	r0, r1
 801944c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019450:	4770      	bx	lr

08019452 <__sfputs_r>:
 8019452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019454:	4606      	mov	r6, r0
 8019456:	460f      	mov	r7, r1
 8019458:	4614      	mov	r4, r2
 801945a:	18d5      	adds	r5, r2, r3
 801945c:	42ac      	cmp	r4, r5
 801945e:	d101      	bne.n	8019464 <__sfputs_r+0x12>
 8019460:	2000      	movs	r0, #0
 8019462:	e007      	b.n	8019474 <__sfputs_r+0x22>
 8019464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019468:	463a      	mov	r2, r7
 801946a:	4630      	mov	r0, r6
 801946c:	f7ff ffda 	bl	8019424 <__sfputc_r>
 8019470:	1c43      	adds	r3, r0, #1
 8019472:	d1f3      	bne.n	801945c <__sfputs_r+0xa>
 8019474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019478 <_vfiprintf_r>:
 8019478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801947c:	460d      	mov	r5, r1
 801947e:	b09d      	sub	sp, #116	; 0x74
 8019480:	4614      	mov	r4, r2
 8019482:	4698      	mov	r8, r3
 8019484:	4606      	mov	r6, r0
 8019486:	b118      	cbz	r0, 8019490 <_vfiprintf_r+0x18>
 8019488:	6983      	ldr	r3, [r0, #24]
 801948a:	b90b      	cbnz	r3, 8019490 <_vfiprintf_r+0x18>
 801948c:	f000 fd48 	bl	8019f20 <__sinit>
 8019490:	4b89      	ldr	r3, [pc, #548]	; (80196b8 <_vfiprintf_r+0x240>)
 8019492:	429d      	cmp	r5, r3
 8019494:	d11b      	bne.n	80194ce <_vfiprintf_r+0x56>
 8019496:	6875      	ldr	r5, [r6, #4]
 8019498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801949a:	07d9      	lsls	r1, r3, #31
 801949c:	d405      	bmi.n	80194aa <_vfiprintf_r+0x32>
 801949e:	89ab      	ldrh	r3, [r5, #12]
 80194a0:	059a      	lsls	r2, r3, #22
 80194a2:	d402      	bmi.n	80194aa <_vfiprintf_r+0x32>
 80194a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194a6:	f000 fdd9 	bl	801a05c <__retarget_lock_acquire_recursive>
 80194aa:	89ab      	ldrh	r3, [r5, #12]
 80194ac:	071b      	lsls	r3, r3, #28
 80194ae:	d501      	bpl.n	80194b4 <_vfiprintf_r+0x3c>
 80194b0:	692b      	ldr	r3, [r5, #16]
 80194b2:	b9eb      	cbnz	r3, 80194f0 <_vfiprintf_r+0x78>
 80194b4:	4629      	mov	r1, r5
 80194b6:	4630      	mov	r0, r6
 80194b8:	f000 fb48 	bl	8019b4c <__swsetup_r>
 80194bc:	b1c0      	cbz	r0, 80194f0 <_vfiprintf_r+0x78>
 80194be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194c0:	07dc      	lsls	r4, r3, #31
 80194c2:	d50e      	bpl.n	80194e2 <_vfiprintf_r+0x6a>
 80194c4:	f04f 30ff 	mov.w	r0, #4294967295
 80194c8:	b01d      	add	sp, #116	; 0x74
 80194ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194ce:	4b7b      	ldr	r3, [pc, #492]	; (80196bc <_vfiprintf_r+0x244>)
 80194d0:	429d      	cmp	r5, r3
 80194d2:	d101      	bne.n	80194d8 <_vfiprintf_r+0x60>
 80194d4:	68b5      	ldr	r5, [r6, #8]
 80194d6:	e7df      	b.n	8019498 <_vfiprintf_r+0x20>
 80194d8:	4b79      	ldr	r3, [pc, #484]	; (80196c0 <_vfiprintf_r+0x248>)
 80194da:	429d      	cmp	r5, r3
 80194dc:	bf08      	it	eq
 80194de:	68f5      	ldreq	r5, [r6, #12]
 80194e0:	e7da      	b.n	8019498 <_vfiprintf_r+0x20>
 80194e2:	89ab      	ldrh	r3, [r5, #12]
 80194e4:	0598      	lsls	r0, r3, #22
 80194e6:	d4ed      	bmi.n	80194c4 <_vfiprintf_r+0x4c>
 80194e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194ea:	f000 fdb9 	bl	801a060 <__retarget_lock_release_recursive>
 80194ee:	e7e9      	b.n	80194c4 <_vfiprintf_r+0x4c>
 80194f0:	2300      	movs	r3, #0
 80194f2:	9309      	str	r3, [sp, #36]	; 0x24
 80194f4:	2320      	movs	r3, #32
 80194f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80194fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80194fe:	2330      	movs	r3, #48	; 0x30
 8019500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80196c4 <_vfiprintf_r+0x24c>
 8019504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019508:	f04f 0901 	mov.w	r9, #1
 801950c:	4623      	mov	r3, r4
 801950e:	469a      	mov	sl, r3
 8019510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019514:	b10a      	cbz	r2, 801951a <_vfiprintf_r+0xa2>
 8019516:	2a25      	cmp	r2, #37	; 0x25
 8019518:	d1f9      	bne.n	801950e <_vfiprintf_r+0x96>
 801951a:	ebba 0b04 	subs.w	fp, sl, r4
 801951e:	d00b      	beq.n	8019538 <_vfiprintf_r+0xc0>
 8019520:	465b      	mov	r3, fp
 8019522:	4622      	mov	r2, r4
 8019524:	4629      	mov	r1, r5
 8019526:	4630      	mov	r0, r6
 8019528:	f7ff ff93 	bl	8019452 <__sfputs_r>
 801952c:	3001      	adds	r0, #1
 801952e:	f000 80aa 	beq.w	8019686 <_vfiprintf_r+0x20e>
 8019532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019534:	445a      	add	r2, fp
 8019536:	9209      	str	r2, [sp, #36]	; 0x24
 8019538:	f89a 3000 	ldrb.w	r3, [sl]
 801953c:	2b00      	cmp	r3, #0
 801953e:	f000 80a2 	beq.w	8019686 <_vfiprintf_r+0x20e>
 8019542:	2300      	movs	r3, #0
 8019544:	f04f 32ff 	mov.w	r2, #4294967295
 8019548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801954c:	f10a 0a01 	add.w	sl, sl, #1
 8019550:	9304      	str	r3, [sp, #16]
 8019552:	9307      	str	r3, [sp, #28]
 8019554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019558:	931a      	str	r3, [sp, #104]	; 0x68
 801955a:	4654      	mov	r4, sl
 801955c:	2205      	movs	r2, #5
 801955e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019562:	4858      	ldr	r0, [pc, #352]	; (80196c4 <_vfiprintf_r+0x24c>)
 8019564:	f7e6 febc 	bl	80002e0 <memchr>
 8019568:	9a04      	ldr	r2, [sp, #16]
 801956a:	b9d8      	cbnz	r0, 80195a4 <_vfiprintf_r+0x12c>
 801956c:	06d1      	lsls	r1, r2, #27
 801956e:	bf44      	itt	mi
 8019570:	2320      	movmi	r3, #32
 8019572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019576:	0713      	lsls	r3, r2, #28
 8019578:	bf44      	itt	mi
 801957a:	232b      	movmi	r3, #43	; 0x2b
 801957c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019580:	f89a 3000 	ldrb.w	r3, [sl]
 8019584:	2b2a      	cmp	r3, #42	; 0x2a
 8019586:	d015      	beq.n	80195b4 <_vfiprintf_r+0x13c>
 8019588:	9a07      	ldr	r2, [sp, #28]
 801958a:	4654      	mov	r4, sl
 801958c:	2000      	movs	r0, #0
 801958e:	f04f 0c0a 	mov.w	ip, #10
 8019592:	4621      	mov	r1, r4
 8019594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019598:	3b30      	subs	r3, #48	; 0x30
 801959a:	2b09      	cmp	r3, #9
 801959c:	d94e      	bls.n	801963c <_vfiprintf_r+0x1c4>
 801959e:	b1b0      	cbz	r0, 80195ce <_vfiprintf_r+0x156>
 80195a0:	9207      	str	r2, [sp, #28]
 80195a2:	e014      	b.n	80195ce <_vfiprintf_r+0x156>
 80195a4:	eba0 0308 	sub.w	r3, r0, r8
 80195a8:	fa09 f303 	lsl.w	r3, r9, r3
 80195ac:	4313      	orrs	r3, r2
 80195ae:	9304      	str	r3, [sp, #16]
 80195b0:	46a2      	mov	sl, r4
 80195b2:	e7d2      	b.n	801955a <_vfiprintf_r+0xe2>
 80195b4:	9b03      	ldr	r3, [sp, #12]
 80195b6:	1d19      	adds	r1, r3, #4
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	9103      	str	r1, [sp, #12]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	bfbb      	ittet	lt
 80195c0:	425b      	neglt	r3, r3
 80195c2:	f042 0202 	orrlt.w	r2, r2, #2
 80195c6:	9307      	strge	r3, [sp, #28]
 80195c8:	9307      	strlt	r3, [sp, #28]
 80195ca:	bfb8      	it	lt
 80195cc:	9204      	strlt	r2, [sp, #16]
 80195ce:	7823      	ldrb	r3, [r4, #0]
 80195d0:	2b2e      	cmp	r3, #46	; 0x2e
 80195d2:	d10c      	bne.n	80195ee <_vfiprintf_r+0x176>
 80195d4:	7863      	ldrb	r3, [r4, #1]
 80195d6:	2b2a      	cmp	r3, #42	; 0x2a
 80195d8:	d135      	bne.n	8019646 <_vfiprintf_r+0x1ce>
 80195da:	9b03      	ldr	r3, [sp, #12]
 80195dc:	1d1a      	adds	r2, r3, #4
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	9203      	str	r2, [sp, #12]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	bfb8      	it	lt
 80195e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80195ea:	3402      	adds	r4, #2
 80195ec:	9305      	str	r3, [sp, #20]
 80195ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80196d4 <_vfiprintf_r+0x25c>
 80195f2:	7821      	ldrb	r1, [r4, #0]
 80195f4:	2203      	movs	r2, #3
 80195f6:	4650      	mov	r0, sl
 80195f8:	f7e6 fe72 	bl	80002e0 <memchr>
 80195fc:	b140      	cbz	r0, 8019610 <_vfiprintf_r+0x198>
 80195fe:	2340      	movs	r3, #64	; 0x40
 8019600:	eba0 000a 	sub.w	r0, r0, sl
 8019604:	fa03 f000 	lsl.w	r0, r3, r0
 8019608:	9b04      	ldr	r3, [sp, #16]
 801960a:	4303      	orrs	r3, r0
 801960c:	3401      	adds	r4, #1
 801960e:	9304      	str	r3, [sp, #16]
 8019610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019614:	482c      	ldr	r0, [pc, #176]	; (80196c8 <_vfiprintf_r+0x250>)
 8019616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801961a:	2206      	movs	r2, #6
 801961c:	f7e6 fe60 	bl	80002e0 <memchr>
 8019620:	2800      	cmp	r0, #0
 8019622:	d03f      	beq.n	80196a4 <_vfiprintf_r+0x22c>
 8019624:	4b29      	ldr	r3, [pc, #164]	; (80196cc <_vfiprintf_r+0x254>)
 8019626:	bb1b      	cbnz	r3, 8019670 <_vfiprintf_r+0x1f8>
 8019628:	9b03      	ldr	r3, [sp, #12]
 801962a:	3307      	adds	r3, #7
 801962c:	f023 0307 	bic.w	r3, r3, #7
 8019630:	3308      	adds	r3, #8
 8019632:	9303      	str	r3, [sp, #12]
 8019634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019636:	443b      	add	r3, r7
 8019638:	9309      	str	r3, [sp, #36]	; 0x24
 801963a:	e767      	b.n	801950c <_vfiprintf_r+0x94>
 801963c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019640:	460c      	mov	r4, r1
 8019642:	2001      	movs	r0, #1
 8019644:	e7a5      	b.n	8019592 <_vfiprintf_r+0x11a>
 8019646:	2300      	movs	r3, #0
 8019648:	3401      	adds	r4, #1
 801964a:	9305      	str	r3, [sp, #20]
 801964c:	4619      	mov	r1, r3
 801964e:	f04f 0c0a 	mov.w	ip, #10
 8019652:	4620      	mov	r0, r4
 8019654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019658:	3a30      	subs	r2, #48	; 0x30
 801965a:	2a09      	cmp	r2, #9
 801965c:	d903      	bls.n	8019666 <_vfiprintf_r+0x1ee>
 801965e:	2b00      	cmp	r3, #0
 8019660:	d0c5      	beq.n	80195ee <_vfiprintf_r+0x176>
 8019662:	9105      	str	r1, [sp, #20]
 8019664:	e7c3      	b.n	80195ee <_vfiprintf_r+0x176>
 8019666:	fb0c 2101 	mla	r1, ip, r1, r2
 801966a:	4604      	mov	r4, r0
 801966c:	2301      	movs	r3, #1
 801966e:	e7f0      	b.n	8019652 <_vfiprintf_r+0x1da>
 8019670:	ab03      	add	r3, sp, #12
 8019672:	9300      	str	r3, [sp, #0]
 8019674:	462a      	mov	r2, r5
 8019676:	4b16      	ldr	r3, [pc, #88]	; (80196d0 <_vfiprintf_r+0x258>)
 8019678:	a904      	add	r1, sp, #16
 801967a:	4630      	mov	r0, r6
 801967c:	f3af 8000 	nop.w
 8019680:	4607      	mov	r7, r0
 8019682:	1c78      	adds	r0, r7, #1
 8019684:	d1d6      	bne.n	8019634 <_vfiprintf_r+0x1bc>
 8019686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019688:	07d9      	lsls	r1, r3, #31
 801968a:	d405      	bmi.n	8019698 <_vfiprintf_r+0x220>
 801968c:	89ab      	ldrh	r3, [r5, #12]
 801968e:	059a      	lsls	r2, r3, #22
 8019690:	d402      	bmi.n	8019698 <_vfiprintf_r+0x220>
 8019692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019694:	f000 fce4 	bl	801a060 <__retarget_lock_release_recursive>
 8019698:	89ab      	ldrh	r3, [r5, #12]
 801969a:	065b      	lsls	r3, r3, #25
 801969c:	f53f af12 	bmi.w	80194c4 <_vfiprintf_r+0x4c>
 80196a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196a2:	e711      	b.n	80194c8 <_vfiprintf_r+0x50>
 80196a4:	ab03      	add	r3, sp, #12
 80196a6:	9300      	str	r3, [sp, #0]
 80196a8:	462a      	mov	r2, r5
 80196aa:	4b09      	ldr	r3, [pc, #36]	; (80196d0 <_vfiprintf_r+0x258>)
 80196ac:	a904      	add	r1, sp, #16
 80196ae:	4630      	mov	r0, r6
 80196b0:	f000 f880 	bl	80197b4 <_printf_i>
 80196b4:	e7e4      	b.n	8019680 <_vfiprintf_r+0x208>
 80196b6:	bf00      	nop
 80196b8:	0801d624 	.word	0x0801d624
 80196bc:	0801d644 	.word	0x0801d644
 80196c0:	0801d604 	.word	0x0801d604
 80196c4:	0801d5cc 	.word	0x0801d5cc
 80196c8:	0801d5d6 	.word	0x0801d5d6
 80196cc:	00000000 	.word	0x00000000
 80196d0:	08019453 	.word	0x08019453
 80196d4:	0801d5d2 	.word	0x0801d5d2

080196d8 <_printf_common>:
 80196d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196dc:	4616      	mov	r6, r2
 80196de:	4699      	mov	r9, r3
 80196e0:	688a      	ldr	r2, [r1, #8]
 80196e2:	690b      	ldr	r3, [r1, #16]
 80196e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80196e8:	4293      	cmp	r3, r2
 80196ea:	bfb8      	it	lt
 80196ec:	4613      	movlt	r3, r2
 80196ee:	6033      	str	r3, [r6, #0]
 80196f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80196f4:	4607      	mov	r7, r0
 80196f6:	460c      	mov	r4, r1
 80196f8:	b10a      	cbz	r2, 80196fe <_printf_common+0x26>
 80196fa:	3301      	adds	r3, #1
 80196fc:	6033      	str	r3, [r6, #0]
 80196fe:	6823      	ldr	r3, [r4, #0]
 8019700:	0699      	lsls	r1, r3, #26
 8019702:	bf42      	ittt	mi
 8019704:	6833      	ldrmi	r3, [r6, #0]
 8019706:	3302      	addmi	r3, #2
 8019708:	6033      	strmi	r3, [r6, #0]
 801970a:	6825      	ldr	r5, [r4, #0]
 801970c:	f015 0506 	ands.w	r5, r5, #6
 8019710:	d106      	bne.n	8019720 <_printf_common+0x48>
 8019712:	f104 0a19 	add.w	sl, r4, #25
 8019716:	68e3      	ldr	r3, [r4, #12]
 8019718:	6832      	ldr	r2, [r6, #0]
 801971a:	1a9b      	subs	r3, r3, r2
 801971c:	42ab      	cmp	r3, r5
 801971e:	dc26      	bgt.n	801976e <_printf_common+0x96>
 8019720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019724:	1e13      	subs	r3, r2, #0
 8019726:	6822      	ldr	r2, [r4, #0]
 8019728:	bf18      	it	ne
 801972a:	2301      	movne	r3, #1
 801972c:	0692      	lsls	r2, r2, #26
 801972e:	d42b      	bmi.n	8019788 <_printf_common+0xb0>
 8019730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019734:	4649      	mov	r1, r9
 8019736:	4638      	mov	r0, r7
 8019738:	47c0      	blx	r8
 801973a:	3001      	adds	r0, #1
 801973c:	d01e      	beq.n	801977c <_printf_common+0xa4>
 801973e:	6823      	ldr	r3, [r4, #0]
 8019740:	68e5      	ldr	r5, [r4, #12]
 8019742:	6832      	ldr	r2, [r6, #0]
 8019744:	f003 0306 	and.w	r3, r3, #6
 8019748:	2b04      	cmp	r3, #4
 801974a:	bf08      	it	eq
 801974c:	1aad      	subeq	r5, r5, r2
 801974e:	68a3      	ldr	r3, [r4, #8]
 8019750:	6922      	ldr	r2, [r4, #16]
 8019752:	bf0c      	ite	eq
 8019754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019758:	2500      	movne	r5, #0
 801975a:	4293      	cmp	r3, r2
 801975c:	bfc4      	itt	gt
 801975e:	1a9b      	subgt	r3, r3, r2
 8019760:	18ed      	addgt	r5, r5, r3
 8019762:	2600      	movs	r6, #0
 8019764:	341a      	adds	r4, #26
 8019766:	42b5      	cmp	r5, r6
 8019768:	d11a      	bne.n	80197a0 <_printf_common+0xc8>
 801976a:	2000      	movs	r0, #0
 801976c:	e008      	b.n	8019780 <_printf_common+0xa8>
 801976e:	2301      	movs	r3, #1
 8019770:	4652      	mov	r2, sl
 8019772:	4649      	mov	r1, r9
 8019774:	4638      	mov	r0, r7
 8019776:	47c0      	blx	r8
 8019778:	3001      	adds	r0, #1
 801977a:	d103      	bne.n	8019784 <_printf_common+0xac>
 801977c:	f04f 30ff 	mov.w	r0, #4294967295
 8019780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019784:	3501      	adds	r5, #1
 8019786:	e7c6      	b.n	8019716 <_printf_common+0x3e>
 8019788:	18e1      	adds	r1, r4, r3
 801978a:	1c5a      	adds	r2, r3, #1
 801978c:	2030      	movs	r0, #48	; 0x30
 801978e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019792:	4422      	add	r2, r4
 8019794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801979c:	3302      	adds	r3, #2
 801979e:	e7c7      	b.n	8019730 <_printf_common+0x58>
 80197a0:	2301      	movs	r3, #1
 80197a2:	4622      	mov	r2, r4
 80197a4:	4649      	mov	r1, r9
 80197a6:	4638      	mov	r0, r7
 80197a8:	47c0      	blx	r8
 80197aa:	3001      	adds	r0, #1
 80197ac:	d0e6      	beq.n	801977c <_printf_common+0xa4>
 80197ae:	3601      	adds	r6, #1
 80197b0:	e7d9      	b.n	8019766 <_printf_common+0x8e>
	...

080197b4 <_printf_i>:
 80197b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80197b8:	7e0f      	ldrb	r7, [r1, #24]
 80197ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80197bc:	2f78      	cmp	r7, #120	; 0x78
 80197be:	4691      	mov	r9, r2
 80197c0:	4680      	mov	r8, r0
 80197c2:	460c      	mov	r4, r1
 80197c4:	469a      	mov	sl, r3
 80197c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80197ca:	d807      	bhi.n	80197dc <_printf_i+0x28>
 80197cc:	2f62      	cmp	r7, #98	; 0x62
 80197ce:	d80a      	bhi.n	80197e6 <_printf_i+0x32>
 80197d0:	2f00      	cmp	r7, #0
 80197d2:	f000 80d8 	beq.w	8019986 <_printf_i+0x1d2>
 80197d6:	2f58      	cmp	r7, #88	; 0x58
 80197d8:	f000 80a3 	beq.w	8019922 <_printf_i+0x16e>
 80197dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80197e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80197e4:	e03a      	b.n	801985c <_printf_i+0xa8>
 80197e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80197ea:	2b15      	cmp	r3, #21
 80197ec:	d8f6      	bhi.n	80197dc <_printf_i+0x28>
 80197ee:	a101      	add	r1, pc, #4	; (adr r1, 80197f4 <_printf_i+0x40>)
 80197f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80197f4:	0801984d 	.word	0x0801984d
 80197f8:	08019861 	.word	0x08019861
 80197fc:	080197dd 	.word	0x080197dd
 8019800:	080197dd 	.word	0x080197dd
 8019804:	080197dd 	.word	0x080197dd
 8019808:	080197dd 	.word	0x080197dd
 801980c:	08019861 	.word	0x08019861
 8019810:	080197dd 	.word	0x080197dd
 8019814:	080197dd 	.word	0x080197dd
 8019818:	080197dd 	.word	0x080197dd
 801981c:	080197dd 	.word	0x080197dd
 8019820:	0801996d 	.word	0x0801996d
 8019824:	08019891 	.word	0x08019891
 8019828:	0801994f 	.word	0x0801994f
 801982c:	080197dd 	.word	0x080197dd
 8019830:	080197dd 	.word	0x080197dd
 8019834:	0801998f 	.word	0x0801998f
 8019838:	080197dd 	.word	0x080197dd
 801983c:	08019891 	.word	0x08019891
 8019840:	080197dd 	.word	0x080197dd
 8019844:	080197dd 	.word	0x080197dd
 8019848:	08019957 	.word	0x08019957
 801984c:	682b      	ldr	r3, [r5, #0]
 801984e:	1d1a      	adds	r2, r3, #4
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	602a      	str	r2, [r5, #0]
 8019854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801985c:	2301      	movs	r3, #1
 801985e:	e0a3      	b.n	80199a8 <_printf_i+0x1f4>
 8019860:	6820      	ldr	r0, [r4, #0]
 8019862:	6829      	ldr	r1, [r5, #0]
 8019864:	0606      	lsls	r6, r0, #24
 8019866:	f101 0304 	add.w	r3, r1, #4
 801986a:	d50a      	bpl.n	8019882 <_printf_i+0xce>
 801986c:	680e      	ldr	r6, [r1, #0]
 801986e:	602b      	str	r3, [r5, #0]
 8019870:	2e00      	cmp	r6, #0
 8019872:	da03      	bge.n	801987c <_printf_i+0xc8>
 8019874:	232d      	movs	r3, #45	; 0x2d
 8019876:	4276      	negs	r6, r6
 8019878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801987c:	485e      	ldr	r0, [pc, #376]	; (80199f8 <_printf_i+0x244>)
 801987e:	230a      	movs	r3, #10
 8019880:	e019      	b.n	80198b6 <_printf_i+0x102>
 8019882:	680e      	ldr	r6, [r1, #0]
 8019884:	602b      	str	r3, [r5, #0]
 8019886:	f010 0f40 	tst.w	r0, #64	; 0x40
 801988a:	bf18      	it	ne
 801988c:	b236      	sxthne	r6, r6
 801988e:	e7ef      	b.n	8019870 <_printf_i+0xbc>
 8019890:	682b      	ldr	r3, [r5, #0]
 8019892:	6820      	ldr	r0, [r4, #0]
 8019894:	1d19      	adds	r1, r3, #4
 8019896:	6029      	str	r1, [r5, #0]
 8019898:	0601      	lsls	r1, r0, #24
 801989a:	d501      	bpl.n	80198a0 <_printf_i+0xec>
 801989c:	681e      	ldr	r6, [r3, #0]
 801989e:	e002      	b.n	80198a6 <_printf_i+0xf2>
 80198a0:	0646      	lsls	r6, r0, #25
 80198a2:	d5fb      	bpl.n	801989c <_printf_i+0xe8>
 80198a4:	881e      	ldrh	r6, [r3, #0]
 80198a6:	4854      	ldr	r0, [pc, #336]	; (80199f8 <_printf_i+0x244>)
 80198a8:	2f6f      	cmp	r7, #111	; 0x6f
 80198aa:	bf0c      	ite	eq
 80198ac:	2308      	moveq	r3, #8
 80198ae:	230a      	movne	r3, #10
 80198b0:	2100      	movs	r1, #0
 80198b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80198b6:	6865      	ldr	r5, [r4, #4]
 80198b8:	60a5      	str	r5, [r4, #8]
 80198ba:	2d00      	cmp	r5, #0
 80198bc:	bfa2      	ittt	ge
 80198be:	6821      	ldrge	r1, [r4, #0]
 80198c0:	f021 0104 	bicge.w	r1, r1, #4
 80198c4:	6021      	strge	r1, [r4, #0]
 80198c6:	b90e      	cbnz	r6, 80198cc <_printf_i+0x118>
 80198c8:	2d00      	cmp	r5, #0
 80198ca:	d04d      	beq.n	8019968 <_printf_i+0x1b4>
 80198cc:	4615      	mov	r5, r2
 80198ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80198d2:	fb03 6711 	mls	r7, r3, r1, r6
 80198d6:	5dc7      	ldrb	r7, [r0, r7]
 80198d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80198dc:	4637      	mov	r7, r6
 80198de:	42bb      	cmp	r3, r7
 80198e0:	460e      	mov	r6, r1
 80198e2:	d9f4      	bls.n	80198ce <_printf_i+0x11a>
 80198e4:	2b08      	cmp	r3, #8
 80198e6:	d10b      	bne.n	8019900 <_printf_i+0x14c>
 80198e8:	6823      	ldr	r3, [r4, #0]
 80198ea:	07de      	lsls	r6, r3, #31
 80198ec:	d508      	bpl.n	8019900 <_printf_i+0x14c>
 80198ee:	6923      	ldr	r3, [r4, #16]
 80198f0:	6861      	ldr	r1, [r4, #4]
 80198f2:	4299      	cmp	r1, r3
 80198f4:	bfde      	ittt	le
 80198f6:	2330      	movle	r3, #48	; 0x30
 80198f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80198fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019900:	1b52      	subs	r2, r2, r5
 8019902:	6122      	str	r2, [r4, #16]
 8019904:	f8cd a000 	str.w	sl, [sp]
 8019908:	464b      	mov	r3, r9
 801990a:	aa03      	add	r2, sp, #12
 801990c:	4621      	mov	r1, r4
 801990e:	4640      	mov	r0, r8
 8019910:	f7ff fee2 	bl	80196d8 <_printf_common>
 8019914:	3001      	adds	r0, #1
 8019916:	d14c      	bne.n	80199b2 <_printf_i+0x1fe>
 8019918:	f04f 30ff 	mov.w	r0, #4294967295
 801991c:	b004      	add	sp, #16
 801991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019922:	4835      	ldr	r0, [pc, #212]	; (80199f8 <_printf_i+0x244>)
 8019924:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019928:	6829      	ldr	r1, [r5, #0]
 801992a:	6823      	ldr	r3, [r4, #0]
 801992c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019930:	6029      	str	r1, [r5, #0]
 8019932:	061d      	lsls	r5, r3, #24
 8019934:	d514      	bpl.n	8019960 <_printf_i+0x1ac>
 8019936:	07df      	lsls	r7, r3, #31
 8019938:	bf44      	itt	mi
 801993a:	f043 0320 	orrmi.w	r3, r3, #32
 801993e:	6023      	strmi	r3, [r4, #0]
 8019940:	b91e      	cbnz	r6, 801994a <_printf_i+0x196>
 8019942:	6823      	ldr	r3, [r4, #0]
 8019944:	f023 0320 	bic.w	r3, r3, #32
 8019948:	6023      	str	r3, [r4, #0]
 801994a:	2310      	movs	r3, #16
 801994c:	e7b0      	b.n	80198b0 <_printf_i+0xfc>
 801994e:	6823      	ldr	r3, [r4, #0]
 8019950:	f043 0320 	orr.w	r3, r3, #32
 8019954:	6023      	str	r3, [r4, #0]
 8019956:	2378      	movs	r3, #120	; 0x78
 8019958:	4828      	ldr	r0, [pc, #160]	; (80199fc <_printf_i+0x248>)
 801995a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801995e:	e7e3      	b.n	8019928 <_printf_i+0x174>
 8019960:	0659      	lsls	r1, r3, #25
 8019962:	bf48      	it	mi
 8019964:	b2b6      	uxthmi	r6, r6
 8019966:	e7e6      	b.n	8019936 <_printf_i+0x182>
 8019968:	4615      	mov	r5, r2
 801996a:	e7bb      	b.n	80198e4 <_printf_i+0x130>
 801996c:	682b      	ldr	r3, [r5, #0]
 801996e:	6826      	ldr	r6, [r4, #0]
 8019970:	6961      	ldr	r1, [r4, #20]
 8019972:	1d18      	adds	r0, r3, #4
 8019974:	6028      	str	r0, [r5, #0]
 8019976:	0635      	lsls	r5, r6, #24
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	d501      	bpl.n	8019980 <_printf_i+0x1cc>
 801997c:	6019      	str	r1, [r3, #0]
 801997e:	e002      	b.n	8019986 <_printf_i+0x1d2>
 8019980:	0670      	lsls	r0, r6, #25
 8019982:	d5fb      	bpl.n	801997c <_printf_i+0x1c8>
 8019984:	8019      	strh	r1, [r3, #0]
 8019986:	2300      	movs	r3, #0
 8019988:	6123      	str	r3, [r4, #16]
 801998a:	4615      	mov	r5, r2
 801998c:	e7ba      	b.n	8019904 <_printf_i+0x150>
 801998e:	682b      	ldr	r3, [r5, #0]
 8019990:	1d1a      	adds	r2, r3, #4
 8019992:	602a      	str	r2, [r5, #0]
 8019994:	681d      	ldr	r5, [r3, #0]
 8019996:	6862      	ldr	r2, [r4, #4]
 8019998:	2100      	movs	r1, #0
 801999a:	4628      	mov	r0, r5
 801999c:	f7e6 fca0 	bl	80002e0 <memchr>
 80199a0:	b108      	cbz	r0, 80199a6 <_printf_i+0x1f2>
 80199a2:	1b40      	subs	r0, r0, r5
 80199a4:	6060      	str	r0, [r4, #4]
 80199a6:	6863      	ldr	r3, [r4, #4]
 80199a8:	6123      	str	r3, [r4, #16]
 80199aa:	2300      	movs	r3, #0
 80199ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199b0:	e7a8      	b.n	8019904 <_printf_i+0x150>
 80199b2:	6923      	ldr	r3, [r4, #16]
 80199b4:	462a      	mov	r2, r5
 80199b6:	4649      	mov	r1, r9
 80199b8:	4640      	mov	r0, r8
 80199ba:	47d0      	blx	sl
 80199bc:	3001      	adds	r0, #1
 80199be:	d0ab      	beq.n	8019918 <_printf_i+0x164>
 80199c0:	6823      	ldr	r3, [r4, #0]
 80199c2:	079b      	lsls	r3, r3, #30
 80199c4:	d413      	bmi.n	80199ee <_printf_i+0x23a>
 80199c6:	68e0      	ldr	r0, [r4, #12]
 80199c8:	9b03      	ldr	r3, [sp, #12]
 80199ca:	4298      	cmp	r0, r3
 80199cc:	bfb8      	it	lt
 80199ce:	4618      	movlt	r0, r3
 80199d0:	e7a4      	b.n	801991c <_printf_i+0x168>
 80199d2:	2301      	movs	r3, #1
 80199d4:	4632      	mov	r2, r6
 80199d6:	4649      	mov	r1, r9
 80199d8:	4640      	mov	r0, r8
 80199da:	47d0      	blx	sl
 80199dc:	3001      	adds	r0, #1
 80199de:	d09b      	beq.n	8019918 <_printf_i+0x164>
 80199e0:	3501      	adds	r5, #1
 80199e2:	68e3      	ldr	r3, [r4, #12]
 80199e4:	9903      	ldr	r1, [sp, #12]
 80199e6:	1a5b      	subs	r3, r3, r1
 80199e8:	42ab      	cmp	r3, r5
 80199ea:	dcf2      	bgt.n	80199d2 <_printf_i+0x21e>
 80199ec:	e7eb      	b.n	80199c6 <_printf_i+0x212>
 80199ee:	2500      	movs	r5, #0
 80199f0:	f104 0619 	add.w	r6, r4, #25
 80199f4:	e7f5      	b.n	80199e2 <_printf_i+0x22e>
 80199f6:	bf00      	nop
 80199f8:	0801d5dd 	.word	0x0801d5dd
 80199fc:	0801d5ee 	.word	0x0801d5ee

08019a00 <_sbrk_r>:
 8019a00:	b538      	push	{r3, r4, r5, lr}
 8019a02:	4d06      	ldr	r5, [pc, #24]	; (8019a1c <_sbrk_r+0x1c>)
 8019a04:	2300      	movs	r3, #0
 8019a06:	4604      	mov	r4, r0
 8019a08:	4608      	mov	r0, r1
 8019a0a:	602b      	str	r3, [r5, #0]
 8019a0c:	f7e7 fbb4 	bl	8001178 <_sbrk>
 8019a10:	1c43      	adds	r3, r0, #1
 8019a12:	d102      	bne.n	8019a1a <_sbrk_r+0x1a>
 8019a14:	682b      	ldr	r3, [r5, #0]
 8019a16:	b103      	cbz	r3, 8019a1a <_sbrk_r+0x1a>
 8019a18:	6023      	str	r3, [r4, #0]
 8019a1a:	bd38      	pop	{r3, r4, r5, pc}
 8019a1c:	2400b174 	.word	0x2400b174

08019a20 <_raise_r>:
 8019a20:	291f      	cmp	r1, #31
 8019a22:	b538      	push	{r3, r4, r5, lr}
 8019a24:	4604      	mov	r4, r0
 8019a26:	460d      	mov	r5, r1
 8019a28:	d904      	bls.n	8019a34 <_raise_r+0x14>
 8019a2a:	2316      	movs	r3, #22
 8019a2c:	6003      	str	r3, [r0, #0]
 8019a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8019a32:	bd38      	pop	{r3, r4, r5, pc}
 8019a34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019a36:	b112      	cbz	r2, 8019a3e <_raise_r+0x1e>
 8019a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a3c:	b94b      	cbnz	r3, 8019a52 <_raise_r+0x32>
 8019a3e:	4620      	mov	r0, r4
 8019a40:	f000 f830 	bl	8019aa4 <_getpid_r>
 8019a44:	462a      	mov	r2, r5
 8019a46:	4601      	mov	r1, r0
 8019a48:	4620      	mov	r0, r4
 8019a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a4e:	f000 b817 	b.w	8019a80 <_kill_r>
 8019a52:	2b01      	cmp	r3, #1
 8019a54:	d00a      	beq.n	8019a6c <_raise_r+0x4c>
 8019a56:	1c59      	adds	r1, r3, #1
 8019a58:	d103      	bne.n	8019a62 <_raise_r+0x42>
 8019a5a:	2316      	movs	r3, #22
 8019a5c:	6003      	str	r3, [r0, #0]
 8019a5e:	2001      	movs	r0, #1
 8019a60:	e7e7      	b.n	8019a32 <_raise_r+0x12>
 8019a62:	2400      	movs	r4, #0
 8019a64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019a68:	4628      	mov	r0, r5
 8019a6a:	4798      	blx	r3
 8019a6c:	2000      	movs	r0, #0
 8019a6e:	e7e0      	b.n	8019a32 <_raise_r+0x12>

08019a70 <raise>:
 8019a70:	4b02      	ldr	r3, [pc, #8]	; (8019a7c <raise+0xc>)
 8019a72:	4601      	mov	r1, r0
 8019a74:	6818      	ldr	r0, [r3, #0]
 8019a76:	f7ff bfd3 	b.w	8019a20 <_raise_r>
 8019a7a:	bf00      	nop
 8019a7c:	240000b4 	.word	0x240000b4

08019a80 <_kill_r>:
 8019a80:	b538      	push	{r3, r4, r5, lr}
 8019a82:	4d07      	ldr	r5, [pc, #28]	; (8019aa0 <_kill_r+0x20>)
 8019a84:	2300      	movs	r3, #0
 8019a86:	4604      	mov	r4, r0
 8019a88:	4608      	mov	r0, r1
 8019a8a:	4611      	mov	r1, r2
 8019a8c:	602b      	str	r3, [r5, #0]
 8019a8e:	f7e7 fb3d 	bl	800110c <_kill>
 8019a92:	1c43      	adds	r3, r0, #1
 8019a94:	d102      	bne.n	8019a9c <_kill_r+0x1c>
 8019a96:	682b      	ldr	r3, [r5, #0]
 8019a98:	b103      	cbz	r3, 8019a9c <_kill_r+0x1c>
 8019a9a:	6023      	str	r3, [r4, #0]
 8019a9c:	bd38      	pop	{r3, r4, r5, pc}
 8019a9e:	bf00      	nop
 8019aa0:	2400b174 	.word	0x2400b174

08019aa4 <_getpid_r>:
 8019aa4:	f7e7 bb30 	b.w	8001108 <_getpid>

08019aa8 <__swbuf_r>:
 8019aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aaa:	460e      	mov	r6, r1
 8019aac:	4614      	mov	r4, r2
 8019aae:	4605      	mov	r5, r0
 8019ab0:	b118      	cbz	r0, 8019aba <__swbuf_r+0x12>
 8019ab2:	6983      	ldr	r3, [r0, #24]
 8019ab4:	b90b      	cbnz	r3, 8019aba <__swbuf_r+0x12>
 8019ab6:	f000 fa33 	bl	8019f20 <__sinit>
 8019aba:	4b21      	ldr	r3, [pc, #132]	; (8019b40 <__swbuf_r+0x98>)
 8019abc:	429c      	cmp	r4, r3
 8019abe:	d12b      	bne.n	8019b18 <__swbuf_r+0x70>
 8019ac0:	686c      	ldr	r4, [r5, #4]
 8019ac2:	69a3      	ldr	r3, [r4, #24]
 8019ac4:	60a3      	str	r3, [r4, #8]
 8019ac6:	89a3      	ldrh	r3, [r4, #12]
 8019ac8:	071a      	lsls	r2, r3, #28
 8019aca:	d52f      	bpl.n	8019b2c <__swbuf_r+0x84>
 8019acc:	6923      	ldr	r3, [r4, #16]
 8019ace:	b36b      	cbz	r3, 8019b2c <__swbuf_r+0x84>
 8019ad0:	6923      	ldr	r3, [r4, #16]
 8019ad2:	6820      	ldr	r0, [r4, #0]
 8019ad4:	1ac0      	subs	r0, r0, r3
 8019ad6:	6963      	ldr	r3, [r4, #20]
 8019ad8:	b2f6      	uxtb	r6, r6
 8019ada:	4283      	cmp	r3, r0
 8019adc:	4637      	mov	r7, r6
 8019ade:	dc04      	bgt.n	8019aea <__swbuf_r+0x42>
 8019ae0:	4621      	mov	r1, r4
 8019ae2:	4628      	mov	r0, r5
 8019ae4:	f000 f988 	bl	8019df8 <_fflush_r>
 8019ae8:	bb30      	cbnz	r0, 8019b38 <__swbuf_r+0x90>
 8019aea:	68a3      	ldr	r3, [r4, #8]
 8019aec:	3b01      	subs	r3, #1
 8019aee:	60a3      	str	r3, [r4, #8]
 8019af0:	6823      	ldr	r3, [r4, #0]
 8019af2:	1c5a      	adds	r2, r3, #1
 8019af4:	6022      	str	r2, [r4, #0]
 8019af6:	701e      	strb	r6, [r3, #0]
 8019af8:	6963      	ldr	r3, [r4, #20]
 8019afa:	3001      	adds	r0, #1
 8019afc:	4283      	cmp	r3, r0
 8019afe:	d004      	beq.n	8019b0a <__swbuf_r+0x62>
 8019b00:	89a3      	ldrh	r3, [r4, #12]
 8019b02:	07db      	lsls	r3, r3, #31
 8019b04:	d506      	bpl.n	8019b14 <__swbuf_r+0x6c>
 8019b06:	2e0a      	cmp	r6, #10
 8019b08:	d104      	bne.n	8019b14 <__swbuf_r+0x6c>
 8019b0a:	4621      	mov	r1, r4
 8019b0c:	4628      	mov	r0, r5
 8019b0e:	f000 f973 	bl	8019df8 <_fflush_r>
 8019b12:	b988      	cbnz	r0, 8019b38 <__swbuf_r+0x90>
 8019b14:	4638      	mov	r0, r7
 8019b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b18:	4b0a      	ldr	r3, [pc, #40]	; (8019b44 <__swbuf_r+0x9c>)
 8019b1a:	429c      	cmp	r4, r3
 8019b1c:	d101      	bne.n	8019b22 <__swbuf_r+0x7a>
 8019b1e:	68ac      	ldr	r4, [r5, #8]
 8019b20:	e7cf      	b.n	8019ac2 <__swbuf_r+0x1a>
 8019b22:	4b09      	ldr	r3, [pc, #36]	; (8019b48 <__swbuf_r+0xa0>)
 8019b24:	429c      	cmp	r4, r3
 8019b26:	bf08      	it	eq
 8019b28:	68ec      	ldreq	r4, [r5, #12]
 8019b2a:	e7ca      	b.n	8019ac2 <__swbuf_r+0x1a>
 8019b2c:	4621      	mov	r1, r4
 8019b2e:	4628      	mov	r0, r5
 8019b30:	f000 f80c 	bl	8019b4c <__swsetup_r>
 8019b34:	2800      	cmp	r0, #0
 8019b36:	d0cb      	beq.n	8019ad0 <__swbuf_r+0x28>
 8019b38:	f04f 37ff 	mov.w	r7, #4294967295
 8019b3c:	e7ea      	b.n	8019b14 <__swbuf_r+0x6c>
 8019b3e:	bf00      	nop
 8019b40:	0801d624 	.word	0x0801d624
 8019b44:	0801d644 	.word	0x0801d644
 8019b48:	0801d604 	.word	0x0801d604

08019b4c <__swsetup_r>:
 8019b4c:	4b32      	ldr	r3, [pc, #200]	; (8019c18 <__swsetup_r+0xcc>)
 8019b4e:	b570      	push	{r4, r5, r6, lr}
 8019b50:	681d      	ldr	r5, [r3, #0]
 8019b52:	4606      	mov	r6, r0
 8019b54:	460c      	mov	r4, r1
 8019b56:	b125      	cbz	r5, 8019b62 <__swsetup_r+0x16>
 8019b58:	69ab      	ldr	r3, [r5, #24]
 8019b5a:	b913      	cbnz	r3, 8019b62 <__swsetup_r+0x16>
 8019b5c:	4628      	mov	r0, r5
 8019b5e:	f000 f9df 	bl	8019f20 <__sinit>
 8019b62:	4b2e      	ldr	r3, [pc, #184]	; (8019c1c <__swsetup_r+0xd0>)
 8019b64:	429c      	cmp	r4, r3
 8019b66:	d10f      	bne.n	8019b88 <__swsetup_r+0x3c>
 8019b68:	686c      	ldr	r4, [r5, #4]
 8019b6a:	89a3      	ldrh	r3, [r4, #12]
 8019b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b70:	0719      	lsls	r1, r3, #28
 8019b72:	d42c      	bmi.n	8019bce <__swsetup_r+0x82>
 8019b74:	06dd      	lsls	r5, r3, #27
 8019b76:	d411      	bmi.n	8019b9c <__swsetup_r+0x50>
 8019b78:	2309      	movs	r3, #9
 8019b7a:	6033      	str	r3, [r6, #0]
 8019b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b80:	81a3      	strh	r3, [r4, #12]
 8019b82:	f04f 30ff 	mov.w	r0, #4294967295
 8019b86:	e03e      	b.n	8019c06 <__swsetup_r+0xba>
 8019b88:	4b25      	ldr	r3, [pc, #148]	; (8019c20 <__swsetup_r+0xd4>)
 8019b8a:	429c      	cmp	r4, r3
 8019b8c:	d101      	bne.n	8019b92 <__swsetup_r+0x46>
 8019b8e:	68ac      	ldr	r4, [r5, #8]
 8019b90:	e7eb      	b.n	8019b6a <__swsetup_r+0x1e>
 8019b92:	4b24      	ldr	r3, [pc, #144]	; (8019c24 <__swsetup_r+0xd8>)
 8019b94:	429c      	cmp	r4, r3
 8019b96:	bf08      	it	eq
 8019b98:	68ec      	ldreq	r4, [r5, #12]
 8019b9a:	e7e6      	b.n	8019b6a <__swsetup_r+0x1e>
 8019b9c:	0758      	lsls	r0, r3, #29
 8019b9e:	d512      	bpl.n	8019bc6 <__swsetup_r+0x7a>
 8019ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ba2:	b141      	cbz	r1, 8019bb6 <__swsetup_r+0x6a>
 8019ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ba8:	4299      	cmp	r1, r3
 8019baa:	d002      	beq.n	8019bb2 <__swsetup_r+0x66>
 8019bac:	4630      	mov	r0, r6
 8019bae:	f7ff fb59 	bl	8019264 <_free_r>
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8019bb6:	89a3      	ldrh	r3, [r4, #12]
 8019bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019bbc:	81a3      	strh	r3, [r4, #12]
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	6063      	str	r3, [r4, #4]
 8019bc2:	6923      	ldr	r3, [r4, #16]
 8019bc4:	6023      	str	r3, [r4, #0]
 8019bc6:	89a3      	ldrh	r3, [r4, #12]
 8019bc8:	f043 0308 	orr.w	r3, r3, #8
 8019bcc:	81a3      	strh	r3, [r4, #12]
 8019bce:	6923      	ldr	r3, [r4, #16]
 8019bd0:	b94b      	cbnz	r3, 8019be6 <__swsetup_r+0x9a>
 8019bd2:	89a3      	ldrh	r3, [r4, #12]
 8019bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019bdc:	d003      	beq.n	8019be6 <__swsetup_r+0x9a>
 8019bde:	4621      	mov	r1, r4
 8019be0:	4630      	mov	r0, r6
 8019be2:	f000 fa63 	bl	801a0ac <__smakebuf_r>
 8019be6:	89a0      	ldrh	r0, [r4, #12]
 8019be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bec:	f010 0301 	ands.w	r3, r0, #1
 8019bf0:	d00a      	beq.n	8019c08 <__swsetup_r+0xbc>
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	60a3      	str	r3, [r4, #8]
 8019bf6:	6963      	ldr	r3, [r4, #20]
 8019bf8:	425b      	negs	r3, r3
 8019bfa:	61a3      	str	r3, [r4, #24]
 8019bfc:	6923      	ldr	r3, [r4, #16]
 8019bfe:	b943      	cbnz	r3, 8019c12 <__swsetup_r+0xc6>
 8019c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019c04:	d1ba      	bne.n	8019b7c <__swsetup_r+0x30>
 8019c06:	bd70      	pop	{r4, r5, r6, pc}
 8019c08:	0781      	lsls	r1, r0, #30
 8019c0a:	bf58      	it	pl
 8019c0c:	6963      	ldrpl	r3, [r4, #20]
 8019c0e:	60a3      	str	r3, [r4, #8]
 8019c10:	e7f4      	b.n	8019bfc <__swsetup_r+0xb0>
 8019c12:	2000      	movs	r0, #0
 8019c14:	e7f7      	b.n	8019c06 <__swsetup_r+0xba>
 8019c16:	bf00      	nop
 8019c18:	240000b4 	.word	0x240000b4
 8019c1c:	0801d624 	.word	0x0801d624
 8019c20:	0801d644 	.word	0x0801d644
 8019c24:	0801d604 	.word	0x0801d604

08019c28 <__register_exitproc>:
 8019c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c2c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8019ce8 <__register_exitproc+0xc0>
 8019c30:	4606      	mov	r6, r0
 8019c32:	f8d8 0000 	ldr.w	r0, [r8]
 8019c36:	461f      	mov	r7, r3
 8019c38:	460d      	mov	r5, r1
 8019c3a:	4691      	mov	r9, r2
 8019c3c:	f000 fa0e 	bl	801a05c <__retarget_lock_acquire_recursive>
 8019c40:	4b25      	ldr	r3, [pc, #148]	; (8019cd8 <__register_exitproc+0xb0>)
 8019c42:	681c      	ldr	r4, [r3, #0]
 8019c44:	b934      	cbnz	r4, 8019c54 <__register_exitproc+0x2c>
 8019c46:	4c25      	ldr	r4, [pc, #148]	; (8019cdc <__register_exitproc+0xb4>)
 8019c48:	601c      	str	r4, [r3, #0]
 8019c4a:	4b25      	ldr	r3, [pc, #148]	; (8019ce0 <__register_exitproc+0xb8>)
 8019c4c:	b113      	cbz	r3, 8019c54 <__register_exitproc+0x2c>
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8019c54:	6863      	ldr	r3, [r4, #4]
 8019c56:	2b1f      	cmp	r3, #31
 8019c58:	dd07      	ble.n	8019c6a <__register_exitproc+0x42>
 8019c5a:	f8d8 0000 	ldr.w	r0, [r8]
 8019c5e:	f000 f9ff 	bl	801a060 <__retarget_lock_release_recursive>
 8019c62:	f04f 30ff 	mov.w	r0, #4294967295
 8019c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c6a:	b34e      	cbz	r6, 8019cc0 <__register_exitproc+0x98>
 8019c6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019c70:	b988      	cbnz	r0, 8019c96 <__register_exitproc+0x6e>
 8019c72:	4b1c      	ldr	r3, [pc, #112]	; (8019ce4 <__register_exitproc+0xbc>)
 8019c74:	b923      	cbnz	r3, 8019c80 <__register_exitproc+0x58>
 8019c76:	f8d8 0000 	ldr.w	r0, [r8]
 8019c7a:	f000 f9f0 	bl	801a05e <__retarget_lock_release>
 8019c7e:	e7f0      	b.n	8019c62 <__register_exitproc+0x3a>
 8019c80:	f44f 7084 	mov.w	r0, #264	; 0x108
 8019c84:	f7ff fac8 	bl	8019218 <malloc>
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	d0f4      	beq.n	8019c76 <__register_exitproc+0x4e>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8019c92:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8019c96:	6863      	ldr	r3, [r4, #4]
 8019c98:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8019c9c:	2201      	movs	r2, #1
 8019c9e:	409a      	lsls	r2, r3
 8019ca0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8019ca4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8019ca8:	4313      	orrs	r3, r2
 8019caa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8019cae:	2e02      	cmp	r6, #2
 8019cb0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8019cb4:	bf02      	ittt	eq
 8019cb6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8019cba:	4313      	orreq	r3, r2
 8019cbc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8019cc0:	6863      	ldr	r3, [r4, #4]
 8019cc2:	f8d8 0000 	ldr.w	r0, [r8]
 8019cc6:	1c5a      	adds	r2, r3, #1
 8019cc8:	3302      	adds	r3, #2
 8019cca:	6062      	str	r2, [r4, #4]
 8019ccc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8019cd0:	f000 f9c6 	bl	801a060 <__retarget_lock_release_recursive>
 8019cd4:	2000      	movs	r0, #0
 8019cd6:	e7c6      	b.n	8019c66 <__register_exitproc+0x3e>
 8019cd8:	2400b16c 	.word	0x2400b16c
 8019cdc:	2400b0e0 	.word	0x2400b0e0
 8019ce0:	0801d600 	.word	0x0801d600
 8019ce4:	08019219 	.word	0x08019219
 8019ce8:	24000118 	.word	0x24000118

08019cec <__sflush_r>:
 8019cec:	898a      	ldrh	r2, [r1, #12]
 8019cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf2:	4605      	mov	r5, r0
 8019cf4:	0710      	lsls	r0, r2, #28
 8019cf6:	460c      	mov	r4, r1
 8019cf8:	d458      	bmi.n	8019dac <__sflush_r+0xc0>
 8019cfa:	684b      	ldr	r3, [r1, #4]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	dc05      	bgt.n	8019d0c <__sflush_r+0x20>
 8019d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	dc02      	bgt.n	8019d0c <__sflush_r+0x20>
 8019d06:	2000      	movs	r0, #0
 8019d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d0e:	2e00      	cmp	r6, #0
 8019d10:	d0f9      	beq.n	8019d06 <__sflush_r+0x1a>
 8019d12:	2300      	movs	r3, #0
 8019d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019d18:	682f      	ldr	r7, [r5, #0]
 8019d1a:	602b      	str	r3, [r5, #0]
 8019d1c:	d032      	beq.n	8019d84 <__sflush_r+0x98>
 8019d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019d20:	89a3      	ldrh	r3, [r4, #12]
 8019d22:	075a      	lsls	r2, r3, #29
 8019d24:	d505      	bpl.n	8019d32 <__sflush_r+0x46>
 8019d26:	6863      	ldr	r3, [r4, #4]
 8019d28:	1ac0      	subs	r0, r0, r3
 8019d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d2c:	b10b      	cbz	r3, 8019d32 <__sflush_r+0x46>
 8019d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019d30:	1ac0      	subs	r0, r0, r3
 8019d32:	2300      	movs	r3, #0
 8019d34:	4602      	mov	r2, r0
 8019d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d38:	6a21      	ldr	r1, [r4, #32]
 8019d3a:	4628      	mov	r0, r5
 8019d3c:	47b0      	blx	r6
 8019d3e:	1c43      	adds	r3, r0, #1
 8019d40:	89a3      	ldrh	r3, [r4, #12]
 8019d42:	d106      	bne.n	8019d52 <__sflush_r+0x66>
 8019d44:	6829      	ldr	r1, [r5, #0]
 8019d46:	291d      	cmp	r1, #29
 8019d48:	d82c      	bhi.n	8019da4 <__sflush_r+0xb8>
 8019d4a:	4a2a      	ldr	r2, [pc, #168]	; (8019df4 <__sflush_r+0x108>)
 8019d4c:	40ca      	lsrs	r2, r1
 8019d4e:	07d6      	lsls	r6, r2, #31
 8019d50:	d528      	bpl.n	8019da4 <__sflush_r+0xb8>
 8019d52:	2200      	movs	r2, #0
 8019d54:	6062      	str	r2, [r4, #4]
 8019d56:	04d9      	lsls	r1, r3, #19
 8019d58:	6922      	ldr	r2, [r4, #16]
 8019d5a:	6022      	str	r2, [r4, #0]
 8019d5c:	d504      	bpl.n	8019d68 <__sflush_r+0x7c>
 8019d5e:	1c42      	adds	r2, r0, #1
 8019d60:	d101      	bne.n	8019d66 <__sflush_r+0x7a>
 8019d62:	682b      	ldr	r3, [r5, #0]
 8019d64:	b903      	cbnz	r3, 8019d68 <__sflush_r+0x7c>
 8019d66:	6560      	str	r0, [r4, #84]	; 0x54
 8019d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d6a:	602f      	str	r7, [r5, #0]
 8019d6c:	2900      	cmp	r1, #0
 8019d6e:	d0ca      	beq.n	8019d06 <__sflush_r+0x1a>
 8019d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d74:	4299      	cmp	r1, r3
 8019d76:	d002      	beq.n	8019d7e <__sflush_r+0x92>
 8019d78:	4628      	mov	r0, r5
 8019d7a:	f7ff fa73 	bl	8019264 <_free_r>
 8019d7e:	2000      	movs	r0, #0
 8019d80:	6360      	str	r0, [r4, #52]	; 0x34
 8019d82:	e7c1      	b.n	8019d08 <__sflush_r+0x1c>
 8019d84:	6a21      	ldr	r1, [r4, #32]
 8019d86:	2301      	movs	r3, #1
 8019d88:	4628      	mov	r0, r5
 8019d8a:	47b0      	blx	r6
 8019d8c:	1c41      	adds	r1, r0, #1
 8019d8e:	d1c7      	bne.n	8019d20 <__sflush_r+0x34>
 8019d90:	682b      	ldr	r3, [r5, #0]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d0c4      	beq.n	8019d20 <__sflush_r+0x34>
 8019d96:	2b1d      	cmp	r3, #29
 8019d98:	d001      	beq.n	8019d9e <__sflush_r+0xb2>
 8019d9a:	2b16      	cmp	r3, #22
 8019d9c:	d101      	bne.n	8019da2 <__sflush_r+0xb6>
 8019d9e:	602f      	str	r7, [r5, #0]
 8019da0:	e7b1      	b.n	8019d06 <__sflush_r+0x1a>
 8019da2:	89a3      	ldrh	r3, [r4, #12]
 8019da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019da8:	81a3      	strh	r3, [r4, #12]
 8019daa:	e7ad      	b.n	8019d08 <__sflush_r+0x1c>
 8019dac:	690f      	ldr	r7, [r1, #16]
 8019dae:	2f00      	cmp	r7, #0
 8019db0:	d0a9      	beq.n	8019d06 <__sflush_r+0x1a>
 8019db2:	0793      	lsls	r3, r2, #30
 8019db4:	680e      	ldr	r6, [r1, #0]
 8019db6:	bf08      	it	eq
 8019db8:	694b      	ldreq	r3, [r1, #20]
 8019dba:	600f      	str	r7, [r1, #0]
 8019dbc:	bf18      	it	ne
 8019dbe:	2300      	movne	r3, #0
 8019dc0:	eba6 0807 	sub.w	r8, r6, r7
 8019dc4:	608b      	str	r3, [r1, #8]
 8019dc6:	f1b8 0f00 	cmp.w	r8, #0
 8019dca:	dd9c      	ble.n	8019d06 <__sflush_r+0x1a>
 8019dcc:	6a21      	ldr	r1, [r4, #32]
 8019dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019dd0:	4643      	mov	r3, r8
 8019dd2:	463a      	mov	r2, r7
 8019dd4:	4628      	mov	r0, r5
 8019dd6:	47b0      	blx	r6
 8019dd8:	2800      	cmp	r0, #0
 8019dda:	dc06      	bgt.n	8019dea <__sflush_r+0xfe>
 8019ddc:	89a3      	ldrh	r3, [r4, #12]
 8019dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019de2:	81a3      	strh	r3, [r4, #12]
 8019de4:	f04f 30ff 	mov.w	r0, #4294967295
 8019de8:	e78e      	b.n	8019d08 <__sflush_r+0x1c>
 8019dea:	4407      	add	r7, r0
 8019dec:	eba8 0800 	sub.w	r8, r8, r0
 8019df0:	e7e9      	b.n	8019dc6 <__sflush_r+0xda>
 8019df2:	bf00      	nop
 8019df4:	20400001 	.word	0x20400001

08019df8 <_fflush_r>:
 8019df8:	b538      	push	{r3, r4, r5, lr}
 8019dfa:	690b      	ldr	r3, [r1, #16]
 8019dfc:	4605      	mov	r5, r0
 8019dfe:	460c      	mov	r4, r1
 8019e00:	b913      	cbnz	r3, 8019e08 <_fflush_r+0x10>
 8019e02:	2500      	movs	r5, #0
 8019e04:	4628      	mov	r0, r5
 8019e06:	bd38      	pop	{r3, r4, r5, pc}
 8019e08:	b118      	cbz	r0, 8019e12 <_fflush_r+0x1a>
 8019e0a:	6983      	ldr	r3, [r0, #24]
 8019e0c:	b90b      	cbnz	r3, 8019e12 <_fflush_r+0x1a>
 8019e0e:	f000 f887 	bl	8019f20 <__sinit>
 8019e12:	4b14      	ldr	r3, [pc, #80]	; (8019e64 <_fflush_r+0x6c>)
 8019e14:	429c      	cmp	r4, r3
 8019e16:	d11b      	bne.n	8019e50 <_fflush_r+0x58>
 8019e18:	686c      	ldr	r4, [r5, #4]
 8019e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d0ef      	beq.n	8019e02 <_fflush_r+0xa>
 8019e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019e24:	07d0      	lsls	r0, r2, #31
 8019e26:	d404      	bmi.n	8019e32 <_fflush_r+0x3a>
 8019e28:	0599      	lsls	r1, r3, #22
 8019e2a:	d402      	bmi.n	8019e32 <_fflush_r+0x3a>
 8019e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e2e:	f000 f915 	bl	801a05c <__retarget_lock_acquire_recursive>
 8019e32:	4628      	mov	r0, r5
 8019e34:	4621      	mov	r1, r4
 8019e36:	f7ff ff59 	bl	8019cec <__sflush_r>
 8019e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e3c:	07da      	lsls	r2, r3, #31
 8019e3e:	4605      	mov	r5, r0
 8019e40:	d4e0      	bmi.n	8019e04 <_fflush_r+0xc>
 8019e42:	89a3      	ldrh	r3, [r4, #12]
 8019e44:	059b      	lsls	r3, r3, #22
 8019e46:	d4dd      	bmi.n	8019e04 <_fflush_r+0xc>
 8019e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019e4a:	f000 f909 	bl	801a060 <__retarget_lock_release_recursive>
 8019e4e:	e7d9      	b.n	8019e04 <_fflush_r+0xc>
 8019e50:	4b05      	ldr	r3, [pc, #20]	; (8019e68 <_fflush_r+0x70>)
 8019e52:	429c      	cmp	r4, r3
 8019e54:	d101      	bne.n	8019e5a <_fflush_r+0x62>
 8019e56:	68ac      	ldr	r4, [r5, #8]
 8019e58:	e7df      	b.n	8019e1a <_fflush_r+0x22>
 8019e5a:	4b04      	ldr	r3, [pc, #16]	; (8019e6c <_fflush_r+0x74>)
 8019e5c:	429c      	cmp	r4, r3
 8019e5e:	bf08      	it	eq
 8019e60:	68ec      	ldreq	r4, [r5, #12]
 8019e62:	e7da      	b.n	8019e1a <_fflush_r+0x22>
 8019e64:	0801d624 	.word	0x0801d624
 8019e68:	0801d644 	.word	0x0801d644
 8019e6c:	0801d604 	.word	0x0801d604

08019e70 <std>:
 8019e70:	2300      	movs	r3, #0
 8019e72:	b510      	push	{r4, lr}
 8019e74:	4604      	mov	r4, r0
 8019e76:	e9c0 3300 	strd	r3, r3, [r0]
 8019e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e7e:	6083      	str	r3, [r0, #8]
 8019e80:	8181      	strh	r1, [r0, #12]
 8019e82:	6643      	str	r3, [r0, #100]	; 0x64
 8019e84:	81c2      	strh	r2, [r0, #14]
 8019e86:	6183      	str	r3, [r0, #24]
 8019e88:	4619      	mov	r1, r3
 8019e8a:	2208      	movs	r2, #8
 8019e8c:	305c      	adds	r0, #92	; 0x5c
 8019e8e:	f7ff f9e1 	bl	8019254 <memset>
 8019e92:	4b05      	ldr	r3, [pc, #20]	; (8019ea8 <std+0x38>)
 8019e94:	6263      	str	r3, [r4, #36]	; 0x24
 8019e96:	4b05      	ldr	r3, [pc, #20]	; (8019eac <std+0x3c>)
 8019e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8019e9a:	4b05      	ldr	r3, [pc, #20]	; (8019eb0 <std+0x40>)
 8019e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019e9e:	4b05      	ldr	r3, [pc, #20]	; (8019eb4 <std+0x44>)
 8019ea0:	6224      	str	r4, [r4, #32]
 8019ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8019ea4:	bd10      	pop	{r4, pc}
 8019ea6:	bf00      	nop
 8019ea8:	0801a145 	.word	0x0801a145
 8019eac:	0801a167 	.word	0x0801a167
 8019eb0:	0801a19f 	.word	0x0801a19f
 8019eb4:	0801a1c3 	.word	0x0801a1c3

08019eb8 <_cleanup_r>:
 8019eb8:	4901      	ldr	r1, [pc, #4]	; (8019ec0 <_cleanup_r+0x8>)
 8019eba:	f000 b8af 	b.w	801a01c <_fwalk_reent>
 8019ebe:	bf00      	nop
 8019ec0:	08019df9 	.word	0x08019df9

08019ec4 <__sfmoreglue>:
 8019ec4:	b570      	push	{r4, r5, r6, lr}
 8019ec6:	2268      	movs	r2, #104	; 0x68
 8019ec8:	1e4d      	subs	r5, r1, #1
 8019eca:	4355      	muls	r5, r2
 8019ecc:	460e      	mov	r6, r1
 8019ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019ed2:	f7ff fa33 	bl	801933c <_malloc_r>
 8019ed6:	4604      	mov	r4, r0
 8019ed8:	b140      	cbz	r0, 8019eec <__sfmoreglue+0x28>
 8019eda:	2100      	movs	r1, #0
 8019edc:	e9c0 1600 	strd	r1, r6, [r0]
 8019ee0:	300c      	adds	r0, #12
 8019ee2:	60a0      	str	r0, [r4, #8]
 8019ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019ee8:	f7ff f9b4 	bl	8019254 <memset>
 8019eec:	4620      	mov	r0, r4
 8019eee:	bd70      	pop	{r4, r5, r6, pc}

08019ef0 <__sfp_lock_acquire>:
 8019ef0:	4801      	ldr	r0, [pc, #4]	; (8019ef8 <__sfp_lock_acquire+0x8>)
 8019ef2:	f000 b8b3 	b.w	801a05c <__retarget_lock_acquire_recursive>
 8019ef6:	bf00      	nop
 8019ef8:	2400b172 	.word	0x2400b172

08019efc <__sfp_lock_release>:
 8019efc:	4801      	ldr	r0, [pc, #4]	; (8019f04 <__sfp_lock_release+0x8>)
 8019efe:	f000 b8af 	b.w	801a060 <__retarget_lock_release_recursive>
 8019f02:	bf00      	nop
 8019f04:	2400b172 	.word	0x2400b172

08019f08 <__sinit_lock_acquire>:
 8019f08:	4801      	ldr	r0, [pc, #4]	; (8019f10 <__sinit_lock_acquire+0x8>)
 8019f0a:	f000 b8a7 	b.w	801a05c <__retarget_lock_acquire_recursive>
 8019f0e:	bf00      	nop
 8019f10:	2400b173 	.word	0x2400b173

08019f14 <__sinit_lock_release>:
 8019f14:	4801      	ldr	r0, [pc, #4]	; (8019f1c <__sinit_lock_release+0x8>)
 8019f16:	f000 b8a3 	b.w	801a060 <__retarget_lock_release_recursive>
 8019f1a:	bf00      	nop
 8019f1c:	2400b173 	.word	0x2400b173

08019f20 <__sinit>:
 8019f20:	b510      	push	{r4, lr}
 8019f22:	4604      	mov	r4, r0
 8019f24:	f7ff fff0 	bl	8019f08 <__sinit_lock_acquire>
 8019f28:	69a3      	ldr	r3, [r4, #24]
 8019f2a:	b11b      	cbz	r3, 8019f34 <__sinit+0x14>
 8019f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f30:	f7ff bff0 	b.w	8019f14 <__sinit_lock_release>
 8019f34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019f38:	6523      	str	r3, [r4, #80]	; 0x50
 8019f3a:	4b13      	ldr	r3, [pc, #76]	; (8019f88 <__sinit+0x68>)
 8019f3c:	4a13      	ldr	r2, [pc, #76]	; (8019f8c <__sinit+0x6c>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8019f42:	42a3      	cmp	r3, r4
 8019f44:	bf04      	itt	eq
 8019f46:	2301      	moveq	r3, #1
 8019f48:	61a3      	streq	r3, [r4, #24]
 8019f4a:	4620      	mov	r0, r4
 8019f4c:	f000 f820 	bl	8019f90 <__sfp>
 8019f50:	6060      	str	r0, [r4, #4]
 8019f52:	4620      	mov	r0, r4
 8019f54:	f000 f81c 	bl	8019f90 <__sfp>
 8019f58:	60a0      	str	r0, [r4, #8]
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	f000 f818 	bl	8019f90 <__sfp>
 8019f60:	2200      	movs	r2, #0
 8019f62:	60e0      	str	r0, [r4, #12]
 8019f64:	2104      	movs	r1, #4
 8019f66:	6860      	ldr	r0, [r4, #4]
 8019f68:	f7ff ff82 	bl	8019e70 <std>
 8019f6c:	68a0      	ldr	r0, [r4, #8]
 8019f6e:	2201      	movs	r2, #1
 8019f70:	2109      	movs	r1, #9
 8019f72:	f7ff ff7d 	bl	8019e70 <std>
 8019f76:	68e0      	ldr	r0, [r4, #12]
 8019f78:	2202      	movs	r2, #2
 8019f7a:	2112      	movs	r1, #18
 8019f7c:	f7ff ff78 	bl	8019e70 <std>
 8019f80:	2301      	movs	r3, #1
 8019f82:	61a3      	str	r3, [r4, #24]
 8019f84:	e7d2      	b.n	8019f2c <__sinit+0xc>
 8019f86:	bf00      	nop
 8019f88:	0801d5c8 	.word	0x0801d5c8
 8019f8c:	08019eb9 	.word	0x08019eb9

08019f90 <__sfp>:
 8019f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f92:	4607      	mov	r7, r0
 8019f94:	f7ff ffac 	bl	8019ef0 <__sfp_lock_acquire>
 8019f98:	4b1e      	ldr	r3, [pc, #120]	; (801a014 <__sfp+0x84>)
 8019f9a:	681e      	ldr	r6, [r3, #0]
 8019f9c:	69b3      	ldr	r3, [r6, #24]
 8019f9e:	b913      	cbnz	r3, 8019fa6 <__sfp+0x16>
 8019fa0:	4630      	mov	r0, r6
 8019fa2:	f7ff ffbd 	bl	8019f20 <__sinit>
 8019fa6:	3648      	adds	r6, #72	; 0x48
 8019fa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019fac:	3b01      	subs	r3, #1
 8019fae:	d503      	bpl.n	8019fb8 <__sfp+0x28>
 8019fb0:	6833      	ldr	r3, [r6, #0]
 8019fb2:	b30b      	cbz	r3, 8019ff8 <__sfp+0x68>
 8019fb4:	6836      	ldr	r6, [r6, #0]
 8019fb6:	e7f7      	b.n	8019fa8 <__sfp+0x18>
 8019fb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019fbc:	b9d5      	cbnz	r5, 8019ff4 <__sfp+0x64>
 8019fbe:	4b16      	ldr	r3, [pc, #88]	; (801a018 <__sfp+0x88>)
 8019fc0:	60e3      	str	r3, [r4, #12]
 8019fc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019fc6:	6665      	str	r5, [r4, #100]	; 0x64
 8019fc8:	f000 f847 	bl	801a05a <__retarget_lock_init_recursive>
 8019fcc:	f7ff ff96 	bl	8019efc <__sfp_lock_release>
 8019fd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019fd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019fd8:	6025      	str	r5, [r4, #0]
 8019fda:	61a5      	str	r5, [r4, #24]
 8019fdc:	2208      	movs	r2, #8
 8019fde:	4629      	mov	r1, r5
 8019fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019fe4:	f7ff f936 	bl	8019254 <memset>
 8019fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ff4:	3468      	adds	r4, #104	; 0x68
 8019ff6:	e7d9      	b.n	8019fac <__sfp+0x1c>
 8019ff8:	2104      	movs	r1, #4
 8019ffa:	4638      	mov	r0, r7
 8019ffc:	f7ff ff62 	bl	8019ec4 <__sfmoreglue>
 801a000:	4604      	mov	r4, r0
 801a002:	6030      	str	r0, [r6, #0]
 801a004:	2800      	cmp	r0, #0
 801a006:	d1d5      	bne.n	8019fb4 <__sfp+0x24>
 801a008:	f7ff ff78 	bl	8019efc <__sfp_lock_release>
 801a00c:	230c      	movs	r3, #12
 801a00e:	603b      	str	r3, [r7, #0]
 801a010:	e7ee      	b.n	8019ff0 <__sfp+0x60>
 801a012:	bf00      	nop
 801a014:	0801d5c8 	.word	0x0801d5c8
 801a018:	ffff0001 	.word	0xffff0001

0801a01c <_fwalk_reent>:
 801a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a020:	4606      	mov	r6, r0
 801a022:	4688      	mov	r8, r1
 801a024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a028:	2700      	movs	r7, #0
 801a02a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a02e:	f1b9 0901 	subs.w	r9, r9, #1
 801a032:	d505      	bpl.n	801a040 <_fwalk_reent+0x24>
 801a034:	6824      	ldr	r4, [r4, #0]
 801a036:	2c00      	cmp	r4, #0
 801a038:	d1f7      	bne.n	801a02a <_fwalk_reent+0xe>
 801a03a:	4638      	mov	r0, r7
 801a03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a040:	89ab      	ldrh	r3, [r5, #12]
 801a042:	2b01      	cmp	r3, #1
 801a044:	d907      	bls.n	801a056 <_fwalk_reent+0x3a>
 801a046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a04a:	3301      	adds	r3, #1
 801a04c:	d003      	beq.n	801a056 <_fwalk_reent+0x3a>
 801a04e:	4629      	mov	r1, r5
 801a050:	4630      	mov	r0, r6
 801a052:	47c0      	blx	r8
 801a054:	4307      	orrs	r7, r0
 801a056:	3568      	adds	r5, #104	; 0x68
 801a058:	e7e9      	b.n	801a02e <_fwalk_reent+0x12>

0801a05a <__retarget_lock_init_recursive>:
 801a05a:	4770      	bx	lr

0801a05c <__retarget_lock_acquire_recursive>:
 801a05c:	4770      	bx	lr

0801a05e <__retarget_lock_release>:
 801a05e:	4770      	bx	lr

0801a060 <__retarget_lock_release_recursive>:
 801a060:	4770      	bx	lr

0801a062 <__swhatbuf_r>:
 801a062:	b570      	push	{r4, r5, r6, lr}
 801a064:	460e      	mov	r6, r1
 801a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a06a:	2900      	cmp	r1, #0
 801a06c:	b096      	sub	sp, #88	; 0x58
 801a06e:	4614      	mov	r4, r2
 801a070:	461d      	mov	r5, r3
 801a072:	da08      	bge.n	801a086 <__swhatbuf_r+0x24>
 801a074:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a078:	2200      	movs	r2, #0
 801a07a:	602a      	str	r2, [r5, #0]
 801a07c:	061a      	lsls	r2, r3, #24
 801a07e:	d410      	bmi.n	801a0a2 <__swhatbuf_r+0x40>
 801a080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a084:	e00e      	b.n	801a0a4 <__swhatbuf_r+0x42>
 801a086:	466a      	mov	r2, sp
 801a088:	f000 f8c2 	bl	801a210 <_fstat_r>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	dbf1      	blt.n	801a074 <__swhatbuf_r+0x12>
 801a090:	9a01      	ldr	r2, [sp, #4]
 801a092:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a096:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a09a:	425a      	negs	r2, r3
 801a09c:	415a      	adcs	r2, r3
 801a09e:	602a      	str	r2, [r5, #0]
 801a0a0:	e7ee      	b.n	801a080 <__swhatbuf_r+0x1e>
 801a0a2:	2340      	movs	r3, #64	; 0x40
 801a0a4:	2000      	movs	r0, #0
 801a0a6:	6023      	str	r3, [r4, #0]
 801a0a8:	b016      	add	sp, #88	; 0x58
 801a0aa:	bd70      	pop	{r4, r5, r6, pc}

0801a0ac <__smakebuf_r>:
 801a0ac:	898b      	ldrh	r3, [r1, #12]
 801a0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a0b0:	079d      	lsls	r5, r3, #30
 801a0b2:	4606      	mov	r6, r0
 801a0b4:	460c      	mov	r4, r1
 801a0b6:	d507      	bpl.n	801a0c8 <__smakebuf_r+0x1c>
 801a0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a0bc:	6023      	str	r3, [r4, #0]
 801a0be:	6123      	str	r3, [r4, #16]
 801a0c0:	2301      	movs	r3, #1
 801a0c2:	6163      	str	r3, [r4, #20]
 801a0c4:	b002      	add	sp, #8
 801a0c6:	bd70      	pop	{r4, r5, r6, pc}
 801a0c8:	ab01      	add	r3, sp, #4
 801a0ca:	466a      	mov	r2, sp
 801a0cc:	f7ff ffc9 	bl	801a062 <__swhatbuf_r>
 801a0d0:	9900      	ldr	r1, [sp, #0]
 801a0d2:	4605      	mov	r5, r0
 801a0d4:	4630      	mov	r0, r6
 801a0d6:	f7ff f931 	bl	801933c <_malloc_r>
 801a0da:	b948      	cbnz	r0, 801a0f0 <__smakebuf_r+0x44>
 801a0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0e0:	059a      	lsls	r2, r3, #22
 801a0e2:	d4ef      	bmi.n	801a0c4 <__smakebuf_r+0x18>
 801a0e4:	f023 0303 	bic.w	r3, r3, #3
 801a0e8:	f043 0302 	orr.w	r3, r3, #2
 801a0ec:	81a3      	strh	r3, [r4, #12]
 801a0ee:	e7e3      	b.n	801a0b8 <__smakebuf_r+0xc>
 801a0f0:	4b0d      	ldr	r3, [pc, #52]	; (801a128 <__smakebuf_r+0x7c>)
 801a0f2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a0f4:	89a3      	ldrh	r3, [r4, #12]
 801a0f6:	6020      	str	r0, [r4, #0]
 801a0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a0fc:	81a3      	strh	r3, [r4, #12]
 801a0fe:	9b00      	ldr	r3, [sp, #0]
 801a100:	6163      	str	r3, [r4, #20]
 801a102:	9b01      	ldr	r3, [sp, #4]
 801a104:	6120      	str	r0, [r4, #16]
 801a106:	b15b      	cbz	r3, 801a120 <__smakebuf_r+0x74>
 801a108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a10c:	4630      	mov	r0, r6
 801a10e:	f000 f891 	bl	801a234 <_isatty_r>
 801a112:	b128      	cbz	r0, 801a120 <__smakebuf_r+0x74>
 801a114:	89a3      	ldrh	r3, [r4, #12]
 801a116:	f023 0303 	bic.w	r3, r3, #3
 801a11a:	f043 0301 	orr.w	r3, r3, #1
 801a11e:	81a3      	strh	r3, [r4, #12]
 801a120:	89a0      	ldrh	r0, [r4, #12]
 801a122:	4305      	orrs	r5, r0
 801a124:	81a5      	strh	r5, [r4, #12]
 801a126:	e7cd      	b.n	801a0c4 <__smakebuf_r+0x18>
 801a128:	08019eb9 	.word	0x08019eb9

0801a12c <__malloc_lock>:
 801a12c:	4801      	ldr	r0, [pc, #4]	; (801a134 <__malloc_lock+0x8>)
 801a12e:	f7ff bf95 	b.w	801a05c <__retarget_lock_acquire_recursive>
 801a132:	bf00      	nop
 801a134:	2400b171 	.word	0x2400b171

0801a138 <__malloc_unlock>:
 801a138:	4801      	ldr	r0, [pc, #4]	; (801a140 <__malloc_unlock+0x8>)
 801a13a:	f7ff bf91 	b.w	801a060 <__retarget_lock_release_recursive>
 801a13e:	bf00      	nop
 801a140:	2400b171 	.word	0x2400b171

0801a144 <__sread>:
 801a144:	b510      	push	{r4, lr}
 801a146:	460c      	mov	r4, r1
 801a148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a14c:	f000 f894 	bl	801a278 <_read_r>
 801a150:	2800      	cmp	r0, #0
 801a152:	bfab      	itete	ge
 801a154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a156:	89a3      	ldrhlt	r3, [r4, #12]
 801a158:	181b      	addge	r3, r3, r0
 801a15a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a15e:	bfac      	ite	ge
 801a160:	6563      	strge	r3, [r4, #84]	; 0x54
 801a162:	81a3      	strhlt	r3, [r4, #12]
 801a164:	bd10      	pop	{r4, pc}

0801a166 <__swrite>:
 801a166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a16a:	461f      	mov	r7, r3
 801a16c:	898b      	ldrh	r3, [r1, #12]
 801a16e:	05db      	lsls	r3, r3, #23
 801a170:	4605      	mov	r5, r0
 801a172:	460c      	mov	r4, r1
 801a174:	4616      	mov	r6, r2
 801a176:	d505      	bpl.n	801a184 <__swrite+0x1e>
 801a178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a17c:	2302      	movs	r3, #2
 801a17e:	2200      	movs	r2, #0
 801a180:	f000 f868 	bl	801a254 <_lseek_r>
 801a184:	89a3      	ldrh	r3, [r4, #12]
 801a186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a18a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a18e:	81a3      	strh	r3, [r4, #12]
 801a190:	4632      	mov	r2, r6
 801a192:	463b      	mov	r3, r7
 801a194:	4628      	mov	r0, r5
 801a196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a19a:	f000 b817 	b.w	801a1cc <_write_r>

0801a19e <__sseek>:
 801a19e:	b510      	push	{r4, lr}
 801a1a0:	460c      	mov	r4, r1
 801a1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1a6:	f000 f855 	bl	801a254 <_lseek_r>
 801a1aa:	1c43      	adds	r3, r0, #1
 801a1ac:	89a3      	ldrh	r3, [r4, #12]
 801a1ae:	bf15      	itete	ne
 801a1b0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a1b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a1b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a1ba:	81a3      	strheq	r3, [r4, #12]
 801a1bc:	bf18      	it	ne
 801a1be:	81a3      	strhne	r3, [r4, #12]
 801a1c0:	bd10      	pop	{r4, pc}

0801a1c2 <__sclose>:
 801a1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1c6:	f000 b813 	b.w	801a1f0 <_close_r>
	...

0801a1cc <_write_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4d07      	ldr	r5, [pc, #28]	; (801a1ec <_write_r+0x20>)
 801a1d0:	4604      	mov	r4, r0
 801a1d2:	4608      	mov	r0, r1
 801a1d4:	4611      	mov	r1, r2
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	602a      	str	r2, [r5, #0]
 801a1da:	461a      	mov	r2, r3
 801a1dc:	f7e6 ffb2 	bl	8001144 <_write>
 801a1e0:	1c43      	adds	r3, r0, #1
 801a1e2:	d102      	bne.n	801a1ea <_write_r+0x1e>
 801a1e4:	682b      	ldr	r3, [r5, #0]
 801a1e6:	b103      	cbz	r3, 801a1ea <_write_r+0x1e>
 801a1e8:	6023      	str	r3, [r4, #0]
 801a1ea:	bd38      	pop	{r3, r4, r5, pc}
 801a1ec:	2400b174 	.word	0x2400b174

0801a1f0 <_close_r>:
 801a1f0:	b538      	push	{r3, r4, r5, lr}
 801a1f2:	4d06      	ldr	r5, [pc, #24]	; (801a20c <_close_r+0x1c>)
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	4608      	mov	r0, r1
 801a1fa:	602b      	str	r3, [r5, #0]
 801a1fc:	f7e6 ffb0 	bl	8001160 <_close>
 801a200:	1c43      	adds	r3, r0, #1
 801a202:	d102      	bne.n	801a20a <_close_r+0x1a>
 801a204:	682b      	ldr	r3, [r5, #0]
 801a206:	b103      	cbz	r3, 801a20a <_close_r+0x1a>
 801a208:	6023      	str	r3, [r4, #0]
 801a20a:	bd38      	pop	{r3, r4, r5, pc}
 801a20c:	2400b174 	.word	0x2400b174

0801a210 <_fstat_r>:
 801a210:	b538      	push	{r3, r4, r5, lr}
 801a212:	4d07      	ldr	r5, [pc, #28]	; (801a230 <_fstat_r+0x20>)
 801a214:	2300      	movs	r3, #0
 801a216:	4604      	mov	r4, r0
 801a218:	4608      	mov	r0, r1
 801a21a:	4611      	mov	r1, r2
 801a21c:	602b      	str	r3, [r5, #0]
 801a21e:	f7e6 ffa2 	bl	8001166 <_fstat>
 801a222:	1c43      	adds	r3, r0, #1
 801a224:	d102      	bne.n	801a22c <_fstat_r+0x1c>
 801a226:	682b      	ldr	r3, [r5, #0]
 801a228:	b103      	cbz	r3, 801a22c <_fstat_r+0x1c>
 801a22a:	6023      	str	r3, [r4, #0]
 801a22c:	bd38      	pop	{r3, r4, r5, pc}
 801a22e:	bf00      	nop
 801a230:	2400b174 	.word	0x2400b174

0801a234 <_isatty_r>:
 801a234:	b538      	push	{r3, r4, r5, lr}
 801a236:	4d06      	ldr	r5, [pc, #24]	; (801a250 <_isatty_r+0x1c>)
 801a238:	2300      	movs	r3, #0
 801a23a:	4604      	mov	r4, r0
 801a23c:	4608      	mov	r0, r1
 801a23e:	602b      	str	r3, [r5, #0]
 801a240:	f7e6 ff96 	bl	8001170 <_isatty>
 801a244:	1c43      	adds	r3, r0, #1
 801a246:	d102      	bne.n	801a24e <_isatty_r+0x1a>
 801a248:	682b      	ldr	r3, [r5, #0]
 801a24a:	b103      	cbz	r3, 801a24e <_isatty_r+0x1a>
 801a24c:	6023      	str	r3, [r4, #0]
 801a24e:	bd38      	pop	{r3, r4, r5, pc}
 801a250:	2400b174 	.word	0x2400b174

0801a254 <_lseek_r>:
 801a254:	b538      	push	{r3, r4, r5, lr}
 801a256:	4d07      	ldr	r5, [pc, #28]	; (801a274 <_lseek_r+0x20>)
 801a258:	4604      	mov	r4, r0
 801a25a:	4608      	mov	r0, r1
 801a25c:	4611      	mov	r1, r2
 801a25e:	2200      	movs	r2, #0
 801a260:	602a      	str	r2, [r5, #0]
 801a262:	461a      	mov	r2, r3
 801a264:	f7e6 ff86 	bl	8001174 <_lseek>
 801a268:	1c43      	adds	r3, r0, #1
 801a26a:	d102      	bne.n	801a272 <_lseek_r+0x1e>
 801a26c:	682b      	ldr	r3, [r5, #0]
 801a26e:	b103      	cbz	r3, 801a272 <_lseek_r+0x1e>
 801a270:	6023      	str	r3, [r4, #0]
 801a272:	bd38      	pop	{r3, r4, r5, pc}
 801a274:	2400b174 	.word	0x2400b174

0801a278 <_read_r>:
 801a278:	b538      	push	{r3, r4, r5, lr}
 801a27a:	4d07      	ldr	r5, [pc, #28]	; (801a298 <_read_r+0x20>)
 801a27c:	4604      	mov	r4, r0
 801a27e:	4608      	mov	r0, r1
 801a280:	4611      	mov	r1, r2
 801a282:	2200      	movs	r2, #0
 801a284:	602a      	str	r2, [r5, #0]
 801a286:	461a      	mov	r2, r3
 801a288:	f7e6 ff4e 	bl	8001128 <_read>
 801a28c:	1c43      	adds	r3, r0, #1
 801a28e:	d102      	bne.n	801a296 <_read_r+0x1e>
 801a290:	682b      	ldr	r3, [r5, #0]
 801a292:	b103      	cbz	r3, 801a296 <_read_r+0x1e>
 801a294:	6023      	str	r3, [r4, #0]
 801a296:	bd38      	pop	{r3, r4, r5, pc}
 801a298:	2400b174 	.word	0x2400b174

0801a29c <_init>:
 801a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a29e:	bf00      	nop
 801a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2a2:	bc08      	pop	{r3}
 801a2a4:	469e      	mov	lr, r3
 801a2a6:	4770      	bx	lr

0801a2a8 <_fini>:
 801a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2aa:	bf00      	nop
 801a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2ae:	bc08      	pop	{r3}
 801a2b0:	469e      	mov	lr, r3
 801a2b2:	4770      	bx	lr
